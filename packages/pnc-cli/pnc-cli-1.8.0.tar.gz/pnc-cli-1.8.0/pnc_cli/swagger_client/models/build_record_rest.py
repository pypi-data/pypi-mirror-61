# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from datetime import datetime
from pprint import pformat
from six import iteritems
import re


class BuildRecordRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'submit_time': 'datetime',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'status': 'str',
        'build_configuration_id': 'int',
        'build_configuration_name': 'str',
        'build_configuration_rev': 'int',
        'project_id': 'int',
        'project_name': 'str',
        'user_id': 'int',
        'username': 'str',
        'scm_repo_url': 'str',
        'scm_revision': 'str',
        'scm_tag': 'str',
        'build_environment_id': 'int',
        'attributes': 'dict(str, str)',
        'live_logs_uri': 'str',
        'build_config_set_record_id': 'int',
        'build_content_id': 'str',
        'temporary_build': 'bool',
        'product_milestone_id': 'int',
        'user': 'UserRest',
        'build_configuration_audited': 'BuildConfigurationAuditedRest',
        'execution_root_name': 'str',
        'execution_root_version': 'str',
        'dependent_build_record_ids': 'list[int]',
        'dependency_build_record_ids': 'list[int]'
    }

    attribute_map = {
        'id': 'id',
        'submit_time': 'submitTime',
        'start_time': 'startTime',
        'end_time': 'endTime',
        'status': 'status',
        'build_configuration_id': 'buildConfigurationId',
        'build_configuration_name': 'buildConfigurationName',
        'build_configuration_rev': 'buildConfigurationRev',
        'project_id': 'projectId',
        'project_name': 'projectName',
        'user_id': 'userId',
        'username': 'username',
        'scm_repo_url': 'scmRepoURL',
        'scm_revision': 'scmRevision',
        'scm_tag': 'scmTag',
        'build_environment_id': 'buildEnvironmentId',
        'attributes': 'attributes',
        'live_logs_uri': 'liveLogsUri',
        'build_config_set_record_id': 'buildConfigSetRecordId',
        'build_content_id': 'buildContentId',
        'temporary_build': 'temporaryBuild',
        'product_milestone_id': 'productMilestoneId',
        'user': 'user',
        'build_configuration_audited': 'buildConfigurationAudited',
        'execution_root_name': 'executionRootName',
        'execution_root_version': 'executionRootVersion',
        'dependent_build_record_ids': 'dependentBuildRecordIds',
        'dependency_build_record_ids': 'dependencyBuildRecordIds'
    }

    def __init__(self, id=None, submit_time=None, start_time=None, end_time=None, status=None, build_configuration_id=None, build_configuration_name=None, build_configuration_rev=None, project_id=None, project_name=None, user_id=None, username=None, scm_repo_url=None, scm_revision=None, scm_tag=None, build_environment_id=None, attributes=None, live_logs_uri=None, build_config_set_record_id=None, build_content_id=None, temporary_build=False, product_milestone_id=None, user=None, build_configuration_audited=None, execution_root_name=None, execution_root_version=None, dependent_build_record_ids=None, dependency_build_record_ids=None):
        """
        BuildRecordRest - a model defined in Swagger
        """

        self._id = None
        self._submit_time = None
        self._start_time = None
        self._end_time = None
        self._status = None
        self._build_configuration_id = None
        self._build_configuration_name = None
        self._build_configuration_rev = None
        self._project_id = None
        self._project_name = None
        self._user_id = None
        self._username = None
        self._scm_repo_url = None
        self._scm_revision = None
        self._scm_tag = None
        self._build_environment_id = None
        self._attributes = None
        self._live_logs_uri = None
        self._build_config_set_record_id = None
        self._build_content_id = None
        self._temporary_build = None
        self._product_milestone_id = None
        self._user = None
        self._build_configuration_audited = None
        self._execution_root_name = None
        self._execution_root_version = None
        self._dependent_build_record_ids = None
        self._dependency_build_record_ids = None

        if id is not None:
          self.id = id
        if submit_time is not None:
          self.submit_time = submit_time
        if start_time is not None:
          self.start_time = start_time
        if end_time is not None:
          self.end_time = end_time
        if status is not None:
          self.status = status
        if build_configuration_id is not None:
          self.build_configuration_id = build_configuration_id
        if build_configuration_name is not None:
          self.build_configuration_name = build_configuration_name
        if build_configuration_rev is not None:
          self.build_configuration_rev = build_configuration_rev
        if project_id is not None:
          self.project_id = project_id
        if project_name is not None:
          self.project_name = project_name
        if user_id is not None:
          self.user_id = user_id
        if username is not None:
          self.username = username
        if scm_repo_url is not None:
          self.scm_repo_url = scm_repo_url
        if scm_revision is not None:
          self.scm_revision = scm_revision
        if scm_tag is not None:
          self.scm_tag = scm_tag
        if build_environment_id is not None:
          self.build_environment_id = build_environment_id
        if attributes is not None:
          self.attributes = attributes
        if live_logs_uri is not None:
          self.live_logs_uri = live_logs_uri
        if build_config_set_record_id is not None:
          self.build_config_set_record_id = build_config_set_record_id
        if build_content_id is not None:
          self.build_content_id = build_content_id
        if temporary_build is not None:
          self.temporary_build = temporary_build
        if product_milestone_id is not None:
          self.product_milestone_id = product_milestone_id
        if user is not None:
          self.user = user
        if build_configuration_audited is not None:
          self.build_configuration_audited = build_configuration_audited
        if execution_root_name is not None:
          self.execution_root_name = execution_root_name
        if execution_root_version is not None:
          self.execution_root_version = execution_root_version
        if dependent_build_record_ids is not None:
          self.dependent_build_record_ids = dependent_build_record_ids
        if dependency_build_record_ids is not None:
          self.dependency_build_record_ids = dependency_build_record_ids

    @property
    def id(self):
        """
        Gets the id of this BuildRecordRest.

        :return: The id of this BuildRecordRest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BuildRecordRest.

        :param id: The id of this BuildRecordRest.
        :type: int
        """

        self._id = id

    @property
    def submit_time(self):
        """
        Gets the submit_time of this BuildRecordRest.

        :return: The submit_time of this BuildRecordRest.
        :rtype: datetime
        """
        return self._submit_time

    @submit_time.setter
    def submit_time(self, submit_time):
        """
        Sets the submit_time of this BuildRecordRest.

        :param submit_time: The submit_time of this BuildRecordRest.
        :type: datetime
        """

        self._submit_time = submit_time

    @property
    def start_time(self):
        """
        Gets the start_time of this BuildRecordRest.

        :return: The start_time of this BuildRecordRest.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """
        Sets the start_time of this BuildRecordRest.

        :param start_time: The start_time of this BuildRecordRest.
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """
        Gets the end_time of this BuildRecordRest.

        :return: The end_time of this BuildRecordRest.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """
        Sets the end_time of this BuildRecordRest.

        :param end_time: The end_time of this BuildRecordRest.
        :type: datetime
        """

        self._end_time = end_time

    @property
    def status(self):
        """
        Gets the status of this BuildRecordRest.

        :return: The status of this BuildRecordRest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BuildRecordRest.

        :param status: The status of this BuildRecordRest.
        :type: str
        """
        allowed_values = ["NEW", "ENQUEUED", "WAITING_FOR_DEPENDENCIES", "BUILDING", "BUILD_COMPLETED", "DONE", "REJECTED", "REJECTED_FAILED_DEPENDENCIES", "REJECTED_ALREADY_BUILT", "SYSTEM_ERROR", "DONE_WITH_ERRORS", "CANCELLED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def build_configuration_id(self):
        """
        Gets the build_configuration_id of this BuildRecordRest.

        :return: The build_configuration_id of this BuildRecordRest.
        :rtype: int
        """
        return self._build_configuration_id

    @build_configuration_id.setter
    def build_configuration_id(self, build_configuration_id):
        """
        Sets the build_configuration_id of this BuildRecordRest.

        :param build_configuration_id: The build_configuration_id of this BuildRecordRest.
        :type: int
        """

        self._build_configuration_id = build_configuration_id

    @property
    def build_configuration_name(self):
        """
        Gets the build_configuration_name of this BuildRecordRest.

        :return: The build_configuration_name of this BuildRecordRest.
        :rtype: str
        """
        return self._build_configuration_name

    @build_configuration_name.setter
    def build_configuration_name(self, build_configuration_name):
        """
        Sets the build_configuration_name of this BuildRecordRest.

        :param build_configuration_name: The build_configuration_name of this BuildRecordRest.
        :type: str
        """

        self._build_configuration_name = build_configuration_name

    @property
    def build_configuration_rev(self):
        """
        Gets the build_configuration_rev of this BuildRecordRest.

        :return: The build_configuration_rev of this BuildRecordRest.
        :rtype: int
        """
        return self._build_configuration_rev

    @build_configuration_rev.setter
    def build_configuration_rev(self, build_configuration_rev):
        """
        Sets the build_configuration_rev of this BuildRecordRest.

        :param build_configuration_rev: The build_configuration_rev of this BuildRecordRest.
        :type: int
        """

        self._build_configuration_rev = build_configuration_rev

    @property
    def project_id(self):
        """
        Gets the project_id of this BuildRecordRest.

        :return: The project_id of this BuildRecordRest.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id):
        """
        Sets the project_id of this BuildRecordRest.

        :param project_id: The project_id of this BuildRecordRest.
        :type: int
        """

        self._project_id = project_id

    @property
    def project_name(self):
        """
        Gets the project_name of this BuildRecordRest.

        :return: The project_name of this BuildRecordRest.
        :rtype: str
        """
        return self._project_name

    @project_name.setter
    def project_name(self, project_name):
        """
        Sets the project_name of this BuildRecordRest.

        :param project_name: The project_name of this BuildRecordRest.
        :type: str
        """

        self._project_name = project_name

    @property
    def user_id(self):
        """
        Gets the user_id of this BuildRecordRest.

        :return: The user_id of this BuildRecordRest.
        :rtype: int
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this BuildRecordRest.

        :param user_id: The user_id of this BuildRecordRest.
        :type: int
        """

        self._user_id = user_id

    @property
    def username(self):
        """
        Gets the username of this BuildRecordRest.

        :return: The username of this BuildRecordRest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this BuildRecordRest.

        :param username: The username of this BuildRecordRest.
        :type: str
        """

        self._username = username

    @property
    def scm_repo_url(self):
        """
        Gets the scm_repo_url of this BuildRecordRest.

        :return: The scm_repo_url of this BuildRecordRest.
        :rtype: str
        """
        return self._scm_repo_url

    @scm_repo_url.setter
    def scm_repo_url(self, scm_repo_url):
        """
        Sets the scm_repo_url of this BuildRecordRest.

        :param scm_repo_url: The scm_repo_url of this BuildRecordRest.
        :type: str
        """

        self._scm_repo_url = scm_repo_url

    @property
    def scm_revision(self):
        """
        Gets the scm_revision of this BuildRecordRest.

        :return: The scm_revision of this BuildRecordRest.
        :rtype: str
        """
        return self._scm_revision

    @scm_revision.setter
    def scm_revision(self, scm_revision):
        """
        Sets the scm_revision of this BuildRecordRest.

        :param scm_revision: The scm_revision of this BuildRecordRest.
        :type: str
        """

        self._scm_revision = scm_revision

    @property
    def scm_tag(self):
        """
        Gets the scm_tag of this BuildRecordRest.

        :return: The scm_tag of this BuildRecordRest.
        :rtype: str
        """
        return self._scm_tag

    @scm_tag.setter
    def scm_tag(self, scm_tag):
        """
        Sets the scm_tag of this BuildRecordRest.

        :param scm_tag: The scm_tag of this BuildRecordRest.
        :type: str
        """

        self._scm_tag = scm_tag

    @property
    def build_environment_id(self):
        """
        Gets the build_environment_id of this BuildRecordRest.

        :return: The build_environment_id of this BuildRecordRest.
        :rtype: int
        """
        return self._build_environment_id

    @build_environment_id.setter
    def build_environment_id(self, build_environment_id):
        """
        Sets the build_environment_id of this BuildRecordRest.

        :param build_environment_id: The build_environment_id of this BuildRecordRest.
        :type: int
        """

        self._build_environment_id = build_environment_id

    @property
    def attributes(self):
        """
        Gets the attributes of this BuildRecordRest.

        :return: The attributes of this BuildRecordRest.
        :rtype: dict(str, str)
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this BuildRecordRest.

        :param attributes: The attributes of this BuildRecordRest.
        :type: dict(str, str)
        """

        self._attributes = attributes

    @property
    def live_logs_uri(self):
        """
        Gets the live_logs_uri of this BuildRecordRest.

        :return: The live_logs_uri of this BuildRecordRest.
        :rtype: str
        """
        return self._live_logs_uri

    @live_logs_uri.setter
    def live_logs_uri(self, live_logs_uri):
        """
        Sets the live_logs_uri of this BuildRecordRest.

        :param live_logs_uri: The live_logs_uri of this BuildRecordRest.
        :type: str
        """

        self._live_logs_uri = live_logs_uri

    @property
    def build_config_set_record_id(self):
        """
        Gets the build_config_set_record_id of this BuildRecordRest.

        :return: The build_config_set_record_id of this BuildRecordRest.
        :rtype: int
        """
        return self._build_config_set_record_id

    @build_config_set_record_id.setter
    def build_config_set_record_id(self, build_config_set_record_id):
        """
        Sets the build_config_set_record_id of this BuildRecordRest.

        :param build_config_set_record_id: The build_config_set_record_id of this BuildRecordRest.
        :type: int
        """

        self._build_config_set_record_id = build_config_set_record_id

    @property
    def build_content_id(self):
        """
        Gets the build_content_id of this BuildRecordRest.

        :return: The build_content_id of this BuildRecordRest.
        :rtype: str
        """
        return self._build_content_id

    @build_content_id.setter
    def build_content_id(self, build_content_id):
        """
        Sets the build_content_id of this BuildRecordRest.

        :param build_content_id: The build_content_id of this BuildRecordRest.
        :type: str
        """

        self._build_content_id = build_content_id

    @property
    def temporary_build(self):
        """
        Gets the temporary_build of this BuildRecordRest.

        :return: The temporary_build of this BuildRecordRest.
        :rtype: bool
        """
        return self._temporary_build

    @temporary_build.setter
    def temporary_build(self, temporary_build):
        """
        Sets the temporary_build of this BuildRecordRest.

        :param temporary_build: The temporary_build of this BuildRecordRest.
        :type: bool
        """

        self._temporary_build = temporary_build

    @property
    def product_milestone_id(self):
        """
        Gets the product_milestone_id of this BuildRecordRest.

        :return: The product_milestone_id of this BuildRecordRest.
        :rtype: int
        """
        return self._product_milestone_id

    @product_milestone_id.setter
    def product_milestone_id(self, product_milestone_id):
        """
        Sets the product_milestone_id of this BuildRecordRest.

        :param product_milestone_id: The product_milestone_id of this BuildRecordRest.
        :type: int
        """

        self._product_milestone_id = product_milestone_id

    @property
    def user(self):
        """
        Gets the user of this BuildRecordRest.

        :return: The user of this BuildRecordRest.
        :rtype: UserRest
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this BuildRecordRest.

        :param user: The user of this BuildRecordRest.
        :type: UserRest
        """

        self._user = user

    @property
    def build_configuration_audited(self):
        """
        Gets the build_configuration_audited of this BuildRecordRest.

        :return: The build_configuration_audited of this BuildRecordRest.
        :rtype: BuildConfigurationAuditedRest
        """
        return self._build_configuration_audited

    @build_configuration_audited.setter
    def build_configuration_audited(self, build_configuration_audited):
        """
        Sets the build_configuration_audited of this BuildRecordRest.

        :param build_configuration_audited: The build_configuration_audited of this BuildRecordRest.
        :type: BuildConfigurationAuditedRest
        """

        self._build_configuration_audited = build_configuration_audited

    @property
    def execution_root_name(self):
        """
        Gets the execution_root_name of this BuildRecordRest.

        :return: The execution_root_name of this BuildRecordRest.
        :rtype: str
        """
        return self._execution_root_name

    @execution_root_name.setter
    def execution_root_name(self, execution_root_name):
        """
        Sets the execution_root_name of this BuildRecordRest.

        :param execution_root_name: The execution_root_name of this BuildRecordRest.
        :type: str
        """

        self._execution_root_name = execution_root_name

    @property
    def execution_root_version(self):
        """
        Gets the execution_root_version of this BuildRecordRest.

        :return: The execution_root_version of this BuildRecordRest.
        :rtype: str
        """
        return self._execution_root_version

    @execution_root_version.setter
    def execution_root_version(self, execution_root_version):
        """
        Sets the execution_root_version of this BuildRecordRest.

        :param execution_root_version: The execution_root_version of this BuildRecordRest.
        :type: str
        """

        self._execution_root_version = execution_root_version

    @property
    def dependent_build_record_ids(self):
        """
        Gets the dependent_build_record_ids of this BuildRecordRest.

        :return: The dependent_build_record_ids of this BuildRecordRest.
        :rtype: list[int]
        """
        return self._dependent_build_record_ids

    @dependent_build_record_ids.setter
    def dependent_build_record_ids(self, dependent_build_record_ids):
        """
        Sets the dependent_build_record_ids of this BuildRecordRest.

        :param dependent_build_record_ids: The dependent_build_record_ids of this BuildRecordRest.
        :type: list[int]
        """

        self._dependent_build_record_ids = dependent_build_record_ids

    @property
    def dependency_build_record_ids(self):
        """
        Gets the dependency_build_record_ids of this BuildRecordRest.

        :return: The dependency_build_record_ids of this BuildRecordRest.
        :rtype: list[int]
        """
        return self._dependency_build_record_ids

    @dependency_build_record_ids.setter
    def dependency_build_record_ids(self, dependency_build_record_ids):
        """
        Sets the dependency_build_record_ids of this BuildRecordRest.

        :param dependency_build_record_ids: The dependency_build_record_ids of this BuildRecordRest.
        :type: list[int]
        """

        self._dependency_build_record_ids = dependency_build_record_ids

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif isinstance(value, datetime):
                result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BuildRecordRest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
