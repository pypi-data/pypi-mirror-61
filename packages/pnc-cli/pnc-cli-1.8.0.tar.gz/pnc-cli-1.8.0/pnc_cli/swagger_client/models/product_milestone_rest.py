# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from datetime import datetime
from pprint import pformat
from six import iteritems
import re


class ProductMilestoneRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'version': 'str',
        'end_date': 'datetime',
        'starting_date': 'datetime',
        'planned_end_date': 'datetime',
        'download_url': 'str',
        'issue_tracker_url': 'str',
        'product_version_id': 'int',
        'performed_builds': 'list[int]',
        'distributed_artifact_ids': 'list[int]',
        'product_release_id': 'int'
    }

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'end_date': 'endDate',
        'starting_date': 'startingDate',
        'planned_end_date': 'plannedEndDate',
        'download_url': 'downloadUrl',
        'issue_tracker_url': 'issueTrackerUrl',
        'product_version_id': 'productVersionId',
        'performed_builds': 'performedBuilds',
        'distributed_artifact_ids': 'distributedArtifactIds',
        'product_release_id': 'productReleaseId'
    }

    def __init__(self, id=None, version=None, end_date=None, starting_date=None, planned_end_date=None, download_url=None, issue_tracker_url=None, product_version_id=None, performed_builds=None, distributed_artifact_ids=None, product_release_id=None):
        """
        ProductMilestoneRest - a model defined in Swagger
        """

        self._id = None
        self._version = None
        self._end_date = None
        self._starting_date = None
        self._planned_end_date = None
        self._download_url = None
        self._issue_tracker_url = None
        self._product_version_id = None
        self._performed_builds = None
        self._distributed_artifact_ids = None
        self._product_release_id = None

        if id is not None:
          self.id = id
        if version is not None:
          self.version = version
        if end_date is not None:
          self.end_date = end_date
        if starting_date is not None:
          self.starting_date = starting_date
        if planned_end_date is not None:
          self.planned_end_date = planned_end_date
        if download_url is not None:
          self.download_url = download_url
        if issue_tracker_url is not None:
          self.issue_tracker_url = issue_tracker_url
        if product_version_id is not None:
          self.product_version_id = product_version_id
        if performed_builds is not None:
          self.performed_builds = performed_builds
        if distributed_artifact_ids is not None:
          self.distributed_artifact_ids = distributed_artifact_ids
        if product_release_id is not None:
          self.product_release_id = product_release_id

    @property
    def id(self):
        """
        Gets the id of this ProductMilestoneRest.

        :return: The id of this ProductMilestoneRest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ProductMilestoneRest.

        :param id: The id of this ProductMilestoneRest.
        :type: int
        """

        self._id = id

    @property
    def version(self):
        """
        Gets the version of this ProductMilestoneRest.

        :return: The version of this ProductMilestoneRest.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this ProductMilestoneRest.

        :param version: The version of this ProductMilestoneRest.
        :type: str
        """

        self._version = version

    @property
    def end_date(self):
        """
        Gets the end_date of this ProductMilestoneRest.

        :return: The end_date of this ProductMilestoneRest.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """
        Sets the end_date of this ProductMilestoneRest.

        :param end_date: The end_date of this ProductMilestoneRest.
        :type: datetime
        """

        self._end_date = end_date

    @property
    def starting_date(self):
        """
        Gets the starting_date of this ProductMilestoneRest.

        :return: The starting_date of this ProductMilestoneRest.
        :rtype: datetime
        """
        return self._starting_date

    @starting_date.setter
    def starting_date(self, starting_date):
        """
        Sets the starting_date of this ProductMilestoneRest.

        :param starting_date: The starting_date of this ProductMilestoneRest.
        :type: datetime
        """

        self._starting_date = starting_date

    @property
    def planned_end_date(self):
        """
        Gets the planned_end_date of this ProductMilestoneRest.

        :return: The planned_end_date of this ProductMilestoneRest.
        :rtype: datetime
        """
        return self._planned_end_date

    @planned_end_date.setter
    def planned_end_date(self, planned_end_date):
        """
        Sets the planned_end_date of this ProductMilestoneRest.

        :param planned_end_date: The planned_end_date of this ProductMilestoneRest.
        :type: datetime
        """

        self._planned_end_date = planned_end_date

    @property
    def download_url(self):
        """
        Gets the download_url of this ProductMilestoneRest.

        :return: The download_url of this ProductMilestoneRest.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """
        Sets the download_url of this ProductMilestoneRest.

        :param download_url: The download_url of this ProductMilestoneRest.
        :type: str
        """

        self._download_url = download_url

    @property
    def issue_tracker_url(self):
        """
        Gets the issue_tracker_url of this ProductMilestoneRest.

        :return: The issue_tracker_url of this ProductMilestoneRest.
        :rtype: str
        """
        return self._issue_tracker_url

    @issue_tracker_url.setter
    def issue_tracker_url(self, issue_tracker_url):
        """
        Sets the issue_tracker_url of this ProductMilestoneRest.

        :param issue_tracker_url: The issue_tracker_url of this ProductMilestoneRest.
        :type: str
        """

        self._issue_tracker_url = issue_tracker_url

    @property
    def product_version_id(self):
        """
        Gets the product_version_id of this ProductMilestoneRest.

        :return: The product_version_id of this ProductMilestoneRest.
        :rtype: int
        """
        return self._product_version_id

    @product_version_id.setter
    def product_version_id(self, product_version_id):
        """
        Sets the product_version_id of this ProductMilestoneRest.

        :param product_version_id: The product_version_id of this ProductMilestoneRest.
        :type: int
        """

        self._product_version_id = product_version_id

    @property
    def performed_builds(self):
        """
        Gets the performed_builds of this ProductMilestoneRest.

        :return: The performed_builds of this ProductMilestoneRest.
        :rtype: list[int]
        """
        return self._performed_builds

    @performed_builds.setter
    def performed_builds(self, performed_builds):
        """
        Sets the performed_builds of this ProductMilestoneRest.

        :param performed_builds: The performed_builds of this ProductMilestoneRest.
        :type: list[int]
        """

        self._performed_builds = performed_builds

    @property
    def distributed_artifact_ids(self):
        """
        Gets the distributed_artifact_ids of this ProductMilestoneRest.

        :return: The distributed_artifact_ids of this ProductMilestoneRest.
        :rtype: list[int]
        """
        return self._distributed_artifact_ids

    @distributed_artifact_ids.setter
    def distributed_artifact_ids(self, distributed_artifact_ids):
        """
        Sets the distributed_artifact_ids of this ProductMilestoneRest.

        :param distributed_artifact_ids: The distributed_artifact_ids of this ProductMilestoneRest.
        :type: list[int]
        """

        self._distributed_artifact_ids = distributed_artifact_ids

    @property
    def product_release_id(self):
        """
        Gets the product_release_id of this ProductMilestoneRest.

        :return: The product_release_id of this ProductMilestoneRest.
        :rtype: int
        """
        return self._product_release_id

    @product_release_id.setter
    def product_release_id(self, product_release_id):
        """
        Sets the product_release_id of this ProductMilestoneRest.

        :param product_release_id: The product_release_id of this ProductMilestoneRest.
        :type: int
        """

        self._product_release_id = product_release_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif isinstance(value, datetime):
                result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ProductMilestoneRest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
