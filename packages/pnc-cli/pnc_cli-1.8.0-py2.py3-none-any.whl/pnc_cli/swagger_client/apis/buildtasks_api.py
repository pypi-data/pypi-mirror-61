# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class BuildtasksApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def build(self, build_execution_configuration, **kwargs):
        """
        Triggers the build execution for a given configuration.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.build(build_execution_configuration, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str build_execution_configuration: Build Execution Configuration. See org.jboss.pnc.spi.executor.BuildExecutionConfiguration. (required)
        :param str username_triggered: Username who triggered the build. If empty current user is used.
        :param str callback_url: Optional Callback URL
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.build_with_http_info(build_execution_configuration, **kwargs)
        else:
            (data) = self.build_with_http_info(build_execution_configuration, **kwargs)
            return data

    def build_with_http_info(self, build_execution_configuration, **kwargs):
        """
        Triggers the build execution for a given configuration.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.build_with_http_info(build_execution_configuration, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str build_execution_configuration: Build Execution Configuration. See org.jboss.pnc.spi.executor.BuildExecutionConfiguration. (required)
        :param str username_triggered: Username who triggered the build. If empty current user is used.
        :param str callback_url: Optional Callback URL
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_execution_configuration', 'username_triggered', 'callback_url']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method build" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_execution_configuration' is set
        if ('build_execution_configuration' not in params) or (params['build_execution_configuration'] is None):
            raise ValueError("Missing the required parameter `build_execution_configuration` when calling `build`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'build_execution_configuration' in params:
            form_params.append(('buildExecutionConfiguration', params['build_execution_configuration']))
        if 'username_triggered' in params:
            form_params.append(('usernameTriggered', params['username_triggered']))
        if 'callback_url' in params:
            form_params.append(('callbackUrl', params['callback_url']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/build-tasks/execute-build', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def build_task_completed(self, task_id, build_result, **kwargs):
        """
        Notifies the completion of externally managed build task process.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.build_task_completed(task_id, build_result, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int task_id: Build task id (required)
        :param str build_result: Build result (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.build_task_completed_with_http_info(task_id, build_result, **kwargs)
        else:
            (data) = self.build_task_completed_with_http_info(task_id, build_result, **kwargs)
            return data

    def build_task_completed_with_http_info(self, task_id, build_result, **kwargs):
        """
        Notifies the completion of externally managed build task process.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.build_task_completed_with_http_info(task_id, build_result, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int task_id: Build task id (required)
        :param str build_result: Build result (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_id', 'build_result']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method build_task_completed" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params) or (params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `build_task_completed`")
        # verify the required parameter 'build_result' is set
        if ('build_result' not in params) or (params['build_result'] is None):
            raise ValueError("Missing the required parameter `build_result` when calling `build_task_completed`")


        collection_formats = {}

        path_params = {}
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'build_result' in params:
            form_params.append(('buildResult', params['build_result']))

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/build-tasks/{taskId}/completed', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def cancel_bbuild(self, build_execution_configuration_id, **kwargs):
        """
        Cancel the build execution defined with given executionConfigurationId.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_bbuild(build_execution_configuration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int build_execution_configuration_id: Build Execution Configuration ID. See org.jboss.pnc.spi.executor.BuildExecutionConfiguration. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.cancel_bbuild_with_http_info(build_execution_configuration_id, **kwargs)
        else:
            (data) = self.cancel_bbuild_with_http_info(build_execution_configuration_id, **kwargs)
            return data

    def cancel_bbuild_with_http_info(self, build_execution_configuration_id, **kwargs):
        """
        Cancel the build execution defined with given executionConfigurationId.
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.cancel_bbuild_with_http_info(build_execution_configuration_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int build_execution_configuration_id: Build Execution Configuration ID. See org.jboss.pnc.spi.executor.BuildExecutionConfiguration. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['build_execution_configuration_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_bbuild" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'build_execution_configuration_id' is set
        if ('build_execution_configuration_id' not in params) or (params['build_execution_configuration_id'] is None):
            raise ValueError("Missing the required parameter `build_execution_configuration_id` when calling `cancel_bbuild`")


        collection_formats = {}

        path_params = {}
        if 'build_execution_configuration_id' in params:
            path_params['buildExecutionConfigurationId'] = params['build_execution_configuration_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/x-www-form-urlencoded'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/build-tasks/cancel-build/{buildExecutionConfigurationId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
