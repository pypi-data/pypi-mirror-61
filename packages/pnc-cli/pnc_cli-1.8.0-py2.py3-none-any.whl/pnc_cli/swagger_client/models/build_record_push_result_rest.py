# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from datetime import datetime
from pprint import pformat
from six import iteritems
import re


class BuildRecordPushResultRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'build_record_id': 'int',
        'status': 'str',
        'log': 'str',
        'artifact_import_errors': 'list[ArtifactImportError]',
        'brew_build_id': 'int',
        'brew_build_url': 'str'
    }

    attribute_map = {
        'id': 'id',
        'build_record_id': 'buildRecordId',
        'status': 'status',
        'log': 'log',
        'artifact_import_errors': 'artifactImportErrors',
        'brew_build_id': 'brewBuildId',
        'brew_build_url': 'brewBuildUrl'
    }

    def __init__(self, id=None, build_record_id=None, status=None, log=None, artifact_import_errors=None, brew_build_id=None, brew_build_url=None):
        """
        BuildRecordPushResultRest - a model defined in Swagger
        """

        self._id = None
        self._build_record_id = None
        self._status = None
        self._log = None
        self._artifact_import_errors = None
        self._brew_build_id = None
        self._brew_build_url = None

        if id is not None:
          self.id = id
        if build_record_id is not None:
          self.build_record_id = build_record_id
        if status is not None:
          self.status = status
        if log is not None:
          self.log = log
        if artifact_import_errors is not None:
          self.artifact_import_errors = artifact_import_errors
        if brew_build_id is not None:
          self.brew_build_id = brew_build_id
        if brew_build_url is not None:
          self.brew_build_url = brew_build_url

    @property
    def id(self):
        """
        Gets the id of this BuildRecordPushResultRest.

        :return: The id of this BuildRecordPushResultRest.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this BuildRecordPushResultRest.

        :param id: The id of this BuildRecordPushResultRest.
        :type: int
        """

        self._id = id

    @property
    def build_record_id(self):
        """
        Gets the build_record_id of this BuildRecordPushResultRest.

        :return: The build_record_id of this BuildRecordPushResultRest.
        :rtype: int
        """
        return self._build_record_id

    @build_record_id.setter
    def build_record_id(self, build_record_id):
        """
        Sets the build_record_id of this BuildRecordPushResultRest.

        :param build_record_id: The build_record_id of this BuildRecordPushResultRest.
        :type: int
        """

        self._build_record_id = build_record_id

    @property
    def status(self):
        """
        Gets the status of this BuildRecordPushResultRest.

        :return: The status of this BuildRecordPushResultRest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this BuildRecordPushResultRest.

        :param status: The status of this BuildRecordPushResultRest.
        :type: str
        """
        allowed_values = ["SUCCESS", "FAILED", "SYSTEM_ERROR", "CANCELED"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def log(self):
        """
        Gets the log of this BuildRecordPushResultRest.

        :return: The log of this BuildRecordPushResultRest.
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """
        Sets the log of this BuildRecordPushResultRest.

        :param log: The log of this BuildRecordPushResultRest.
        :type: str
        """

        self._log = log

    @property
    def artifact_import_errors(self):
        """
        Gets the artifact_import_errors of this BuildRecordPushResultRest.

        :return: The artifact_import_errors of this BuildRecordPushResultRest.
        :rtype: list[ArtifactImportError]
        """
        return self._artifact_import_errors

    @artifact_import_errors.setter
    def artifact_import_errors(self, artifact_import_errors):
        """
        Sets the artifact_import_errors of this BuildRecordPushResultRest.

        :param artifact_import_errors: The artifact_import_errors of this BuildRecordPushResultRest.
        :type: list[ArtifactImportError]
        """

        self._artifact_import_errors = artifact_import_errors

    @property
    def brew_build_id(self):
        """
        Gets the brew_build_id of this BuildRecordPushResultRest.

        :return: The brew_build_id of this BuildRecordPushResultRest.
        :rtype: int
        """
        return self._brew_build_id

    @brew_build_id.setter
    def brew_build_id(self, brew_build_id):
        """
        Sets the brew_build_id of this BuildRecordPushResultRest.

        :param brew_build_id: The brew_build_id of this BuildRecordPushResultRest.
        :type: int
        """

        self._brew_build_id = brew_build_id

    @property
    def brew_build_url(self):
        """
        Gets the brew_build_url of this BuildRecordPushResultRest.

        :return: The brew_build_url of this BuildRecordPushResultRest.
        :rtype: str
        """
        return self._brew_build_url

    @brew_build_url.setter
    def brew_build_url(self, brew_build_url):
        """
        Sets the brew_build_url of this BuildRecordPushResultRest.

        :param brew_build_url: The brew_build_url of this BuildRecordPushResultRest.
        :type: str
        """

        self._brew_build_url = brew_build_url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif isinstance(value, datetime):
                result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BuildRecordPushResultRest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
