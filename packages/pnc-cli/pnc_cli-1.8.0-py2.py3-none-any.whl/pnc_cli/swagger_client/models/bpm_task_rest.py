# coding: utf-8

"""

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from datetime import datetime
from pprint import pformat
from six import iteritems
import re


class BpmTaskRest(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'task_id': 'int',
        'process_instance_id': 'int',
        'process_name': 'str',
        'events': 'list[BpmNotificationRest]'
    }

    attribute_map = {
        'task_id': 'taskId',
        'process_instance_id': 'processInstanceId',
        'process_name': 'processName',
        'events': 'events'
    }

    def __init__(self, task_id=None, process_instance_id=None, process_name=None, events=None):
        """
        BpmTaskRest - a model defined in Swagger
        """

        self._task_id = None
        self._process_instance_id = None
        self._process_name = None
        self._events = None

        if task_id is not None:
          self.task_id = task_id
        if process_instance_id is not None:
          self.process_instance_id = process_instance_id
        if process_name is not None:
          self.process_name = process_name
        if events is not None:
          self.events = events

    @property
    def task_id(self):
        """
        Gets the task_id of this BpmTaskRest.

        :return: The task_id of this BpmTaskRest.
        :rtype: int
        """
        return self._task_id

    @task_id.setter
    def task_id(self, task_id):
        """
        Sets the task_id of this BpmTaskRest.

        :param task_id: The task_id of this BpmTaskRest.
        :type: int
        """

        self._task_id = task_id

    @property
    def process_instance_id(self):
        """
        Gets the process_instance_id of this BpmTaskRest.

        :return: The process_instance_id of this BpmTaskRest.
        :rtype: int
        """
        return self._process_instance_id

    @process_instance_id.setter
    def process_instance_id(self, process_instance_id):
        """
        Sets the process_instance_id of this BpmTaskRest.

        :param process_instance_id: The process_instance_id of this BpmTaskRest.
        :type: int
        """

        self._process_instance_id = process_instance_id

    @property
    def process_name(self):
        """
        Gets the process_name of this BpmTaskRest.

        :return: The process_name of this BpmTaskRest.
        :rtype: str
        """
        return self._process_name

    @process_name.setter
    def process_name(self, process_name):
        """
        Sets the process_name of this BpmTaskRest.

        :param process_name: The process_name of this BpmTaskRest.
        :type: str
        """

        self._process_name = process_name

    @property
    def events(self):
        """
        Gets the events of this BpmTaskRest.

        :return: The events of this BpmTaskRest.
        :rtype: list[BpmNotificationRest]
        """
        return self._events

    @events.setter
    def events(self, events):
        """
        Sets the events of this BpmTaskRest.

        :param events: The events of this BpmTaskRest.
        :type: list[BpmNotificationRest]
        """

        self._events = events

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            elif isinstance(value, datetime):
                result[attr] = str(value.date())
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BpmTaskRest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
