{"version":3,"sources":["webpack:///./src/panels/lovelace/common/compute-tooltip.ts","webpack:///./src/panels/lovelace/header-footer/hui-buttons-header-footer.ts"],"names":["__webpack_require__","d","__webpack_exports__","computeTooltip","_common_entity_compute_state_name__WEBPACK_IMPORTED_MODULE_0__","hass","config","title","stateName","tooltip","entity","states","computeStateName","tap_action","hold_action","tapTooltip","computeActionTooltip","holdTooltip","state","isHold","action","localize","navigation_path","url_path","service","HuiButtonsHeaderFooter","_decorate","customElement","_initialize","_LitElement","F","[object Object]","args","super","this","kind","static","key","value","entities","decorators","queryAll","_configEntities","processConfigEntities","requestUpdate","_hass","_badges","forEach","badge","index","stateObj","html","map","entityConf","_toggle","icon","image","async","ev","toggleEntity","target","entity_id","css","LitElement"],"mappings":"wFAAAA,EAAAC,EAAAC,EAAA,sBAAAC,IAAA,IAAAC,EAAAJ,EAAA,KAYO,MAAMG,EAAiB,CAACE,EAAqBC,KAClD,GAAqB,OAAjBA,EAAOC,MACT,MAAO,GAGT,GAAID,EAAOC,MACT,OAAOD,EAAOC,MAGhB,IAAIC,EAAY,GACZC,EAAU,GASd,GAPIH,EAAOI,SACTF,EACEF,EAAOI,UAAUL,EAAKM,OAClBC,YAAiBP,EAAKM,OAAOL,EAAOI,SACpCJ,EAAOI,SAGVJ,EAAOO,aAAeP,EAAOQ,YAChC,OAAON,EAGT,MAAMO,EAAaT,EAAOO,WACtBG,EAAqBX,EAAMG,EAAWF,EAAOO,YAAY,GACzD,GACEI,EAAcX,EAAOQ,YACvBE,EAAqBX,EAAMG,EAAWF,EAAOQ,aAAa,GAC1D,GAMJ,OAFAL,EAAUM,GAFMA,GAAcE,EAAc,KAAO,IAElBA,GAKnC,SAASD,EACPX,EACAa,EACAZ,EACAa,GAEA,IAAKb,IAAWA,EAAOc,QAA4B,SAAlBd,EAAOc,OACtC,MAAO,GAGT,IAAIX,GACDU,EACGd,EAAKgB,SAAS,iDACdhB,EAAKgB,SAAS,iDAAmD,IAEvE,OAAQf,EAAOc,QACb,IAAK,WACHX,MAAcJ,EAAKgB,SACjB,uDACA,WACAf,EAAOgB,mBAET,MACF,IAAK,MACHb,MAAcJ,EAAKgB,SACjB,+CACA,WACAf,EAAOiB,YAET,MACF,IAAK,SACHd,MAAcJ,EAAKgB,SACjB,kDACA,OACAH,KAEF,MACF,IAAK,eACHT,MAAcJ,EAAKgB,SACjB,wDACA,OACAf,EAAOkB,WAET,MACF,IAAK,YACHf,MAAcJ,EAAKgB,SACjB,qDACA,OACAH,KAKN,OAAOT,i3CC3EF,IAAMgB,80LAAbC,CAAA,CADCC,YAAc,8BACf,SAAAC,EAAAC,GAAA,OAAAC,EADA,cAAAD,EAEkCE,eAAAC,GAAAC,SAAAD,GAAAJ,EAAAM,QADlCjC,EAAA,EAAAkC,KAAA,SAAAC,QAAA,EAAAC,IAAA,gBAAAC,MAEE,WACE,MAAO,CAAEC,SAAU,MAHvB,CAAAJ,KAAA,QAAAE,IAAA,kBAAAC,WAAA,IAAAH,KAAA,QAAAE,IAAA,QAAAC,WAAA,IAAAH,KAAA,QAAAK,WAAA,CAQGC,YAAS,gBARZJ,IAAA,UAAAC,WAAA,IAAAH,KAAA,SAAAE,IAAA,YAAAC,MAUE,SAAiBhC,GACf4B,KAAKQ,gBAAkBC,YAAsBrC,EAAOiC,UACpDL,KAAKU,kBAZT,CAAAT,KAAA,MAAAE,IAAA,OAAAC,MAeE,SAASjC,GACP6B,KAAKW,MAAQxC,EACb6B,KAAKY,QAAQC,QAAQ,CAACC,EAAOC,KAC3BD,EAAM3C,KAAOA,EACb2C,EAAME,SAAW7C,EAAKM,OAAOuB,KAAKQ,gBAAiBO,GAAOvC,YAnBhE,CAAAyB,KAAA,SAAAE,IAAA,SAAAC,MAuBE,WACE,OAAOa;SACFjB,KAAKQ,iBAAmB,IAAIU,IAAKC,IAClC,MAAMH,EAAWhB,KAAKW,MAAOlC,OAAO0C,EAAW3C,QAC/C,OAAKwC,EAIEC;;;sBAGOhD,YAAe+B,KAAKW,MAAQQ;uBAC3BnB,KAAKoB;sBACNpB,KAAKW;0BACDK;8BACIG,EAAWE;+BACVF,EAAWG;;;;;;UAXzBL;QA5BjB,CAAAhB,KAAA,SAAAE,IAAA,UAAAC,MAkDEmB,eAAsBC,SACdC,YAAazB,KAAKW,MAAQa,EAAGE,OAAOV,SAASW,aAnDvD,CAAA1B,KAAA,MAAAC,QAAA,EAAAC,IAAA,SAAAC,MAsDE,WACE,OAAOwB;;;;;;;;;;;WAvDiCC","file":"chunk.fc1f09adbb1e29344352.js","sourcesContent":["import { computeStateName } from \"../../../common/entity/compute_state_name\";\nimport { HomeAssistant } from \"../../../types\";\nimport { ActionConfig } from \"../../../data/lovelace\";\n\ninterface Config {\n  entity?: string;\n  title?: string;\n  tap_action?: ActionConfig;\n  hold_action?: ActionConfig;\n  double_tap_action?: ActionConfig;\n}\n\nexport const computeTooltip = (hass: HomeAssistant, config: Config): string => {\n  if (config.title === null) {\n    return \"\";\n  }\n\n  if (config.title) {\n    return config.title;\n  }\n\n  let stateName = \"\";\n  let tooltip = \"\";\n\n  if (config.entity) {\n    stateName =\n      config.entity in hass.states\n        ? computeStateName(hass.states[config.entity])\n        : config.entity;\n  }\n\n  if (!config.tap_action && !config.hold_action) {\n    return stateName;\n  }\n\n  const tapTooltip = config.tap_action\n    ? computeActionTooltip(hass, stateName, config.tap_action, false)\n    : \"\";\n  const holdTooltip = config.hold_action\n    ? computeActionTooltip(hass, stateName, config.hold_action, true)\n    : \"\";\n\n  const newline = tapTooltip && holdTooltip ? \"\\n\" : \"\";\n\n  tooltip = tapTooltip + newline + holdTooltip;\n\n  return tooltip;\n};\n\nfunction computeActionTooltip(\n  hass: HomeAssistant,\n  state: string,\n  config: ActionConfig,\n  isHold: boolean\n) {\n  if (!config || !config.action || config.action === \"none\") {\n    return \"\";\n  }\n\n  let tooltip =\n    (isHold\n      ? hass.localize(\"ui.panel.lovelace.cards.picture-elements.hold\")\n      : hass.localize(\"ui.panel.lovelace.cards.picture-elements.tap\")) + \" \";\n\n  switch (config.action) {\n    case \"navigate\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.navigate_to\",\n        \"location\",\n        config.navigation_path\n      )}`;\n      break;\n    case \"url\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.url\",\n        \"url_path\",\n        config.url_path\n      )}`;\n      break;\n    case \"toggle\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.toggle\",\n        \"name\",\n        state\n      )}`;\n      break;\n    case \"call-service\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.call_service\",\n        \"name\",\n        config.service\n      )}`;\n      break;\n    case \"more-info\":\n      tooltip += `${hass.localize(\n        \"ui.panel.lovelace.cards.picture-elements.more_info\",\n        \"name\",\n        state\n      )}`;\n      break;\n  }\n\n  return tooltip;\n}\n","import {\n  html,\n  LitElement,\n  TemplateResult,\n  customElement,\n  css,\n  CSSResult,\n  queryAll,\n} from \"lit-element\";\nimport \"@material/mwc-ripple\";\n\nimport \"../../../components/entity/state-badge\";\nimport \"../../../components/ha-card\";\nimport \"../../../components/ha-icon\";\nimport \"../components/hui-warning-element\";\n\nimport { HomeAssistant } from \"../../../types\";\nimport { LovelaceHeaderFooter } from \"../types\";\nimport { ButtonsHeaderFooterConfig } from \"./types\";\nimport { EntityConfig } from \"../entity-rows/types\";\nimport { processConfigEntities } from \"../common/process-config-entities\";\nimport { toggleEntity } from \"../common/entity/toggle-entity\";\nimport { computeTooltip } from \"../common/compute-tooltip\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { StateBadge } from \"../../../components/entity/state-badge\";\n\n@customElement(\"hui-buttons-header-footer\")\nexport class HuiButtonsHeaderFooter extends LitElement\n  implements LovelaceHeaderFooter {\n  public static getStubConfig(): object {\n    return { entities: [] };\n  }\n\n  private _configEntities?: EntityConfig[];\n  private _hass?: HomeAssistant;\n  @queryAll(\"state-badge\") private _badges!: StateBadge[];\n\n  public setConfig(config: ButtonsHeaderFooterConfig): void {\n    this._configEntities = processConfigEntities(config.entities);\n    this.requestUpdate();\n  }\n\n  set hass(hass: HomeAssistant) {\n    this._hass = hass;\n    this._badges.forEach((badge, index: number) => {\n      badge.hass = hass;\n      badge.stateObj = hass.states[this._configEntities![index].entity];\n    });\n  }\n\n  protected render(): TemplateResult | void {\n    return html`\n      ${(this._configEntities || []).map((entityConf) => {\n        const stateObj = this._hass!.states[entityConf.entity];\n        if (!stateObj) {\n          return html`<div class='missing'><iron-icon icon=\"hass:alert\"></div>`;\n        }\n\n        return html`\n          <div>\n            <state-badge\n              title=${computeTooltip(this._hass!, entityConf)}\n              @click=${this._toggle}\n              .hass=${this._hass}\n              .stateObj=${stateObj}\n              .overrideIcon=${entityConf.icon}\n              .overrideImage=${entityConf.image}\n              stateColor\n              tabindex=\"0\"\n            ></state-badge>\n            <mwc-ripple unbounded></mwc-ripple>\n          </div>\n        `;\n      })}\n    `;\n  }\n\n  private async _toggle(ev) {\n    await toggleEntity(this._hass!, ev.target.stateObj.entity_id);\n  }\n\n  static get styles(): CSSResult {\n    return css`\n      :host {\n        display: flex;\n        justify-content: space-evenly;\n      }\n      .missing {\n        color: #fce588;\n      }\n      state-badge {\n        cursor: pointer;\n      }\n    `;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-buttons-header-footer\": HuiButtonsHeaderFooter;\n  }\n}\n"],"sourceRoot":""}