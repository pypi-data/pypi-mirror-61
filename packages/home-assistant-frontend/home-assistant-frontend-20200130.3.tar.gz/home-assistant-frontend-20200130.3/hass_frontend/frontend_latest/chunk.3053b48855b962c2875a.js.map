{"version":3,"sources":["webpack:///./src/components/ha-switch.ts","webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/components/dialog/ha-paper-dialog.ts","webpack:///./src/dialogs/generic/dialog-box.ts"],"names":["MwcSwitch","customElements","get","_decorate","customElement","_initialize","_MwcSwitch","HaSwitch","[object Object]","args","super","this","F","d","kind","decorators","query","key","value","_get","_getPrototypeOf","prototype","call","style","setProperty","classList","toggle","Boolean","_slot","assignedNodes","length","html","ripple","interactionNode","_haChangeHandler","static","css","e","mdcFoundation","handleChange","checked","formElement","HaIronFocusablesHelper","getTabbableNodes","node","result","_collectTabbableNodes","IronFocusablesHelper","_sortByTabIndex","nodeType","Node","ELEMENT_NODE","_isVisible","children","element","tabIndex","_normalizedTabIndex","needsSort","push","localName","dom","getDistributedNodes","shadowRoot","root","i","paperDialogClass","haTabFixBehaviorImpl","_focusableNodes","define","mixinBehaviors","_LitElement","property","async","params","_params","prompt","_value","defaultValue","confirmPrompt","confirmation","_openedChanged","title","hass","localize","text","classMap","no-bottom-padding","_valueChanged","inputLabel","inputType","_dismiss","dismissText","_confirm","confirmText","ev","detail","cancel","undefined","confirm","haStyleDialog","LitElement"],"mappings":"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","file":"chunk.3053b48855b962c2875a.js","sourcesContent":["import { customElement, CSSResult, css, query, html } from \"lit-element\";\nimport \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\n// tslint:disable-next-line\nimport { Switch } from \"@material/mwc-switch\";\nimport { Constructor } from \"../types\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive\";\n// tslint:disable-next-line\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div\n          class=\"mdc-switch__thumb-underlay\"\n          .ripple=\"${ripple({\n            interactionNode: this,\n          })}\"\n        >\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._haChangeHandler}\"\n            />\n          </div>\n        </div>\n      </div>\n      <label for=\"basic-switch\"><slot></slot></label>\n    `;\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n\n  private _haChangeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\n\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper.js\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function(node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function(node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@polymer/paper-dialog/paper-dialog\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport { HaIronFocusablesHelper } from \"./ha-iron-focusables-helper.js\";\n// tslint:disable-next-line\nimport { PaperDialogElement } from \"@polymer/paper-dialog/paper-dialog\";\n\nconst paperDialogClass = customElements.get(\"paper-dialog\");\n\n// behavior that will override existing iron-overlay-behavior and call the fixed implementation\nconst haTabFixBehaviorImpl = {\n  get _focusableNodes() {\n    return HaIronFocusablesHelper.getTabbableNodes(this);\n  },\n};\n\n// paper-dialog that uses the haTabFixBehaviorImpl behvaior\n// export class HaPaperDialog extends paperDialogClass {}\n// @ts-ignore\nexport class HaPaperDialog\n  extends mixinBehaviors([haTabFixBehaviorImpl], paperDialogClass)\n  implements PaperDialogElement {}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dialog\": HaPaperDialog;\n  }\n}\ncustomElements.define(\"ha-paper-dialog\", HaPaperDialog);\n","import {\n  LitElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../components/dialog/ha-paper-dialog\";\nimport \"../../components/ha-switch\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { DialogParams } from \"./show-dialog-box\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { haStyleDialog } from \"../../resources/styles\";\nimport { classMap } from \"lit-html/directives/class-map\";\n\n@customElement(\"dialog-box\")\nclass DialogBox extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() private _params?: DialogParams;\n  @property() private _value?: string;\n\n  public async showDialog(params: DialogParams): Promise<void> {\n    this._params = params;\n    if (params.prompt) {\n      this._value = params.defaultValue;\n    }\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    const confirmPrompt = this._params.confirmation || this._params.prompt;\n\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        modal\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>\n          ${this._params.title\n            ? this._params.title\n            : this._params.confirmation &&\n              this.hass.localize(\n                \"ui.dialogs.generic.default_confirmation_title\"\n              )}\n        </h2>\n        <paper-dialog-scrollable>\n          ${this._params.text\n            ? html`\n                <p\n                  class=${classMap({\n                    \"no-bottom-padding\": Boolean(this._params.prompt),\n                  })}\n                >\n                  ${this._params.text}\n                </p>\n              `\n            : \"\"}\n          ${this._params.prompt\n            ? html`\n                <paper-input\n                  autofocus\n                  .value=${this._value}\n                  @value-changed=${this._valueChanged}\n                  .label=${this._params.inputLabel\n                    ? this._params.inputLabel\n                    : \"\"}\n                  .type=${this._params.inputType\n                    ? this._params.inputType\n                    : \"text\"}\n                ></paper-input>\n              `\n            : \"\"}\n        </paper-dialog-scrollable>\n        <div class=\"paper-dialog-buttons\">\n          ${confirmPrompt &&\n            html`\n              <mwc-button @click=\"${this._dismiss}\">\n                ${this._params.dismissText\n                  ? this._params.dismissText\n                  : this.hass.localize(\"ui.dialogs.generic.cancel\")}\n              </mwc-button>\n            `}\n          <mwc-button @click=\"${this._confirm}\">\n            ${this._params.confirmText\n              ? this._params.confirmText\n              : this.hass.localize(\"ui.dialogs.generic.ok\")}\n          </mwc-button>\n        </div>\n      </ha-paper-dialog>\n    `;\n  }\n\n  private _valueChanged(ev: PolymerChangedEvent<string>) {\n    this._value = ev.detail.value;\n  }\n\n  private async _dismiss(): Promise<void> {\n    if (this._params!.cancel) {\n      this._params!.cancel();\n    }\n    this._params = undefined;\n  }\n\n  private async _confirm(): Promise<void> {\n    if (this._params!.confirm) {\n      this._params!.confirm(this._value);\n    }\n    this._dismiss();\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-paper-dialog {\n          min-width: 400px;\n          max-width: 500px;\n        }\n        @media (max-width: 400px) {\n          ha-paper-dialog {\n            min-width: initial;\n          }\n        }\n        p {\n          margin: 0;\n          padding-top: 6px;\n          padding-bottom: 24px;\n          color: var(--primary-text-color);\n        }\n        .no-bottom-padding {\n          padding-bottom: 0;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-box\": DialogBox;\n  }\n}\n"],"sourceRoot":""}