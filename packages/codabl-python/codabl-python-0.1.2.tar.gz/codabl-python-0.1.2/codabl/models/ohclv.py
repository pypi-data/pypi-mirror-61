# coding: utf-8

"""
    Codabl Community API

    The Codabl API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class OHCLV(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'close': 'float',
        'high': 'float',
        'end_date': 'date',
        'open': 'float',
        'time': 'date',
        'volume': 'float',
        'usd_volume': 'float',
        'btc_volume': 'float',
        'quote_volume': 'float'
    }

    attribute_map = {
        'close': 'close',
        'high': 'high',
        'end_date': 'end_date',
        'open': 'open',
        'time': 'time',
        'volume': 'volume',
        'usd_volume': 'usdVolume',
        'btc_volume': 'btcVolume',
        'quote_volume': 'quoteVolume'
    }

    def __init__(self, close=None, high=None, end_date=None, open=None, time=None, volume=None, usd_volume=None, btc_volume=None, quote_volume=None):  # noqa: E501
        """OHCLV - a model defined in Swagger"""  # noqa: E501

        self._close = None
        self._high = None
        self._end_date = None
        self._open = None
        self._time = None
        self._volume = None
        self._usd_volume = None
        self._btc_volume = None
        self._quote_volume = None
        self.discriminator = None

        if close is not None:
            self.close = close
        if high is not None:
            self.high = high
        if end_date is not None:
            self.end_date = end_date
        if open is not None:
            self.open = open
        if time is not None:
            self.time = time
        if volume is not None:
            self.volume = volume
        if usd_volume is not None:
            self.usd_volume = usd_volume
        if btc_volume is not None:
            self.btc_volume = btc_volume
        if quote_volume is not None:
            self.quote_volume = quote_volume

    @property
    def close(self):
        """Gets the close of this OHCLV.  # noqa: E501

        Closing price quote of the time frame with two decimal points  # noqa: E501

        :return: The close of this OHCLV.  # noqa: E501
        :rtype: float
        """
        return self._close

    @close.setter
    def close(self, close):
        """Sets the close of this OHCLV.

        Closing price quote of the time frame with two decimal points  # noqa: E501

        :param close: The close of this OHCLV.  # noqa: E501
        :type: float
        """

        self._close = close

    @property
    def high(self):
        """Gets the high of this OHCLV.  # noqa: E501

        Highest price of the time frame with two decimal points  # noqa: E501

        :return: The high of this OHCLV.  # noqa: E501
        :rtype: float
        """
        return self._high

    @high.setter
    def high(self, high):
        """Sets the high of this OHCLV.

        Highest price of the time frame with two decimal points  # noqa: E501

        :param high: The high of this OHCLV.  # noqa: E501
        :type: float
        """

        self._high = high

    @property
    def end_date(self):
        """Gets the end_date of this OHCLV.  # noqa: E501

        End date in YYYY/MM/DD  # noqa: E501

        :return: The end_date of this OHCLV.  # noqa: E501
        :rtype: date
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this OHCLV.

        End date in YYYY/MM/DD  # noqa: E501

        :param end_date: The end_date of this OHCLV.  # noqa: E501
        :type: date
        """

        self._end_date = end_date

    @property
    def open(self):
        """Gets the open of this OHCLV.  # noqa: E501

        Opening price quote of the time frame with two decimal points  # noqa: E501

        :return: The open of this OHCLV.  # noqa: E501
        :rtype: float
        """
        return self._open

    @open.setter
    def open(self, open):
        """Sets the open of this OHCLV.

        Opening price quote of the time frame with two decimal points  # noqa: E501

        :param open: The open of this OHCLV.  # noqa: E501
        :type: float
        """

        self._open = open

    @property
    def time(self):
        """Gets the time of this OHCLV.  # noqa: E501

        Timestamp of the beggining of the frame  # noqa: E501

        :return: The time of this OHCLV.  # noqa: E501
        :rtype: date
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this OHCLV.

        Timestamp of the beggining of the frame  # noqa: E501

        :param time: The time of this OHCLV.  # noqa: E501
        :type: date
        """

        self._time = time

    @property
    def volume(self):
        """Gets the volume of this OHCLV.  # noqa: E501

        Volume of currency exchanged in the time frame with two decimal points  # noqa: E501

        :return: The volume of this OHCLV.  # noqa: E501
        :rtype: float
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this OHCLV.

        Volume of currency exchanged in the time frame with two decimal points  # noqa: E501

        :param volume: The volume of this OHCLV.  # noqa: E501
        :type: float
        """

        self._volume = volume

    @property
    def usd_volume(self):
        """Gets the usd_volume of this OHCLV.  # noqa: E501

        Volume of currency exchanged in dollars the time frame with two decimal points  # noqa: E501

        :return: The usd_volume of this OHCLV.  # noqa: E501
        :rtype: float
        """
        return self._usd_volume

    @usd_volume.setter
    def usd_volume(self, usd_volume):
        """Sets the usd_volume of this OHCLV.

        Volume of currency exchanged in dollars the time frame with two decimal points  # noqa: E501

        :param usd_volume: The usd_volume of this OHCLV.  # noqa: E501
        :type: float
        """

        self._usd_volume = usd_volume

    @property
    def btc_volume(self):
        """Gets the btc_volume of this OHCLV.  # noqa: E501

        Volume of currency exchanged in dollars the time frame with two decimal points  # noqa: E501

        :return: The btc_volume of this OHCLV.  # noqa: E501
        :rtype: float
        """
        return self._btc_volume

    @btc_volume.setter
    def btc_volume(self, btc_volume):
        """Sets the btc_volume of this OHCLV.

        Volume of currency exchanged in dollars the time frame with two decimal points  # noqa: E501

        :param btc_volume: The btc_volume of this OHCLV.  # noqa: E501
        :type: float
        """

        self._btc_volume = btc_volume

    @property
    def quote_volume(self):
        """Gets the quote_volume of this OHCLV.  # noqa: E501

        Volume of currency exchanged in dollars the time frame with two decimal points  # noqa: E501

        :return: The quote_volume of this OHCLV.  # noqa: E501
        :rtype: float
        """
        return self._quote_volume

    @quote_volume.setter
    def quote_volume(self, quote_volume):
        """Sets the quote_volume of this OHCLV.

        Volume of currency exchanged in dollars the time frame with two decimal points  # noqa: E501

        :param quote_volume: The quote_volume of this OHCLV.  # noqa: E501
        :type: float
        """

        self._quote_volume = quote_volume

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OHCLV, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OHCLV):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
