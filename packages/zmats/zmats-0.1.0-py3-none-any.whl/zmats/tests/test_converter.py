"""
Unit and regression test for the converter module.
"""

import numpy as np
import unittest

from arc.common import almost_equal_coords_lists
from arc.species.converter import molecules_from_xyz
from arc.species.species import ARCSpecies
from rmgpy.species import Species

import zmats.converter as converter
from zmats.exceptions import ConverterError
from zmats.zmats import xyz_to_zmat


class TestConverter(unittest.TestCase):
    """
    Contains unit tests for the converter module
    """
    @classmethod
    def setUpClass(cls):
        """
        A method that is run before all unit tests in this class.
        """
        cls.maxDiff = None

        cls.xyz1 = {'str': """C       0.00000000    0.00000000    0.00000000
H       0.63003260    0.63003260    0.63003260
H      -0.63003260   -0.63003260    0.63003260
H      -0.63003260    0.63003260   -0.63003260
H       0.63003260   -0.63003260   -0.63003260""",  # no line break at the end on purpose
                    'file': """5
test methane xyz conversion
C       0.00000000    0.00000000    0.00000000
H       0.63003260    0.63003260    0.63003260
H      -0.63003260   -0.63003260    0.63003260
H      -0.63003260    0.63003260   -0.63003260
H       0.63003260   -0.63003260   -0.63003260
""",
                    'dict': {'symbols': ('C', 'H', 'H', 'H', 'H'),
                             'isotopes': (12, 1, 1, 1, 1),
                             'coords': ((0.0, 0.0, 0.0),
                                        (0.6300326, 0.6300326, 0.6300326),
                                        (-0.6300326, -0.6300326, 0.6300326),
                                        (-0.6300326, 0.6300326, -0.6300326),
                                        (0.6300326, -0.6300326, -0.6300326))},
                    'dict_diff_order': {'symbols': ('H', 'C', 'H', 'H', 'H'),
                                        'isotopes': (1, 12, 1, 1, 1),
                                        'coords': ((0.6300326, 0.6300326, 0.6300326),
                                                   (0.0, 0.0, 0.0),
                                                   (-0.6300326, -0.6300326, 0.6300326),
                                                   (-0.6300326, 0.6300326, -0.6300326),
                                                   (0.6300326, -0.6300326, -0.6300326))},
                    'zmat_str': """  C
  H       1      R1
  H       2      R2       1      A1
  H       3      R2       1      A1       2      D1
  H       4      R2       1      A1       3      D2
Variables:
A1=35.2644
D1=120.0000
D2=240.0000
R1=1.0912
R2=1.7820""",
                    'consolidated_zmat': {'symbols': ('C', 'H', 'H', 'H', 'H'),
                                          'coords': ((None, None, None), ('R_1_0', None, None),
                                                     ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', None),
                                                     ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_3_2_0_1'),
                                                     ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_4_3_0_2')),
                                          'vars': {'R_1_0': 1.0912484581271156, 'D_3_2_0_1': 120.00000000000001,
                                                   'D_4_3_0_2': 239.99999999999997,
                                                   'R_2|3|4_1|2|3': 1.7820012700068855,
                                                   'A_2|3|4_1|2|3_0|0|0': 35.26438764560717},
                                          'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}},
                    'zmat': {'symbols': ('C', 'H', 'H', 'H', 'H'),
                             'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                        ('R_3_2', 'A_3_2_0', 'D_3_2_0_1'), ('R_4_3', 'A_4_3_0', 'D_4_3_0_2')),
                             'vars': {'R_1_0': 1.0912, 'R_2_1': 1.782, 'A_2_1_0': 35.2644, 'R_3_2': 1.782,
                                      'A_3_2_0': 35.2644, 'D_3_2_0_1': 120.0, 'R_4_3': 1.782, 'A_4_3_0': 35.2644,
                                      'D_4_3_0_2': 240.0}, 'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}}

        cls.xyz2 = {'str': """S       1.02558264   -0.04344404   -0.07343859
O      -0.25448248    1.10710477    0.18359696
N      -1.30762173    0.15796567   -0.10489290
C      -0.49011438   -1.03704380    0.15365747
H      -0.64869950   -1.85796321   -0.54773423
H      -0.60359153   -1.37304859    1.18613964
H      -1.43009127    0.23517346   -1.11797908


""",  # extra line breaks added on purpose
                    'file': """7
test xyz2
S       1.02558264   -0.04344404   -0.07343859
O      -0.25448248    1.10710477    0.18359696
N      -1.30762173    0.15796567   -0.10489290
C      -0.49011438   -1.03704380    0.15365747
H      -0.64869950   -1.85796321   -0.54773423
H      -0.60359153   -1.37304859    1.18613964
H      -1.43009127    0.23517346   -1.11797908
""",
                    'dict': {'symbols': ('S', 'O', 'N', 'C', 'H', 'H', 'H'),
                             'isotopes': (32, 16, 14, 12, 1, 1, 1),
                             'coords': ((1.02558264, -0.04344404, -0.07343859),
                                        (-0.25448248, 1.10710477, 0.18359696),
                                        (-1.30762173, 0.15796567, -0.1048929),
                                        (-0.49011438, -1.0370438, 0.15365747),
                                        (-0.6486995, -1.85796321, -0.54773423),
                                        (-0.60359153, -1.37304859, 1.18613964),
                                        (-1.43009127, 0.23517346, -1.11797908))}}

        cls.xyz3 = {'str': """O          -0.25448248    1.10710477    0.18359696
N          -1.30762173    0.15796567   -0.10489290
C(Iso=13)  -0.49011438   -1.03704380    0.15365747
H(Iso=2)   -0.64869950   -1.85796321   -0.54773423
H          -0.60359153   -1.37304859    1.18613964
S           1.02558264   -0.04344404   -0.07343859
H          -1.43009127    0.23517346   -1.11797908
""",  # one line break at the end on purpose
                    'dict': {'symbols': ('O', 'N', 'C', 'H', 'H', 'S', 'H'),
                             'isotopes': (16, 14, 13, 2, 1, 32, 1),
                             'coords': ((-0.25448248, 1.10710477, 0.18359696),
                                        (-1.30762173, 0.15796567, -0.1048929),
                                        (-0.49011438, -1.0370438, 0.15365747),
                                        (-0.6486995, -1.85796321, -0.54773423),
                                        (-0.60359153, -1.37304859, 1.18613964),
                                        (1.02558264, -0.04344404, -0.07343859),
                                        (-1.43009127, 0.23517346, -1.11797908))}}

        cls.xyz4 = {'str': """B 0.0000000 0.0000000 0.0000000
Br 0.0000000 1.9155570 0.0000000
Br 1.6589210 -0.9577780 0.0000000
Br -1.6589210	-0.9577780	0.0000000
""",  # last line contains tabs
                    'dict': {'symbols': ('B', 'Br', 'Br', 'Br'),
                             'isotopes': (11, 79, 79, 79),
                             'coords': ((0.0, 0.0, 0.0),
                                        (0.0, 1.915557, 0.0),
                                        (1.658921, -0.957778, 0.0),
                                        (-1.658921, -0.957778, 0.0))}}

        cls.xyz5 = {'str': """O       1.17464110   -0.15309781    0.00000000
N       0.06304988    0.35149648    0.00000000
C      -1.12708952   -0.11333971    0.00000000
H      -1.93800144    0.60171738    0.00000000
H      -1.29769464   -1.18742971    0.00000000""",
                    'dict': {'symbols': ('O', 'N', 'C', 'H', 'H'),
                             'isotopes': (16, 14, 12, 1, 1),
                             'coords': ((1.1746411, -0.15309781, 0.0),
                                        (0.06304988, 0.35149648, 0.0),
                                        (-1.12708952, -0.11333971, 0.0),
                                        (-1.93800144, 0.60171738, 0.0),
                                        (-1.29769464, -1.18742971, 0.0))}}

        cls.xyz6 = {'str': """S      -0.06618943   -0.12360663   -0.07631983
O      -0.79539707    0.86755487    1.02675668
O      -0.68919931    0.25421823   -1.34830853
N       0.01546439   -1.54297548    0.44580391
C       1.59721519    0.47861334    0.00711000
H       1.94428095    0.40772394    1.03719428
H       2.20318015   -0.14715186   -0.64755729
H       1.59252246    1.51178950   -0.33908352
H      -0.87856890   -2.02453514    0.38494433
H      -1.34135876    1.49608206    0.53295071""",
                    'file': """10
test xyz6
S      -0.06618943   -0.12360663   -0.07631983
O      -0.79539707    0.86755487    1.02675668
O      -0.68919931    0.25421823   -1.34830853
N       0.01546439   -1.54297548    0.44580391
C       1.59721519    0.47861334    0.00711000
H       1.94428095    0.40772394    1.03719428
H       2.20318015   -0.14715186   -0.64755729
H       1.59252246    1.51178950   -0.33908352
H      -0.87856890   -2.02453514    0.38494433
H      -1.34135876    1.49608206    0.53295071
""",
                    'dict': {'symbols': ('S', 'O', 'O', 'N', 'C', 'H', 'H', 'H', 'H', 'H'),
                             'isotopes': (32, 16, 16, 14, 12, 1, 1, 1, 1, 1),
                             'coords': ((-0.06618943, -0.12360663, -0.07631983),
                                        (-0.79539707, 0.86755487, 1.02675668),
                                        (-0.68919931, 0.25421823, -1.34830853),
                                        (0.01546439, -1.54297548, 0.44580391),
                                        (1.59721519, 0.47861334, 0.00711),
                                        (1.94428095, 0.40772394, 1.03719428),
                                        (2.20318015, -0.14715186, -0.64755729),
                                        (1.59252246, 1.5117895, -0.33908352),
                                        (-0.8785689, -2.02453514, 0.38494433),
                                        (-1.34135876, 1.49608206, 0.53295071))}}

        cls.xyz7 = {'str': """O       2.64631000   -0.59546000    0.29327900
O       2.64275300    2.05718500   -0.72942300
C       1.71639100    1.97990400    0.33793200
C      -3.48200000    1.50082200    0.03091100
C      -3.85550400   -1.05695100   -0.03598300
C       3.23017500   -1.88003900    0.34527100
C      -2.91846400    0.11144600    0.02829400
C       0.76935400    0.80820200    0.23396500
C      -1.51123800   -0.09830700    0.09199100
C       1.28495500   -0.50051800    0.22531700
C      -0.59550400    0.98573400    0.16444900
C      -0.94480400   -1.39242500    0.08331900
C       0.42608700   -1.59172200    0.14650400
H       2.24536500    1.93452800    1.29979800
H       1.14735500    2.91082400    0.31665700
H      -3.24115200    2.03800800    0.95768700
H      -3.08546100    2.10616100   -0.79369800
H      -4.56858900    1.48636200   -0.06630800
H      -4.89652000   -0.73067200   -0.04282300
H      -3.69325500   -1.65970000   -0.93924100
H      -3.72742500   -1.73294900    0.81894100
H       3.02442400   -2.44854700   -0.56812500
H       4.30341500   -1.72127600    0.43646000
H       2.87318600   -2.44236600    1.21464900
H      -0.97434200    2.00182800    0.16800300
H      -1.58581300   -2.26344700    0.02264400
H       0.81122400   -2.60336100    0.13267800
H       3.16280800    1.25020800   -0.70346900
""",
                    'dict': {'symbols': ('O', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'H',
                                         'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                             'isotopes': (16, 16, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1,
                                          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                             'coords': ((2.64631, -0.59546, 0.293279), (2.642753, 2.057185, -0.729423),
                                        (1.716391, 1.979904, 0.337932), (-3.482, 1.500822, 0.030911),
                                        (-3.855504, -1.056951, -0.035983), (3.230175, -1.880039, 0.345271),
                                        (-2.918464, 0.111446, 0.028294), (0.769354, 0.808202, 0.233965),
                                        (-1.511238, -0.098307, 0.091991), (1.284955, -0.500518, 0.225317),
                                        (-0.595504, 0.985734, 0.164449), (-0.944804, -1.392425, 0.083319),
                                        (0.426087, -1.591722, 0.146504), (2.245365, 1.934528, 1.299798),
                                        (1.147355, 2.910824, 0.316657), (-3.241152, 2.038008, 0.957687),
                                        (-3.085461, 2.106161, -0.793698), (-4.568589, 1.486362, -0.066308),
                                        (-4.89652, -0.730672, -0.042823), (-3.693255, -1.6597, -0.939241),
                                        (-3.727425, -1.732949, 0.818941), (3.024424, -2.448547, -0.568125),
                                        (4.303415, -1.721276, 0.43646), (2.873186, -2.442366, 1.214649),
                                        (-0.974342, 2.001828, 0.168003), (-1.585813, -2.263447, 0.022644),
                                        (0.811224, -2.603361, 0.132678), (3.162808, 1.250208, -0.703469))}}

        cls.xyz8 = {'str': """N      -1.1997440839    -0.1610052059     0.0274738287
H      -1.4016624407    -0.6229695533    -0.8487034080
H      -0.0000018759     1.2861082773     0.5926077870
N       0.0000008520     0.5651072858    -0.1124621525
H      -1.1294692206    -0.8709078271     0.7537518889
N       1.1997613019    -0.1609980472     0.0274604887
H       1.1294795781    -0.8708998550     0.7537444446
H       1.4015274689    -0.6230592706    -0.8487058662""",
                    'dict': {'symbols': ('N', 'H', 'H', 'N', 'H', 'N', 'H', 'H'),
                             'isotopes': (14, 1, 1, 14, 1, 14, 1, 1),
                             'coords': ((-1.1997440839, -0.1610052059, 0.0274738287),
                                        (-1.4016624407, -0.6229695533, -0.848703408),
                                        (-1.8759e-06, 1.2861082773, 0.592607787),
                                        (8.52e-07, 0.5651072858, -0.1124621525),
                                        (-1.1294692206, -0.8709078271, 0.7537518889),
                                        (1.1997613019, -0.1609980472, 0.0274604887),
                                        (1.1294795781, -0.870899855, 0.7537444446),
                                        (1.4015274689, -0.6230592706, -0.8487058662))}}

        cls.xyz9 = {'str': """O       3.13231900    0.76911100   -0.08086900
O       3.38743600   -2.11675900   -0.03858500
C      -2.36919300   -0.54695600    0.56682700
C      -3.15360600    0.17105900    1.66307400
C      -2.72802700   -2.02644500    0.45926800
C       2.33156000   -1.73423500   -0.92148100
C       3.65011300    2.04916900    0.27583500
C      -0.93121600   -0.18690000    0.42819300
C       1.35285800   -0.75515100   -0.30846400
C       1.79433800    0.52230200    0.09841000
C       0.01159300   -1.07956000   -0.13549700
C      -0.44828900    1.08210200    0.80429800
C       0.89316900    1.43644300    0.64990400
H      -2.89113500   -0.05394500   -0.49913900
H       2.74879900   -1.31147200   -1.84752800
H       1.80991500   -2.65831900   -1.18214800
H      -3.11220800    1.25882600    1.56763000
H      -4.20773200   -0.11655100    1.61916700
H      -2.76884700   -0.09784700    2.65693400
H      -2.29498600   -2.59841700    1.29217500
H      -3.81389700   -2.15150400    0.49848800
H      -2.38217200   -2.47865600   -0.47430600
H       3.52516600    2.24195700    1.34780100
H       4.71260700    2.01840000    0.03253700
H       3.16623600    2.84537400   -0.30166300
H      -0.30596000   -2.07000300   -0.44289400
H      -1.12238100    1.81600000    1.22939200
H       1.21751200    2.42129300    0.96452300
H       3.88922100   -1.31541600    0.16697100
O      -3.43304800    0.46172100   -1.53075600
O      -2.89487900    1.76177800   -1.59155700
H      -2.12457300    1.65249500   -2.17600500""",
                    'dict': {'symbols': ('O', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                                         'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                                         'H', 'H', 'H', 'O', 'O', 'H'),
                             'isotopes': (16, 16, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                                          1, 1, 1, 1, 1, 1, 1, 16, 16, 1),
                             'coords': ((3.132319, 0.769111, -0.080869),
                                        (3.387436, -2.116759, -0.038585),
                                        (-2.369193, -0.546956, 0.566827),
                                        (-3.153606, 0.171059, 1.663074),
                                        (-2.728027, -2.026445, 0.459268),
                                        (2.33156, -1.734235, -0.921481),
                                        (3.650113, 2.049169, 0.275835),
                                        (-0.931216, -0.1869, 0.428193),
                                        (1.352858, -0.755151, -0.308464),
                                        (1.794338, 0.522302, 0.09841),
                                        (0.011593, -1.07956, -0.135497),
                                        (-0.448289, 1.082102, 0.804298),
                                        (0.893169, 1.436443, 0.649904),
                                        (-2.891135, -0.053945, -0.499139),
                                        (2.748799, -1.311472, -1.847528),
                                        (1.809915, -2.658319, -1.182148),
                                        (-3.112208, 1.258826, 1.56763),
                                        (-4.207732, -0.116551, 1.619167),
                                        (-2.768847, -0.097847, 2.656934),
                                        (-2.294986, -2.598417, 1.292175),
                                        (-3.813897, -2.151504, 0.498488),
                                        (-2.382172, -2.478656, -0.474306),
                                        (3.525166, 2.241957, 1.347801),
                                        (4.712607, 2.0184, 0.032537),
                                        (3.166236, 2.845374, -0.301663),
                                        (-0.30596, -2.070003, -0.442894),
                                        (-1.122381, 1.816, 1.229392),
                                        (1.217512, 2.421293, 0.964523),
                                        (3.889221, -1.315416, 0.166971),
                                        (-3.433048, 0.461721, -1.530756),
                                        (-2.894879, 1.761778, -1.591557),
                                        (-2.124573, 1.652495, -2.176005))},
                    'gaussian': """
              1          8           0        3.132319    0.769111   -0.080869
              2          8           0        3.387436   -2.116759   -0.038585
              3          6           0       -2.369193   -0.546956    0.566827
              4          6           0       -3.153606    0.171059    1.663074
              5          6           0       -2.728027   -2.026445    0.459268
              6          6           0        2.331560   -1.734235   -0.921481
              7          6           0        3.650113    2.049169    0.275835
              8          6           0       -0.931216   -0.186900    0.428193
              9          6           0        1.352858   -0.755151   -0.308464
             10          6           0        1.794338    0.522302    0.098410
             11          6           0        0.011593   -1.079560   -0.135497
             12          6           0       -0.448289    1.082102    0.804298
             13          6           0        0.893169    1.436443    0.649904
             14          1           0       -2.891135   -0.053945   -0.499139
             15          1           0        2.748799   -1.311472   -1.847528
             16          1           0        1.809915   -2.658319   -1.182148
             17          1           0       -3.112208    1.258826    1.567630
             18          1           0       -4.207732   -0.116551    1.619167
             19          1           0       -2.768847   -0.097847    2.656934
             20          1           0       -2.294986   -2.598417    1.292175
             21          1           0       -3.813897   -2.151504    0.498488
             22          1           0       -2.382172   -2.478656   -0.474306
             23          1           0        3.525166    2.241957    1.347801
             24          1           0        4.712607    2.018400    0.032537
             25          1           0        3.166236    2.845374   -0.301663
             26          1           0       -0.305960   -2.070003   -0.442894
             27          1           0       -1.122381    1.816000    1.229392
             28          1           0        1.217512    2.421293    0.964523
             29          1           0        3.889221   -1.315416    0.166971
             30          8           0       -3.433048    0.461721   -1.530756
             31          8           0       -2.894879    1.761778   -1.591557
             32          1           0       -2.124573    1.652495   -2.176005

        """,
                    }

        cls.xyz10 = {'str': """S       0.35915171    1.99254721    1.18490490
O       0.40385373   -0.65769862    1.03431374
O      -1.23178399   -0.59559801   -1.39114493
O       0.69015560   -1.65712867    0.01239391
C      -0.04261360    0.49595776    0.40364219
C      -0.80103934    0.51314044   -0.70610325
H      -1.17387862    1.41490429   -1.17716515
H       0.95726719    1.46882836    2.26423536
H      -0.83008868   -1.36939497   -0.94170868
H       1.65888059   -1.54205855    0.02674995
""",
                     'dict': {'symbols': ('S', 'O', 'O', 'O', 'C', 'C', 'H', 'H', 'H', 'H'),
                              'isotopes': (32, 16, 16, 16, 12, 12, 1, 1, 1, 1),
                              'coords': ((0.35915171, 1.99254721, 1.1849049),
                                         (0.40385373, -0.65769862, 1.03431374),
                                         (-1.23178399, -0.59559801, -1.39114493),
                                         (0.6901556, -1.65712867, 0.01239391),
                                         (-0.0426136, 0.49595776, 0.40364219),
                                         (-0.80103934, 0.51314044, -0.70610325),
                                         (-1.17387862, 1.41490429, -1.17716515),
                                         (0.95726719, 1.46882836, 2.26423536),
                                         (-0.83008868, -1.36939497, -0.94170868),
                                         (1.65888059, -1.54205855, 0.02674995))},
                     'dict_diff_order1': {'symbols': ('C', 'O', 'O', 'O', 'S', 'C', 'H', 'H', 'H', 'H'),
                                          'isotopes': (12, 16, 16, 16, 32, 12, 1, 1, 1, 1),
                                          'coords': ((-0.0426136, 0.49595776, 0.40364219),
                                                     (0.40385373, -0.65769862, 1.03431374),
                                                     (-1.23178399, -0.59559801, -1.39114493),
                                                     (0.6901556, -1.65712867, 0.01239391),
                                                     (0.35915171, 1.99254721, 1.1849049),
                                                     (-0.80103934, 0.51314044, -0.70610325),
                                                     (-1.17387862, 1.41490429, -1.17716515),
                                                     (0.95726719, 1.46882836, 2.26423536),
                                                     (-0.83008868, -1.36939497, -0.94170868),
                                                     (1.65888059, -1.54205855, 0.02674995))},
                     'dict_diff_order2': {'symbols': ('O', 'O', 'O', 'S', 'H', 'C', 'H', 'C', 'H', 'H'),
                                          'isotopes': (16, 16, 16, 32, 1, 12, 1, 12, 1, 1),
                                          'coords': ((0.6901556, -1.65712867, 0.01239391),
                                                     (0.40385373, -0.65769862, 1.03431374),
                                                     (-1.23178399, -0.59559801, -1.39114493),
                                                     (0.35915171, 1.99254721, 1.1849049),
                                                     (0.95726719, 1.46882836, 2.26423536),
                                                     (-0.80103934, 0.51314044, -0.70610325),
                                                     (-1.17387862, 1.41490429, -1.17716515),
                                                     (-0.0426136, 0.49595776, 0.40364219),
                                                     (-0.83008868, -1.36939497, -0.94170868),
                                                     (1.65888059, -1.54205855, 0.02674995))}}

        cls.xyz11 = {'str': """C       0.00000000    0.00000000    0.00000000
H       0.63003260    0.63003260    0.63003260
H      -0.63003260   -0.63003260    0.63003260
H      -0.63003260    0.63003260   -0.63003260
H       0.63003260   -0.63003260   -0.63003260""",  # no line break at the end on purpose
                     'file': """5
test methane xyz conversion
C       0.00000000    0.00000000    0.00000000
H       0.63003260    0.63003260    0.63003260
H      -0.63003260   -0.63003260    0.63003260
H      -0.63003260    0.63003260   -0.63003260
H       0.63003260   -0.63003260   -0.63003260
""",
                     'dict': {'symbols': ('C', 'H', 'H', 'H'),
                              'isotopes': (12, 1, 1, 1),
                              'coords': ((0.0, 0.0, 0.0),
                                         (0.6300326, 0.6300326, 0.6300326),
                                         (-0.6300326, -0.6300326, 0.6300326),
                                         (-0.6300326, 0.6300326, -0.6300326))},
                     'dict_diff_order': {'symbols': ('H', 'C', 'H', 'H'),
                                         'isotopes': (1, 12, 1, 1),
                                         'coords': ((0.6300326, 0.6300326, 0.6300326),
                                                    (0.0, 0.0, 0.0),
                                                    (-0.6300326, -0.6300326, 0.6300326),
                                                    (-0.6300326, 0.6300326, -0.6300326))}}

        nh_s_adj = """1 N u0 p2 c0 {2,S}
                          2 H u0 p0 c0 {1,S}"""
        nh_s_xyz = """N       0.50949998    0.00000000    0.00000000
                          H      -0.50949998    0.00000000    0.00000000"""
        cls.spc1 = ARCSpecies(label='NH2(S)', adjlist=nh_s_adj, xyz=nh_s_xyz, multiplicity=1, charge=0)
        spc = Species().from_adjacency_list(nh_s_adj)
        cls.spc2 = ARCSpecies(label='NH2(S)', rmg_species=spc, xyz=nh_s_xyz)

        cls.spc3 = ARCSpecies(label='NCN(S)', smiles='[N]=C=[N]', multiplicity=1, charge=0)

        cls.spc4 = ARCSpecies(label='NCN(T)', smiles='[N]=C=[N]', multiplicity=3, charge=0)

    def test_check_zmat_dict(self):
        """Test check a zmat dict"""
        zmat1 = converter.check_zmat_dict(self.xyz1['zmat_str'])
        self.assertEqual(zmat1, self.xyz1['zmat'])

        zmat2 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None), ('R_1_0', None, None), ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', None),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_3_2_0_1'),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_4_3_0_2')),
                 'vars': {'R_1_0': 1.0912484581271156, 'D_3_2_0_1': 120.00000000000001, 'D_4_3_0_2': 239.99999999999997,
                          'R_2|3|4_1|2|3': 1.7820012700068855, 'A_2|3|4_1|2|3_0|0|0': 35.26438764560717}}
        zmat2 = converter.check_zmat_dict(zmat2)
        expected_zmat2 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                          'coords': ((None, None, None), ('R_1_0', None, None),
                                     ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', None),
                                     ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_3_2_0_1'),
                                     ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_4_3_0_2')),
                          'vars': {'R_1_0': 1.0912484581271156, 'D_3_2_0_1': 120.00000000000001,
                                   'D_4_3_0_2': 239.99999999999997, 'R_2|3|4_1|2|3': 1.7820012700068855,
                                   'A_2|3|4_1|2|3_0|0|0': 35.26438764560717},
                          'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        self.assertEqual(zmat2, expected_zmat2)

        zmat3 = 3.0
        with self.assertRaises(ConverterError):
            converter.check_zmat_dict(zmat3)

        zmat4 = {'coords': ((None, None, None), ('R_1_0', None, None),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', None),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_3_2_0_1'),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_4_3_0_2'))}
        with self.assertRaises(ConverterError):
            converter.check_zmat_dict(zmat4)

        zmat5 = {'symbols': ('C', 'H', 'H', 'H', 'H', 'S', 'S', 'S', 'S'),
                 'coords': ((None, None, None), ('R_1_0', None, None),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', None),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_3_2_0_1'),
                            ('R_2|3|4_1|2|3', 'A_2|3|4_1|2|3_0|0|0', 'D_4_3_0_2')),
                 'vars': {'R_1_0': 1.0912484581271156, 'D_3_2_0_1': 120.00000000000001,
                          'D_4_3_0_2': 239.99999999999997, 'R_2|3|4_1|2|3': 1.7820012700068855,
                          'A_2|3|4_1|2|3_0|0|0': 35.26438764560717},
                 'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        with self.assertRaises(ConverterError):
            converter.check_zmat_dict(zmat5)

    def test_check_xyz_dict(self):
        """Test the check_xyz_dict function"""
        xyz1 = converter.check_xyz_dict(self.xyz1['str'])
        self.assertEqual(xyz1, self.xyz1['dict'])

        xyz2 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                'coords': ((0.0, 0.0, 0.0),
                           (0.6300326, 0.6300326, 0.6300326),
                           (-0.6300326, -0.6300326, 0.6300326),
                           (-0.6300326, 0.6300326, -0.6300326),
                           (0.6300326, -0.6300326, -0.6300326))}
        xyz2 = converter.check_xyz_dict(xyz2)
        expected_xyz2 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                         'isotopes': (12, 1, 1, 1, 1),
                         'coords': ((0.0, 0.0, 0.0),
                                    (0.6300326, 0.6300326, 0.6300326),
                                    (-0.6300326, -0.6300326, 0.6300326),
                                    (-0.6300326, 0.6300326, -0.6300326),
                                    (0.6300326, -0.6300326, -0.6300326))}
        self.assertEqual(xyz2, expected_xyz2)

        xyz3 = 3.0
        with self.assertRaises(ConverterError):
            converter.check_xyz_dict(xyz3)

        xyz4 = {'coords': ((0.0, 0.0, 0.0),
                           (0.6300326, 0.6300326, 0.6300326),
                           (-0.6300326, -0.6300326, 0.6300326),
                           (-0.6300326, 0.6300326, -0.6300326),
                           (0.6300326, -0.6300326, -0.6300326))}
        with self.assertRaises(ConverterError):
            converter.check_xyz_dict(xyz4)

        xyz5 = {'symbols': ('C', 'H', 'H', 'H', 'H', 'S', 'S', 'S'),
                'coords': ((0.0, 0.0, 0.0),
                           (0.6300326, 0.6300326, 0.6300326),
                           (-0.6300326, -0.6300326, 0.6300326),
                           (-0.6300326, 0.6300326, -0.6300326),
                           (0.6300326, -0.6300326, -0.6300326))}
        with self.assertRaises(ConverterError):
            converter.check_xyz_dict(xyz5)

        # test a zmat input
        zmat6 = {'symbols': ('N', 'N', 'H', 'H'),
                 'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                            ('R_3_2', 'A_3_2_0', 'D_3_2_0_1')),
                 'vars': {'R_1_0': 1.2451214479859707, 'R_2_1': 1.8953164901754294, 'A_2_1_0': 30.18165946689929,
                          'R_3_2': 2.785552137148173, 'A_3_2_0': 24.405141545817347,
                          'D_3_2_0_1': 3.6222548091772e-06}, 'map': {0: 0, 1: 1, 2: 2, 3: 3}}
        xyz6 = converter.check_xyz_dict(zmat6)
        expected_xyz6 = {'symbols': ('N', 'N', 'H', 'H'),
                         'isotopes': (14, 14, 1, 1),
                         'coords': ((-2.4426534384901547e-09, -4.375090750708016e-09, -0.622560729110669),
                                    (-2.4426534384901547e-09, -4.375090750708016e-09, 0.6225607188753017),
                                    (-2.4426534384901547e-09, 0.9528575945413793, -1.015818661524137),
                                    (7.032081834243086e-08, -0.9528574729632926, 1.015818803737915))}

        self.assertTrue(almost_equal_coords_lists(xyz6, expected_xyz6))

    def test_remove_dummies(self):
        """Test removing dummy atoms from xyz"""
        xyz = {'symbols': ('C', 'H', 'H', 'H', 'H'),
               'isotopes': (12, 1, 1, 1, 1),
               'coords': ((0.0, 0.0, 0.0),
                          (0.6300326, 0.6300326, 0.6300326),
                          (-0.6300326, -0.6300326, 0.6300326),
                          (-0.6300326, 0.6300326, -0.6300326),
                          (0.6300326, -0.6300326, -0.6300326))}
        self.assertEqual(converter.remove_dummies(xyz), xyz)

        xyz = """C      -0.30700886   -0.24965365   -1.86620254
C      -0.30700886   -0.24965365   -0.66508366
C      -0.30700886   -0.24965365    0.79905183
O       0.70180431    0.62552152    1.28340152
X      -0.30700886    0.75034635   -0.66508366
H      -0.30700886   -0.24965365   -2.93203160
H      -1.26962070    0.09010325    1.19172774
H      -0.11233413   -1.25155362    1.19322545
H       1.51732567    0.40137314    0.80398296
X      -0.52389885    0.72654241   -1.86620254"""
        expected_xyz = {'symbols': ('C', 'C', 'C', 'O', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((-0.30700886, -0.24965365, -1.86620254), (-0.30700886, -0.24965365, -0.66508366),
                                   (-0.30700886, -0.24965365, 0.79905183), (0.70180431, 0.62552152, 1.28340152),
                                   (-0.30700886, -0.24965365, -2.9320316), (-1.2696207, 0.09010325, 1.19172774),
                                   (-0.11233413, -1.25155362, 1.19322545), (1.51732567, 0.40137314, 0.80398296))}
        self.assertEqual(converter.remove_dummies(xyz), expected_xyz)

        xyz = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'X'),
               'isotopes': (12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, None),
               'coords': ((-0.13756116038658112, -0.4903980739180812, -3.4070002421611405),
                          (-0.13756116038658112, -0.4903980739180812, -2.068811535952663),
                          (-0.13756116038658112, 0.7152610317203273, -1.2799749296658276),
                          (-0.13536699409738112, 0.6772831991876102, 0.020126260072391933),
                          (-0.1331728278081811, 0.6393053666548932, 1.3202274498106115),
                          (0.42865067654033756, -0.4749909307528236, 2.040292659169325),
                          (0.4467895682142408, -0.5498499456820503, 3.376262764342561),
                          (-0.42345537766834657, 0.5739424129245821, -3.9821069340233026),
                          (-1.8714191723187001, -0.583636119043475, -3.934273994832548),
                          (-1.8262531967396876, -0.6225281951339621, -1.5142275656129123),
                          (0.6043039927461615, 1.3236094550456832, -1.7931815119572303),
                          (-0.5678376994686876, 1.4634507673105883, 1.8769577284974246),
                          (0.855037712371592, -1.2879840211437834, 1.4551669317123657),
                          (0.8820166269612573, -1.4116598437885965, 3.872635381883336),
                          (0.035099262340543336, 0.232696924337356, 4.0056654348243015),
                          (-0.7693852837602044, 1.4502395523398461, 0.04377545656241333))}
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((-0.13756116038658112, -0.4903980739180812, -3.4070002421611405),
                                   (-0.13756116038658112, -0.4903980739180812, -2.068811535952663),
                                   (-0.13756116038658112, 0.7152610317203273, -1.2799749296658276),
                                   (-0.13536699409738112, 0.6772831991876102, 0.020126260072391933),
                                   (-0.1331728278081811, 0.6393053666548932, 1.3202274498106115),
                                   (0.42865067654033756, -0.4749909307528236, 2.040292659169325),
                                   (0.4467895682142408, -0.5498499456820503, 3.376262764342561),
                                   (-0.42345537766834657, 0.5739424129245821, -3.9821069340233026),
                                   (-1.8714191723187001, -0.583636119043475, -3.934273994832548),
                                   (-1.8262531967396876, -0.6225281951339621, -1.5142275656129123),
                                   (0.6043039927461615, 1.3236094550456832, -1.7931815119572303),
                                   (-0.5678376994686876, 1.4634507673105883, 1.8769577284974246),
                                   (0.855037712371592, -1.2879840211437834, 1.4551669317123657),
                                   (0.8820166269612573, -1.4116598437885965, 3.872635381883336),
                                   (0.035099262340543336, 0.232696924337356, 4.0056654348243015))}
        self.assertEqual(converter.remove_dummies(xyz), expected_xyz)

    def test_xyz_to_str(self):
        """Test converting an ARC xyz format to a string xyz format"""
        xyz_str1 = converter.xyz_to_str(xyz_dict=self.xyz1['dict'])
        xyz_str2 = converter.xyz_to_str(xyz_dict=self.xyz2['dict'])
        xyz_str3 = converter.xyz_to_str(xyz_dict=self.xyz3['dict'])
        xyz_str4 = converter.xyz_to_str(xyz_dict=self.xyz4['dict'])
        self.assertEqual(xyz_str1, converter.standardize_xyz_string(self.xyz1['str']))
        self.assertEqual(xyz_str2, converter.standardize_xyz_string(self.xyz2['str']))
        self.assertEqual(xyz_str3, converter.standardize_xyz_string(self.xyz3['str']))
        self.assertEqual(xyz_str4, converter.standardize_xyz_string(self.xyz4['str']))

    def test_str_to_xyz(self):
        """Test converting a string xyz format to the ARC xyz format"""
        xyz1 = converter.str_to_xyz(xyz_str=self.xyz1['str'])
        xyz2 = converter.str_to_xyz(xyz_str=self.xyz2['str'])
        xyz3 = converter.str_to_xyz(xyz_str=self.xyz3['str'])
        xyz4 = converter.str_to_xyz(xyz_str=self.xyz4['str'])
        xyz9a = converter.str_to_xyz(xyz_str=self.xyz9['str'])
        xyz9b = converter.str_to_xyz(xyz_str=self.xyz9['gaussian'])  # check parsing a Gaussian output format

        self.assertEqual(xyz1, self.xyz1['dict'])
        self.assertEqual(xyz2, self.xyz2['dict'])
        self.assertEqual(xyz3, self.xyz3['dict'])
        self.assertEqual(xyz4, self.xyz4['dict'])
        self.assertEqual(xyz9a, self.xyz9['dict'])
        self.assertEqual(xyz9b, self.xyz9['dict'])

        # test a zmat input, important for defining a Species with a zmat
        zmat5 = """C
H       1      R1
H       1      R1       2      A1
H       1      R1       2      A1       3      D1
H       1      R1       2      A1       3      D2

A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912"""
        xyz5 = converter.str_to_xyz(xyz_str=zmat5)
        expected_xyz5 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                         'isotopes': (12, 1, 1, 1, 1),
                         'coords': ((0.0, 0.0, -6.987742560341984e-08), (0.0, 0.0, 1.0911999301225743),
                                    (0.0, 1.0287933571691315, -0.3637330327013464),
                                    (0.8909611825531454, -0.5143966785845655, -0.3637330327013464),
                                    (-0.8909611825531449, -0.5143966785845662, -0.3637330327013464))}
        self.assertTrue(almost_equal_coords_lists(xyz5, expected_xyz5))

    def test_standardize_xyz_string(self):
        """Test the standardize_xyz_string() function"""
        xyz = """
        
        
 C                  -0.67567701    1.18507660          0.04672449
 H                 -0.25592948    1.62415961    0.92757746
 H                 -2.26870864    1.38030564    0.05865317
 O                 -0.36671999   -0.21081064    0.01630374
 H                 -0.73553821   -0.63718986    0.79332805
 C                       -0.08400571    1.86907236   -1.19973252
 
 H                 -0.50375517      1.42998100   -2.08057962
 H                 -0.31518819    2.91354759    -1.17697025
 H                  0.97802159    1.73893214   -1.20769117
 O                 -3.69788377    1.55609096    0.07050345
 O                 -4.28667752    0.37487691    0.04916102
 H                 -4.01978712   -0.12970163    0.82103635
 
 """
        expected_xyz = """C                 -0.67567701    1.18507660    0.04672449
H                 -0.25592948    1.62415961    0.92757746
H                 -2.26870864    1.38030564    0.05865317
O                 -0.36671999   -0.21081064    0.01630374
H                 -0.73553821   -0.63718986    0.79332805
C                 -0.08400571    1.86907236   -1.19973252
H                 -0.50375517    1.42998100   -2.08057962
H                 -0.31518819    2.91354759   -1.17697025
H                  0.97802159    1.73893214   -1.20769117
O                 -3.69788377    1.55609096    0.07050345
O                 -4.28667752    0.37487691    0.04916102
H                 -4.01978712   -0.12970163    0.82103635"""
        new_xyz = converter.standardize_xyz_string(xyz)
        self.assertEqual(new_xyz, converter.standardize_xyz_string(expected_xyz))

    def test_xyz_from_data(self):
        """Test getting the ARC xyz dictionary from data"""
        symbols = ('C', 'H', 'H', 'H', 'H')
        isotopes = (12, 1, 1, 1, 1)
        coords = ((0.0, 0.0, 0.0),
                  (0.6300326, 0.6300326, 0.6300326),
                  (-0.6300326, -0.6300326, 0.6300326),
                  (-0.6300326, 0.6300326, -0.6300326),
                  (0.6300326, -0.6300326, -0.6300326))
        xyz_dict0 = converter.xyz_from_data(coords=coords, symbols=symbols, isotopes=isotopes)
        self.assertEqual(xyz_dict0, self.xyz1['dict'])
        xyz_dict1 = converter.xyz_from_data(coords=coords, symbols=symbols)  # no specifying isotopes
        self.assertEqual(xyz_dict1, self.xyz1['dict'])

        numbers = [6, 1, 1, 1, 1]
        coords = [[0.0, 0.0, 0.0],
                  [0.6300326, 0.6300326, 0.6300326],
                  [-0.6300326, -0.6300326, 0.6300326],
                  [-0.6300326, 0.6300326, -0.6300326],
                  [0.6300326, -0.6300326, -0.6300326]]
        xyz_dict2 = converter.xyz_from_data(coords=coords, numbers=numbers)
        self.assertEqual(xyz_dict2, self.xyz1['dict'])

        numbers = [6, 1, 1, 1, 1]
        coords = [[0.0, 0.0, 0.0],
                  [0.6300326, 0.6300326, 0.6300326],
                  [-0.6300326, -0.6300326, 0.6300326],
                  [-0.6300326, 0.6300326, -0.6300326],
                  [0.6300326, -0.6300326, -0.6300326]]
        coords = np.array([np.array(coord, np.float64) for coord in coords], np.float64)
        xyz_dict2 = converter.xyz_from_data(coords=coords, numbers=numbers)
        self.assertEqual(xyz_dict2, self.xyz1['dict'])
        self.assertIsInstance(xyz_dict2['coords'], tuple)
        self.assertIsInstance(xyz_dict2['coords'][0], tuple)

    def test_zmat_to_xyz(self):
        """Check refolding a zmat into cartesian coordinates"""
        co3 = {'symbols': ('O', 'O', 'O'), 'isotopes': (16, 16, 16),
               'coords': ((-0.7218511965026766, -0.41676098261567357, 0.0),
                          (0.7218512230346665, -0.41676098261567357, 0.0),
                          (-2.6531989605338424e-08, 0.8335219652313473, 0.0))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(co3))
        expected_xyz = {'symbols': ('O', 'O', 'O'), 'isotopes': (16, 16, 16),
                        'coords': ((0.0, -0.41676098261567357, -0.7218511965026766),
                                   (0.0, -0.41676098261567357, 0.7218512230346665),
                                   (0.0, 0.8335219652313473, -2.653198949431612e-08))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        # test defining the 3rd atom relative to atom A
        co3_zmat_1 = {'symbols': ('O', 'O', 'O'),
                      'coords': ((None, None, None),
                                 ('R_1|2_0|0', None, None),
                                 ('R_1|2_0|0', 'A_2_0_1', None)),
                      'vars': {'A_2_0_1': 60.0, 'R_1|2_0|0': 1.44370},
                      'map': {0: 0, 1: 1, 2: 2}}
        xyz = converter.zmat_to_xyz(co3_zmat_1)
        expected_xyz = {'symbols': ('O', 'O', 'O'), 'isotopes': (16, 16, 16),
                        'coords': (
                        (0.0, -0.4167602918145313, -0.7218499999999999), (0.0, -0.4167602918145313, 0.7218500000000001),
                        (0.0, 0.8335205836290627, 0.0))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        # test defining the 3rd atom relative to atom B
        co3_zmat_2 = {'symbols': ('O', 'O', 'O'),
                      'coords': ((None, None, None),
                                 ('R_1|2_0|1', None, None),
                                 ('R_1|2_0|1', 'A_2_1_0', None)),
                      'vars': {'A_2_1_0': 60.0, 'R_1|2_0|1': 1.44370},
                      'map': {0: 0, 1: 1, 2: 2}}
        xyz = converter.zmat_to_xyz(co3_zmat_2)
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))  # same expected_xyz as above

        ch4 = {'symbols': ('C', 'H', 'H', 'H', 'H'), 'isotopes': (12, 1, 1, 1, 1),
               'coords': ((0.0, 0.0, 0.0),
                          (0.6300326, 0.6300326, 0.6300326),
                          (-0.6300326, -0.6300326, 0.6300326),
                          (-0.6300326, 0.6300326, -0.6300326),
                          (0.6300326, -0.6300326, -0.6300326))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(ch4))
        expected_xyz = {'symbols': ('C', 'H', 'H', 'H', 'H'), 'isotopes': (12, 1, 1, 1, 1),
                        'coords': ((0.0, 0.0, 1.7247449281419015e-09), (0.0, 0.0, 1.0912484598518606),
                                   (0.0, 1.0288389097014583, -0.363749493462701),
                                   (0.8910006322033469, -0.5144194548507294, -0.363749493462701),
                                   (-0.8910006322033468, -0.5144194548507296, -0.363749493462701))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        n2h2 = {'symbols': ('N', 'N', 'H', 'H'),
                'isotopes': (14, 14, 1, 1),
                'coords': ((-0.5092886779079191, 0.35793982922935974, -0.009272171569141162),
                           (0.509288673134674, -0.3579398256646019, 0.009272133629072029),
                           (-1.3789597692428337, -0.1947244046215175, 0.019430178519009387),
                           (1.3789597740160853, 0.19472440105675842, -0.0194301405789408))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(n2h2))
        expected_xyz = {'symbols': ('N', 'N', 'H', 'H'), 'isotopes': (14, 14, 1, 1),
                        'coords': ((-2.5668207844061266e-09, -2.6770271428814674e-09, -0.6225607242852181),
                                   (-2.5668207844061266e-09, -2.6770271428814674e-09, 0.6225607237007525),
                                   (-2.5668207844061266e-09, 0.9528576592978217, -1.0158186576982358),
                                   (7.389543487977147e-08, -0.9528575849067161, 1.0158186658190074))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        h2nn = {'symbols': ('N', 'N', 'H', 'H'),
                'isotopes': (14, 14, 1, 1),
                'coords': ((1.3546347608168492, -0.015322539977107492, -0.015327345703300993),
                           (-0.0986192196858452, 0.0011155018627852027, 0.0011158328655407426),
                           (-0.6378749227822363, -0.8648316328267205, 0.0067050159766062715),
                           (-0.6181406183487707, 0.8790386709410358, 0.007506496861156013))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(h2nn))
        expected_xyz = {'symbols': ('N', 'N', 'H', 'H'), 'isotopes': (14, 14, 1, 1),
                        'coords': ((2.2665346650049726e-09, 0.0, -0.811059071806946),
                                   (2.2665346650049726e-09, 0.0, 0.6423808321967149),
                                   (2.2665346650049726e-09, 0.8719908550360964, 1.1718372716686782),
                                   (-6.525058771462697e-08, -0.871990855036094, 1.1718372716686782))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        ch3nh2 = {'symbols': ('C', 'N', 'H', 'H', 'H', 'H', 'H'),
                  'isotopes': (12, 14, 1, 1, 1, 1, 1),
                  'coords': ((-0.5742286697040887, -0.016697712230008085, 0.012292129335517637),
                             (0.8208404422996248, 0.0827910406364399, -0.37769346207107873),
                             (-1.0573700464459694, -0.8406777190695487, -0.5200749387254854),
                             (-1.1021146811862017, 0.9087986699874372, -0.233830111412309),
                             (-0.6613312758198031, -0.19490561834917827, 1.0878511105273783),
                             (0.8805462585895368, 0.2662583233797538, -1.3784337589325522),
                             (1.2797264656423253, -0.8145252774119457, -0.22619079977298262))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(ch3nh2))
        expected_xyz = {'symbols': ('C', 'N', 'H', 'H', 'H', 'H', 'H'), 'isotopes': (12, 14, 1, 1, 1, 1, 1),
                        'coords': ((0.001939789401803491, -0.03323727019980954, -0.7342369835009073),
                                   (0.001939789401803491, -0.03323727019980954, 0.7177288706477947),
                                   (0.001939789401803491, 0.9929898597416031, -1.1119159128512566),
                                   (-0.8909289133409809, -0.5391301461035987, -1.1119159128512566),
                                   (0.886471529131673, -0.5487130707054766, -1.119023182175499),
                                   (-0.837454777168941, 0.4351501262113398, 1.0564563288179245),
                                   (0.7899235185003657, 0.5172639870024125, 1.0564563288179245))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        co2 = {'symbols': ('O', 'C', 'O'), 'isotopes': (16, 12, 16),
               'coords': ((-1.4050000037154526, 0.0, 0.0), (7.654677848880926e-10, 0.0, 0.0),
                          (1.4050000029499874, 0.0, 0.0))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(co2))
        expected_xyz = {'symbols': ('O', 'C', 'O'), 'isotopes': (16, 12, 16),
                        'coords': ((0.0, 0.0, -1.404999961513641), (0.0, 0.0, 0.0), (0.0, 0.0, 1.404999961513641))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        xyz = converter.zmat_to_xyz(xyz_to_zmat(co2), keep_dummy=True)
        expected_xyz = {'symbols': ('O', 'C', 'O', 'X'), 'isotopes': (16, 12, 16, None),
                        'coords': ((0.0, 0.0, -1.404999961513641), (0.0, 0.0, 0.0),
                                   (0.0, 0.0, 1.404999961513641), (0.0, 1.0, 0.0))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        c4h2 = {'symbols': ('C', 'C', 'C', 'C', 'H', 'H'),
                'isotopes': (12, 12, 12, 12, 1, 1),
                'coords': ((1.9347068234896196, 0.14242236392968965, -0.7789155813431534),
                           (0.7562146287478744, 0.0556682378383746, -0.5699560840680622),
                           (-0.7562146066837767, -0.05566842139925123, -0.30178597715544486),
                           (-1.934706835483623, -0.14242232018660442, -0.09282659654307752),
                           (2.980433323377626, 0.21940305800927, -0.964334055207275),
                           (-2.9804333334477184, -0.2194029181914813, 0.09259194953859241))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(c4h2))
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'H', 'H'), 'isotopes': (12, 12, 12, 12, 1, 1),
                        'coords': ((0.0, 0.0, -1.9700391224235911), (0.0, 0.0, -0.7700248680574546),
                                   (0.0, 0.0, 0.7700248765254258), (0.0, 0.0, 1.9700391308915624),
                                   (0.0, 0.0, -3.0348630222722885), (0.0, 0.0, 3.0348628206189163))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        xyz = converter.zmat_to_xyz(xyz_to_zmat(c4h2), keep_dummy=True)
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'H', 'H', 'X', 'X', 'X', 'X'),
                        'isotopes': (12, 12, 12, 12, 1, 1, None, None, None, None),
                        'coords': ((0.0, 0.0, -1.9700391224235911), (0.0, 0.0, -0.7700248680574546),
                                   (0.0, 0.0, 0.7700248765254258), (0.0, 0.0, 1.9700391308915624),
                                   (0.0, 0.0, -3.0348630222722877), (0.0, 0.0, 3.0348628206189154),
                                   (0.0, 0.9999999999999999, -0.7700248680574546),
                                   (-0.3552525359451073, 0.9347703652259042, 0.7700248765254258),
                                   (-0.9866800457161726, -0.16267294607749294, 1.9700391308915624),
                                   (-0.43604279750539987, 0.8999259295873548, -3.0348630222722877))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        benzene = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H'),
                   'isotopes': (12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1),
                   'coords': ((-1.2216577, 0.66078741, -0.12826463), (-1.19107395, -0.72551307, 0.0226491),
                              (0.03058375, -1.38630048, 0.15091368), (1.22165769, -0.66078741, 0.12826459),
                              (1.19107394, 0.72551306, -0.02264913), (-0.03058375, 1.38630047, -0.15091376),
                              (-2.17346972, 1.17561691, -0.22819747), (-2.1190577, -1.2907713, 0.04029543),
                              (0.05441202, -2.46638819, 0.26849287), (2.17346971, -1.17561688, 0.22819756),
                              (2.1190577, 1.29077128, -0.04029534), (-0.054412, 2.46638819, -0.26849291))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(benzene))
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1),
                        'coords': ((2.8802002460017624e-08, -1.2079546929724265, -0.6974129612047755),
                                   (2.8802002460017624e-08, -1.2079546929724265, 0.6974128933531158),
                                   (2.8802002460017624e-08, -1.060647629724798e-07, 1.3948258847089468),
                                   (-1.2767047161392347e-08, 1.2079545449585916, 0.6974130044047506),
                                   (-4.533613514615403e-08, 1.2079546731899735, -0.6974128501531349),
                                   (-2.733621427172375e-08, 1.5039801248839524e-07, -1.3948259525605944),
                                   (-9.25425083412892e-08, -2.149090234269196, -1.2407783150313003),
                                   (-4.732096529568059e-08, -2.1490905040349153, 1.2407775836937787),
                                   (4.3303326526144725e-08, -2.446953808465935e-07, 2.4815558619164566),
                                   (1.3603280232379253e-08, 2.149090449363762, 1.2407783366502623),
                                   (4.34845437808648e-08, 2.1490910490372905, -1.2407775620747585),
                                   (2.79630538907893e-08, 9.546517221181716e-07, -2.481556126005945))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz, rtol=1e-4, atol=1e-6))

        c8h16 = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H',
                             'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                 'isotopes': (12, 12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                 'coords': ((-3.73804162, 1.02185982, -0.62471855), (-3.2959048, -0.29941353, -0.0153832),
                            (-4.1802739, -1.42923989, -0.45733859), (-4.92681853, -2.16702002, 0.37927323),
                            (-5.80381366, -3.30445522, -0.06153101), (-7.27503241, -3.02330579, 0.2501747),
                            (-8.1665309, -4.18607038, -0.18659165), (-9.63004684, -3.91231246, 0.12122189),
                            (-4.71816645, 0.90998677, -1.09931319), (-3.81976065, 1.80347272, 0.13824996),
                            (-3.02940465, 1.36240671, -1.38730862), (-3.28992409, -0.20865728, 1.07707644),
                            (-2.26691171, -0.51693974, -0.32353365), (-4.19188582, -1.64644738, -1.52378216),
                            (-4.90893783, -1.95532479, 1.44672557), (-5.48010458, -4.21353093, 0.45929995),
                            (-5.68375, -3.4933649, -1.13530057), (-7.40094036, -2.85022075, 1.32657917),
                            (-7.59322772, -2.10566607, -0.26086886), (-7.85727263, -5.10495013, 0.32499636),
                            (-8.05202084, -4.3593735, -1.26295702), (-9.78445799, -3.76628373, 1.19507643),
                            (-10.24903818, -4.75613294, -0.19928843), (-9.97996487, -3.01641183, -0.40151446))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(c8h16))
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H',
                                    'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 12, 12,
                                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((-1.2185042029813413, -2.854169880482862, -2.347297733645527),
                                   (-1.2185042029813413, -2.854169880482862, -0.8265947152571576),
                                   (-1.2185042029813413, -1.4562260361596158, -0.27915172387566844),
                                   (-0.23443980140093146, -0.9494656527307501, 0.4800443784609385),
                                   (-0.23917949622704926, 0.4459896884150232, 1.0367036378511556),
                                   (0.9313890665572648, 1.2652021910731794, 0.4895738849394964),
                                   (0.9344056763522759, 2.681426599905939, 1.0656420180199948),
                                   (2.096115725209919, 3.500189210885019, 0.5256143682143488),
                                   (-1.0223320167279955, -1.8456639125970216, -2.72522919271524),
                                   (-0.4446536349728971, -3.519859524519952, -2.7444505448749257),
                                   (-2.1859800894571935, -3.1817622025062153, -2.7427161963994187),
                                   (-0.3502337131089073, -3.4179039165088367, -0.4659688085495364),
                                   (-2.1113186101853003, -3.3747248183142418, -0.4618946157043686),
                                   (-2.083421408663313, -0.8414219024563088, -0.5211220735721738),
                                   (0.6266266043696853, -1.5668466873566844, 0.7290310074390094),
                                   (-0.1711427309037492, 0.38337109671863834, 2.129370614217813),
                                   (-1.184084429186584, 0.9527245229608097, 0.8054947005674014),
                                   (1.8793029255790965, 0.768989055138829, 0.7338884411975255),
                                   (0.8691153649492929, 1.3150676425573447, -0.6050092086901158),
                                   (1.0022553011184483, 2.638555685599051, 2.1589216960168716),
                                   (-0.006690536312293105, 3.186232055763592, 0.8182182827567788),
                                   (3.054717550512243, 3.039120773978961, 0.784128069435635),
                                   (2.0787767471283862, 4.5087491545869, 0.950379236234153),
                                   (2.04013969542135, 3.589446382557107, -0.5639843498420027))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        c6h8 = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                'isotopes': (12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1),
                'coords': ((3.484414, -0.21032486, -0.274436), (2.16607832, -0.08689715, -0.46809924),
                           (1.27407619, 0.47709453, 0.51277922), (-0.00343262, 0.57953734, 0.29099902),
                           (-1.28096118, 0.6854582, 0.07097112), (-2.1633229, -0.44663594, 0.19618165),
                           (-3.48135896, -0.37616688, -0.02419077), (3.96738638, 0.1104313, 0.64307756),
                           (4.11508134, -0.64262981, -1.04510384), (1.73146925, -0.42487761, -1.40727399),
                           (1.67852166, 0.82026228, 1.45972638), (-1.69282248, 1.64730262, -0.2176039),
                           (-1.72138262, -1.39887451, 0.48444475), (-4.10455181, -1.25858029, 0.08321349),
                           (-3.97140753, 0.54797717, -0.31365155))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(c6h8), keep_dummy=True)
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'X'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, None),
                        'coords': ((-0.36210643719854524, -0.7287026553295086, -3.4140332734367114),
                                   (-0.36210643719854524, -0.7287026553295086, -2.0758445672282337),
                                   (-0.36210643719854524, 0.4769564503088999, -1.2870079609413985),
                                   (-0.3599067808557084, 0.4389786104618052, 0.013093219306063553),
                                   (-0.3577071245128716, 0.40100077061471096, 1.3131943995535256),
                                   (0.8468310448243594, 0.13739793806980627, 2.0584986432761507),
                                   (0.8854471270356505, 0.08878753473080014, 3.3952465029362244),
                                   (-0.3633940549440338, 0.19736208984239967, -3.993559044450964),
                                   (-0.360850359382502, -1.6568815557179044, -3.968079035123602),
                                   (-0.358872218841816, -1.6750534344227543, -1.547367745379268),
                                   (-0.36086231339344244, 1.4417717701099573, -1.7887636709920853),
                                   (-1.2859313144243567, 0.5678192145710643, 1.850446141256727),
                                   (1.761865569629809, -0.028607592126397186, 1.4925571545701315),
                                   (1.8188875375125138, -0.11379779178853389, 3.911165928963306),
                                   (0.002341500078365477, 0.2467816493253312, 4.006129916303265),
                                   (-0.9939270680342991, 1.2119332445204258, 0.036745050805573776))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        sonch = {'symbols': ('S', 'O', 'N', 'C', 'H', 'H', 'H'),
                 'isotopes': (32, 16, 14, 12, 1, 1, 1),
                 'coords': ((1.02558264, -0.04344404, -0.07343859),
                            (-0.25448248, 1.10710477, 0.18359696),
                            (-1.30762173, 0.15796567, -0.1048929),
                            (-0.49011438, -1.0370438, 0.15365747),
                            (-0.6486995, -1.85796321, -0.54773423),
                            (-0.60359153, -1.37304859, 1.18613964),
                            (-1.43009127, 0.23517346, -1.11797908))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(sonch))
        expected_xyz = {'symbols': ('S', 'O', 'N', 'C', 'H', 'H', 'H'), 'isotopes': (32, 16, 14, 12, 1, 1, 1),
                        'coords': ((0.09086497971009742, -0.6022696064891687, -0.8037939484344221),
                                   (0.09086497971009742, -0.6022696064891687, 0.9364349464082398),
                                   (0.09086497971009742, 0.8407366190318651, 1.040963589014531),
                                   (-0.4349019294429647, 1.076454954019503, -0.3122622455141109),
                                   (0.028114748189396924, 1.910749041545842, -0.8419575371101325),
                                   (-1.52224280623178, 1.1728628343239977, -0.2984404834134725),
                                   (1.0852425276009905, 1.0824893634517299, 1.0324597287345518))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        n3h5 = {'symbols': ('N', 'H', 'H', 'N', 'H', 'N', 'H', 'H'),
                'isotopes': (14, 1, 1, 14, 1, 14, 1, 1),
                'coords': ((-1.1997440839, -0.1610052059, 0.0274738287),
                           (-1.4016624407, -0.6229695533, -0.848703408),
                           (-1.8759e-06, 1.2861082773, 0.592607787),
                           (8.52e-07, 0.5651072858, -0.1124621525),
                           (-1.1294692206, -0.8709078271, 0.7537518889),
                           (1.1997613019, -0.1609980472, 0.0274604887),
                           (1.1294795781, -0.870899855, 0.7537444446),
                           (1.4015274689, -0.6230592706, -0.8487058662))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(n3h5))
        expected_xyz = {'symbols': ('N', 'H', 'H', 'N', 'H', 'N', 'H', 'H'), 'isotopes': (14, 1, 1, 14, 1, 14, 1, 1),
                        'coords': ((-0.0019467239104149596, -0.4591148546119658, -1.1263518730257214),
                                   (-0.9497121922031914, -0.3200415794960789, -1.4492571653337563),
                                   (0.8268192568185732, -0.9482297291967061, 0.584440004586354),
                                   (-0.0019467239104149596, -0.4591148546119658, 0.2829774970430068),
                                   (0.5768754160530515, 0.2881649184586983, -1.5043967428680436),
                                   (-0.0019467239104149596, 0.7998950714993157, 0.9163228594327795),
                                   (0.5768807305811304, 1.4734254062731509, 0.41862373428428445),
                                   (-0.9497178196041145, 1.1508638890652452, 0.9370183889281745))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

        phenanthrene = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                                    'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
                                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((3.032666557133464, -2.31946773410356, -0.2005909214711227),
                                   (1.7965966323727525, -2.726769481545662, 0.1131944823160859),
                                   (0.6001022450168033, -1.823716095575642, 0.09610348164662497),
                                   (0.8656212227956182, -0.38322721155806344, -0.3059007396686369),
                                   (-0.20384687365076506, 0.5538578830402723, -0.35330127405658207),
                                   (-1.615850257373334, 0.11793810515744706, -0.0021083813167320125),
                                   (-2.666631210484685, 1.1839819667026763, -0.08462331623575792),
                                   (-2.408432554722245, 2.448108762765795, -0.44175285637152395),
                                   (-1.0384672839219615, 2.9343382425800866, -0.7981390069853233),
                                   (0.05354493654580599, 1.8901268527378152, -0.7281328101572656),
                                   (1.360345163459102, 2.2800367851044663, -1.0498125324207495),
                                   (2.4062888753907306, 1.3635648690195294, -1.0034533310613403),
                                   (2.1741200125893454, 0.03204590442949366, -0.6341438700725668),
                                   (3.3537347060642184, -0.9141772130421169, -0.6034663330286769),
                                   (3.857416971199899, -3.0258691251257033, -0.1680561641739474),
                                   (1.6284948936766175, -3.761751698143623, 0.3981237205775182),
                                   (-0.12876728204316892, -2.2546376246861692, -0.6003879601412826),
                                   (0.1647188432433128, -1.8335631217240267, 1.1022788475462293),
                                   (-1.6193441692533277, -0.27033274566077425, 1.0232110277361828),
                                   (-1.9128335130279017, -0.6914121934743168, -0.6794549801644719),
                                   (-3.683901780650125, 0.8930548728345359, 0.16266783139886437),
                                   (-3.216883510106505, 3.172742016232346, -0.48160893631158447),
                                   (-1.072894198165549, 3.336201536383572, -1.818157150389412),
                                   (-0.7800775196988431, 3.75631208054777, -0.11938284836659853),
                                   (1.568722832673161, 3.307517543615306, -1.3398308108979469),
                                   (3.4111451729908047, 1.6931590170230992, -1.2581692640326767),
                                   (4.100057564417453, -0.5197380000819599, 0.09691660839857347),
                                   (3.8072448171754303, -0.9398527056749205, -1.60185770224936))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(phenanthrene))
        expected_xyz = {'symbols': ('C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                                    'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12,
                                     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((7.911382125423709e-07, -3.338152939760946, -1.4438267167522898),
                                   (7.911382125423709e-07, -3.338152939760946, -0.10508685882766478),
                                   (7.911382125423709e-07, -2.087091658207869, 0.7208932933542134),
                                   (7.334316814434194e-07, -0.7823338854702322, -0.056746049599103676),
                                   (7.756132275357522e-07, 0.461180486740155, 0.6344912658123898),
                                   (3.1023082899735583e-06, 0.4894876520167424, 2.153146755914322),
                                   (2.8951933029195698e-06, 1.851424741030327, 2.7796648383100226),
                                   (1.8063564462576765e-06, 2.98843484152714, 2.072959497617675),
                                   (1.7834310789025551e-06, 3.022001897674605, 0.5765945339210672),
                                   (7.723853138415003e-07, 1.6680168246650164, -0.09756732834220494),
                                   (7.462490583939202e-07, 1.6287702377915214, -1.4981722440874858),
                                   (-2.0718994220754048e-07, 0.4126091483231842, -2.1742050699809354),
                                   (-3.2007433136130587e-06, -0.7976618982687378, -1.4681750292862097),
                                   (-4.042876952122207e-06, -2.0849895975401944, -2.2622513412058103),
                                   (-1.0445215285855445e-05, -4.28144538194839, -1.982783692188394),
                                   (-1.6388260652294144e-05, -4.28281753326838, 0.4317912365380152),
                                   (-0.8891840742814868, -2.1146368541531095, 1.3617171347386894),
                                   (0.8891617447563548, -2.1146411813757275, 1.3617204659698767),
                                   (0.8891641687716763, -0.04023411780879327, 2.5148279607524477),
                                   (-0.889181650273688, -0.040232370878044765, 2.5148278414886533),
                                   (-8.620800751545502e-06, 1.8941224070789455, 3.865395027507038),
                                   (-2.472625954141286e-06, 3.9441300169529963, 2.589603991055773),
                                   (-0.887136350554352, 3.576522992360744, 0.2470351937727544),
                                   (0.8871435437193286, 3.576514991315934, 0.2470379221750163),
                                   (1.327490168244476e-07, 2.553402480625905, -2.0711487345389674),
                                   (-2.9920951513460036e-06, 0.411143774705224, -3.261976167653983),
                                   (0.8871317748977916, -2.0978164781507203, -2.9071771100077357),
                                   (-0.8871481193751964, -2.097812158260123, -2.907184543451197))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz, rtol=1e-4, atol=1e-6))

        crazy = {'symbols': ('C', 'S', 'C', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'N', 'O', 'C', 'C', 'C', 'O',
                             'C', 'H', 'H', 'C', 'O', 'O', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                             'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                 'isotopes': (12, 32, 12, 12, 12, 16, 12, 12, 12, 12, 12, 14, 16, 12, 12, 12, 16, 12, 1, 1, 12, 16,
                              16, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                 'coords': ((0.3274026, -2.26751349, 1.63049586), (-0.45583669, -0.69403507, 2.07966011),
                            (-0.74998553, 0.1674721, 0.40294571), (-1.00035074, -0.91486831, -0.69963969),
                            (-1.36275248, -0.4211373, -2.10180028), (-1.2751424, -1.51271695, -3.01524455),
                            (0.52137932, 1.03702992, 0.05827308), (1.87071211, 0.36242919, -0.0942956),
                            (2.27157054, -0.19914345, -1.31148631), (3.52325995, -0.81277227, -1.43688167),
                            (4.40522429, -0.88047028, -0.3550893), (5.67765022, -1.44973252, -0.47213753),
                            (6.14232632, -2.01780812, -1.64786894), (4.01787295, -0.28926955, 0.85080026),
                            (2.76727967, 0.32378873, 0.98226698), (-2.03762393, 1.15227615, 0.57400664),
                            (-2.08528422, 1.91614517, -0.66817021), (-3.07850461, 2.79943864, -0.89330921),
                            (-3.01406475, 3.29649809, -1.84791173), (-3.82602922, 2.99925098, -0.14930564),
                            (-3.34048249, 0.30576028, 0.76061402), (-4.43606057, 1.09150052, 1.25094611),
                            (-5.5667201, 0.17784882, 1.34169192), (-1.87366601, 2.15813122, 1.74584475),
                            (-0.38980918, -2.92765906, 1.13662409), (0.64993945, -2.7631856, 2.55083355),
                            (1.20742139, -2.132265, 1.00223888), (-1.7923623, -1.60504973, -0.3796867),
                            (-0.1173514, -1.55329785, -0.81227132), (-2.38336335, -0.03585664, -2.15575528),
                            (-0.67883648, 0.35169141, -2.45761307), (-2.10902199, -1.54645788, -3.51490053),
                            (0.34538583, 1.60264434, -0.86560486), (0.65096478, 1.81353001, 0.82157824),
                            (1.62059278, -0.16895436, -2.18187181), (3.79727304, -1.2511092, -2.39297007),
                            (6.19600818, -1.66693258, 0.37451698), (6.3095366, -1.24260293, -2.21706522),
                            (4.68937879, -0.29721399, 1.70527737), (2.49834754, 0.7695989, 1.93797335),
                            (-3.65415206, -0.1279457, -0.19458068), (-3.18902405, -0.502595, 1.48133547),
                            (-5.67928065, 0.23893607, 2.30792673), (-1.02113438, 2.82848721, 1.61108522),
                            (-2.77629877, 2.75649408, 1.89754068), (-1.71528969, 1.64716863, 2.70183805))}
        xyz = converter.zmat_to_xyz(xyz_to_zmat(crazy))
        expected_xyz = {'symbols': ('C', 'S', 'C', 'C', 'C', 'O', 'C', 'C', 'C', 'C', 'C', 'N', 'O', 'C', 'C', 'C',
                                    'O', 'C', 'H', 'H', 'C', 'O', 'O', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                                    'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 32, 12, 12, 12, 16, 12, 12, 12, 12, 12, 14, 16, 12, 12, 12, 16, 12, 1, 1, 12,
                                     16, 16, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((-0.6137613955258476, -2.092311904610491, -1.6459978544252085),
                                   (-0.6137613955258476, -2.092311904610491, 0.16812634733587362),
                                   (-0.6137613955258476, -0.24046592013457468, 0.6272083175363872),
                                   (-1.3744410794571005, 0.5676974847189897, -0.4764567253986083),
                                   (-1.576816124415619, 2.065622526905396, -0.23891950314015964),
                                   (-2.025190225605998, 2.671101216252729, -1.4496874000267845),
                                   (0.8834881106130998, 0.2444573623215347, 0.7471743004372355),
                                   (1.798704697910799, 0.15327239878541876, -0.45828272093245137),
                                   (1.8412826700558853, 1.1687915694678015, -1.4197983902742346),
                                   (2.696517599561571, 1.071648823004712, -2.52348642559127),
                                   (3.5298496061242695, -0.03686840789055568, -2.6951439334968432),
                                   (4.423373009638812, -0.13205514440246935, -3.767236952726962),
                                   (4.523236688341723, 0.8384474222891809, -4.751680994042289),
                                   (3.511469016392926, -1.0347484394367652, -1.716559885862223),
                                   (2.657358563251665, -0.9436752250316995, -0.6123368746056645),
                                   (-1.338792530764695, -0.09274456106632356, 2.07966211118939),
                                   (-1.1314238325662234, 1.301787660973408, 2.45522578499296),
                                   (-1.6599975634752346, 1.7919075757535974, 3.594424622566481),
                                   (-1.4483334346743875, 2.8358488118002603, 3.761374099341869),
                                   (-2.2002460843848084, 1.1613198743500677, 4.27468181936708),
                                   (-2.864460143178646, -0.4174523564397583, 1.9541430391331691),
                                   (-3.4820446576733506, -0.6381600608865727, 3.2300669820564156),
                                   (-4.887577843599055, -0.895906763881511, 2.948237024310359),
                                   (-0.6844618373997587, -0.9825215524467403, 3.171440103795841),
                                   (-1.5747931925417271, -1.7428397486104807, -2.031200759873655),
                                   (-0.47851528451203795, -3.122826979089325, -1.9873030382824364),
                                   (0.1972579054460767, -1.49666229793525, -2.0641861008321203),
                                   (-2.3644138336938254, 0.12671752515424606, -0.6539195456410438),
                                   (-0.8610790571374175, 0.47111108633342047, -1.4393152104393672),
                                   (-2.33352246536131, 2.2670589205027083, 0.522538000766746),
                                   (-0.6508878081124041, 2.56755037989058, 0.04801849591442919),
                                   (-2.8221411069091884, 3.1889330661762916, -1.242640339415089),
                                   (0.9100740029207297, 1.2883022196596166, 1.0849977910110213),
                                   (1.3824162217067886, -0.3059494367909472, 1.5537114671384973),
                                   (1.213154280456347, 2.0515673316718077, -1.328058873102219),
                                   (2.694363444641115, 1.8721370140641351, -3.2587020993340285),
                                   (4.850119585093404, -1.031805706706496, -3.9697979209049263),
                                   (4.971429560211808, 1.5740410344579128, -4.29242878794834),
                                   (4.166650269981901, -1.897641680977177, -1.8018074558240567),
                                   (2.667279713926132, -1.742187297217789, 0.12707241523730084),
                                   (-3.393777896948052, 0.41377747747947247, 1.4768945402149385),
                                   (-3.0303934678157933, -1.32434535167179, 1.3660710625604848),
                                   (-4.90170334683976, -1.8089549635496402, 3.289051481285635),
                                   (0.36316277686315934, -0.7286838416760149, 3.351430520457394),
                                   (-1.2302772946188338, -0.9327113437321211, 4.117695570883975),
                                   (-0.7013695841551866, -2.042831211415979, 2.8965760870233277))}
        self.assertTrue(almost_equal_coords_lists(xyz, expected_xyz))

    def test_zmat_to_str(self):
        """Test converting a zmat to xyz"""
        zmat0 = {'symbols': ('C', 'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None),
                            ('R_1|2|3|4_0|0|0|0', None, None),
                            ('R_1|2|3|4_0|0|0|0', 'A_2|3|4_0|0|0_1|1|1', None),
                            ('R_1|2|3|4_0|0|0|0', 'A_2|3|4_0|0|0_1|1|1', 'D_3_0_1_2'),
                            ('R_1|2|3|4_0|0|0|0', 'A_2|3|4_0|0|0_1|1|1', 'D_4_0_1_2')),
                 'vars': {'R_1|2|3|4_0|0|0|0': 1.0912484581271156,
                          'A_2|3|4_0|0|0_1|1|1': 109.47122114377756,
                          'D_3_0_1_2': 120.00000000000001,
                          'D_4_0_1_2': 239.99999999999997},
                 'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4}}
        expected_zmat_str_01 = """  C
  H       1    1.0912
  H       1    1.0912       2  109.4712
  H       1    1.0912       2  109.4712       3  120.0000
  H       1    1.0912       2  109.4712       3  240.0000
"""
        expected_zmat_str_02 = """  C
  H,       1,    1.0912
  H,       1,    1.0912,       2,  109.4712
  H,       1,    1.0912,       2,  109.4712,       3,  120.0000
  H,       1,    1.0912,       2,  109.4712,       3,  240.0000
"""
        expected_zmat_str_03 = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2
Variables:
A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912
"""
        expected_zmat_str_04 = """A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912

  C
  H,       1,      R1
  H,       1,      R1,       2,      A1
  H,       1,      R1,       2,      A1,       3,      D1
  H,       1,      R1,       2,      A1,       3,      D2
"""
        expected_zmat_str_05 = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2

A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912
"""

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='gaussian', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_01)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='molpro', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_02)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='orca', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_01)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='qchem', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_01)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='psi4', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_01)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='gaussian', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_03)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='molpro', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_04)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='orca', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_01)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='qchem', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_05)

        zmat_str = converter.zmat_to_str(zmat0, zmat_format='psi4', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_05)

        zmat1 = {'symbols': ('N', 'C', 'X', 'C', 'C', 'C', 'C', 'C', 'C',
                             'C', 'X', 'C', 'H', 'H', 'H', 'H', 'X', 'H'),
                 'coords': ((None, None, None),
                            ('R_1_0', None, None),
                            ('RX_2|10|16_1|9|11', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16', None),
                            ('R_3_1', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16',
                             'DX_3|11|17_1|9|11_2|10|16_0|7|7'),
                            ('R_4_3', 'A_4_3_1', 'D_4_3_1_0'),
                            ('R_5_3', 'A_5_3_4', 'D_5|9_3|7_4|8_1|6'),
                            ('R_6_4', 'A_6_4_3', 'D_6_4_3_5'),
                            ('R_7_5', 'A_7_5_3', 'D_7|8_5|6_3|4_4|3'),
                            ('R_8_6', 'A_8_6_4', 'D_7|8_5|6_3|4_4|3'),
                            ('R_9_7', 'A_9_7_8', 'D_5|9_3|7_4|8_1|6'),
                            ('RX_2|10|16_1|9|11', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16', 'DX_10_9_7_8'),
                            ('R_11_9', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16',
                             'DX_3|11|17_1|9|11_2|10|16_0|7|7'),
                            ('R_12_8', 'A_12_8_6', 'D_12|13|14_8|6|4_6|8|6_4|7|8'),
                            ('R_13_6', 'A_13_6_8', 'D_12|13|14_8|6|4_6|8|6_4|7|8'),
                            ('R_14|15_4|5', 'A_14_4_6', 'D_12|13|14_8|6|4_6|8|6_4|7|8'),
                            ('R_14|15_4|5', 'A_15_5_7', 'D_15_5_7_9'),
                            ('RX_2|10|16_1|9|11', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16', 'DX_16_11_7_9'),
                            ('R_17_11', 'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16',
                             'DX_3|11|17_1|9|11_2|10|16_0|7|7')),
                 'vars': {'R_1_0': 1.160587988259717, 'R_3_1': 1.4334034806467013, 'R_4_3': 1.399627009160122,
                          'A_4_3_1': 120.07019183443934, 'D_4_3_1_0': 359.9937872737281,
                          'R_5_3': 1.399473903784766, 'A_5_3_4': 119.881331942158, 'R_6_4': 1.3958533508611464,
                          'A_6_4_3': 120.08126334426318, 'D_6_4_3_5': 359.9999896133953,
                          'R_7_5': 1.3971923740671386, 'A_7_5_3': 119.9563068700548, 'R_8_6': 1.3959594593665048,
                          'A_8_6_4': 119.9482566876851, 'R_9_7': 1.4305023206087322, 'A_9_7_8': 120.02391642181419,
                          'DX_10_9_7_8': 179.99687489419622, 'R_11_9': 1.2007843136670773,
                          'R_12_8': 1.0880999543508234, 'A_12_8_6': 119.53324505705585,
                          'R_13_6': 1.0875755415362989, 'A_13_6_8': 119.9515345136673,
                          'A_14_4_6': 119.41761055861897, 'A_15_5_7': 119.8756160539422,
                          'DX_16_11_7_9': 179.99364917335183, 'R_17_11': 1.0653051483625748,
                          'RX_2|10|16_1|9|11': 1.0, 'R_14|15_4|5': 1.088721623781535,
                          'AX_2|3|10|11|16|17_1|1|9|9|11|11_0|2|7|10|7|16': 90.0,
                          'DX_3|11|17_1|9|11_2|10|16_0|7|7': 180.0,
                          'D_12|13|14_8|6|4_6|8|6_4|7|8': 180.00000001419417,
                          'D_5|9_3|7_4|8_1|6': 180.0000026484778, 'D_15_5_7_9': 7.778248095798993e-06,
                          'D_7|8_5|6_3|4_4|3': 6.434770254282058e-06},
                 'map': {0: 5, 1: 4, 2: 'X', 3: 3, 4: 2, 5: 6, 6: 1, 7: 7, 8: 0, 9: 8, 10: 'X', 11: 9, 12: 10,
                         13: 11, 14: 12, 15: 13, 16: 'X', 17: 14}}
        expected_zmat_str_11 = """  N
  C       1    1.1606
  X       2    1.0000       1   90.0000
  C       2    1.4334       3   90.0000       1  180.0000
  C       4    1.3996       2  120.0702       1  359.9938
  C       4    1.3995       5  119.8813       2  180.0000
  C       5    1.3959       4  120.0813       6  360.0000
  C       6    1.3972       4  119.9563       5    0.0000
  C       7    1.3960       5  119.9483       4    0.0000
  C       8    1.4305       9  120.0239       7  180.0000
  X      10    1.0000       8   90.0000       9  179.9969
  C      10    1.2008      11   90.0000       8  180.0000
  H       9    1.0881       7  119.5332       5  180.0000
  H       7    1.0876       9  119.9515       8  180.0000
  H       5    1.0887       7  119.4176       9  180.0000
  H       6    1.0887       8  119.8756      10    0.0000
  X      12    1.0000       8   90.0000      10  179.9936
  H      12    1.0653      17   90.0000       8  180.0000
"""
        expected_zmat_str_12 = """  N
  C,       1,    1.1606
  X,       2,    1.0000,       1,   90.0000
  C,       2,    1.4334,       3,   90.0000,       1,  180.0000
  C,       4,    1.3996,       2,  120.0702,       1,  359.9938
  C,       4,    1.3995,       5,  119.8813,       2,  180.0000
  C,       5,    1.3959,       4,  120.0813,       6,  360.0000
  C,       6,    1.3972,       4,  119.9563,       5,    0.0000
  C,       7,    1.3960,       5,  119.9483,       4,    0.0000
  C,       8,    1.4305,       9,  120.0239,       7,  180.0000
  X,      10,    1.0000,       8,   90.0000,       9,  179.9969
  C,      10,    1.2008,      11,   90.0000,       8,  180.0000
  H,       9,    1.0881,       7,  119.5332,       5,  180.0000
  H,       7,    1.0876,       9,  119.9515,       8,  180.0000
  H,       5,    1.0887,       7,  119.4176,       9,  180.0000
  H,       6,    1.0887,       8,  119.8756,      10,    0.0000
  X,      12,    1.0000,       8,   90.0000,      10,  179.9936
  H,      12,    1.0653,      17,   90.0000,       8,  180.0000
"""
        expected_zmat_str_13 = """  N
  C       1    1.1606
 DA       2    1.0000       1   90.0000
  C       2    1.4334       3   90.0000       1  180.0000
  C       4    1.3996       2  120.0702       1  359.9938
  C       4    1.3995       5  119.8813       2  180.0000
  C       5    1.3959       4  120.0813       6  360.0000
  C       6    1.3972       4  119.9563       5    0.0000
  C       7    1.3960       5  119.9483       4    0.0000
  C       8    1.4305       9  120.0239       7  180.0000
 DA      10    1.0000       8   90.0000       9  179.9969
  C      10    1.2008      11   90.0000       8  180.0000
  H       9    1.0881       7  119.5332       5  180.0000
  H       7    1.0876       9  119.9515       8  180.0000
  H       5    1.0887       7  119.4176       9  180.0000
  H       6    1.0887       8  119.8756      10    0.0000
 DA      12    1.0000       8   90.0000      10  179.9936
  H      12    1.0653      17   90.0000       8  180.0000
"""
        expected_zmat_str_14 = """  N
  C       1      R1
  X       2      R2       1      A1
  C       2      R3       3      A1       1      D1
  C       4      R4       2      A2       1      D2
  C       4      R5       5      A3       2      D3
  C       5      R6       4      A4       6      D4
  C       6      R7       4      A5       5      D5
  C       7      R8       5      A6       4      D5
  C       8      R9       9      A7       7      D3
  X      10      R2       8      A1       9      D6
  C      10     R10      11      A1       8      D1
  H       9     R11       7      A8       5      D7
  H       7     R12       9      A9       8      D7
  H       5     R13       7     A10       9      D7
  H       6     R13       8     A11      10      D8
  X      12      R2       8      A1      10      D9
  H      12     R14      17      A1       8      D1
Variables:
A10=119.4176
A11=119.8756
A1=90.0000
A2=120.0702
A3=119.8813
A4=120.0813
A5=119.9563
A6=119.9483
A7=120.0239
A8=119.5332
A9=119.9515
D1=180.0000
D2=359.9938
D3=180.0000
D4=360.0000
D5=0.0000
D6=179.9969
D7=180.0000
D8=0.0000
D9=179.9936
R10=1.2008
R11=1.0881
R12=1.0876
R13=1.0887
R14=1.0653
R1=1.1606
R2=1.0000
R3=1.4334
R4=1.3996
R5=1.3995
R6=1.3959
R7=1.3972
R8=1.3960
R9=1.4305
"""
        expected_zmat_str_15 = """A10=119.4176
A11=119.8756
A1=90.0000
A2=120.0702
A3=119.8813
A4=120.0813
A5=119.9563
A6=119.9483
A7=120.0239
A8=119.5332
A9=119.9515
D1=180.0000
D2=359.9938
D3=180.0000
D4=360.0000
D5=0.0000
D6=179.9969
D7=180.0000
D8=0.0000
D9=179.9936
R10=1.2008
R11=1.0881
R12=1.0876
R13=1.0887
R14=1.0653
R1=1.1606
R2=1.0000
R3=1.4334
R4=1.3996
R5=1.3995
R6=1.3959
R7=1.3972
R8=1.3960
R9=1.4305

  N
  C,       1,      R1
  X,       2,      R2,       1,      A1
  C,       2,      R3,       3,      A1,       1,      D1
  C,       4,      R4,       2,      A2,       1,      D2
  C,       4,      R5,       5,      A3,       2,      D3
  C,       5,      R6,       4,      A4,       6,      D4
  C,       6,      R7,       4,      A5,       5,      D5
  C,       7,      R8,       5,      A6,       4,      D5
  C,       8,      R9,       9,      A7,       7,      D3
  X,      10,      R2,       8,      A1,       9,      D6
  C,      10,     R10,      11,      A1,       8,      D1
  H,       9,     R11,       7,      A8,       5,      D7
  H,       7,     R12,       9,      A9,       8,      D7
  H,       5,     R13,       7,     A10,       9,      D7
  H,       6,     R13,       8,     A11,      10,      D8
  X,      12,      R2,       8,      A1,      10,      D9
  H,      12,     R14,      17,      A1,       8,      D1
"""
        expected_zmat_str_16 = """  N
  C       1      R1
  X       2      R2       1      A1
  C       2      R3       3      A1       1      D1
  C       4      R4       2      A2       1      D2
  C       4      R5       5      A3       2      D3
  C       5      R6       4      A4       6      D4
  C       6      R7       4      A5       5      D5
  C       7      R8       5      A6       4      D5
  C       8      R9       9      A7       7      D3
  X      10      R2       8      A1       9      D6
  C      10     R10      11      A1       8      D1
  H       9     R11       7      A8       5      D7
  H       7     R12       9      A9       8      D7
  H       5     R13       7     A10       9      D7
  H       6     R13       8     A11      10      D8
  X      12      R2       8      A1      10      D9
  H      12     R14      17      A1       8      D1

A10=119.4176
A11=119.8756
A1=90.0000
A2=120.0702
A3=119.8813
A4=120.0813
A5=119.9563
A6=119.9483
A7=120.0239
A8=119.5332
A9=119.9515
D1=180.0000
D2=359.9938
D3=180.0000
D4=360.0000
D5=0.0000
D6=179.9969
D7=180.0000
D8=0.0000
D9=179.9936
R10=1.2008
R11=1.0881
R12=1.0876
R13=1.0887
R14=1.0653
R1=1.1606
R2=1.0000
R3=1.4334
R4=1.3996
R5=1.3995
R6=1.3959
R7=1.3972
R8=1.3960
R9=1.4305
"""

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='gaussian', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_11)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='molpro', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_12)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='orca', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_13)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='qchem', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_11)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='psi4', consolidate=False)
        self.assertEqual(zmat_str, expected_zmat_str_11)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='gaussian', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_14)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='molpro', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_15)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='orca', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_13)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='qchem', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_16)

        zmat_str = converter.zmat_to_str(zmat1, zmat_format='psi4', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_16)

        zmat2 = {'symbols': ('C', 'O', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'N', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                             'C', 'C', 'N', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C', 'C',
                             'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                             'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H',
                             'H', 'H', 'H', 'H'),
                 'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                            ('R_3_2', 'A_3_2_1', 'D_3_2_1_0'), ('R_4_2', 'A_4_2_3', 'D_4_2_3_1'),
                            ('R_5_3', 'A_5_3_2', 'D_5_3_2_4'), ('R_6_4', 'A_6_4_2', 'D_6_4_2_3'),
                            ('R_7_4', 'A_7_4_6', 'D_7_4_6_5'), ('R_8_5', 'A_8_5_3', 'D_8_5_3_7'),
                            ('R_9_7', 'A_9_7_4', 'D_9_7_4_6'), ('R_10_8', 'A_10_8_5', 'D_10_8_5_3'),
                            ('R_11_9', 'A_11_9_7', 'D_11_9_7_4'), ('R_12|13_10|10', 'A_12_10_8', 'D_12_10_8_5'),
                            ('R_12|13_10|10', 'A_13_10_12', 'D_13_10_12_11'),
                            ('R_14_11', 'A_14_11_9', 'D_14_11_9_7'), ('R_15_11', 'A_15_11_14', 'D_15_11_14_13'),
                            ('R_16_14', 'A_16_14_11', 'D_16_14_11_15'), ('R_17_14', 'A_17_14_16', 'D_17_14_16_15'),
                            ('R_18_15', 'A_18_15_11', 'D_18_15_11_14'), ('R_19_15', 'A_19_15_18', 'D_19_15_18_17'),
                            ('R_20_16', 'A_20_16_14', 'D_20_16_14_19'), ('R_21_17', 'A_21_17_14', 'D_21_17_14_16'),
                            ('R_22_18', 'A_22_18_15', 'D_22_18_15_21'), ('R_23_18', 'A_23_18_22', 'D_23_18_22_21'),
                            ('R_24_22', 'A_24_22_18', 'D_24_22_18_23'), ('R_25_22', 'A_25_22_24', 'D_25_22_24_23'),
                            ('R_26_23', 'A_26_23_18', 'D_26_23_18_22'), ('R_27_23', 'A_27_23_26', 'D_27_23_26_25'),
                            ('R_28|29_24|25', 'A_28_24_22', 'D_28_24_22_27'),
                            ('R_28|29_24|25', 'A_29_25_22', 'D_29_25_22_24'),
                            ('R_30_26', 'A_30_26_23', 'D_30_26_23_29'), ('R_31_27', 'A_31_27_23', 'D_31_27_23_26'),
                            ('R_32_28', 'A_32_28_24', 'D_32_28_24_31'), ('R_33_30', 'A_33_30_26', 'D_33_30_26_32'),
                            ('R_34_0', 'A_34_0_1', 'D_34_0_1_33'), ('R_35|36_0|0', 'A_35_0_1', 'D_35_0_1_34'),
                            ('R_35|36_0|0', 'A_36_0_1', 'D_36_0_1_35'), ('R_37_3', 'A_37_3_5', 'D_37_3_5_36'),
                            ('R_38_5', 'A_38_5_3', 'D_38_5_3_37'),
                            ('R_39|62|63_6|33|31', 'A_39|61_6|30_8|33', 'D_39_6_8_5'),
                            ('R_40_7', 'A_40_7_4', 'D_40_7_4_6'), ('R_41|45_7|16', 'A_41_7_4', 'D_41_7_4_6'),
                            ('R_42_9', 'A_42_9_7', 'D_42_9_7_4'), ('R_43_11', 'A_43_11_14', 'D_43_11_14_16'),
                            ('R_44|69_14|13', 'A_44_14_16', 'D_44_14_16_20'),
                            ('R_41|45_7|16', 'A_45_16_20', 'D_45_16_20_44'),
                            ('R_46|67_16|12', 'A_46_16_20', 'D_46_16_20_45'),
                            ('R_47_20', 'A_47_20_16', 'D_47_20_16_46'),
                            ('R_48|71_20|13', 'A_48_20_16', 'D_48_20_16_47'),
                            ('R_49_21', 'A_49_21_17', 'D_49_21_17_48'), ('R_50_21', 'A_50_21_17', 'D_50_21_17_49'),
                            ('R_51_17', 'A_51_17_21', 'D_51_17_21_50'), ('R_52_17', 'A_52_17_21', 'D_52_17_21_51'),
                            ('R_53_15', 'A_53_15_18', 'D_53_15_18_22'), ('R_54_18', 'A_54_18_22', 'D_54_18_22_24'),
                            ('R_55|61_24|30', 'A_55_24_28', 'D_55_24_28_32'),
                            ('R_56_28', 'A_56_28_32', 'D_56_28_32_55'), ('R_57_32', 'A_57_32_28', 'D_57_32_28_56'),
                            ('R_58_29', 'A_58_29_32', 'D_58_29_32_28'), ('R_59_25', 'A_59_25_29', 'D_59_25_29_32'),
                            ('R_60_26', 'A_60_26_30', 'D_60_26_30_33'),
                            ('R_55|61_24|30', 'A_39|61_6|30_8|33', 'D_61_30_33_60'),
                            ('R_39|62|63_6|33|31', 'A_62_33_30', 'D_62_33_30_61'),
                            ('R_39|62|63_6|33|31', 'A_63_31_33', 'D_63_31_33_30'),
                            ('R_64_27', 'A_64_27_31', 'D_64_27_31_33'), ('R_65_10', 'A_65_10_12', 'D_65_10_12_64'),
                            ('R_66_12', 'A_66_12_10', 'D_66_12_10_65'),
                            ('R_46|67_16|12', 'A_67_12_10', 'D_67_12_10_66'),
                            ('R_68_12', 'A_68_12_10', 'D_68_12_10_67'),
                            ('R_44|69_14|13', 'A_69_13_10', 'D_69_13_10_12'),
                            ('R_70_13', 'A_70_13_10', 'D_70_13_10_12'),
                            ('R_48|71_20|13', 'A_71_13_10', 'D_71_13_10_12')),
                 'vars': {'R_1_0': 1.4068711074782032, 'R_2_1': 1.3620388633039997, 'A_2_1_0': 117.81232558560784,
                          'R_3_2': 1.391372651128763, 'A_3_2_1': 124.30442082983046,
                          'D_3_2_1_0': 358.80053488528563, 'R_4_2': 1.407165314230306,
                          'A_4_2_3': 120.22693948333985, 'D_4_2_3_1': 179.7643774197255,
                          'R_5_3': 1.395461939277298, 'A_5_3_2': 119.73931773168835,
                          'D_5_3_2_4': 0.30910214744821457, 'R_6_4': 1.3877359017886286,
                          'A_6_4_2': 118.48974827202117, 'D_6_4_2_3': 359.11497147002314,
                          'R_7_4': 1.5088674382960545, 'A_7_4_6': 122.38406068272145,
                          'D_7_4_6_5': 180.25417879927906, 'R_8_5': 1.3900031510324233,
                          'A_8_5_3': 121.44469623059197, 'D_8_5_3_7': 0.5027472760190826,
                          'R_9_7': 1.4539199623473884, 'A_9_7_4': 112.21823538125288,
                          'D_9_7_4_6': 14.242037171848425, 'R_10_8': 1.5148894107856192,
                          'A_10_8_5': 121.17080095438938, 'D_10_8_5_3': 179.9597843354432,
                          'R_11_9': 1.458829940527558, 'A_11_9_7': 113.36650018284135,
                          'D_11_9_7_4': 173.834760621422, 'A_12_10_8': 111.64086954581774,
                          'D_12_10_8_5': 116.98497014249006, 'A_13_10_12': 110.85810373139734,
                          'D_13_10_12_11': 274.0460801662506, 'R_14_11': 1.5441580908685246,
                          'A_14_11_9': 110.96750832787642, 'D_14_11_9_7': 65.76967583715182,
                          'R_15_11': 1.5658713019482593, 'A_15_11_14': 106.10459226441324,
                          'D_15_11_14_13': 257.4049853604813, 'R_16_14': 1.5344969908783297,
                          'A_16_14_11': 108.8913587403986, 'D_16_14_11_15': 48.05688175736311,
                          'R_17_14': 1.5311976054044314, 'A_17_14_16': 108.49034048752937,
                          'D_17_14_16_15': 91.23995113317, 'R_18_15': 1.5451815033749894,
                          'A_18_15_11': 116.11845152538739, 'D_18_15_11_14': 146.22047073574328,
                          'R_19_15': 1.4673758226459452, 'A_19_15_18': 110.7852411579366,
                          'D_19_15_18_17': 62.01563663336134, 'R_20_16': 1.5497385358243323,
                          'A_20_16_14': 107.53566674813322, 'D_20_16_14_19': 351.2483905859404,
                          'R_21_17': 1.5462718519857788, 'A_21_17_14': 106.97932503747639,
                          'D_21_17_14_16': 293.048840478175, 'R_22_18': 1.5217756548342598,
                          'A_22_18_15': 110.6461222572256, 'D_22_18_15_21': 272.8016532613752,
                          'R_23_18': 1.5205844867168337, 'A_23_18_22': 110.88052896008966,
                          'D_23_18_22_21': 176.9274014626608, 'R_24_22': 1.3973414212027988,
                          'A_24_22_18': 121.46148754423552, 'D_24_22_18_23': 48.483057110257214,
                          'R_25_22': 1.3956596873816258, 'A_25_22_24': 118.32252922839507,
                          'D_25_22_24_23': 155.19218465708076, 'R_26_23': 1.3989838539838766,
                          'A_26_23_18': 123.40300309756425, 'D_26_23_18_22': 264.6937408441694,
                          'R_27_23': 1.4014860627797747, 'A_27_23_26': 117.86550410924565,
                          'D_27_23_26_25': 222.36333363654833, 'A_28_24_22': 120.88443385017754,
                          'D_28_24_22_27': 227.76707495071304, 'A_29_25_22': 121.04662788690233,
                          'D_29_25_22_24': 0.15222637990797427, 'R_30_26': 1.394073496683031,
                          'A_30_26_23': 120.95614937868622, 'D_30_26_23_29': 126.53572469389098,
                          'R_31_27': 1.3890980255767607, 'A_31_27_23': 121.36857503495831,
                          'D_31_27_23_26': 359.77985644401133, 'R_32_28': 1.3930402205740813,
                          'A_32_28_24': 120.23752381147851, 'D_32_28_24_31': 268.62324089632773,
                          'R_33_30': 1.390793650826528, 'A_33_30_26': 120.37525896699913,
                          'D_33_30_26_32': 66.57244008197594, 'R_34_0': 1.0911855880062449,
                          'A_34_0_1': 106.14081893106686, 'D_34_0_1_33': 259.90390819354144,
                          'A_35_0_1': 111.62128410536447, 'D_35_0_1_34': 241.16372138544352,
                          'A_36_0_1': 111.66742192220599, 'D_36_0_1_35': 237.70696149500208,
                          'R_37_3': 1.0848714961586419, 'A_37_3_5': 119.37285834333473,
                          'D_37_3_5_36': 62.67906989420941, 'R_38_5': 1.088518492286195,
                          'A_38_5_3': 118.92620006821393, 'D_38_5_3_37': 0.16155928445680842,
                          'D_39_6_8_5': 179.0306314544242, 'R_40_7': 1.1049040845091331,
                          'A_40_7_4': 108.86879068201986, 'D_40_7_4_6': 139.3906437684841,
                          'A_41_7_4': 108.59126141516668, 'D_41_7_4_6': 253.62050153797705,
                          'R_42_9': 1.0182559049694069, 'A_42_9_7': 107.11973040523138,
                          'D_42_9_7_4': 55.10057236176582, 'R_43_11': 1.107980039165429,
                          'A_43_11_14': 107.85441775901623, 'D_43_11_14_16': 291.70546551063177,
                          'A_44_14_16': 109.65746800014512, 'D_44_14_16_20': 171.72368834876247,
                          'A_45_16_20': 111.24450807891851, 'D_45_16_20_44': 233.89755520678503,
                          'A_46_16_20': 111.29692848764192, 'D_46_16_20_45': 241.0468305740966,
                          'R_47_20': 1.096849083662209, 'A_47_20_16': 111.09616229392863,
                          'D_47_20_16_46': 16.449617902450537, 'A_48_20_16': 111.52503768612455,
                          'D_48_20_16_47': 240.7618062149115, 'R_49_21': 1.0940959928126268,
                          'A_49_21_17': 110.13443680950392, 'D_49_21_17_48': 217.77189854569497,
                          'R_50_21': 1.096719688440126, 'A_50_21_17': 111.62985686445653,
                          'D_50_21_17_49': 241.05422281949743, 'R_51_17': 1.0977381339703496,
                          'A_51_17_21': 111.44776831381952, 'D_51_17_21_50': 15.528289052443741,
                          'R_52_17': 1.094598059892181, 'A_52_17_21': 110.53147774341073,
                          'D_52_17_21_51': 240.39865996976488, 'R_53_15': 1.0982909624400494,
                          'A_53_15_18': 106.429357164818, 'D_53_15_18_22': 61.470751869183154,
                          'R_54_18': 1.0970296462720617, 'A_54_18_22': 106.96777284646672,
                          'D_54_18_22_24': 164.41040442499542, 'A_55_24_28': 119.47619426431699,
                          'D_55_24_28_32': 181.48222884297238, 'R_56_28': 1.08730126242135,
                          'A_56_28_32': 120.0587532127532, 'D_56_28_32_55': 181.72714726324057,
                          'R_57_32': 1.086078113261693, 'A_57_32_28': 120.2651297728285,
                          'D_57_32_28_56': 0.1885577391117047, 'R_58_29': 1.0870685313396384,
                          'A_58_29_32': 120.07908990555488, 'D_58_29_32_28': 179.96387750780062,
                          'R_59_25': 1.0874930019811209, 'A_59_25_29': 119.67416329184535,
                          'D_59_25_29_32': 180.66442828925082, 'R_60_26': 1.086517453558622,
                          'A_60_26_30': 118.87966199467574, 'D_60_26_30_33': 180.36117265862282,
                          'D_61_30_33_60': 180.46795995787124, 'A_62_33_30': 120.34351414488708,
                          'D_62_33_30_61': 359.8441625328373, 'A_63_31_33': 120.1876734578171,
                          'D_63_31_33_30': 179.8727443598017, 'R_64_27': 1.0887706765139673,
                          'A_64_27_31': 119.71596042006831, 'D_64_27_31_33': 180.68549262930415,
                          'R_65_10': 1.0986729593359108, 'A_65_10_12': 107.51123289481629,
                          'D_65_10_12_64': 165.62060869603135, 'R_66_12': 1.0960386581877504,
                          'A_66_12_10': 110.99193387843255, 'D_66_12_10_65': 180.6436999847381,
                          'A_67_12_10': 110.90607858329234, 'D_67_12_10_66': 119.70065256970501,
                          'R_68_12': 1.0957071504841942, 'A_68_12_10': 111.15695171088588,
                          'D_68_12_10_67': 120.53155191727633, 'A_69_13_10': 111.13656189059795,
                          'D_69_13_10_12': 182.12620964839553, 'R_70_13': 1.0958250253360018,
                          'A_70_13_10': 111.10194518361305, 'D_70_13_10_12': 62.241824998638606,
                          'A_71_13_10': 110.8095963043876, 'D_71_13_10_12': 302.5342816974694,
                          'R_12|13_10|10': 1.5313937839809675, 'R_28|29_24|25': 1.3915166242825472,
                          'R_35|36_0|0': 1.0980711183126348, 'R_39|62|63_6|33|31': 1.0869053245812599,
                          'R_41|45_7|16': 1.0984625788982956, 'R_44|69_14|13': 1.0952809653577469,
                          'R_46|67_16|12': 1.096203285865352, 'R_48|71_20|13': 1.096367755118811,
                          'R_55|61_24|30': 1.0866606245254218, 'A_39|61_6|30_8|33': 120.08274154017411},
                 'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 7, 5: 4, 6: 6, 7: 8, 8: 5, 9: 9, 10: 31, 11: 10, 12: 32,
                         13: 33, 14: 11, 15: 17, 16: 12, 17: 16, 18: 18, 19: 14, 20: 13, 21: 15, 22: 19, 23: 25,
                         24: 20, 25: 24, 26: 26, 27: 30, 28: 21, 29: 23, 30: 27, 31: 29, 32: 22, 33: 28, 34: 34,
                         35: 35, 36: 36, 37: 37, 38: 38, 39: 39, 40: 40, 41: 41, 42: 42, 43: 43, 44: 44, 45: 45,
                         46: 46, 47: 47, 48: 48, 49: 49, 50: 50, 51: 51, 52: 52, 53: 53, 54: 54, 55: 55, 56: 56,
                         57: 57, 58: 58, 59: 59, 60: 60, 61: 61, 62: 62, 63: 63, 64: 64, 65: 65, 66: 66, 67: 67,
                         68: 68, 69: 69, 70: 70, 71: 71}}
        expected_zmat_str_2 = """  C
  O       1      R1
  C       2      R2       1      A1
  C       3      R3       2      A2       1      D1
  C       3      R4       4      A3       2      D2
  C       4      R5       3      A4       5      D3
  C       5      R6       3      A5       4      D4
  C       5      R7       7      A6       6      D5
  C       6      R8       4      A7       8      D6
  N       8      R9       5      A8       7      D7
  C       9     R10       6      A9       4      D8
  C      10     R11       8     A10       5      D9
  C      11     R12       9     A11       6     D10
  C      11     R12      13     A12      12     D11
  C      12     R13      10     A13       8     D12
  C      12     R14      15     A14      14     D13
  C      15     R15      12     A15      16     D14
  C      15     R16      17     A16      16     D15
  C      16     R17      12     A17      15     D16
  N      16     R18      19     A18      18     D17
  C      17     R19      15     A19      20     D18
  C      18     R20      15     A20      17     D19
  C      19     R21      16     A21      22     D20
  C      19     R22      23     A22      22     D21
  C      23     R23      19     A23      24     D22
  C      23     R24      25     A24      24     D23
  C      24     R25      19     A25      23     D24
  C      24     R26      27     A26      26     D25
  C      25     R27      23     A27      28     D26
  C      26     R27      23     A28      25     D27
  C      27     R28      24     A29      30     D28
  C      28     R29      24     A30      27     D29
  C      29     R30      25     A31      32     D30
  C      31     R31      27     A32      33     D31
  H       1     R32       2     A33      34     D32
  H       1     R33       2     A34      35     D33
  H       1     R33       2     A35      36     D34
  H       4     R34       6     A36      37     D35
  H       6     R35       4     A37      38     D36
  H       7     R36       9     A38       6     D37
  H       8     R37       5     A39       7     D38
  H       8     R38       5     A40       7     D39
  H      10     R39       8     A41       5     D40
  H      12     R40      15     A42      17     D41
  H      15     R41      17     A43      21     D42
  H      17     R38      21     A44      45     D43
  H      17     R42      21     A45      46     D44
  H      21     R43      17     A46      47     D45
  H      21     R44      17     A47      48     D46
  H      22     R45      18     A48      49     D47
  H      22     R46      18     A49      50     D48
  H      18     R47      22     A50      51     D49
  H      18     R48      22     A51      52     D50
  H      16     R49      19     A52      23     D51
  H      19     R50      23     A53      25     D52
  H      25     R51      29     A54      33     D53
  H      29     R52      33     A55      56     D54
  H      33     R53      29     A56      57     D55
  H      30     R54      33     A57      29     D56
  H      26     R55      30     A58      33     D57
  H      27     R56      31     A59      34     D58
  H      31     R51      34     A38      61     D59
  H      34     R36      31     A60      62     D60
  H      32     R36      34     A61      31     D61
  H      28     R57      32     A62      34     D62
  H      11     R58      13     A63      65     D63
  H      13     R59      11     A64      66     D64
  H      13     R42      11     A65      67     D65
  H      13     R60      11     A66      68     D66
  H      14     R41      11     A67      13     D67
  H      14     R61      11     A68      13     D68
  H      14     R44      11     A69      13     D69
Variables:
A10=113.3665
A11=111.6409
A12=110.8581
A13=110.9675
A14=106.1046
A15=108.8914
A16=108.4903
A17=116.1185
A18=110.7852
A19=107.5357
A1=117.8123
A20=106.9793
A21=110.6461
A22=110.8805
A23=121.4615
A24=118.3225
A25=123.4030
A26=117.8655
A27=120.8844
A28=121.0466
A29=120.9561
A2=124.3044
A30=121.3686
A31=120.2375
A32=120.3753
A33=106.1408
A34=111.6213
A35=111.6674
A36=119.3729
A37=118.9262
A38=120.0827
A39=108.8688
A3=120.2269
A40=108.5913
A41=107.1197
A42=107.8544
A43=109.6575
A44=111.2445
A45=111.2969
A46=111.0962
A47=111.5250
A48=110.1344
A49=111.6299
A4=119.7393
A50=111.4478
A51=110.5315
A52=106.4294
A53=106.9678
A54=119.4762
A55=120.0588
A56=120.2651
A57=120.0791
A58=119.6742
A59=118.8797
A5=118.4897
A60=120.3435
A61=120.1877
A62=119.7160
A63=107.5112
A64=110.9919
A65=110.9061
A66=111.1570
A67=111.1366
A68=111.1019
A69=110.8096
A6=122.3841
A7=121.4447
A8=112.2182
A9=121.1708
D10=116.9850
D11=274.0461
D12=65.7697
D13=257.4050
D14=48.0569
D15=91.2400
D16=146.2205
D17=62.0156
D18=351.2484
D19=293.0488
D1=358.8005
D20=272.8017
D21=176.9274
D22=48.4831
D23=155.1922
D24=264.6937
D25=222.3633
D26=227.7671
D27=0.1522
D28=126.5357
D29=359.7799
D2=179.7644
D30=268.6232
D31=66.5724
D32=259.9039
D33=241.1637
D34=237.7070
D35=62.6791
D36=0.1616
D37=179.0306
D38=139.3906
D39=253.6205
D3=0.3091
D40=55.1006
D41=291.7055
D42=171.7237
D43=233.8976
D44=241.0468
D45=16.4496
D46=240.7618
D47=217.7719
D48=241.0542
D49=15.5283
D4=359.1150
D50=240.3987
D51=61.4708
D52=164.4104
D53=181.4822
D54=181.7271
D55=0.1886
D56=179.9639
D57=180.6644
D58=180.3612
D59=180.4680
D5=180.2542
D60=359.8442
D61=179.8727
D62=180.6855
D63=165.6206
D64=180.6437
D65=119.7007
D66=120.5316
D67=182.1262
D68=62.2418
D69=302.5343
D6=0.5027
D7=14.2420
D8=179.9598
D9=173.8348
R10=1.5149
R11=1.4588
R12=1.5314
R13=1.5442
R14=1.5659
R15=1.5345
R16=1.5312
R17=1.5452
R18=1.4674
R19=1.5497
R1=1.4069
R20=1.5463
R21=1.5218
R22=1.5206
R23=1.3973
R24=1.3957
R25=1.3990
R26=1.4015
R27=1.3915
R28=1.3941
R29=1.3891
R2=1.3620
R30=1.3930
R31=1.3908
R32=1.0912
R33=1.0981
R34=1.0849
R35=1.0885
R36=1.0869
R37=1.1049
R38=1.0985
R39=1.0183
R3=1.3914
R40=1.1080
R41=1.0953
R42=1.0962
R43=1.0968
R44=1.0964
R45=1.0941
R46=1.0967
R47=1.0977
R48=1.0946
R49=1.0983
R4=1.4072
R50=1.0970
R51=1.0867
R52=1.0873
R53=1.0861
R54=1.0871
R55=1.0875
R56=1.0865
R57=1.0888
R58=1.0987
R59=1.0960
R5=1.3955
R60=1.0957
R61=1.0958
R6=1.3877
R7=1.5089
R8=1.3900
R9=1.4539
"""
        zmat_str = converter.zmat_to_str(zmat2, zmat_format='gaussian', consolidate=True)
        self.assertEqual(zmat_str, expected_zmat_str_2)

    def test_str_to_zmat(self):
        """Test generating a zmat from a string representation"""
        zmat_str_0 = """  N
  C       1    1.1606
  X       2    1.0000       1   90.0000
  C       2    1.4334       3   90.0000       1  180.0000
  C       4    1.3996       2  120.0702       1  359.9938
  C       4    1.3995       5  119.8813       2  180.0000
  C       5    1.3959       4  120.0813       6  360.0000
  C       6    1.3972       4  119.9563       5    0.0000
  C       7    1.3960       5  119.9483       4    0.0000
  C       8    1.4305       9  120.0239       7  180.0000
  X      10    1.0000       8   90.0000       9  179.9969
  C      10    1.2008      11   90.0000       8  180.0000
  H       9    1.0881       7  119.5332       5  180.0000
  H       7    1.0876       9  119.9515       8  180.0000
  H       5    1.0887       7  119.4176       9  180.0000
  H       6    1.0887       8  119.8756      10    0.0000
  X      12    1.0000       8   90.0000      10  179.9936
  H      12    1.0653      17   90.0000       8  180.0000
"""
        zmat_str_1 = """  N
  C       1      R1
  X       2      R2       1      A1
  C       2      R3       3      A1       1      D1
  C       4      R4       2      A2       1      D2
  C       4      R5       5      A3       2      D3
  C       5      R6       4      A4       6      D4
  C       6      R7       4      A5       5      D5
  C       7      R8       5      A6       4      D5
  C       8      R9       9      A7       7      D3
  X      10      R2       8      A1       9      D6
  C      10     R10      11      A1       8      D1
  H       9     R11       7      A8       5      D7
  H       7     R12       9      A9       8      D7
  H       5     R13       7     A10       9      D7
  H       6     R13       8     A11      10      D8
  X      12      R2       8      A1      10      D9
  H      12     R14      17      A1       8      D1

A10=119.4176
A11=119.8756
A1=90.0000
A2=120.0702
A3=119.8813
A4=120.0813
A5=119.9563
A6=119.9483
A7=120.0239
A8=119.5332
A9=119.9515
D1=180.0000
D2=359.9938
D3=180.0000
D4=360.0000
D5=0.0000
D6=179.9969
D7=180.0000
D8=0.0000
D9=179.9936
R10=1.2008
R11=1.0881
R12=1.0876
R13=1.0887
R14=1.0653
R1=1.1606
R2=1.0000
R3=1.4334
R4=1.3996
R5=1.3995
R6=1.3959
R7=1.3972
R8=1.3960
R9=1.4305
"""
        zmat_str_2 = """  C
          O       1      R1
          C       2      R2       1      A1
          C       3      R3       2      A2       1      D1
          C       3      R4       4      A3       2      D2
          C       4      R5       3      A4       5      D3
          C       5      R6       3      A5       4      D4
          C       5      R7       7      A6       6      D5
          C       6      R8       4      A7       8      D6
          N       8      R9       5      A8       7      D7
          C       9     R10       6      A9       4      D8
          C      10     R11       8     A10       5      D9
          C      11     R12       9     A11       6     D10
          C      11     R12      13     A12      12     D11
          C      12     R13      10     A13       8     D12
          C      12     R14      15     A14      14     D13
          C      15     R15      12     A15      16     D14
          C      15     R16      17     A16      16     D15
          C      16     R17      12     A17      15     D16
          N      16     R18      19     A18      18     D17
          C      17     R19      15     A19      20     D18
          C      18     R20      15     A20      17     D19
          C      19     R21      16     A21      22     D20
          C      19     R22      23     A22      22     D21
          C      23     R23      19     A23      24     D22
          C      23     R24      25     A24      24     D23
          C      24     R25      19     A25      23     D24
          C      24     R26      27     A26      26     D25
          C      25     R27      23     A27      28     D26
          C      26     R27      23     A28      25     D27
          C      27     R28      24     A29      30     D28
          C      28     R29      24     A30      27     D29
          C      29     R30      25     A31      32     D30
          C      31     R31      27     A32      33     D31
          H       1     R32       2     A33      34     D32
          H       1     R33       2     A34      35     D33
          H       1     R33       2     A35      36     D34
          H       4     R34       6     A36      37     D35
          H       6     R35       4     A37      38     D36
          H       7     R36       9     A38       6     D37
          H       8     R37       5     A39       7     D38
          H       8     R38       5     A40       7     D39
          H      10     R39       8     A41       5     D40
          H      12     R40      15     A42      17     D41
          H      15     R41      17     A43      21     D42
          H      17     R38      21     A44      45     D43
          H      17     R42      21     A45      46     D44
          H      21     R43      17     A46      47     D45
          H      21     R44      17     A47      48     D46
          H      22     R45      18     A48      49     D47
          H      22     R46      18     A49      50     D48
          H      18     R47      22     A50      51     D49
          H      18     R48      22     A51      52     D50
          H      16     R49      19     A52      23     D51
          H      19     R50      23     A53      25     D52
          H      25     R51      29     A54      33     D53
          H      29     R52      33     A55      56     D54
          H      33     R53      29     A56      57     D55
          H      30     R54      33     A57      29     D56
          H      26     R55      30     A58      33     D57
          H      27     R56      31     A59      34     D58
          H      31     R51      34     A38      61     D59
          H      34     R36      31     A60      62     D60
          H      32     R36      34     A61      31     D61
          H      28     R57      32     A62      34     D62
          H      11     R58      13     A63      65     D63
          H      13     R59      11     A64      66     D64
          H      13     R42      11     A65      67     D65
          H      13     R60      11     A66      68     D66
          H      14     R41      11     A67      13     D67
          H      14     R61      11     A68      13     D68
          H      14     R44      11     A69      13     D69
        Variables:
        A10=113.3665
        A11=111.6409
        A12=110.8581
        A13=110.9675
        A14=106.1046
        A15=108.8914
        A16=108.4903
        A17=116.1185
        A18=110.7852
        A19=107.5357
        A1=117.8123
        A20=106.9793
        A21=110.6461
        A22=110.8805
        A23=121.4615
        A24=118.3225
        A25=123.4030
        A26=117.8655
        A27=120.8844
        A28=121.0466
        A29=120.9561
        A2=124.3044
        A30=121.3686
        A31=120.2375
        A32=120.3753
        A33=106.1408
        A34=111.6213
        A35=111.6674
        A36=119.3729
        A37=118.9262
        A38=120.0827
        A39=108.8688
        A3=120.2269
        A40=108.5913
        A41=107.1197
        A42=107.8544
        A43=109.6575
        A44=111.2445
        A45=111.2969
        A46=111.0962
        A47=111.5250
        A48=110.1344
        A49=111.6299
        A4=119.7393
        A50=111.4478
        A51=110.5315
        A52=106.4294
        A53=106.9678
        A54=119.4762
        A55=120.0588
        A56=120.2651
        A57=120.0791
        A58=119.6742
        A59=118.8797
        A5=118.4897
        A60=120.3435
        A61=120.1877
        A62=119.7160
        A63=107.5112
        A64=110.9919
        A65=110.9061
        A66=111.1570
        A67=111.1366
        A68=111.1019
        A69=110.8096
        A6=122.3841
        A7=121.4447
        A8=112.2182
        A9=121.1708
        D10=116.9850
        D11=274.0461
        D12=65.7697
        D13=257.4050
        D14=48.0569
        D15=91.2400
        D16=146.2205
        D17=62.0156
        D18=351.2484
        D19=293.0488
        D1=358.8005
        D20=272.8017
        D21=176.9274
        D22=48.4831
        D23=155.1922
        D24=264.6937
        D25=222.3633
        D26=227.7671
        D27=0.1522
        D28=126.5357
        D29=359.7799
        D2=179.7644
        D30=268.6232
        D31=66.5724
        D32=259.9039
        D33=241.1637
        D34=237.7070
        D35=62.6791
        D36=0.1616
        D37=179.0306
        D38=139.3906
        D39=253.6205
        D3=0.3091
        D40=55.1006
        D41=291.7055
        D42=171.7237
        D43=233.8976
        D44=241.0468
        D45=16.4496
        D46=240.7618
        D47=217.7719
        D48=241.0542
        D49=15.5283
        D4=359.1150
        D50=240.3987
        D51=61.4708
        D52=164.4104
        D53=181.4822
        D54=181.7271
        D55=0.1886
        D56=179.9639
        D57=180.6644
        D58=180.3612
        D59=180.4680
        D5=180.2542
        D60=359.8442
        D61=179.8727
        D62=180.6855
        D63=165.6206
        D64=180.6437
        D65=119.7007
        D66=120.5316
        D67=182.1262
        D68=62.2418
        D69=302.5343
        D6=0.5027
        D7=14.2420
        D8=179.9598
        D9=173.8348
        R10=1.5149
        R11=1.4588
        R12=1.5314
        R13=1.5442
        R14=1.5659
        R15=1.5345
        R16=1.5312
        R17=1.5452
        R18=1.4674
        R19=1.5497
        R1=1.4069
        R20=1.5463
        R21=1.5218
        R22=1.5206
        R23=1.3973
        R24=1.3957
        R25=1.3990
        R26=1.4015
        R27=1.3915
        R28=1.3941
        R29=1.3891
        R2=1.3620
        R30=1.3930
        R31=1.3908
        R32=1.0912
        R33=1.0981
        R34=1.0849
        R35=1.0885
        R36=1.0869
        R37=1.1049
        R38=1.0985
        R39=1.0183
        R3=1.3914
        R40=1.1080
        R41=1.0953
        R42=1.0962
        R43=1.0968
        R44=1.0964
        R45=1.0941
        R46=1.0967
        R47=1.0977
        R48=1.0946
        R49=1.0983
        R4=1.4072
        R50=1.0970
        R51=1.0867
        R52=1.0873
        R53=1.0861
        R54=1.0871
        R55=1.0875
        R56=1.0865
        R57=1.0888
        R58=1.0987
        R59=1.0960
        R5=1.3955
        R60=1.0957
        R61=1.0958
        R6=1.3877
        R7=1.5089
        R8=1.3900
        R9=1.4539
        """
        expected_zmat = {'symbols': ('N', 'C', 'X', 'C', 'C', 'C', 'C', 'C', 'C',
                                     'C', 'X', 'C', 'H', 'H', 'H', 'H', 'X', 'H'),
                         'coords': ((None, None, None), ('R_1_0', None, None), ('R_2_1', 'A_2_1_0', None),
                                    ('R_3_1', 'A_3_1_2', 'D_3_1_2_0'), ('R_4_3', 'A_4_3_1', 'D_4_3_1_0'),
                                    ('R_5_3', 'A_5_3_4', 'D_5_3_4_1'), ('R_6_4', 'A_6_4_3', 'D_6_4_3_5'),
                                    ('R_7_5', 'A_7_5_3', 'D_7_5_3_4'), ('R_8_6', 'A_8_6_4', 'D_8_6_4_3'),
                                    ('R_9_7', 'A_9_7_8', 'D_9_7_8_6'), ('R_10_9', 'A_10_9_7', 'D_10_9_7_8'),
                                    ('R_11_9', 'A_11_9_10', 'D_11_9_10_7'), ('R_12_8', 'A_12_8_6', 'D_12_8_6_4'),
                                    ('R_13_6', 'A_13_6_8', 'D_13_6_8_7'), ('R_14_4', 'A_14_4_6', 'D_14_4_6_8'),
                                    ('R_15_5', 'A_15_5_7', 'D_15_5_7_9'), ('R_16_11', 'A_16_11_7', 'D_16_11_7_9'),
                                    ('R_17_11', 'A_17_11_16', 'D_17_11_16_7')),
                         'vars': {'R_1_0': 1.1606, 'R_2_1': 1.0, 'A_2_1_0': 90.0, 'R_3_1': 1.4334, 'A_3_1_2': 90.0,
                                  'D_3_1_2_0': 180.0, 'R_4_3': 1.3996, 'A_4_3_1': 120.0702, 'D_4_3_1_0': 359.9938,
                                  'R_5_3': 1.3995, 'A_5_3_4': 119.8813, 'D_5_3_4_1': 180.0, 'R_6_4': 1.3959,
                                  'A_6_4_3': 120.0813, 'D_6_4_3_5': 360.0, 'R_7_5': 1.3972, 'A_7_5_3': 119.9563,
                                  'D_7_5_3_4': 0.0, 'R_8_6': 1.396, 'A_8_6_4': 119.9483, 'D_8_6_4_3': 0.0,
                                  'R_9_7': 1.4305, 'A_9_7_8': 120.0239, 'D_9_7_8_6': 180.0, 'R_10_9': 1.0,
                                  'A_10_9_7': 90.0, 'D_10_9_7_8': 179.9969, 'R_11_9': 1.2008, 'A_11_9_10': 90.0,
                                  'D_11_9_10_7': 180.0, 'R_12_8': 1.0881, 'A_12_8_6': 119.5332, 'D_12_8_6_4': 180.0,
                                  'R_13_6': 1.0876, 'A_13_6_8': 119.9515, 'D_13_6_8_7': 180.0, 'R_14_4': 1.0887,
                                  'A_14_4_6': 119.4176, 'D_14_4_6_8': 180.0, 'R_15_5': 1.0887, 'A_15_5_7': 119.8756,
                                  'D_15_5_7_9': 0.0, 'R_16_11': 1.0, 'A_16_11_7': 90.0, 'D_16_11_7_9': 179.9936,
                                  'R_17_11': 1.0653, 'A_17_11_16': 90.0, 'D_17_11_16_7': 180.0},
                         'map': {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, 10: 10, 11: 11, 12: 12,
                                 13: 13, 14: 14, 15: 15, 16: 16, 17: 17}}

        zmat0 = converter.str_to_zmat(zmat_str_0)
        self.assertEqual(zmat0, expected_zmat)
        zmat1 = converter.str_to_zmat(zmat_str_1)
        self.assertEqual(zmat1, expected_zmat)
        zmat2 = converter.str_to_zmat(zmat_str_2)
        # this is a huge molecule, just test some random values:
        self.assertEqual(zmat2['coords'][4], ('R_4_2', 'A_4_2_3', 'D_4_2_3_1'))
        self.assertEqual(zmat2['vars']['D_40_7_4_6'], 139.3906)

    def test_split_str_zmat(self):
        """Test splitting a sting zmat into its coordinates and variables sections"""
        zmat_str_1 = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2
Variables:
A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912
"""
        coords, vars_ = converter.split_str_zmat(zmat_str_1)
        expected_coords = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2"""
        expected_vars = """A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912"""
        self.assertEqual(coords, expected_coords)
        self.assertEqual(vars_, expected_vars)

        zmat_str_2 = """A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912

  C
  H,       1,      R1
  H,       1,      R1,       2,      A1
  H,       1,      R1,       2,      A1,       3,      D1
  H,       1,      R1,       2,      A1,       3,      D2
"""
        coords, vars_ = converter.split_str_zmat(zmat_str_2)
        expected_coords = """  C
  H,       1,      R1
  H,       1,      R1,       2,      A1
  H,       1,      R1,       2,      A1,       3,      D1
  H,       1,      R1,       2,      A1,       3,      D2"""
        expected_vars = """A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912"""
        self.assertEqual(coords, expected_coords)
        self.assertEqual(vars_, expected_vars)

        zmat_str_3 = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2

A1 109.4712
D1 120.0000
D2 240.0000
R1 1.0912
"""
        coords, vars_ = converter.split_str_zmat(zmat_str_3)
        expected_coords = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2"""
        expected_vars = """A1 109.4712
D1 120.0000
D2 240.0000
R1 1.0912"""
        self.assertEqual(coords, expected_coords)
        self.assertEqual(vars_, expected_vars)

        zmat_str_4 = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2

A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912
"""
        coords, vars_ = converter.split_str_zmat(zmat_str_4)
        expected_coords = """  C
  H       1      R1
  H       1      R1       2      A1
  H       1      R1       2      A1       3      D1
  H       1      R1       2      A1       3      D2"""
        expected_vars = """A1=109.4712
D1=120.0000
D2=240.0000
R1=1.0912"""
        self.assertEqual(coords, expected_coords)
        self.assertEqual(vars_, expected_vars)

        zmat_str_5 = """  C
  H       1    1.0912
  H       1    1.0912       2  109.4712
  H       1    1.0912       2  109.4712       3  120.0000
  H       1    1.0912       2  109.4712       3  240.0000
"""
        coords, vars_ = converter.split_str_zmat(zmat_str_5)
        self.assertEqual(coords, zmat_str_5)
        self.assertIsNone(vars_)

    def test_get_zmat_var_value(self):
        """Test getting a variable value from a string zmat"""
        zmat_str_1 = """  C
          H       1      R1
          H       1      R1       2      A1
          H       1      R1       2      A1       3      D1
          H       1      R1       2      A1       3      D2
        Variables:
        A1=109.4712
        D1=120.0000
        D2=240.0000
        R1=1.0912
        """
        zmat_str_2 = """A1=109.4712
        D1=120.0000
        D2=240.0000
        R1=1.0912

          C
          H,       1,      R1
          H,       1,      R1,       2,      A1
          H,       1,      R1,       2,      A1,       3,      D1
          H,       1,      R1,       2,      A1,       3,      D2
        """
        zmat_str_3 = """  C
          H       1      R1
          H       1      R1       2      A1
          H       1      R1       2      A1       3      D1
          H       1      R1       2      A1       3      D2

        A1 109.4712
        D1 120.0000
        D2 240.0000
        R1 1.0912
        """
        zmat_str_4 = """  C
          H       1      R1
          H       1      R1       2      A1
          H       1      R1       2      A1       3      D1
          H       1      R1       2      A1       3      D2

        A1=109.4712
        D1=120.0000
        D2=240.0000
        R1=1.0912
        """

        self.assertEqual(converter.get_zmat_str_var_value(zmat_str_1, 'D1'), 120.0)
        self.assertEqual(converter.get_zmat_str_var_value(zmat_str_2, 'D2'), 240.0)
        self.assertEqual(converter.get_zmat_str_var_value(zmat_str_3, 'A1'), 109.4712)
        self.assertEqual(converter.get_zmat_str_var_value(zmat_str_4, 'R1'), 1.0912)

    def test_get_zmat_param_value(self):
        """Test generating a zmat and getting a parameter value from it"""
        xyz = """O      -1.56972190    0.86781163   -0.31741697
        C      -1.04766895   -0.34174340    0.22855902
        C       0.39334154   -0.53829388   -0.25140232
        N       1.18758060    0.66395027    0.03678474
        H      -0.79633969    1.46799803   -0.36543061
        H      -1.09144929   -0.26944950    1.32014286
        H      -1.68279585   -1.17219329   -0.09269721
        H       0.84136357   -1.41603914    0.22426854
        H       0.39770524   -0.69095962   -1.33583221
        H       2.13746062    0.52142605   -0.30877212
        H       1.27433093    0.77543934    1.04802967"""
        spc1 = ARCSpecies(label='spc1', xyz=xyz)
        xyz_dict = spc1.get_xyz()
        value1 = converter.get_zmat_param_value(coords=xyz_dict, indices=[1, 2], mol=spc1.mol)  # R
        value2 = converter.get_zmat_param_value(coords=xyz_dict, indices=[0, 1, 2], mol=spc1.mol)  # A
        value3 = converter.get_zmat_param_value(coords=xyz_dict, indices=[1, 2, 3, 10], mol=spc1.mol)  # D
        self.assertAlmostEqual(value1, 1.53150455)
        self.assertAlmostEqual(value2, 109.470340)
        self.assertAlmostEqual(value3, 66.2600849)

    def test_modify_coords(self):
        """Test modifying coordinates using zmats"""
        xyz1 = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'),
                'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                'coords': ((1.53830201, 0.86423425, 0.07482439), (0.94923576, -0.20847619, -0.03881977),
                           (-0.56154542, -0.31516675, -0.05011465), (-1.18981166, 0.93489731, 0.17603211),
                           (1.49712659, -1.15833718, -0.15458647), (-0.87737433, -0.70077243, -1.02287491),
                           (-0.87053611, -1.01071746, 0.73427128), (-0.48610273, 1.61361259, 0.11915705))}
        xyz2 = {'symbols': ('C', 'C', 'N', 'H', 'H', 'H'), 'isotopes': (12, 12, 14, 1, 1, 1),
                'coords': ((-0.48629842, 0.00448354, 0.00136213), (0.97554967, -0.0089943, -0.00273253),
                           (2.13574353, -0.01969098, -0.00598223), (-0.88318669, -0.63966273, -0.78887729),
                           (-0.87565097, -0.35336611, 0.95910491), (-0.86615712, 1.01723058, -0.16287498))}
        xyz3 = {'symbols': ('O', 'C', 'C', 'S', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                'isotopes': (16, 12, 12, 32, 16, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                'coords': ((-2.77437517, 0.17200669, 0.18524832), (-1.64613785, -0.19208096, 0.80434075),
                           (-0.40774525, 0.26424657, -0.07952902), (-0.26203276, 2.09580334, -0.05090198),
                           (-0.67096595, -0.16397552, -1.42109845), (0.89264107, -0.40136991, 0.41083574),
                           (2.12441624, -0.1300863, -0.44918504), (-1.50623429, -1.27619307, 0.9524955),
                           (-1.45114032, 0.18501518, 1.82167553), (-1.59654975, 2.25615634, -0.09052499),
                           (-1.65730431, -0.11079255, -1.400057), (0.74870779, -1.48997779, 0.41386971),
                           (1.10331691, -0.11082471, 1.44762119), (2.41262211, 0.92463409, -0.42840126),
                           (1.95758158, -0.4244074, -1.48990015), (2.97418137, -0.70882619, -0.0719403))}
        xyz4 = {'symbols': ('C', 'C', 'O', 'C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                'isotopes': (12, 12, 16, 12, 12, 16, 1, 1, 1, 1, 1, 1, 1, 1),
                'coords': ((-1.2713687423422115, -0.7423678681688866, -0.6322577211421921),
                           (-0.08008635702808505, -0.40741599130374034, 0.2550353232234618),
                           (-0.5452666768773297, -0.20159898814584978, 1.588840559327411),
                           (0.6158080809151276, 0.8623086771891557, -0.21553636846891006),
                           (1.9196775903993375, 1.0155396004927764, 0.5174563928754532),
                           (3.0067486097953653, 1.0626738453913969, -0.05177300486677717),
                           (-2.012827991034863, 0.06405231524730193, -0.6138583677564631),
                           (-0.9611224758801538, -0.9119047827586647, -1.6677831987437075),
                           (-1.7781253059828275, -1.6433798866337939, -0.27003123559560865),
                           (0.6204384954940876, -1.2502614603989448, 0.2715082028581114),
                           (-1.0190238747695064, -1.007069904421531, 1.8643494196872146),
                           (0.014234510343435022, 1.753076784716312, -0.005169050775340246),
                           (0.827317336700949, 0.8221266348378934, -1.2893801191974432),
                           (1.8498494882204641, 1.107064846374729, 1.6152311353151314))}
        mol1 = molecules_from_xyz(xyz1)[1]
        mol2 = molecules_from_xyz(xyz2)[1]
        mol3 = molecules_from_xyz(xyz3)[1]
        mol4 = molecules_from_xyz(xyz4)[1]

        # test atom modification types
        modification_type = 'atom'

        # test R_atom modification
        indices, new_val = [0, 1], 1.5
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((0.06385450948408691, 1.6253138441202686, 0.042870253583423557),
                                   (-0.02582727173313104, 0.39833637030950975, 0.9010563970736782),
                                   (-0.02582727173313104, -1.003336361301907, 0.3272239637891734),
                                   (-0.02582727173313104, -1.003336361301907, -1.0899990532469916),
                                   (-0.08138177769352953, 0.465646654907214, 2.0002403496097383),
                                   (0.865704477722866, -1.5264119285073852, 0.6825623354173815),
                                   (-0.9185767861007101, -1.5268489957651346, 0.6785930201570352),
                                   (0.14577602706217008, -0.07998849407327513, -1.367625604543457))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val)

        indices, new_val = [1, 0], -1.5
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((0.01167393998357115, -0.5225807439329089, -0.9899595616178738),
                                   (-0.040525509131742084, 0.26844387347263365, -2.2633625897949208),
                                   (0.01167393998357115, -0.5225807439329089, 1.4216698859880004),
                                   (0.01167393998357115, 0.8926022581407576, 1.3456557382334218),
                                   (0.11202785529567173, -2.2718515121487206, 0.04691079079738447),
                                   (-0.8954040276884763, -0.8508241498293034, 1.9356427400340799),
                                   (0.8880330020652463, -0.8439168226596885, 1.990234136037933),
                                   (-0.13167393678263156, 1.1200467154192293, 0.4039467156910099))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), - new_val, 5)

        # test A_atom modification
        indices, new_val = [2, 1, 0], 140
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((0.011940763595588438, -0.90654939253321, -1.1784203714214114),
                                   (0.011940763595588438, -0.90654939253321, 0.05065327345758153),
                                   (-0.02531707366035523, 0.06629439921242253, 1.2108932996837143),
                                   (0.011940763595588438, 1.5283906429141458, 0.05806971900412017),
                                   (0.03285612994605798, -1.8458593499019589, 0.6277855724118742),
                                   (-0.9645745795119229, 0.3758422785924207, 1.4467600455414558),
                                   (0.8166299978590752, 0.37902049128771864, 1.551524925579085),
                                   (-0.10465928281651019, 1.2266969334608921, -0.8663115945839973))}

        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val, 5)

        # test changing an angle to 180 degrees
        indices, new_val = [0, 1, 2], 180
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((-0.0019281473980474666, 1.559641181574566, 1.013927346529066),
                                   (-0.0019281473980474772, 0.42219553322547265, 0.548267146825631),
                                   (-0.0019281473980474772, -0.9794771983859442, -0.025565286458873793),
                                   (-0.0019281473980474772, -0.9794771983859442, -1.4427883034950388),
                                   (-0.05748265335844597, 0.4895058178231769, 1.6474510993616909),
                                   (0.8896036020579495, -1.5025527655914221, 0.32977308516933435),
                                   (-0.8946776617656266, -1.5029898328491718, 0.32580376990898796),
                                   (0.16967515139725364, -0.05612933115731222, -1.7204148547915041))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val)

        # test changing a 180 degree angle to something else
        indices, new_val = [0, 1, 2], 120
        expected_xyz = {'symbols': ('C', 'C', 'N', 'H', 'H', 'H'), 'isotopes': (12, 12, 14, 1, 1, 1),
                        'coords': ((-0.7897018269402853, -0.42276084689184396, 0.7767867301012654),
                                   (0.3264742904828693, 0.17477552106414657, 0.04582872033238128),
                                   (0.3264742904828693, 0.17477552106414657, -1.114419078789876),
                                   (0.3264742904828693, 1.197429738294252, 1.8964625885501378),
                                   (-0.5591702309957312, -0.3365515338564056, 1.8964625888132092),
                                   (1.212118713054729, -0.3365517217607689, 1.8964626068389825))}
        new_xyz = converter.modify_coords(coords=xyz2, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol2)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol2), new_val, 5)

        # test D_atom modification
        indices, new_val = [0, 1, 2, 3], 30
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((-0.3812553590829658, 1.4249753409811934, 0.24885596109763952),
                                   (0.13588307254069157, 0.47112021672976, 0.8262208968300058),
                                   (0.13588307254069157, -0.9305525148816568, 0.25238846354550093),
                                   (0.13588307254069157, -0.9305525148816568, -1.1648345534906641),
                                   (0.08032856658029308, 0.5384305013274643, 1.9254048493660656),
                                   (1.0274148219966885, -1.4536280820871348, 0.6077268351737091),
                                   (-0.7568664418268876, -1.4540651493448844, 0.6037575199133627),
                                   (0.30748637133599266, -0.007204647653024865, -1.4424611047871294))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val, 5)

        indices, new_val = [3, 2, 1, 0], -30
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((-0.17268751280677364, -0.941696827801256, -1.1487068217042242),
                                   (-0.17268751280677364, -0.941696827801256, 0.08036682317476873),
                                   (-0.17268751280677364, 0.3328411496875977, 0.8986107061160642),
                                   (0.4830966870190505, 1.3983204216355287, 0.23286144075770054),
                                   (-0.18773471865125574, -1.8811191078717768, 0.6574991306756568),
                                   (-1.0994105700891015, 0.3771264916699556, 1.4764735369276594),
                                   (0.6806108103574798, 0.3121359507669669, 1.5812384626874982),
                                   (-0.2075631130119835, 1.1944491200970329, -0.8365980489813365))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1),
                               360 + new_val, 5)

        indices, new_val = [0, 1, 2, 3], -30
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((0.37739906428687087, 1.4249753409811934, 0.24885596109763952),
                                   (-0.13973936733678652, 0.47112021672976, 0.8262208968300058),
                                   (-0.13973936733678652, -0.9305525148816568, 0.25238846354550093),
                                   (-0.13973936733678652, -0.9305525148816568, -1.1648345534906641),
                                   (-0.195293873297185, 0.5384305013274643, 1.9254048493660656),
                                   (0.7517923821192105, -1.4536280820871348, 0.6077268351737091),
                                   (-1.0324888817043656, -1.4540651493448844, 0.6037575199133627),
                                   (0.0318639314585146, -0.007204647653024865, -1.4424611047871294))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1),
                               360 + new_val, 5)

        # test group modification types
        modification_type = 'group'

        # test R_group modification
        indices, new_val = [0, 1], 1.5
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((0.06385450815440741, 1.625313844153823, 0.04287025350146201),
                                   (-0.02582727144301671, 0.39833637029935165, 0.9010563970984908),
                                   (-0.02582727144301671, -1.0033363613120652, 0.327223963813986),
                                   (-0.02582727144301671, -1.0033363613120652, -1.089999053222179),
                                   (-0.0813817733100206, 0.4656466548101805, 2.0002403498467567),
                                   (0.8657044801882787, -1.5264119271233758, 0.6825623320367284),
                                   (-0.9185767836497759, -1.5268489971713646, 0.6785930235919653),
                                   (0.1457760273522844, -0.07998849408343323, -1.3676256045186443))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val)

        # test A_group modification
        indices, new_val = [0, 1, 2], 160
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'), 'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((0.01997925208754263, 1.625852603711386, 0.708691800251658),
                                   (-0.009887200766722545, 0.3981406366172051, 0.6591605436173553),
                                   (-0.009887200766722545, -1.0035320949942117, 0.08532811033285048),
                                   (-0.009887200766722545, -1.0035320949942117, -1.3318949067033146),
                                   (-0.06544170263372645, 0.465450921128034, 1.7583444963656214),
                                   (0.8816445508645728, -1.5266076608055221, 0.44066647855559316),
                                   (-0.9026367129734817, -1.5270447308535111, 0.4366971701108293),
                                   (0.16171609802857856, -0.08018422776557976, -1.6095214579997799))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val, 5)

        indices, new_val = [1, 2, 5], 160
        expected_xyz = {'symbols': ('O', 'C', 'C', 'S', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (16, 12, 12, 32, 16, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((-0.45549818019466204, 1.8548729964273216, 0.8440028131622062),
                                   (-0.2667929723517851, 0.6671106629415136, 1.42912314652022),
                                   (-0.2163066356464933, -0.45426196440936106, 0.30526758056697156),
                                   (1.3109140692843337, 0.4741705899686004, -0.12165329723035323),
                                   (-1.3557392716759613, 0.27771606050413156, -0.16203238949855803),
                                   (-0.2163066356464933, -1.8492005047245035, -0.34944907261899716),
                                   (-0.2163066356464933, -1.8492005047245035, -1.87604687202156),
                                   (-1.0601386155429, 0.3401156691690679, 2.122303234960202),
                                   (0.6302934527577109, 0.5164940342603479, 2.051815682570846),
                                   (1.143418340718557, 1.3271327629309078, 0.9043191341647172),
                                   (-1.5046641822171405, 0.8405156651772538, 0.6362234563562041),
                                   (-1.1248176985937233, -2.3816433802478305, -0.03815279071754074),
                                   (0.6330922017716909, -2.4415422695908298, 0.013011559357363423),
                                   (0.707681641272436, -1.4302805756837962, -2.2843133571390752),
                                   (-1.061876978104781, -1.2808214124615414, -2.27542464397285),
                                   (-0.30131566361820894, -2.876339919190297, -2.2463334380185054))}
        new_xyz = converter.modify_coords(coords=xyz3, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol3)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol3), new_val, 5)

        indices, new_val = [5, 2, 1], 160
        expected_xyz = {'symbols': ('O', 'C', 'C', 'S', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (16, 12, 12, 32, 16, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((0.2917048572251579, -1.5727341554069034, -1.3423072397835754),
                                   (0.2917048572251579, -1.5727341554069034, -0.0048638500194817524),
                                   (0.2917048572251579, -0.06886266257406626, 0.5064553318371674),
                                   (-1.363795569744117, -0.1202634403830567, -0.28936363114537844),
                                   (1.2964570556359054, 0.04149003667864859, -0.508809719558267),
                                   (0.4099139249017979, 1.1367441270166645, 1.4588451220109844),
                                   (0.29481769872300884, 2.504661621457458, 0.7909713103796479),
                                   (1.1685736645928884, -2.0373473546555556, 0.47685945259484286),
                                   (-0.5312728539867155, -2.0767912763680947, 0.5278926826114716),
                                   (-1.2231052441089643, -1.4156454828005882, -0.6216441060907665),
                                   (1.4364524039686508, -0.9213654475865127, -0.6804052856633311),
                                   (1.3966722481626304, 1.107137467791805, 1.9397033126698722),
                                   (-0.33241474313836356, 1.0625526837349102, 2.2633130452338497),
                                   (-0.7009351031697479, 2.671307058557274, 0.3706911401148234),
                                   (1.0334518240640673, 2.6225101662569066, -0.007826505507309234),
                                   (0.474437928409419, 3.293432289151483, 1.52916604039102))}
        new_xyz = converter.modify_coords(coords=xyz3, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol3)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol3), new_val, 4)

        # test D_group modification
        indices, new_val = [0, 1, 2, 3], 98.7
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'),
                        'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((-0.751853407099498, 1.1325746654576616, 0.9630889493590222),
                                   (0.2705229494881336, 0.5773506493576217, 0.5667369568416694),
                                   (0.2705229494881336, -0.8243220822537951, -0.00709547644283548),
                                   (0.2705229494881336, -0.8243220822537951, -1.4243184934790005),
                                   (0.21496844352773511, 0.644660933955326, 1.6659209093777292),
                                   (1.1620546989441305, -1.347397649459273, 0.34824289518537266),
                                   (-0.6222265648794455, -1.3478347167170226, 0.3442735799250263),
                                   (0.4421262482834347, 0.09902578497483683, -1.7019450447754658))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val, 5)

        indices, new_val = [5, 2, 1, 0], 180
        expected_xyz = {'symbols': ('O', 'C', 'C', 'S', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (16, 12, 12, 32, 16, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((0.3034340517195509, -1.6113639549493641, -1.7901391417129255),
                                   (0.3034340517195509, -1.6113639549493641, -0.45269575194883194),
                                   (0.3034340517195509, -0.10749246211652697, 0.058623429907817215),
                                   (-1.3193844356755215, 0.6746571866866746, -0.30380395501671575),
                                   (1.3282593544657135, 0.581298860926198, -0.6678526090506967),
                                   (0.30343405171955073, -0.05040119820033895, 1.5985091447581203),
                                   (0.26233878444784786, 1.3540223173114139, 2.1955071424316666),
                                   (1.1803028491569083, -2.0759771588261957, 0.029027564277707585),
                                   (-0.5195436704231056, -2.115421071566818, 0.08006076790649397),
                                   (-1.414911803320983, 0.05150877481380545, -1.4915662613668217),
                                   (1.2907872270567131, 0.05736052141866721, -1.5046434284929022),
                                   (1.2266505257705096, -0.5178979180455376, 1.965811882691859),
                                   (-0.5283478351927398, -0.6406189828710822, 2.0028687871657294),
                                   (-0.6775241224477067, 1.8658969637383576, 1.9706253328328829),
                                   (1.0896028263747624, 1.9687229189733981, 1.8276430689661958),
                                   (0.35031987670665765, 1.2957313570336282, 3.285560142931404))}
        new_xyz = converter.modify_coords(coords=xyz3, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol3)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol3), new_val, 5)

        # test groups modification types
        modification_type = 'groups'

        # test D_groups modification
        indices, new_val = [0, 1, 2, 3], 98.7
        expected_xyz = {'symbols': ('O', 'C', 'C', 'O', 'H', 'H', 'H', 'H'),
                        'isotopes': (16, 12, 12, 16, 1, 1, 1, 1),
                        'coords': ((-0.7692326765134374, 1.1252152574374596, 0.9810655314575423),
                                   (0.25314357064244697, 0.5699912505374165, 0.5847135445433043),
                                   (0.25314357064244697, -0.8316815836112654, 0.010881153979294123),
                                   (0.25314357064244697, -0.8316815836112654, -1.4063419471715688),
                                   (1.2326181278103254, 1.0755945976230115, 0.6133000157238186),
                                   (1.1446752957640132, -1.3547571699433192, 0.3662195585064876),
                                   (-0.6396059141384572, -1.3551941756763426, 0.3622501790547312),
                                   (0.4247468609767439, 0.09166629658280878, -1.6839684605765641))}
        new_xyz = converter.modify_coords(coords=xyz1, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol1)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol1), new_val, 5)
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=xyz1, indices=[4, 1, 2, 3], mol=mol1),
                               176.7937925, 5)
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=[4, 1, 2, 3], mol=mol1),
                               279.5679938, 5)

        indices, new_val = [5, 2, 1, 0], 100
        expected_xyz = {'symbols': ('O', 'C', 'C', 'S', 'O', 'C', 'C', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (16, 12, 12, 32, 16, 12, 12, 1, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((0.17617288317697363, -1.4263876505749937, -1.3907356765118228),
                                   (0.17617288317697363, -1.4263876505749937, -0.05329233131383648),
                                   (0.17617288317697363, 0.07748361087633482, 0.4580268316508156),
                                   (0.8541264407563205, 1.1799297944814306, -0.8464435250524343),
                                   (1.0315484892431994, 0.12891222316318918, 1.606136465715537),
                                   (-1.2415001838455297, 0.5175023395992786, 0.8716616732793354),
                                   (-2.371148423802697, -0.377635430276555, 0.3685473045279144),
                                   (1.0530416597996317, -1.8910009834245878, 0.42843102214143425),
                                   (-0.646804798256715, -1.930444842122042, 0.47946418053365614),
                                   (1.322524386187, 0.1392850561843193, -1.55769653865906),
                                   (1.5807657244329665, 0.9071634481807671, 1.3438012611373469),
                                   (-1.4308626545937098, 1.5181627982792263, 0.46103575662853813),
                                   (-1.3101730016766409, 0.6090291604729325, 1.9628224613881304),
                                   (-2.328405219901557, -1.376683205512397, 0.811273322532136),
                                   (-2.345556604764221, -0.47877786163003033, -0.7207928024513892),
                                   (-3.3382397150969996, 0.059047399283163715, 0.6394658008190603))}
        new_xyz = converter.modify_coords(coords=xyz3, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol3)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol3), new_val, 5)

        indices, new_val = [4, 3, 1, 0], 236.02
        expected_xyz = {'symbols': ('C', 'C', 'O', 'C', 'C', 'O', 'H', 'H', 'H', 'H', 'H', 'H', 'H', 'H'),
                        'isotopes': (12, 12, 16, 12, 12, 16, 1, 1, 1, 1, 1, 1, 1, 1),
                        'coords': ((-0.3420713780282814, -0.726846939196746, -1.8608060734620697),
                                   (-0.3420713780282814, -0.726846939196746, -0.33809952744080163),
                                   (-1.5199121786498575, -1.3903247017047589, 0.12046140490433599),
                                   (-0.3420713780282814, 0.692986716189357, 0.21142750813209843),
                                   (0.8346249371329908, 0.870417947793265, 1.130523629422891),
                                   (1.8415843350511496, 1.49899165752528, 0.8160475329621943),
                                   (-1.232802341934429, -0.22348356564525385, -2.2527724067647172),
                                   (0.5474409007790566, -0.2291658204558631, -2.2587884226234842),
                                   (-0.36650899336409903, -1.7525658745827613, -2.2443893713107435),
                                   (0.5235538883628821, -1.286773819894118, 0.03414982827280788),
                                   (-1.525486055520759, -2.2842579938670644, -0.2668197974505191),
                                   (-1.246930807816442, 0.9000033565709169, 0.7927934676101465),
                                   (-0.26242043164905693, 1.4290013064896112, -0.5956842516835208),
                                   (0.739203033547077, 0.4163114365921572, 2.132044487804084))}
        new_xyz = converter.modify_coords(coords=xyz4, indices=indices, new_value=new_val,
                                          modification_type=modification_type, mol=mol4)
        self.assertTrue(almost_equal_coords_lists(new_xyz, expected_xyz))
        self.assertAlmostEqual(converter.get_zmat_param_value(coords=new_xyz, indices=indices, mol=mol4), new_val, 5)

    def test_translate_to_center_of_mass(self):
        """Test calculating the center of mass for coordinates"""
        xyz = """O       1.28706525    0.52121353    0.04219198
C       0.39745682   -0.35265044   -0.63649234
C       0.36441173   -1.68197093    0.08682400
H      -0.59818222    0.10068325   -0.65235399
H       0.74799641   -0.48357798   -1.66461710
H       0.03647269   -1.54932006    1.12314420
H      -0.31340646   -2.38081353   -0.41122551
H       1.36475837   -2.12581592    0.12433596
H       2.16336803    0.09985803    0.03295192
"""
        translated_xyz = converter.translate_to_center_of_mass(converter.str_to_xyz(xyz))
        cm_x, cm_y, cm_z = converter.get_center_of_mass(xyz=translated_xyz)
        self.assertAlmostEqual(cm_x, 0.0000, 3)
        self.assertAlmostEqual(cm_y, 0.0000, 3)
        self.assertAlmostEqual(cm_z, 0.0000, 3)

        xyz = {'coords': ((0.0, 0.0, 0.113488),
                          (0.0, 0.93867, -0.264806),
                          (0.812912, -0.469335, -0.264806),
                          (-0.812912, -0.469335, -0.264806)),
               'symbols': ('N', 'H', 'H', 'H')}
        translated_xyz = converter.translate_to_center_of_mass(converter.check_xyz_dict(xyz))
        expected_xyz = """N       0.00000000    0.00000000    0.06717524
H       0.00000000    0.93867000   -0.31111876
H       0.81291200   -0.46933500   -0.31111876
H      -0.81291200   -0.46933500   -0.31111876"""
        self.assertEqual(converter.xyz_to_str(translated_xyz), expected_xyz)
        cm_x, cm_y, cm_z = converter.get_center_of_mass(translated_xyz)
        self.assertAlmostEqual(cm_x, 0.0000, 3)
        self.assertAlmostEqual(cm_y, 0.0000, 3)
        self.assertAlmostEqual(cm_z, 0.0000, 3)

    def test_get_center_of_mass(self):
        """Test calculating the center of mass for coordinates"""
        xyz = """O       1.28706525    0.52121353    0.04219198
C       0.39745682   -0.35265044   -0.63649234
C       0.36441173   -1.68197093    0.08682400
H      -0.59818222    0.10068325   -0.65235399
H       0.74799641   -0.48357798   -1.66461710
H       0.03647269   -1.54932006    1.12314420
H      -0.31340646   -2.38081353   -0.41122551
H       1.36475837   -2.12581592    0.12433596
H       2.16336803    0.09985803    0.03295192
"""
        cm_x, cm_y, cm_z = converter.get_center_of_mass(xyz=converter.str_to_xyz(xyz))
        self.assertAlmostEqual(cm_x, 0.7201, 3)
        self.assertAlmostEqual(cm_y, -0.4880, 3)
        self.assertAlmostEqual(cm_z, -0.1603, 3)

        xyz = """C	1.1714680	-0.4048940	0.0000000
C	0.0000000	0.5602500	0.0000000
O	-1.1945070	-0.2236470	0.0000000
H	-1.9428910	0.3834580	0.0000000
H	2.1179810	0.1394450	0.0000000
H	1.1311780	-1.0413680	0.8846660
H	1.1311780	-1.0413680	-0.8846660
H	0.0448990	1.2084390	0.8852880
H	0.0448990	1.2084390	-0.8852880"""
        cm_x, cm_y, cm_z = converter.get_center_of_mass(xyz=converter.str_to_xyz(xyz))
        self.assertAlmostEqual(cm_x, -0.0540, 3)
        self.assertAlmostEqual(cm_y, -0.0184, 3)
        self.assertAlmostEqual(cm_z, -0.0000, 3)

        xyz = {'coords': ((0.0, 0.0, 0.113488),
                          (0.0, 0.93867, -0.264806),
                          (0.812912, -0.469335, -0.264806),
                          (-0.812912, -0.469335, -0.264806)),
               'symbols': ('N', 'H', 'H', 'H')}
        cm_x, cm_y, cm_z = converter.get_center_of_mass(converter.check_xyz_dict(xyz))
        self.assertAlmostEqual(cm_x, 0.0000, 3)
        self.assertAlmostEqual(cm_y, 0.0000, 3)
        self.assertAlmostEqual(cm_z, 0.0463, 3)


if __name__ == '__main__':
    unittest.main(testRunner=unittest.TextTestRunner(verbosity=2))
