# coding: utf-8

"""
    ChannelEngine Merchant API

    ChannelEngine API for merchants  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from channelengine_merchant_api_client.api_client import ApiClient


class OrderApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def order_acknowledge(self, model, **kwargs):  # noqa: E501
        """Acknowledge Order  # noqa: E501

        Acknowledge an order. By acknowledging the order the merchant can confirm that  the order has been imported. When acknowledging an order the merchant has to supply  references that uniquely identify the order and the order lines. These references  will be used in the other API calls.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_acknowledge(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MerchantOrderAcknowledgementRequest model: Relations between the id's returned by ChannelEngine and the references which the merchant uses (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_acknowledge_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.order_acknowledge_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def order_acknowledge_with_http_info(self, model, **kwargs):  # noqa: E501
        """Acknowledge Order  # noqa: E501

        Acknowledge an order. By acknowledging the order the merchant can confirm that  the order has been imported. When acknowledging an order the merchant has to supply  references that uniquely identify the order and the order lines. These references  will be used in the other API calls.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_acknowledge_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MerchantOrderAcknowledgementRequest model: Relations between the id's returned by ChannelEngine and the references which the merchant uses (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_acknowledge" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `order_acknowledge`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/acknowledge', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_get_by_filter(self, **kwargs):  # noqa: E501
        """Get Orders By Filter  # noqa: E501

        Fetch orders based on the provided OrderFilter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_get_by_filter(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] statuses: Order status(es) to filter on
        :param list[str] email_addresses: Client emailaddresses to filter on
        :param list[str] merchant_order_nos: Filter on unique order reference used by the merchant
        :param list[str] channel_order_nos: Filter on unique order reference used by the channel
        :param datetime from_date: Filter on the order date, starting from this date. This date is inclusive.
        :param datetime to_date: Filter on the order date, until this date. This date is exclusive.
        :param bool exclude_marketplace_fulfilled_orders_and_lines: Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)
        :param str fulfillment_type: Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.  To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.
        :param bool only_with_cancellation_requests: Filter on orders containing cancellation requests.  Some channels allow a customer to cancel an order until it has been shipped.  When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.
        :param int page: The page to filter on. Starts at 1.
        :return: CollectionOfMerchantOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_get_by_filter_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.order_get_by_filter_with_http_info(**kwargs)  # noqa: E501
            return data

    def order_get_by_filter_with_http_info(self, **kwargs):  # noqa: E501
        """Get Orders By Filter  # noqa: E501

        Fetch orders based on the provided OrderFilter  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_get_by_filter_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] statuses: Order status(es) to filter on
        :param list[str] email_addresses: Client emailaddresses to filter on
        :param list[str] merchant_order_nos: Filter on unique order reference used by the merchant
        :param list[str] channel_order_nos: Filter on unique order reference used by the channel
        :param datetime from_date: Filter on the order date, starting from this date. This date is inclusive.
        :param datetime to_date: Filter on the order date, until this date. This date is exclusive.
        :param bool exclude_marketplace_fulfilled_orders_and_lines: Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.)
        :param str fulfillment_type: Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.  To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true.
        :param bool only_with_cancellation_requests: Filter on orders containing cancellation requests.  Some channels allow a customer to cancel an order until it has been shipped.  When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.
        :param int page: The page to filter on. Starts at 1.
        :return: CollectionOfMerchantOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['statuses', 'email_addresses', 'merchant_order_nos', 'channel_order_nos', 'from_date', 'to_date', 'exclude_marketplace_fulfilled_orders_and_lines', 'fulfillment_type', 'only_with_cancellation_requests', 'page']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_get_by_filter" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501
            collection_formats['statuses'] = 'multi'  # noqa: E501
        if 'email_addresses' in params:
            query_params.append(('emailAddresses', params['email_addresses']))  # noqa: E501
            collection_formats['emailAddresses'] = 'multi'  # noqa: E501
        if 'merchant_order_nos' in params:
            query_params.append(('merchantOrderNos', params['merchant_order_nos']))  # noqa: E501
            collection_formats['merchantOrderNos'] = 'multi'  # noqa: E501
        if 'channel_order_nos' in params:
            query_params.append(('channelOrderNos', params['channel_order_nos']))  # noqa: E501
            collection_formats['channelOrderNos'] = 'multi'  # noqa: E501
        if 'from_date' in params:
            query_params.append(('fromDate', params['from_date']))  # noqa: E501
        if 'to_date' in params:
            query_params.append(('toDate', params['to_date']))  # noqa: E501
        if 'exclude_marketplace_fulfilled_orders_and_lines' in params:
            query_params.append(('excludeMarketplaceFulfilledOrdersAndLines', params['exclude_marketplace_fulfilled_orders_and_lines']))  # noqa: E501
        if 'fulfillment_type' in params:
            query_params.append(('fulfillmentType', params['fulfillment_type']))  # noqa: E501
        if 'only_with_cancellation_requests' in params:
            query_params.append(('onlyWithCancellationRequests', params['only_with_cancellation_requests']))  # noqa: E501
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionOfMerchantOrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_get_new(self, **kwargs):  # noqa: E501
        """Get New Orders  # noqa: E501

        Fetch newly placed orders (order with status NEW).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_get_new(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CollectionOfMerchantOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_get_new_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.order_get_new_with_http_info(**kwargs)  # noqa: E501
            return data

    def order_get_new_with_http_info(self, **kwargs):  # noqa: E501
        """Get New Orders  # noqa: E501

        Fetch newly placed orders (order with status NEW).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_get_new_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: CollectionOfMerchantOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_get_new" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/new', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionOfMerchantOrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_invoice(self, merchant_order_no, **kwargs):  # noqa: E501
        """Download Invoice  # noqa: E501

        Generates the ChannelEngine VAT invoice for this order in PDF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_invoice(merchant_order_no, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str merchant_order_no: The unique order reference as used by the merchant (required)
        :param bool use_customer_culture: Generate the invoice in the billing address' country's language
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_invoice_with_http_info(merchant_order_no, **kwargs)  # noqa: E501
        else:
            (data) = self.order_invoice_with_http_info(merchant_order_no, **kwargs)  # noqa: E501
            return data

    def order_invoice_with_http_info(self, merchant_order_no, **kwargs):  # noqa: E501
        """Download Invoice  # noqa: E501

        Generates the ChannelEngine VAT invoice for this order in PDF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_invoice_with_http_info(merchant_order_no, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str merchant_order_no: The unique order reference as used by the merchant (required)
        :param bool use_customer_culture: Generate the invoice in the billing address' country's language
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchant_order_no', 'use_customer_culture']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_invoice" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'merchant_order_no' is set
        if ('merchant_order_no' not in params or
                params['merchant_order_no'] is None):
            raise ValueError("Missing the required parameter `merchant_order_no` when calling `order_invoice`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'merchant_order_no' in params:
            path_params['merchantOrderNo'] = params['merchant_order_no']  # noqa: E501

        query_params = []
        if 'use_customer_culture' in params:
            query_params.append(('useCustomerCulture', params['use_customer_culture']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/{merchantOrderNo}/invoice', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_packing_slip(self, merchant_order_no, **kwargs):  # noqa: E501
        """Download Packing Slip  # noqa: E501

        Generates the ChannelEngine packing slip for this order in PDF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_packing_slip(merchant_order_no, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str merchant_order_no: The unique order reference as used by the merchant (required)
        :param bool use_customer_culture: Generate the invoice in the billing address' country's language
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_packing_slip_with_http_info(merchant_order_no, **kwargs)  # noqa: E501
        else:
            (data) = self.order_packing_slip_with_http_info(merchant_order_no, **kwargs)  # noqa: E501
            return data

    def order_packing_slip_with_http_info(self, merchant_order_no, **kwargs):  # noqa: E501
        """Download Packing Slip  # noqa: E501

        Generates the ChannelEngine packing slip for this order in PDF  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_packing_slip_with_http_info(merchant_order_no, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str merchant_order_no: The unique order reference as used by the merchant (required)
        :param bool use_customer_culture: Generate the invoice in the billing address' country's language
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['merchant_order_no', 'use_customer_culture']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_packing_slip" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'merchant_order_no' is set
        if ('merchant_order_no' not in params or
                params['merchant_order_no'] is None):
            raise ValueError("Missing the required parameter `merchant_order_no` when calling `order_packing_slip`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'merchant_order_no' in params:
            path_params['merchantOrderNo'] = params['merchant_order_no']  # noqa: E501

        query_params = []
        if 'use_customer_culture' in params:
            query_params.append(('useCustomerCulture', params['use_customer_culture']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/pdf'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/{merchantOrderNo}/packingslip', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def order_update(self, model, **kwargs):  # noqa: E501
        """Update Comment  # noqa: E501

        Update the merchant comment for an order. Both the ChannelEngine order id as the   merchant order number can be used for updating a comment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_update(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MerchantOrderCommentUpdateRequest model:  (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.order_update_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.order_update_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def order_update_with_http_info(self, model, **kwargs):  # noqa: E501
        """Update Comment  # noqa: E501

        Update the merchant comment for an order. Both the ChannelEngine order id as the   merchant order number can be used for updating a comment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.order_update_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MerchantOrderCommentUpdateRequest model:  (required)
        :return: ApiResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if ('model' not in params or
                params['model'] is None):
            raise ValueError("Missing the required parameter `model` when calling `order_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain', 'application/json', 'text/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json-patch+json', 'application/json', 'text/json', 'application/*+json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['apikey']  # noqa: E501

        return self.api_client.call_api(
            '/v2/orders/comment', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ApiResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
