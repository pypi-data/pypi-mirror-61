# Stubs for flutils (Python 3)
import grp
import grp as _grp
import pwd
import pwd as _pwd
from collections import UserString as _UserString
from os import PathLike as _PathLike
from pathlib import Path as _Path
from types import ModuleType as _ModuleType
from typing import Any as _Any
from typing import DefaultDict
from typing import Dict as _Dict
from typing import Generator as _Generator
from typing import (
    List,
    NamedTuple,
)
from typing import Optional as _Optional
from typing import Tuple
from typing import Union as _Union

_PATH = _Union[_PathLike, str]
_STR_OR_INT_OR_NONE = _Union[str, int, None]
_STR = _Union[str, _UserString]


# see flutils.setuputils.add_setup_cfg_commands
def add_setup_cfg_commands(
        setup_kwargs: _Dict[str, _Any],
        setup_dir: _Optional[_Union[_PathLike, str]] = ...
) -> None: ...

def as_literal_unicode(text: str) -> str: ...

def as_literal_utf8(text: str) -> str: ...

def bump_version(
        version: _STR,
        position: int=...,
        pre_release: _Optional[str]=...
) -> str: ...

class cached_property:
    __doc__: _Any = ...
    func: _Any = ...
    def __init__(self, func: _Any) -> None: ...
    def __get__(self, obj: _Any, cls: _Any) -> _Any: ...

def camel_to_underscore(text: str) -> str: ...

def chmod(
        path: _PATH,
        mode_file: _Optional[int]=...,
        mode_dir: _Optional[int]=...,
        include_parent: bool=...
) -> None: ...

def chown(
        path: _PATH,
        user: _Optional[_STR]=...,
        group: _Optional[_STR]=...,
        include_parent: bool=...
) -> None: ...

def cherry_pick(namespace: dict) -> None: ...

def convert_raw_utf8_escape(text: str) -> str: ...

def directory_present(
        path: _PATH,
        mode: _Optional[int]=...,
        user: _Optional[_STR]=...,
        group: _Optional[_STR]=...
) -> _Path: ...

def exists_as(path: _PATH) -> str: ...

def find_paths(pattern: _PATH) -> _Generator[_Path, None, None]: ...

def get_os_group(name: _STR_OR_INT_OR_NONE=...) -> _grp.struct_group: ...

def get_os_user(name: _STR_OR_INT_OR_NONE=...) -> _pwd.struct_passwd: ...

def has_any_attrs(obj: _Any, *attrs: _STR) -> bool: ...

def has_any_callables(obj: _Any, *attrs: _STR) -> bool: ...

def has_attrs(obj: _Any, *attrs: _STR) -> bool: ...

def has_callables(obj: _Any, *attrs: _STR) -> bool: ...

def is_list_like(obj: _Any) -> bool: ...

def is_subclass_of_any(obj: _Any, *classes: _Any) -> bool: ...

def lazy_import_module(
        name: _STR,
        package: _Optional[_STR]=...
) -> _ModuleType: ...

def normalize_path(path: _PATH) -> _Path: ...

def path_absent(path: _PATH) -> None: ...

def register_codecs() -> None: ...

def underscore_to_camel(text: _STR, lower_first: bool=...) -> str: ...

def validate_identifier(
        identifier: _STR,
        allow_underscore: bool=...
) -> None: ...
