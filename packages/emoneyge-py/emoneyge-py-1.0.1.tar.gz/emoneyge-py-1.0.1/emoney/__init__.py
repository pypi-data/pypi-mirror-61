import requests
from bs4 import BeautifulSoup
from urllib.parse import parse_qs


def login_required(func):
    def func_wrapper(self, *args, **kwargs):
        if not self.logged_in:
            raise Exception('login first by using login(username, password)')
        else:
            return func(self, *args, **kwargs)

    return func_wrapper

class eMoneyClient:

    def __init__(self):
        self.headers = {"Host": "www.emoney.ge","User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0",
                        "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8","Accept-Language": "en","Accept-Encoding": "gzip, deflate, br",
                        "Referer": "https://www.emoney.ge/index.php/main/welcome","Connection": "keep-alive","Upgrade-Insecure-Requests": "1","Cache-Control": "max-age=0","TE": "Trailers"}
        self.session = requests.Session()
        self.logged_in = False

    def __repr__(self):
        if self.logged_in:
            return 'eMoney.ge Client - Logged in as %s'%self.username
        else:
            return 'eMoney.ge Client - Not authenticated'

    def login(self, username, password, googleauthcode=None, smsauthcode=None, pincode=None):
        '''
        :param username: mobile number or email of your account
        :param password: password
        :param googleauthcode: google authentication code (if enabled)
        :param smsauthcode: sms authentication code (if enabled) call .send_code() first to get code
        :return: dict
        '''
        self.username = username
        self.password = password
        self.pincode = pincode
        url = 'https://www.emoney.ge/index.php/main/authorize'
        headers = {"Host": "www.emoney.ge","User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:64.0) Gecko/20100101 Firefox/64.0","Accept": "*/*","Accept-Language": "en",
                   "Accept-Encoding": "gzip, deflate, br","Referer": "https://www.emoney.ge/index.php/main/welcome","Content-Type": "application/x-www-form-urlencoded; charset=UTF-8",
                   "X-Requested-With": "XMLHttpRequest","Content-Length": "72","DNT": "1","Connection": "keep-alive","Cookie": "latest_username=sinnerman227%40gmail.com","TE": "Trailers"}
        login = self.session.post(url, headers=headers, data={'email': username, 'password': password, 'next': ''})
        if login.status_code == 200:
            response = login.json()
            if response.get('isAuthenticatorEnabled') == True or response.get('otp') == True:
                if googleauthcode != None:
                    method = 'authenticator'
                    otp = googleauthcode
                else:
                    if response.get('otp') == True and smsauthcode == None:
                        raise Exception('missing 2fa code, provide google authentication code with login(username, password, googleauthcode="foobar") or with smsauthcode, call .send_code() first to get authentication code')
                    method = 'otp'
                    otp = smsauthcode
                data = {'email':username, 'password': password, 'method': method, 'otp': otp, 'remember': 1}
                twoFA = 'https://www.emoney.ge/index.php/main/loginAction'
                resp = self.session.post(twoFA, headers=self.headers, data=data)
                # idk what it returns if code is wrong
            self.logged_in = True
            print('eMoney client logged in')
            return {'success': True}
        else:
            raise Exception('invalid username or password', login.content.decode('utf-8'))

    @login_required
    def send_code(self):
        url = 'https://www.emoney.ge/index.php/main/sendCode'
        response = self.session.post(url, headers=self.headers, data={'phone': ''})
        return response.json()

    @login_required
    def get_balance(self):
        url = 'https://www.emoney.ge/index.php/myaccount/getuseremoneybalance'
        response = self.session.get(url, headers=self.headers).json()
        return response

    @login_required
    def get_transaction(self, transactioncode):
        '''
        :param transactioncode: transactioncode generated by eMoney
        :return: dict
        '''
        html = self.session.get('https://www.emoney.ge/index.php/myaccount/transactioninfo?transactioncode=%s'%transactioncode, headers=self.headers).content.decode('utf-8')
        soup = BeautifulSoup(html, 'html.parser')
        table = soup.find('div', {'class': 'invoice-box'})\
            .find('table')
        data = {'sender': {}, 'receiver': {}, 'description': {}, 'transactioncode': transactioncode}
        data['date'] = table.find('td', {'class': 'date'}).text.replace('\n', '')
        status = table.find('td', {'class': 'invoice-order'})['class'][1]
        if status == 'bg-success':
            data['status'] = 'accepted'
        elif status == 'bg-processing':
            data['status'] = 'inProcess'
        elif status == 'bg-canceled':
            data['status'] = 'declined'
        elif status == 'bg-registered':
            data['status'] = 'registered'

        info = table.find_all('i', {'class': ['icon-question-sign', 'icon-ok']})
        sender = info[1].parent.text.replace('\n', '').split(',')
        receiver = info[0].parent.text.replace('\n', '').split(',')
        data['sender']['account'] = sender[1].replace(' ', '')
        sender_name = sender[0].split(' ')
        data['sender']['name'] = '%s %s' % (sender_name[-2], sender_name[-1])
        data['receiver']['account'] = receiver[0].replace(' ', '').replace('\r', '')
        receiver_name = receiver[1].split(' ')
        data['receiver']['name'] = '%s %s' % (receiver_name[1], receiver_name[2])
        total = table.find('tr', {'class': 'total'}).find_all('td')[1]
        for br in total('br'):
            br.replace_with('\n')
        amount = total.text.split('\n')
        data['description']['currency'] = amount[1].split(' ')[-2]
        data['description']['total'] = float(amount[1].split(' ')[-1])
        fee = data['description']['total'] / 100
        data['description']['fee'] = fee if fee > 0.01 else 0.01
        data['description']['amount'] = data['description']['total'] - data['description']['fee'] # for some reason, when completing transaction you MUST pass amount, if you get it wrong, transaction will hang
        spelled = amount[2].split(' ')
        data['description']['spelled'] = '%s %s' % (spelled[0], spelled[1])
        return data

    @login_required
    def request_money(self, sender, amount, currency='GEL', description=''):
        '''
        :param sender: recipient
        :param amount: amount of money you want to send
        :param currency: currency you're sending, default is GEL, accepts GEL, USD, EUR, RUB, AMD, AMZ, UAH
        :param description: description of trade (optional)
        :return: dict
        '''
        currency = currency.upper() # emoney only accepts uppercase (i think)
        url = 'https://www.emoney.ge/index.php/myaccount/dorequestmoney'
        response = self.session.post(url, headers=self.headers, data={'sender': sender, 'currency': currency, 'amount': amount, 'description': description}, allow_redirects=False)
        if response.status_code != 302:
            raise Exception('unexpected error')
        if response.headers['Location'] == 'https://www.emoney.ge/index.php/main/welcome':
            return None
        parsed_query = parse_qs(response.headers['Location']) # get id from redirected link query
        transactioncode = list(parsed_query.values())[0][0]
        return self.get_transaction(transactioncode)

    @login_required
    def send_money(self, receiver, amount, currency='GEL', description='', protect: int=None):
        '''
        :param receiver: recipient
        :param amount: amount of money you want to send
        :param currency: currency you're sending, default is GEL, default is GEL, accepts GEL, USD, EUR, RUB, AMD, AMZ, UAH
        :param description: description of trade (optional)
        :param protect: if given value between 0 and 5, function will return security code which must be used by recipient to redeem money, value is amount of days till it expires
        :return: dict
        '''
        currency = currency.upper() # emoney only accepts uppercase (i think)
        url = 'https://www.emoney.ge/index.php/myaccount/dosendmoney'
        data = {'receiver': receiver, 'amount': float(amount), 'currency': currency, 'description': description, 'xrpdt': ''} # i have no idea what xrpdt is
        if protect != None:
            data['protect'] = 1
            data['escrow'] = protect
        else:
            data['escrow'] = 5
        response = self.session.post(url, headers=self.headers, data=data, allow_redirects=False)
        parsed_query = parse_qs(response.headers['Location']) # get id from redirected link query
        transactioncode = list(parsed_query.values())[0][0]
        return self.complete_transaction(transactioncode)

    @login_required
    def complete_transaction(self, transactioncode, protection_code=False):
        '''
        :param transactioncode: transactioncode generated by eMoney
        :param protection_code: if set to True, code will extract security code (needed for 'protected' transactions, see function send_money for more details)
        :return: dict
        '''
        url = 'https://www.emoney.ge/index.php/myaccount/completetransfer'
        transaction = self.get_transaction(transactioncode)
        if self.pincode == None:
            password = self.password
        else:
            password = self.pincode
        data = {'returnURL': 'http://www.emoney.ge/index.php/myaccount/transactioninfo?transactioncode=%s'%transactioncode, 'transactioncode': transactioncode,
                'currency': transaction['description']['currency'], 'amount': transaction['description']['amount'], 'password': password, 'cardid': '', 'sender_iban': ''}
        response = self.session.post(url, headers=self.headers, data=data, allow_redirects=False)
        redirect_url = response.headers['Location']
        if redirect_url == 'https://www.emoney.ge/index.php/myaccount/transactionstatus?transactioncode=%s'%transactioncode:
            if protection_code:
                soup = BeautifulSoup(response.content.decode('utf-8'), 'html.parser')
                protection_code = soup.find('span', {'class': 'label label-info'}).text
                return {'success': True, 'protection_code': protection_code}
            else:
                return {'success': True}
        else:
            raise Exception('could not complete transaction')

    @login_required
    def cancel_transaction(self, transactioncode):
        '''
        :param transactioncode: transactioncode generated by eMoney
        :return: dict
        '''
        resp = self.session.get('https://www.emoney.ge/index.php/myaccount/canceltransfer?transactioncode=%s'%transactioncode, headers=self.headers)
        if resp.status_code != 500:
            return {'success': True}
        else:
            return {'success': False}
