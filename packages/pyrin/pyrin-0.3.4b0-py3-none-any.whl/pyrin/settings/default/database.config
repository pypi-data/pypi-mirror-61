[active]
selected: development

[development]

# if False, result column names will match in a case-insensitive fashion.
sqlalchemy_case_sensitive: false

# if True, the Engine will log all statements as well as a repr() of their
# parameter lists to the default log handler.
sqlalchemy_echo: false

# if True, the connection pool will log informational output such as when connections
# are invalidated as well as when connections are recycled to the default log handler.
sqlalchemy_echo_pool: false

# default encoding.
sqlalchemy_encoding: utf-8

# when True, a RETURNING- compatible construct, if available, will be used to fetch
# newly generated primary key values when a single row INSERT statement is emitted with
# no existing returning() clause. This applies to those backends which support RETURNING.
sqlalchemy_implicit_returning: false

# this string parameter is interpreted by various dialects in order to
# affect the transaction isolation level of the database connection.
# the parameter essentially accepts some subset of these string arguments:
# "SERIALIZABLE", "REPEATABLE_READ", "READ_COMMITTED", "READ_UNCOMMITTED" and "AUTOCOMMIT".
sqlalchemy_isolation_level: READ_UNCOMMITTED

# string identifier which will be used within the “name” field of logging records
# generated within the “sqlalchemy.engine” logger.
# sqlalchemy_logging_name:

# string identifier which will be used within the “name” field of logging records
# generated within the “sqlalchemy.pool” logger.
# sqlalchemy_pool_logging_name:

# if True will enable the connection pool “pre-ping” feature that tests connections
# for liveness upon each checkout.
sqlalchemy_pool_pre_ping: true

# the number of connections to keep open inside the connection pool.
sqlalchemy_pool_size: 10

# the number of connections to allow in connection pool “overflow”, that is
# connections that can be opened above and beyond the pool_size setting.
sqlalchemy_max_overflow: 10

# this setting causes the pool to recycle connections after the given
# number of seconds has passed.
sqlalchemy_pool_recycle: -1

# set the Pool.reset_on_return parameter of the underlying Pool object,
# which can be set to the values "rollback", "commit", or none.
sqlalchemy_pool_reset_on_return: rollback

# number of seconds to wait before giving up on getting a connection from the pool.
sqlalchemy_pool_timeout: 30

# use LIFO (last-in-first-out) when retrieving connections from QueuePool instead
# of FIFO (first-in-first-out). Using LIFO, a server-side timeout scheme can reduce
# the number of connections used during non-peak periods of use.
sqlalchemy_pool_use_lifo: true

# a Pool subclass, which will be used to create a connection pool instance using the
# connection parameters given in the URL.
sqlalchemy_poolclass: QueuePool

# database URL that should be used for the connection.
# format: dialect+driver://username:password@host:port/database
# format for in memory SQLite: sqlite:///:memory:
sqlalchemy_url: sqlite:///:memory:

[production]

# if False, result column names will match in a case-insensitive fashion.
sqlalchemy_case_sensitive: false

# if True, the Engine will log all statements as well as a repr() of their
# parameter lists to the default log handler.
sqlalchemy_echo: false

# if True, the connection pool will log informational output such as when connections
# are invalidated as well as when connections are recycled to the default log handler.
sqlalchemy_echo_pool: false

# default encoding.
sqlalchemy_encoding: utf-8

# when True, a RETURNING- compatible construct, if available, will be used to fetch
# newly generated primary key values when a single row INSERT statement is emitted with
# no existing returning() clause. This applies to those backends which support RETURNING.
sqlalchemy_implicit_returning: false

# this string parameter is interpreted by various dialects in order to
# affect the transaction isolation level of the database connection.
# the parameter essentially accepts some subset of these string arguments:
# "SERIALIZABLE", "REPEATABLE_READ", "READ_COMMITTED", "READ_UNCOMMITTED" and "AUTOCOMMIT".
sqlalchemy_isolation_level: READ_UNCOMMITTED

# string identifier which will be used within the “name” field of logging records
# generated within the “sqlalchemy.engine” logger.
# sqlalchemy_logging_name:

# string identifier which will be used within the “name” field of logging records
# generated within the “sqlalchemy.pool” logger.
# sqlalchemy_pool_logging_name:

# if True will enable the connection pool “pre-ping” feature that tests connections
# for liveness upon each checkout.
sqlalchemy_pool_pre_ping: true

# the number of connections to keep open inside the connection pool.
sqlalchemy_pool_size: 10

# the number of connections to allow in connection pool “overflow”, that is
# connections that can be opened above and beyond the pool_size setting.
sqlalchemy_max_overflow: 10

# this setting causes the pool to recycle connections after the given
# number of seconds has passed.
sqlalchemy_pool_recycle: -1

# set the Pool.reset_on_return parameter of the underlying Pool object,
# which can be set to the values "rollback", "commit", or none.
sqlalchemy_pool_reset_on_return: rollback

# number of seconds to wait before giving up on getting a connection from the pool.
sqlalchemy_pool_timeout: 30

# use LIFO (last-in-first-out) when retrieving connections from QueuePool instead
# of FIFO (first-in-first-out). Using LIFO, a server-side timeout scheme can reduce
# the number of connections used during non-peak periods of use.
sqlalchemy_pool_use_lifo: true

# a Pool subclass, which will be used to create a connection pool instance using the
# connection parameters given in the URL.
sqlalchemy_poolclass: QueuePool

# database URL that should be used for the connection.
# format: dialect+driver://username:password@host:port/database
# format for in memory SQLite: sqlite:///:memory:
sqlalchemy_url: sqlite:///:memory:

[test]

# if False, result column names will match in a case-insensitive fashion.
sqlalchemy_case_sensitive: false

# if True, the Engine will log all statements as well as a repr() of their
# parameter lists to the default log handler.
sqlalchemy_echo: false

# if True, the connection pool will log informational output such as when connections
# are invalidated as well as when connections are recycled to the default log handler.
sqlalchemy_echo_pool: false

# default encoding.
sqlalchemy_encoding: utf-8

# when True, a RETURNING- compatible construct, if available, will be used to fetch
# newly generated primary key values when a single row INSERT statement is emitted with
# no existing returning() clause. This applies to those backends which support RETURNING.
sqlalchemy_implicit_returning: false

# this string parameter is interpreted by various dialects in order to
# affect the transaction isolation level of the database connection.
# the parameter essentially accepts some subset of these string arguments:
# "SERIALIZABLE", "REPEATABLE_READ", "READ_COMMITTED", "READ_UNCOMMITTED" and "AUTOCOMMIT".
sqlalchemy_isolation_level: READ_UNCOMMITTED

# string identifier which will be used within the “name” field of logging records
# generated within the “sqlalchemy.engine” logger.
# sqlalchemy_logging_name:

# string identifier which will be used within the “name” field of logging records
# generated within the “sqlalchemy.pool” logger.
# sqlalchemy_pool_logging_name:

# if True will enable the connection pool “pre-ping” feature that tests connections
# for liveness upon each checkout.
sqlalchemy_pool_pre_ping: true

# the number of connections to keep open inside the connection pool.
sqlalchemy_pool_size: 10

# the number of connections to allow in connection pool “overflow”, that is
# connections that can be opened above and beyond the pool_size setting.
sqlalchemy_max_overflow: 10

# this setting causes the pool to recycle connections after the given
# number of seconds has passed.
sqlalchemy_pool_recycle: -1

# set the Pool.reset_on_return parameter of the underlying Pool object,
# which can be set to the values "rollback", "commit", or none.
sqlalchemy_pool_reset_on_return: rollback

# number of seconds to wait before giving up on getting a connection from the pool.
sqlalchemy_pool_timeout: 30

# use LIFO (last-in-first-out) when retrieving connections from QueuePool instead
# of FIFO (first-in-first-out). Using LIFO, a server-side timeout scheme can reduce
# the number of connections used during non-peak periods of use.
sqlalchemy_pool_use_lifo: true

# a Pool subclass, which will be used to create a connection pool instance using the
# connection parameters given in the URL.
sqlalchemy_poolclass: QueuePool

# database URL that should be used for the connection.
# format: dialect+driver://username:password@host:port/database
# format for in memory SQLite: sqlite:///:memory:
sqlalchemy_url: sqlite:///:memory:

[request_scoped_session]

# autoflush the instructions into database.
autoflush: true

# autocommit the changes into database.
autocommit: false

# expire all objects in session after commit or
# rollback and get their new state in subsequent calls.
expire_on_commit: true

[thread_scoped_session]

# autoflush the instructions into database.
autoflush: true

# autocommit the changes into database.
autocommit: false

# expire all objects in session after commit or
# rollback and get their new state in subsequent calls.
expire_on_commit: true

[paging]

# limit to be applied in queries.
limit: none

# offset to be applied in queries.
offset: none

[general]

# database engine config names prefix.
configs_prefix: sqlalchemy_

[migration]

# drop all models on server startup.
# note that this will occur before create_on_startup.
# also it only occurs if 'env = development' and 'debug = true' or
# if 'env = testing' and 'unit_testing = true'.
drop_on_startup: false

# create all models on server startup.
create_on_startup: true