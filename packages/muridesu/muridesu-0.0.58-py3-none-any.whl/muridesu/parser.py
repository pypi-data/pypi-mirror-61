from ast import *
# this file is auto-generated by RBNF.hs and the Python package rbnf-rts

from rbnf_rts.rbnf_linker import link
from rbnf_rts.utils import ImmutableMap
from rbnf_rts.lexical import *
__all__ = ['lexicals', 'run_lexer', 'mk_parser']
(lexicals, run_lexer) = lexer(r(COMMENT='#[^\\n\\r]*'), r(FLOAT='[-+]?[0-9]+\\.\\d+([eE][-+]?\\d+)?|[-+]?[0-9]+[eE][-+]?\\d+'), r(INT='[-+]?\\d+'), r(ID="[a-zA-Z_\\u4e00-\\u9fa5][a-zA-Z0-9_\\u4e00-\\u9fa5]*'?"), r(STRING='"([^\\\\"]+|\\\\.)*?"|\'([^\\\\\']+|\\\\.)*?\''), r(W='\\s+'), l['~'], l['}'], l['|'], l['{'], l['^'], l[']'], l['['], l['@'], l['>>'], l['>='], l['>'], l['=>'], l['=='], l['='], l['<='], l['<<'], l['<:'], l['<'], l[';'], l['//'], l['/'], l['...'], l['.'], l['->'], l['-'], l[','], l['+'], l['**'], l['*'], l[')'], l['('], l['&'], l['%'], l['!='], ignores=['W', 'COMMENT'], reserved_map=ImmutableMap.from_dict({',': 'quote ,', '(': 'quote (', ')': 'quote )', 'class': 'quote class', 'meta': 'quote meta', 'as': 'quote as', '{': 'quote {', '}': 'quote }', '.': 'quote .', 'catch': 'quote catch', 'func': 'quote func', 'if': 'quote if', 'else': 'quote else', '<:': 'quote <:', 'return': 'quote return', 'while': 'quote while', 'for': 'quote for', 'in': 'quote in', 'with': 'quote with', 'break': 'quote break', 'continue': 'quote continue', 'assert': 'quote assert', 'import': 'quote import', 'from': 'quote from', 'global': 'quote global', 'nonlocal': 'quote nonlocal', 'raise': 'quote raise', 'try': 'quote try', 'finally': 'quote finally', '=': 'quote =', ';': 'quote ;', 'fn': 'quote fn', '->': 'quote ->', 'or': 'quote or', 'and': 'quote and', 'not': 'quote not', '<': 'quote <', '>': 'quote >', '==': 'quote ==', '>=': 'quote >=', '<=': 'quote <=', '!=': 'quote !=', 'is': 'quote is', '*': 'quote *', '@': 'quote @', '/': 'quote /', '%': 'quote %', '//': 'quote //', '+': 'quote +', '-': 'quote -', '|': 'quote |', '^': 'quote ^', '&': 'quote &', '>>': 'quote >>', '<<': 'quote <<', '**': 'quote **', '=>': 'quote =>', '~': 'quote ~', 'yield': 'quote yield', ']': 'quote ]', '[': 'quote [', '...': 'quote ...', 'None': 'quote None', 'True': 'quote True', 'False': 'quote False'}), numbering={'BOF': 0, 'EOF': 1, 'quote ,': 2, 'quote (': 3, 'quote )': 4, 'quote class': 5, 'quote meta': 6, 'quote as': 7, 'quote {': 8, 'quote }': 9, 'quote .': 10, 'quote catch': 11, 'quote func': 12, 'quote if': 13, 'quote else': 14, 'quote <:': 15, 'quote return': 16, 'quote while': 17, 'quote for': 18, 'quote in': 19, 'quote with': 20, 'quote break': 21, 'quote continue': 22, 'quote assert': 23, 'quote import': 24, 'quote from': 25, 'quote global': 26, 'quote nonlocal': 27, 'quote raise': 28, 'quote try': 29, 'quote finally': 30, 'quote =': 31, 'quote ;': 32, 'quote fn': 33, 'quote ->': 34, 'quote or': 35, 'quote and': 36, 'quote not': 37, 'quote <': 38, 'quote >': 39, 'quote ==': 40, 'quote >=': 41, 'quote <=': 42, 'quote !=': 43, 'quote is': 44, 'quote *': 45, 'quote @': 46, 'quote /': 47, 'quote %': 48, 'quote //': 49, 'quote +': 50, 'quote -': 51, 'quote |': 52, 'quote ^': 53, 'quote &': 54, 'quote >>': 55, 'quote <<': 56, 'quote **': 57, 'quote =>': 58, 'quote ~': 59, 'quote yield': 60, 'quote ]': 61, 'quote [': 62, 'quote ...': 63, 'quote None': 64, 'quote True': 65, 'quote False': 66, 'COMMENT': 67, 'FLOAT': 68, 'INT': 69, 'ID': 70, 'STRING': 71, 'W': 72})



def mk_parser(loc, DQString, METACLASS, join_string_by_dot, as_load, as_store, tuple_if_more_than_1, mk_tuple, list_, bin_reduce, extend, Operator, Lift):
    from rbnf_rts.rts import AST as prim__mk__ast, Cons as prim__cons, _nil as prim__nil
    join__string__by__dot = join_string_by_dot
    as__load = as_load
    as__store = as_store
    tuple__if__more__than__1 = tuple_if_more_than_1
    mk__tuple = mk_tuple
    list__ = list_
    bin__reduce = bin_reduce

    def lr_step_and(_slot_0, prim__state, prim__tokens):
        lcl_0 = 36
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote and not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_not(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = And()
                lcl_3 = _slot_0
                lcl_4 = _slot_2
                lcl_3 = [lcl_3, lcl_4]
                lcl_2 = BoolOp(lcl_2, lcl_3)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_and(_slot_0, prim__state, prim__tokens):
        lr_and_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_and(lr_and_reduce, prim__state, prim__tokens)
        lr_and_try = lcl_0
        lcl_0 = lr_and_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_and_try[1]
            lcl_1 = lcl_1
            lr_and_reduce = lcl_1
            lcl_1 = lr_step_and(lr_and_reduce, prim__state, prim__tokens)
            lr_and_try = lcl_1
            lcl_1 = lr_and_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_and_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_and_try
        return lcl_0

    def lr_step_atom(_slot_0, prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 10):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_1 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 62):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_2 = lcl_6
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_3_check = lcl_6
                        lcl_6 = _slot_3_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_3_check
                        else:
                            lcl_7 = _slot_3_check[1]
                            lcl_7 = lcl_7
                            _slot_3 = lcl_7
                            lcl_7 = 61
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_7):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_7 = _py_local_tk
                            _slot_4 = lcl_7
                            lcl_7 = (_slot_4 is None)
                            if lcl_7:
                                lcl_8 = prim__tokens.offset
                                lcl_8 = (lcl_8, 'quote ] not match')
                                lcl_8 = prim__cons(lcl_8, prim__nil)
                                lcl_8 = lcl_8
                                lcl_8 = (False, lcl_8)
                                lcl_7 = lcl_8
                            else:
                                lcl_8 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_9 = _slot_0
                                lcl_10 = _slot_3
                                lcl_10 = tuple__if__more__than__1(lcl_10)
                                lcl_10 = Index(lcl_10)
                                lcl_10 = Subscript(lcl_9, lcl_10)
                                lcl_10 = loc(lcl_8, lcl_10)
                                _slot_local__1 = lcl_10
                                lcl_10 = (True, _slot_local__1)
                                lcl_7 = lcl_10
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 70):
                        lcl_10 = parse_Ident(prim__state, prim__tokens)
                        _slot_2_check = lcl_10
                        lcl_10 = _slot_2_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                            lcl_7 = _slot_0
                            lcl_8 = _slot_2
                            lcl_7 = Attribute(lcl_7, lcl_8)
                            lcl_6 = loc(lcl_6, lcl_7)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    else:
                        lcl_10 = (_off_1, 'atom lookahead failed')
                        lcl_10 = prim__cons(lcl_10, prim__nil)
                        lcl_10 = lcl_10
                        lcl_10 = (False, lcl_10)
                        lcl_4 = lcl_10
                    lcl_3 = lcl_4
                else:
                    lcl_10 = (_off_1, 'atom got EOF')
                    lcl_10 = prim__cons(lcl_10, prim__nil)
                    lcl_10 = lcl_10
                    lcl_10 = (False, lcl_10)
                    lcl_3 = lcl_10
                lcl_1 = lcl_3
            elif (lcl_2 == 3):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_1 = lcl_10
                lcl_10 = prim__tokens.offset
                _off_1 = lcl_10
                lcl_10 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_10:
                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_4 = lcl_4.idint
                    if (lcl_4 == 59):
                        lcl_5 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            lcl_6 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_6):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_6 = _py_local_tk
                            _slot_3 = lcl_6
                            lcl_6 = (_slot_3 is None)
                            if lcl_6:
                                lcl_7 = prim__tokens.offset
                                lcl_7 = (lcl_7, 'quote ) not match')
                                lcl_7 = prim__cons(lcl_7, prim__nil)
                                lcl_7 = lcl_7
                                lcl_7 = (False, lcl_7)
                                lcl_6 = lcl_7
                            else:
                                lcl_7 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_8 = _slot_0
                                lcl_9 = _slot_2
                                lcl_11 = []
                                lcl_11 = Call(lcl_8, lcl_9, lcl_11)
                                lcl_11 = loc(lcl_7, lcl_11)
                                _slot_local__1 = lcl_11
                                lcl_11 = (True, _slot_local__1)
                                lcl_6 = lcl_11
                            lcl_5 = lcl_6
                        lcl_3 = lcl_5
                    elif (lcl_4 == 60):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 37):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 33):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 62):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 65):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 64):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 66):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 63):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 51):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 4):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_11 = _py_local_t
                        _slot_2 = lcl_11
                        lcl_11 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                        lcl_5 = _slot_0
                        lcl_6 = []
                        lcl_7 = []
                        lcl_5 = Call(lcl_5, lcl_6, lcl_7)
                        lcl_11 = loc(lcl_11, lcl_5)
                        _slot_local__1 = lcl_11
                        lcl_11 = (True, _slot_local__1)
                        lcl_3 = lcl_11
                    elif (lcl_4 == 3):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 71):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 69):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 70):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    elif (lcl_4 == 68):
                        lcl_11 = parse_exprs(prim__state, prim__tokens)
                        _slot_2_check = lcl_11
                        lcl_11 = _slot_2_check[0]
                        lcl_11 = (lcl_11 is False)
                        if lcl_11:
                            lcl_11 = _slot_2_check
                        else:
                            lcl_5 = _slot_2_check[1]
                            lcl_5 = lcl_5
                            _slot_2 = lcl_5
                            lcl_5 = 4
                            try:
                                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                if (_py_local_tk.idint is lcl_5):
                                    prim__tokens.offset += 1
                                else:
                                    _py_local_tk = None
                            except IndexError:
                                _py_local_tk = None
                            lcl_5 = _py_local_tk
                            _slot_3 = lcl_5
                            lcl_5 = (_slot_3 is None)
                            if lcl_5:
                                lcl_6 = prim__tokens.offset
                                lcl_6 = (lcl_6, 'quote ) not match')
                                lcl_6 = prim__cons(lcl_6, prim__nil)
                                lcl_6 = lcl_6
                                lcl_6 = (False, lcl_6)
                                lcl_5 = lcl_6
                            else:
                                lcl_6 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                lcl_7 = _slot_0
                                lcl_8 = _slot_2
                                lcl_9 = []
                                lcl_7 = Call(lcl_7, lcl_8, lcl_9)
                                lcl_6 = loc(lcl_6, lcl_7)
                                _slot_local__1 = lcl_6
                                lcl_6 = (True, _slot_local__1)
                                lcl_5 = lcl_6
                            lcl_11 = lcl_5
                        lcl_3 = lcl_11
                    else:
                        lcl_11 = (_off_1, 'atom lookahead failed')
                        lcl_11 = prim__cons(lcl_11, prim__nil)
                        lcl_11 = lcl_11
                        lcl_11 = (False, lcl_11)
                        lcl_3 = lcl_11
                    lcl_10 = lcl_3
                else:
                    lcl_11 = (_off_1, 'atom got EOF')
                    lcl_11 = prim__cons(lcl_11, prim__nil)
                    lcl_11 = lcl_11
                    lcl_11 = (False, lcl_11)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            else:
                lcl_10 = (_off_0, 'atom lookahead failed')
                lcl_10 = prim__cons(lcl_10, prim__nil)
                lcl_10 = lcl_10
                lcl_10 = (False, lcl_10)
                lcl_1 = lcl_10
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'atom got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_atom(_slot_0, prim__state, prim__tokens):
        lr_atom_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_atom(lr_atom_reduce, prim__state, prim__tokens)
        lr_atom_try = lcl_0
        lcl_0 = lr_atom_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_atom_try[1]
            lcl_1 = lcl_1
            lr_atom_reduce = lcl_1
            lcl_1 = lr_step_atom(lr_atom_reduce, prim__state, prim__tokens)
            lr_atom_try = lcl_1
            lcl_1 = lr_atom_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_atom_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_atom_try
        return lcl_0

    def lr_step_bin__lst(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_bin__right(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            lcl_1 = extend(lcl_1, lcl_2)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_bin__lst(_slot_0, prim__state, prim__tokens):
        lr_bin__lst_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_bin__lst(lr_bin__lst_reduce, prim__state, prim__tokens)
        lr_bin__lst_try = lcl_0
        lcl_0 = lr_bin__lst_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_bin__lst_try[1]
            lcl_1 = lcl_1
            lr_bin__lst_reduce = lcl_1
            lcl_1 = lr_step_bin__lst(lr_bin__lst_reduce, prim__state, prim__tokens)
            lr_bin__lst_try = lcl_1
            lcl_1 = lr_bin__lst_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_bin__lst_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_bin__lst_try
        return lcl_0

    def lr_step_cmp(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_cmpop(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = parse_bin(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_1
                lcl_3 = [lcl_3]
                lcl_4 = _slot_2
                lcl_4 = [lcl_4]
                lcl_2 = Compare(lcl_2, lcl_3, lcl_4)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_cmp(_slot_0, prim__state, prim__tokens):
        lr_cmp_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_cmp(lr_cmp_reduce, prim__state, prim__tokens)
        lr_cmp_try = lcl_0
        lcl_0 = lr_cmp_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_cmp_try[1]
            lcl_1 = lcl_1
            lr_cmp_reduce = lcl_1
            lcl_1 = lr_step_cmp(lr_cmp_reduce, prim__state, prim__tokens)
            lr_cmp_try = lcl_1
            lcl_1 = lr_cmp_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_cmp_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_cmp_try
        return lcl_0

    def lr_step_expr(_slot_0, prim__state, prim__tokens):
        lcl_0 = 13
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote if not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_expr(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = 14
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_3 = lcl_2
                lcl_2 = (_slot_3 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'quote else not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = parse_expr(prim__state, prim__tokens)
                    _slot_4_check = lcl_3
                    lcl_3 = _slot_4_check[0]
                    lcl_3 = (lcl_3 is False)
                    if lcl_3:
                        lcl_3 = _slot_4_check
                    else:
                        lcl_4 = _slot_4_check[1]
                        lcl_4 = lcl_4
                        _slot_4 = lcl_4
                        lcl_4 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                        lcl_5 = _slot_0
                        lcl_6 = _slot_2
                        lcl_7 = _slot_4
                        lcl_5 = IfExp(lcl_5, lcl_6, lcl_7)
                        lcl_4 = loc(lcl_4, lcl_5)
                        _slot_local__1 = lcl_4
                        lcl_4 = (True, _slot_local__1)
                        lcl_3 = lcl_4
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_expr(_slot_0, prim__state, prim__tokens):
        lr_expr_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_expr(lr_expr_reduce, prim__state, prim__tokens)
        lr_expr_try = lcl_0
        lcl_0 = lr_expr_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_expr_try[1]
            lcl_1 = lcl_1
            lr_expr_reduce = lcl_1
            lcl_1 = lr_step_expr(lr_expr_reduce, prim__state, prim__tokens)
            lr_expr_try = lcl_1
            lcl_1 = lr_expr_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_expr_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_expr_try
        return lcl_0

    def lr_step_or(_slot_0, prim__state, prim__tokens):
        lcl_0 = 35
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote or not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_and(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = Or()
                lcl_3 = _slot_0
                lcl_4 = _slot_2
                lcl_3 = [lcl_3, lcl_4]
                lcl_2 = BoolOp(lcl_2, lcl_3)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_or(_slot_0, prim__state, prim__tokens):
        lr_or_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_or(lr_or_reduce, prim__state, prim__tokens)
        lr_or_try = lcl_0
        lcl_0 = lr_or_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_or_try[1]
            lcl_1 = lcl_1
            lr_or_reduce = lcl_1
            lcl_1 = lr_step_or(lr_or_reduce, prim__state, prim__tokens)
            lr_or_try = lcl_1
            lcl_1 = lr_or_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_or_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_or_try
        return lcl_0

    def lr_step_rbnf__list__10(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_except__handler(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__10(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__10_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__10(lr_rbnf__list__10_reduce, prim__state, prim__tokens)
        lr_rbnf__list__10_try = lcl_0
        lcl_0 = lr_rbnf__list__10_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__10_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__10_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__10(lr_rbnf__list__10_reduce, prim__state, prim__tokens)
            lr_rbnf__list__10_try = lcl_1
            lcl_1 = lr_rbnf__list__10_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__list__10_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__list__10_try
        return lcl_0

    def lr_step_rbnf__list__2(_slot_0, prim__state, prim__tokens):
        lcl_0 = parse_stmt(prim__state, prim__tokens)
        _slot_1_check = lcl_0
        lcl_0 = _slot_1_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_1_check
        else:
            lcl_1 = _slot_1_check[1]
            lcl_1 = lcl_1
            _slot_1 = lcl_1
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__2(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__2_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__2(lr_rbnf__list__2_reduce, prim__state, prim__tokens)
        lr_rbnf__list__2_try = lcl_0
        lcl_0 = lr_rbnf__list__2_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__2_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__2_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__2(lr_rbnf__list__2_reduce, prim__state, prim__tokens)
            lr_rbnf__list__2_try = lcl_1
            lcl_1 = lr_rbnf__list__2_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__list__2_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__list__2_try
        return lcl_0

    def lr_step_rbnf__list__8(_slot_0, prim__state, prim__tokens):
        lcl_0 = 10
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote . not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = _slot_0
            lcl_2 = _slot_1
            _py_local_t = lcl_1
            _py_local_t.append(lcl_2)
            lcl_1 = _py_local_t
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__list__8(_slot_0, prim__state, prim__tokens):
        lr_rbnf__list__8_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__list__8(lr_rbnf__list__8_reduce, prim__state, prim__tokens)
        lr_rbnf__list__8_try = lcl_0
        lcl_0 = lr_rbnf__list__8_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__list__8_try[1]
            lcl_1 = lcl_1
            lr_rbnf__list__8_reduce = lcl_1
            lcl_1 = lr_step_rbnf__list__8(lr_rbnf__list__8_reduce, prim__state, prim__tokens)
            lr_rbnf__list__8_try = lcl_1
            lcl_1 = lr_rbnf__list__8_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__list__8_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__list__8_try
        return lcl_0

    def lr_step_rbnf__sep__list__1(_slot_0, prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_arg(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__1(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__1_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__1(lr_rbnf__sep__list__1_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__1_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__1_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__1_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__1_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__1(lr_rbnf__sep__list__1_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__1_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__1_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__1_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__1_try
        return lcl_0

    def lr_step_rbnf__sep__list__3(_slot_0, prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_expr(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__3(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__3_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__3(lr_rbnf__sep__list__3_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__3_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__3_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__3_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__3_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__3(lr_rbnf__sep__list__3_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__3_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__3_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__3_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__3_try
        return lcl_0

    def lr_step_rbnf__sep__list__4(_slot_0, prim__state, prim__tokens):
        lcl_0 = 10
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote . not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_Ident(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__4(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__4_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__4(lr_rbnf__sep__list__4_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__4_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__4_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__4_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__4_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__4(lr_rbnf__sep__list__4_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__4_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__4_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__4_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__4_try
        return lcl_0

    def lr_step_rbnf__sep__list__5(_slot_0, prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_atom(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__5(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__5_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__5(lr_rbnf__sep__list__5_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__5_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__5_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__5_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__5_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__5(lr_rbnf__sep__list__5_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__5_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__5_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__5_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__5_try
        return lcl_0

    def lr_step_rbnf__sep__list__6(_slot_0, prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_withitem(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__6(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__6_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__6(lr_rbnf__sep__list__6_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__6_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__6_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__6_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__6_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__6(lr_rbnf__sep__list__6_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__6_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__6_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__6_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__6_try
        return lcl_0

    def lr_step_rbnf__sep__list__7(_slot_0, prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_import__alias(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__7(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__7_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__7(lr_rbnf__sep__list__7_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__7_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__7_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__7_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__7_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__7(lr_rbnf__sep__list__7_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__7_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__7_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__7_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__7_try
        return lcl_0

    def lr_step_rbnf__sep__list__9(_slot_0, prim__state, prim__tokens):
        lcl_0 = 2
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote , not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_Ident(prim__state, prim__tokens)
            _slot_2_check = lcl_1
            lcl_1 = _slot_2_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_2_check
            else:
                lcl_2 = _slot_2_check[1]
                lcl_2 = lcl_2
                _slot_2 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_2
                _py_local_t = lcl_2
                _py_local_t.append(lcl_3)
                lcl_2 = _py_local_t
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_rbnf__sep__list__9(_slot_0, prim__state, prim__tokens):
        lr_rbnf__sep__list__9_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_rbnf__sep__list__9(lr_rbnf__sep__list__9_reduce, prim__state, prim__tokens)
        lr_rbnf__sep__list__9_try = lcl_0
        lcl_0 = lr_rbnf__sep__list__9_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_rbnf__sep__list__9_try[1]
            lcl_1 = lcl_1
            lr_rbnf__sep__list__9_reduce = lcl_1
            lcl_1 = lr_step_rbnf__sep__list__9(lr_rbnf__sep__list__9_reduce, prim__state, prim__tokens)
            lr_rbnf__sep__list__9_try = lcl_1
            lcl_1 = lr_rbnf__sep__list__9_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_rbnf__sep__list__9_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_rbnf__sep__list__9_try
        return lcl_0

    def lr_step_stmt(_slot_0, prim__state, prim__tokens):
        lcl_0 = 32
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_1 = lcl_0
        lcl_0 = (_slot_1 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote ; not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def lr_loop_stmt(_slot_0, prim__state, prim__tokens):
        lr_stmt_reduce = _slot_0
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = lr_step_stmt(lr_stmt_reduce, prim__state, prim__tokens)
        lr_stmt_try = lcl_0
        lcl_0 = lr_stmt_try[0]
        lcl_0 = (lcl_0 is not False)
        while lcl_0:
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = lr_stmt_try[1]
            lcl_1 = lcl_1
            lr_stmt_reduce = lcl_1
            lcl_1 = lr_step_stmt(lr_stmt_reduce, prim__state, prim__tokens)
            lr_stmt_try = lcl_1
            lcl_1 = lr_stmt_try[0]
            lcl_1 = (lcl_1 is not False)
            lcl_0 = lcl_1
        lcl_0 = prim__tokens.offset
        lcl_0 = (lcl_0 is _off_0)
        if lcl_0:
            lcl_1 = (True, lr_stmt_reduce)
            lcl_0 = lcl_1
        else:
            lcl_0 = lr_stmt_try
        return lcl_0

    def parse_Ident(prim__state, prim__tokens):
        lcl_0 = 70
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'ID not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = _slot_0
            lcl_1 = lcl_1.value
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_Name(prim__state, prim__tokens):
        lcl_0 = 70
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'ID not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
            lcl_2 = _slot_0
            lcl_2 = lcl_2.value
            lcl_2 = Name(lcl_2)
            lcl_1 = loc(lcl_1, lcl_2)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_START(prim__state, prim__tokens):
        lcl_0 = 0
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'BOF not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_stmts(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = 1
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_2):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_2 = _py_local_tk
                _slot_2 = lcl_2
                lcl_2 = (_slot_2 is None)
                if lcl_2:
                    lcl_3 = prim__tokens.offset
                    lcl_3 = (lcl_3, 'EOF not match')
                    lcl_3 = prim__cons(lcl_3, prim__nil)
                    lcl_3 = lcl_3
                    lcl_3 = (False, lcl_3)
                    lcl_2 = lcl_3
                else:
                    lcl_3 = _slot_1
                    lcl_3 = Module(lcl_3)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_and(prim__state, prim__tokens):
        lcl_0 = parse_not(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_and(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_arg(prim__state, prim__tokens):
        lcl_0 = 70
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'ID not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
            lcl_2 = _slot_0
            lcl_2 = lcl_2.value
            lcl_2 = arg(lcl_2, None)
            lcl_1 = loc(lcl_1, lcl_2)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_args(prim__state, prim__tokens):
        lcl_0 = 3
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote ( not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = prim__tokens.offset
            _off_1 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 4):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = []
                    lcl_5 = []
                    lcl_6 = []
                    lcl_7 = []
                    lcl_4 = arguments(lcl_4, None, lcl_5, lcl_6, None, lcl_7)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                elif (lcl_3 == 70):
                    lcl_4 = parse_rbnf__sep__list__1(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 4
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote ) not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            lcl_7 = []
                            lcl_8 = []
                            lcl_9 = []
                            lcl_6 = arguments(lcl_6, None, lcl_7, lcl_8, None, lcl_9)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = (_off_1, 'args lookahead failed')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_1, 'args got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_atom(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 62):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 59):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 60):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 37):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 33):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 61):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_7 = []
                        lcl_7 = List(lcl_7)
                        lcl_6 = loc(lcl_6, lcl_7)
                        _slot_local__1 = lcl_6
                        lcl_6 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                        lcl_4 = lcl_6
                    elif (lcl_5 == 62):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 65):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 64):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 66):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 63):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 51):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 3):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 71):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 69):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 70):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 68):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_list__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_9 = List(lcl_9)
                                lcl_8 = loc(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'atom lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'atom got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 65):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_4 = Constant(True)
                lcl_3 = loc(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_3
            elif (lcl_2 == 64):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_4 = Constant(None)
                lcl_3 = loc(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_3
            elif (lcl_2 == 66):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_4 = Constant(False)
                lcl_3 = loc(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_3
            elif (lcl_2 == 63):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_4 = Ellipsis()
                lcl_3 = loc(lcl_3, lcl_4)
                _slot_local__1 = lcl_3
                lcl_3 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_3
            elif (lcl_2 == 3):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 59):
                        lcl_6 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_9 = _slot_1
                                lcl_10 = _slot_2
                                lcl_10 = mk__tuple(lcl_9, lcl_10)
                                lcl_10 = loc(lcl_8, lcl_10)
                                _slot_local__1 = lcl_10
                                lcl_10 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_10
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 60):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 37):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 33):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 62):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 65):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 64):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 66):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 63):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 51):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 4):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_10 = _py_local_t
                        _slot_1 = lcl_10
                        lcl_10 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = []
                        lcl_6 = Tuple(lcl_6)
                        lcl_10 = loc(lcl_10, lcl_6)
                        _slot_local__1 = lcl_10
                        lcl_10 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                        lcl_4 = lcl_10
                    elif (lcl_5 == 3):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 71):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 69):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 70):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    elif (lcl_5 == 68):
                        lcl_10 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_10
                        lcl_10 = _slot_1_check[0]
                        lcl_10 = (lcl_10 is False)
                        if lcl_10:
                            lcl_10 = _slot_1_check
                        else:
                            lcl_6 = _slot_1_check[1]
                            lcl_6 = lcl_6
                            _slot_1 = lcl_6
                            lcl_6 = parse_tuple__tail(prim__state, prim__tokens)
                            _slot_2_check = lcl_6
                            lcl_6 = _slot_2_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_2_check
                            else:
                                lcl_7 = _slot_2_check[1]
                                lcl_7 = lcl_7
                                _slot_2 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_9 = _slot_2
                                lcl_8 = mk__tuple(lcl_8, lcl_9)
                                lcl_7 = loc(lcl_7, lcl_8)
                                _slot_local__1 = lcl_7
                                lcl_7 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_7
                            lcl_10 = lcl_6
                        lcl_4 = lcl_10
                    else:
                        lcl_10 = (_off_1, 'atom lookahead failed')
                        lcl_10 = prim__cons(lcl_10, prim__nil)
                        lcl_10 = lcl_10
                        lcl_10 = (False, lcl_10)
                        lcl_4 = lcl_10
                    lcl_3 = lcl_4
                else:
                    lcl_10 = (_off_1, 'atom got EOF')
                    lcl_10 = prim__cons(lcl_10, prim__nil)
                    lcl_10 = lcl_10
                    lcl_10 = (False, lcl_10)
                    lcl_3 = lcl_10
                lcl_1 = lcl_3
            elif (lcl_2 == 71):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = DQString(lcl_3)
                lcl_3 = Constant(lcl_3)
                lcl_10 = loc(lcl_10, lcl_3)
                _slot_local__1 = lcl_10
                lcl_10 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_10
            elif (lcl_2 == 69):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = int(lcl_3)
                lcl_3 = Constant(lcl_3)
                lcl_10 = loc(lcl_10, lcl_3)
                _slot_local__1 = lcl_10
                lcl_10 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_10
            elif (lcl_2 == 70):
                lcl_10 = parse_Name(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_3 = _slot_0_check[1]
                    lcl_3 = lcl_3
                    _slot_0 = lcl_3
                    lcl_3 = prim__tokens.offset
                    _off_1 = lcl_3
                    lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_3:
                        lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_5 = lcl_5.idint
                        if (lcl_5 == 62):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_6 = _py_local_t
                            _slot_1 = lcl_6
                            lcl_6 = prim__tokens.offset
                            _off_2 = lcl_6
                            lcl_6 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                            if lcl_6:
                                lcl_8 = prim__tokens.array[(prim__tokens.offset + 0)]
                                lcl_8 = lcl_8.idint
                                if (lcl_8 == 59):
                                    lcl_9 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_9
                                    lcl_9 = _slot_2_check[0]
                                    lcl_9 = (lcl_9 is False)
                                    if lcl_9:
                                        lcl_9 = _slot_2_check
                                    else:
                                        lcl_11 = _slot_2_check[1]
                                        lcl_11 = lcl_11
                                        _slot_2 = lcl_11
                                        lcl_11 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_11
                                        lcl_11 = _slot_3_check[0]
                                        lcl_11 = (lcl_11 is False)
                                        if lcl_11:
                                            lcl_11 = _slot_3_check
                                        else:
                                            lcl_12 = _slot_3_check[1]
                                            lcl_12 = lcl_12
                                            _slot_3 = lcl_12
                                            lcl_12 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_13 = _slot_0
                                            lcl_14 = _slot_2
                                            lcl_14 = List(lcl_14)
                                            lcl_14 = [lcl_14]
                                            lcl_15 = []
                                            lcl_13 = Call(lcl_13, lcl_14, lcl_15)
                                            lcl_12 = loc(lcl_12, lcl_13)
                                            _slot_local__1 = lcl_12
                                            lcl_12 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_11 = lcl_12
                                        lcl_9 = lcl_11
                                    lcl_7 = lcl_9
                                elif (lcl_8 == 60):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 37):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 33):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 61):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_11 = _py_local_t
                                    _slot_2 = lcl_11
                                    lcl_11 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                    lcl_12 = _slot_0
                                    lcl_13 = []
                                    lcl_14 = []
                                    lcl_12 = Call(lcl_12, lcl_13, lcl_14)
                                    lcl_11 = loc(lcl_11, lcl_12)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 62):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 65):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 64):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 66):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 63):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 51):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 3):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 71):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 69):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 70):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                elif (lcl_8 == 68):
                                    lcl_11 = parse_exprs(prim__state, prim__tokens)
                                    _slot_2_check = lcl_11
                                    lcl_11 = _slot_2_check[0]
                                    lcl_11 = (lcl_11 is False)
                                    if lcl_11:
                                        lcl_11 = _slot_2_check
                                    else:
                                        lcl_12 = _slot_2_check[1]
                                        lcl_12 = lcl_12
                                        _slot_2 = lcl_12
                                        lcl_12 = parse_list__tail(prim__state, prim__tokens)
                                        _slot_3_check = lcl_12
                                        lcl_12 = _slot_3_check[0]
                                        lcl_12 = (lcl_12 is False)
                                        if lcl_12:
                                            lcl_12 = _slot_3_check
                                        else:
                                            lcl_13 = _slot_3_check[1]
                                            lcl_13 = lcl_13
                                            _slot_3 = lcl_13
                                            lcl_13 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                            lcl_14 = _slot_0
                                            lcl_15 = _slot_2
                                            lcl_15 = List(lcl_15)
                                            lcl_15 = [lcl_15]
                                            lcl_9 = []
                                            lcl_14 = Call(lcl_14, lcl_15, lcl_9)
                                            lcl_13 = loc(lcl_13, lcl_14)
                                            _slot_local__1 = lcl_13
                                            lcl_13 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                                            lcl_12 = lcl_13
                                        lcl_11 = lcl_12
                                    lcl_7 = lcl_11
                                else:
                                    lcl_11 = (_off_2, 'atom lookahead failed')
                                    lcl_11 = prim__cons(lcl_11, prim__nil)
                                    lcl_11 = lcl_11
                                    lcl_11 = (False, lcl_11)
                                    lcl_7 = lcl_11
                                lcl_6 = lcl_7
                            else:
                                lcl_11 = (_off_2, 'atom got EOF')
                                lcl_11 = prim__cons(lcl_11, prim__nil)
                                lcl_11 = lcl_11
                                lcl_11 = (False, lcl_11)
                                lcl_6 = lcl_11
                            lcl_4 = lcl_6
                        elif (lcl_5 == 10):
                            lcl_11 = _slot_0
                            _slot_local__1 = lcl_11
                            lcl_11 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                            lcl_4 = lcl_11
                        elif (lcl_5 == 3):
                            lcl_11 = _slot_0
                            _slot_local__1 = lcl_11
                            lcl_11 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                            lcl_4 = lcl_11
                        elif (lcl_5 == 71):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_11 = _py_local_t
                            _slot_1 = lcl_11
                            lcl_11 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                            lcl_12 = _slot_0
                            lcl_13 = _slot_1
                            lcl_13 = lcl_13.value
                            lcl_13 = DQString(lcl_13)
                            lcl_13 = Constant(lcl_13)
                            lcl_13 = [lcl_13]
                            lcl_14 = []
                            lcl_12 = Call(lcl_12, lcl_13, lcl_14)
                            lcl_11 = loc(lcl_11, lcl_12)
                            _slot_local__1 = lcl_11
                            lcl_11 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                            lcl_4 = lcl_11
                        else:
                            lcl_11 = _slot_0
                            _slot_local__1 = lcl_11
                            lcl_11 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                            lcl_4 = lcl_11
                        lcl_3 = lcl_4
                    else:
                        lcl_11 = (_off_1, 'atom got EOF')
                        lcl_11 = prim__cons(lcl_11, prim__nil)
                        lcl_11 = lcl_11
                        lcl_11 = (False, lcl_11)
                        lcl_3 = lcl_11
                    lcl_10 = lcl_3
                lcl_1 = lcl_10
            elif (lcl_2 == 68):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_11 = _slot_0
                lcl_11 = lcl_11.value
                lcl_11 = float(lcl_11)
                lcl_11 = Constant(lcl_11)
                lcl_10 = loc(lcl_10, lcl_11)
                _slot_local__1 = lcl_10
                lcl_10 = lr_loop_atom(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_10
            else:
                lcl_10 = (_off_0, 'atom lookahead failed')
                lcl_10 = prim__cons(lcl_10, prim__nil)
                lcl_10 = lcl_10
                lcl_10 = (False, lcl_10)
                lcl_1 = lcl_10
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'atom got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_bin(prim__state, prim__tokens):
        lcl_0 = parse_bin__lst(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = bin__reduce(lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_bin__lst(prim__state, prim__tokens):
        lcl_0 = parse_factor(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_bin__lst(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_bin__right(prim__state, prim__tokens):
        lcl_0 = parse_binop(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = parse_factor(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = _slot_0
                lcl_3 = _slot_1
                lcl_2 = (lcl_2, lcl_3)
                _slot_local__1 = lcl_2
                lcl_2 = (True, _slot_local__1)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_binop(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 52):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 53):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 46):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 55):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 58):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 56):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 49):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 47):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 51):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 50):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 57):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 45):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 54):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 48):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = _slot_0
                lcl_3 = lcl_3.value
                lcl_3 = Operator(lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'binop lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'binop got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_block(prim__state, prim__tokens):
        lcl_0 = 8
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote { not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = prim__tokens.offset
            _off_1 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 59):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 9):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = []
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                elif (lcl_3 == 60):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 20):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 17):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 29):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 16):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 28):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 37):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 27):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 6):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 24):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 13):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 26):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 12):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 18):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 33):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 22):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 5):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 21):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 23):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 62):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 65):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 64):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 66):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 63):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 51):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 3):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 71):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 69):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 70):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                elif (lcl_3 == 68):
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_1_check = lcl_4
                    lcl_4 = _slot_1_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_1_check
                    else:
                        lcl_5 = _slot_1_check[1]
                        lcl_5 = lcl_5
                        _slot_1 = lcl_5
                        lcl_5 = 9
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_5):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_5 = _py_local_tk
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_2 is None)
                        if lcl_5:
                            lcl_6 = prim__tokens.offset
                            lcl_6 = (lcl_6, 'quote } not match')
                            lcl_6 = prim__cons(lcl_6, prim__nil)
                            lcl_6 = lcl_6
                            lcl_6 = (False, lcl_6)
                            lcl_5 = lcl_6
                        else:
                            lcl_6 = _slot_1
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = (_off_1, 'block lookahead failed')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_1, 'block got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_classhead(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 6):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 5
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote class not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = _slot_1
                        lcl_5 = keyword(METACLASS, lcl_5)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 5):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = []
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'classhead lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'classhead got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_cmp(prim__state, prim__tokens):
        lcl_0 = parse_bin(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_cmp(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_cmpop(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 37):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = 19
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_3):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_3 = _py_local_tk
                _slot_1 = lcl_3
                lcl_3 = (_slot_1 is None)
                if lcl_3:
                    lcl_4 = prim__tokens.offset
                    lcl_4 = (lcl_4, 'quote in not match')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                else:
                    lcl_4 = NotIn()
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 44):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 37):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = IsNot()
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = Is()
                        _slot_local__1 = lcl_6
                        lcl_6 = (True, _slot_local__1)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'cmpop got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 19):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = In()
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 41):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = Ge()
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 39):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = Gt()
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 40):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = Eq()
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 42):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = Le()
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 38):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = Lt()
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 43):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = Ne()
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'cmpop lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'cmpop got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_dotted__name(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__sep__list__4(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = join__string__by__dot(lcl_1)
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_except__handler(prim__state, prim__tokens):
        lcl_0 = 11
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote catch not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = parse_expr(prim__state, prim__tokens)
            _slot_1_check = lcl_1
            lcl_1 = _slot_1_check[0]
            lcl_1 = (lcl_1 is False)
            if lcl_1:
                lcl_1 = _slot_1_check
            else:
                lcl_2 = _slot_1_check[1]
                lcl_2 = lcl_2
                _slot_1 = lcl_2
                lcl_2 = prim__tokens.offset
                _off_1 = lcl_2
                lcl_2 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_2:
                    lcl_4 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_4 = lcl_4.idint
                    if (lcl_4 == 8):
                        lcl_5 = parse_block(prim__state, prim__tokens)
                        _slot_2_check = lcl_5
                        lcl_5 = _slot_2_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_2_check
                        else:
                            lcl_6 = _slot_2_check[1]
                            lcl_6 = lcl_6
                            _slot_2 = lcl_6
                            lcl_6 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_7 = _slot_1
                            lcl_7 = as__load(lcl_7)
                            lcl_8 = _slot_2
                            lcl_7 = ExceptHandler(lcl_7, None, lcl_8)
                            lcl_6 = loc(lcl_6, lcl_7)
                            _slot_local__1 = lcl_6
                            lcl_6 = (True, _slot_local__1)
                            lcl_5 = lcl_6
                        lcl_3 = lcl_5
                    elif (lcl_4 == 7):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_5 = _py_local_t
                        _slot_2 = lcl_5
                        lcl_5 = parse_Ident(prim__state, prim__tokens)
                        _slot_3_check = lcl_5
                        lcl_5 = _slot_3_check[0]
                        lcl_5 = (lcl_5 is False)
                        if lcl_5:
                            lcl_5 = _slot_3_check
                        else:
                            lcl_6 = _slot_3_check[1]
                            lcl_6 = lcl_6
                            _slot_3 = lcl_6
                            lcl_6 = parse_block(prim__state, prim__tokens)
                            _slot_4_check = lcl_6
                            lcl_6 = _slot_4_check[0]
                            lcl_6 = (lcl_6 is False)
                            if lcl_6:
                                lcl_6 = _slot_4_check
                            else:
                                lcl_7 = _slot_4_check[1]
                                lcl_7 = lcl_7
                                _slot_4 = lcl_7
                                lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_8 = _slot_1
                                lcl_8 = as__load(lcl_8)
                                lcl_9 = _slot_3
                                lcl_10 = _slot_4
                                lcl_10 = ExceptHandler(lcl_8, lcl_9, lcl_10)
                                lcl_10 = loc(lcl_7, lcl_10)
                                _slot_local__1 = lcl_10
                                lcl_10 = (True, _slot_local__1)
                                lcl_6 = lcl_10
                            lcl_5 = lcl_6
                        lcl_3 = lcl_5
                    else:
                        lcl_10 = (_off_1, 'except_handler lookahead failed')
                        lcl_10 = prim__cons(lcl_10, prim__nil)
                        lcl_10 = lcl_10
                        lcl_10 = (False, lcl_10)
                        lcl_3 = lcl_10
                    lcl_2 = lcl_3
                else:
                    lcl_10 = (_off_1, 'except_handler got EOF')
                    lcl_10 = prim__cons(lcl_10, prim__nil)
                    lcl_10 = lcl_10
                    lcl_10 = (False, lcl_10)
                    lcl_2 = lcl_10
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_expr(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 59):
                lcl_3 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 60):
                lcl_3 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 37):
                lcl_3 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 33):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_args(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = 34
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_4):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_4 = _py_local_tk
                    _slot_2 = lcl_4
                    lcl_4 = (_slot_2 is None)
                    if lcl_4:
                        lcl_5 = prim__tokens.offset
                        lcl_5 = (lcl_5, 'quote -> not match')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = prim__tokens.offset
                        _off_2 = lcl_5
                        lcl_5 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_5:
                            lcl_7 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_7 = lcl_7.idint
                            if (lcl_7 == 59):
                                lcl_8 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_8
                                lcl_8 = _slot_3_check[0]
                                lcl_8 = (lcl_8 is False)
                                if lcl_8:
                                    lcl_8 = _slot_3_check
                                else:
                                    lcl_9 = _slot_3_check[1]
                                    lcl_9 = lcl_9
                                    _slot_3 = lcl_9
                                    lcl_9 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_10 = _slot_1
                                    lcl_11 = _slot_3
                                    lcl_10 = Lambda(lcl_10, lcl_11)
                                    lcl_10 = loc(lcl_9, lcl_10)
                                    _slot_local__1 = lcl_10
                                    lcl_10 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_8 = lcl_10
                                lcl_6 = lcl_8
                            elif (lcl_7 == 8):
                                lcl_10 = parse_block(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_8 = Lift(lcl_8)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 60):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 37):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 33):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 62):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 65):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 64):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 66):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 63):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 51):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 3):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 71):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 69):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 70):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            elif (lcl_7 == 68):
                                lcl_10 = parse_expr(prim__state, prim__tokens)
                                _slot_3_check = lcl_10
                                lcl_10 = _slot_3_check[0]
                                lcl_10 = (lcl_10 is False)
                                if lcl_10:
                                    lcl_10 = _slot_3_check
                                else:
                                    lcl_11 = _slot_3_check[1]
                                    lcl_11 = lcl_11
                                    _slot_3 = lcl_11
                                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_8 = _slot_1
                                    lcl_9 = _slot_3
                                    lcl_8 = Lambda(lcl_8, lcl_9)
                                    lcl_11 = loc(lcl_11, lcl_8)
                                    _slot_local__1 = lcl_11
                                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                                    lcl_10 = lcl_11
                                lcl_6 = lcl_10
                            else:
                                lcl_10 = (_off_2, 'expr lookahead failed')
                                lcl_10 = prim__cons(lcl_10, prim__nil)
                                lcl_10 = lcl_10
                                lcl_10 = (False, lcl_10)
                                lcl_6 = lcl_10
                            lcl_5 = lcl_6
                        else:
                            lcl_10 = (_off_2, 'expr got EOF')
                            lcl_10 = prim__cons(lcl_10, prim__nil)
                            lcl_10 = lcl_10
                            lcl_10 = (False, lcl_10)
                            lcl_5 = lcl_10
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 62):
                lcl_10 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 65):
                lcl_10 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 64):
                lcl_10 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 66):
                lcl_10 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 63):
                lcl_10 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 51):
                lcl_10 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 3):
                lcl_10 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 71):
                lcl_10 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 69):
                lcl_10 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 70):
                lcl_10 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 68):
                lcl_10 = parse_or(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = _slot_0
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_expr(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            else:
                lcl_10 = (_off_0, 'expr lookahead failed')
                lcl_10 = prim__cons(lcl_10, prim__nil)
                lcl_10 = lcl_10
                lcl_10 = (False, lcl_10)
                lcl_1 = lcl_10
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'expr got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_exprs(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__sep__list__3(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_factor(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 59):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_factor(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_5 = Invert()
                    lcl_6 = _slot_1
                    lcl_5 = UnaryOp(lcl_5, lcl_6)
                    lcl_4 = loc(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 60):
                lcl_3 = parse_yield(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 62):
                lcl_3 = parse_yield(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 65):
                lcl_3 = parse_yield(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 64):
                lcl_3 = parse_yield(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 66):
                lcl_3 = parse_yield(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 63):
                lcl_3 = parse_yield(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 51):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_factor(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_5 = USub()
                    lcl_6 = _slot_1
                    lcl_5 = UnaryOp(lcl_5, lcl_6)
                    lcl_4 = loc(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 3):
                lcl_3 = parse_yield(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 71):
                lcl_3 = parse_yield(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 69):
                lcl_3 = parse_yield(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 70):
                lcl_3 = parse_yield(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 68):
                lcl_3 = parse_yield(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'factor lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'factor got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_import__alias(prim__state, prim__tokens):
        lcl_0 = parse_dotted__name(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = prim__tokens.offset
            _off_0 = lcl_1
            lcl_1 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
            if lcl_1:
                lcl_3 = prim__tokens.array[(prim__tokens.offset + 0)]
                lcl_3 = lcl_3.idint
                if (lcl_3 == 7):
                    _py_local_i = prim__tokens.offset
                    _py_local_t = prim__tokens.array[_py_local_i]
                    prim__tokens.offset = (_py_local_i + 1)
                    lcl_4 = _py_local_t
                    _slot_1 = lcl_4
                    lcl_4 = parse_Ident(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = _slot_0
                        lcl_6 = _slot_2
                        lcl_5 = alias(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = (True, _slot_local__1)
                        lcl_4 = lcl_5
                    lcl_2 = lcl_4
                else:
                    lcl_4 = _slot_0
                    lcl_4 = alias(lcl_4, None)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_2 = lcl_4
                lcl_1 = lcl_2
            else:
                lcl_2 = (_off_0, 'import_alias got EOF')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_list__tail(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 61):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = (_slot_0,)
                lcl_3 = prim__mk__ast('list_tail', lcl_3)
                _slot_local__1 = lcl_3
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            elif (lcl_2 == 2):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = 61
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_3):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_3 = _py_local_tk
                _slot_1 = lcl_3
                lcl_3 = (_slot_1 is None)
                if lcl_3:
                    lcl_4 = prim__tokens.offset
                    lcl_4 = (lcl_4, 'quote ] not match')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_slot_0, _slot_1)
                    lcl_4 = prim__mk__ast('list_tail', lcl_4)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'list_tail lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'list_tail got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_not(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 59):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 60):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 37):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_not(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_5 = Not()
                    lcl_6 = _slot_1
                    lcl_5 = UnaryOp(lcl_5, lcl_6)
                    lcl_4 = loc(lcl_4, lcl_5)
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 62):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 65):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 64):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 66):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 63):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 51):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 3):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 71):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 69):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 70):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 68):
                lcl_3 = parse_cmp(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'not lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'not got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_or(prim__state, prim__tokens):
        lcl_0 = parse_and(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_or(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__10(prim__state, prim__tokens):
        lcl_0 = parse_except__handler(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__10(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__2(prim__state, prim__tokens):
        lcl_0 = parse_stmt(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__2(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__list__8(prim__state, prim__tokens):
        lcl_0 = 10
        try:
            _py_local_tk = prim__tokens.array[prim__tokens.offset]
            if (_py_local_tk.idint is lcl_0):
                prim__tokens.offset += 1
            else:
                _py_local_tk = None
        except IndexError:
            _py_local_tk = None
        lcl_0 = _py_local_tk
        _slot_0 = lcl_0
        lcl_0 = (_slot_0 is None)
        if lcl_0:
            lcl_1 = prim__tokens.offset
            lcl_1 = (lcl_1, 'quote . not match')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        else:
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__list__8(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__1(prim__state, prim__tokens):
        lcl_0 = parse_arg(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__1(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__3(prim__state, prim__tokens):
        lcl_0 = parse_expr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__3(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__4(prim__state, prim__tokens):
        lcl_0 = parse_Ident(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__4(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__5(prim__state, prim__tokens):
        lcl_0 = parse_atom(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__5(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__6(prim__state, prim__tokens):
        lcl_0 = parse_withitem(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__6(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__7(prim__state, prim__tokens):
        lcl_0 = parse_import__alias(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__7(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_rbnf__sep__list__9(prim__state, prim__tokens):
        lcl_0 = parse_Ident(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            lcl_1 = [lcl_1]
            _slot_local__1 = lcl_1
            lcl_1 = lr_loop_rbnf__sep__list__9(_slot_local__1, prim__state, prim__tokens)
            lcl_0 = lcl_1
        return lcl_0

    def parse_stmt(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 59):
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = prim__tokens.offset
                    _off_1 = lcl_4
                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_4:
                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_6 = lcl_6.idint
                        if (lcl_6 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_7 = _py_local_t
                            _slot_1 = lcl_7
                            lcl_7 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = _slot_0
                                lcl_8 = as__store(lcl_8)
                                lcl_8 = [lcl_8]
                                lcl_9 = _slot_2
                                lcl_9 = as__load(lcl_9)
                                lcl_8 = Assign(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 32):
                            lcl_7 = _slot_0
                            lcl_7 = as__load(lcl_7)
                            lcl_7 = Expr(lcl_7)
                            _slot_local__1 = lcl_7
                            lcl_7 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_5 = lcl_7
                        else:
                            lcl_7 = _slot_0
                            lcl_7 = as__load(lcl_7)
                            lcl_7 = Expr(lcl_7)
                            _slot_local__1 = lcl_7
                            lcl_7 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_5 = lcl_7
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_off_1, 'stmt got EOF')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 60):
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = prim__tokens.offset
                    _off_1 = lcl_4
                    lcl_4 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_4:
                        lcl_6 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_6 = lcl_6.idint
                        if (lcl_6 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_7 = _py_local_t
                            _slot_1 = lcl_7
                            lcl_7 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_7
                            lcl_7 = _slot_2_check[0]
                            lcl_7 = (lcl_7 is False)
                            if lcl_7:
                                lcl_7 = _slot_2_check
                            else:
                                lcl_8 = _slot_2_check[1]
                                lcl_8 = lcl_8
                                _slot_2 = lcl_8
                                lcl_8 = _slot_0
                                lcl_8 = as__store(lcl_8)
                                lcl_8 = [lcl_8]
                                lcl_9 = _slot_2
                                lcl_9 = as__load(lcl_9)
                                lcl_8 = Assign(lcl_8, lcl_9)
                                _slot_local__1 = lcl_8
                                lcl_8 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_7 = lcl_8
                            lcl_5 = lcl_7
                        elif (lcl_6 == 32):
                            lcl_7 = _slot_0
                            lcl_7 = as__load(lcl_7)
                            lcl_7 = Expr(lcl_7)
                            _slot_local__1 = lcl_7
                            lcl_7 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_5 = lcl_7
                        else:
                            lcl_7 = _slot_0
                            lcl_7 = as__load(lcl_7)
                            lcl_7 = Expr(lcl_7)
                            _slot_local__1 = lcl_7
                            lcl_7 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_5 = lcl_7
                        lcl_4 = lcl_5
                    else:
                        lcl_5 = (_off_1, 'stmt got EOF')
                        lcl_5 = prim__cons(lcl_5, prim__nil)
                        lcl_5 = lcl_5
                        lcl_5 = (False, lcl_5)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 20):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_rbnf__sep__list__6(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = parse_block(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_1
                        lcl_7 = _slot_2
                        lcl_6 = With(lcl_6, lcl_7)
                        lcl_5 = loc(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 17):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = parse_stmts(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_6 = _slot_1
                        lcl_6 = as__load(lcl_6)
                        lcl_7 = _slot_2
                        lcl_8 = []
                        lcl_6 = While(lcl_6, lcl_7, lcl_8)
                        lcl_5 = loc(lcl_5, lcl_6)
                        _slot_local__1 = lcl_5
                        lcl_5 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 29):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = parse_block(prim__state, prim__tokens)
                _slot_1_check = lcl_3
                lcl_3 = _slot_1_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_1_check
                else:
                    lcl_4 = _slot_1_check[1]
                    lcl_4 = lcl_4
                    _slot_1 = lcl_4
                    lcl_4 = parse_rbnf__list__10(prim__state, prim__tokens)
                    _slot_2_check = lcl_4
                    lcl_4 = _slot_2_check[0]
                    lcl_4 = (lcl_4 is False)
                    if lcl_4:
                        lcl_4 = _slot_2_check
                    else:
                        lcl_5 = _slot_2_check[1]
                        lcl_5 = lcl_5
                        _slot_2 = lcl_5
                        lcl_5 = prim__tokens.offset
                        _off_1 = lcl_5
                        lcl_5 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                        if lcl_5:
                            lcl_7 = prim__tokens.array[(prim__tokens.offset + 0)]
                            lcl_7 = lcl_7.idint
                            if (lcl_7 == 30):
                                _py_local_i = prim__tokens.offset
                                _py_local_t = prim__tokens.array[_py_local_i]
                                prim__tokens.offset = (_py_local_i + 1)
                                lcl_8 = _py_local_t
                                _slot_3 = lcl_8
                                lcl_8 = parse_block(prim__state, prim__tokens)
                                _slot_4_check = lcl_8
                                lcl_8 = _slot_4_check[0]
                                lcl_8 = (lcl_8 is False)
                                if lcl_8:
                                    lcl_8 = _slot_4_check
                                else:
                                    lcl_9 = _slot_4_check[1]
                                    lcl_9 = lcl_9
                                    _slot_4 = lcl_9
                                    lcl_9 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                    lcl_10 = _slot_1
                                    lcl_11 = _slot_2
                                    lcl_12 = []
                                    lcl_13 = _slot_4
                                    lcl_10 = Try(lcl_10, lcl_11, lcl_12, lcl_13)
                                    lcl_10 = loc(lcl_9, lcl_10)
                                    _slot_local__1 = lcl_10
                                    lcl_10 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                    lcl_8 = lcl_10
                                lcl_6 = lcl_8
                            elif (lcl_7 == 32):
                                lcl_10 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_11 = _slot_1
                                lcl_12 = _slot_2
                                lcl_13 = []
                                lcl_8 = []
                                lcl_11 = Try(lcl_11, lcl_12, lcl_13, lcl_8)
                                lcl_10 = loc(lcl_10, lcl_11)
                                _slot_local__1 = lcl_10
                                lcl_10 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_10
                            else:
                                lcl_10 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_11 = _slot_1
                                lcl_12 = _slot_2
                                lcl_13 = []
                                lcl_8 = []
                                lcl_11 = Try(lcl_11, lcl_12, lcl_13, lcl_8)
                                lcl_10 = loc(lcl_10, lcl_11)
                                _slot_local__1 = lcl_10
                                lcl_10 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_6 = lcl_10
                            lcl_5 = lcl_6
                        else:
                            lcl_10 = (_off_1, 'stmt got EOF')
                            lcl_10 = prim__cons(lcl_10, prim__nil)
                            lcl_10 = lcl_10
                            lcl_10 = (False, lcl_10)
                            lcl_5 = lcl_10
                        lcl_4 = lcl_5
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 16):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = prim__tokens.offset
                _off_1 = lcl_10
                lcl_10 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_10:
                    lcl_12 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_12 = lcl_12.idint
                    if (lcl_12 == 59):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 60):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 37):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 33):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 62):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 65):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 64):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 66):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 32):
                        lcl_13 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_3 = Constant(None)
                        lcl_3 = Return(lcl_3)
                        lcl_13 = loc(lcl_13, lcl_3)
                        _slot_local__1 = lcl_13
                        lcl_13 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                        lcl_11 = lcl_13
                    elif (lcl_12 == 63):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 51):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 3):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 71):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 69):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 70):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    elif (lcl_12 == 68):
                        lcl_13 = parse_exprs(prim__state, prim__tokens)
                        _slot_1_check = lcl_13
                        lcl_13 = _slot_1_check[0]
                        lcl_13 = (lcl_13 is False)
                        if lcl_13:
                            lcl_13 = _slot_1_check
                        else:
                            lcl_3 = _slot_1_check[1]
                            lcl_3 = lcl_3
                            _slot_1 = lcl_3
                            lcl_3 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_4 = _slot_1
                            lcl_4 = tuple__if__more__than__1(lcl_4)
                            lcl_4 = as__load(lcl_4)
                            lcl_4 = Return(lcl_4)
                            lcl_3 = loc(lcl_3, lcl_4)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_13 = lcl_3
                        lcl_11 = lcl_13
                    else:
                        lcl_13 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                        lcl_3 = Constant(None)
                        lcl_3 = Return(lcl_3)
                        lcl_13 = loc(lcl_13, lcl_3)
                        _slot_local__1 = lcl_13
                        lcl_13 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                        lcl_11 = lcl_13
                    lcl_10 = lcl_11
                else:
                    lcl_11 = (_off_1, 'stmt got EOF')
                    lcl_11 = prim__cons(lcl_11, prim__nil)
                    lcl_11 = lcl_11
                    lcl_11 = (False, lcl_11)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 28):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_11 = _slot_1_check[1]
                    lcl_11 = lcl_11
                    _slot_1 = lcl_11
                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_12 = _slot_1
                    lcl_12 = as__load(lcl_12)
                    lcl_12 = Raise(lcl_12)
                    lcl_11 = loc(lcl_11, lcl_12)
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 37):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_3 = _py_local_t
                            _slot_1 = lcl_3
                            lcl_3 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_3
                            lcl_3 = _slot_2_check[0]
                            lcl_3 = (lcl_3 is False)
                            if lcl_3:
                                lcl_3 = _slot_2_check
                            else:
                                lcl_4 = _slot_2_check[1]
                                lcl_4 = lcl_4
                                _slot_2 = lcl_4
                                lcl_4 = _slot_0
                                lcl_4 = as__store(lcl_4)
                                lcl_4 = [lcl_4]
                                lcl_5 = _slot_2
                                lcl_5 = as__load(lcl_5)
                                lcl_4 = Assign(lcl_4, lcl_5)
                                _slot_local__1 = lcl_4
                                lcl_4 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_3 = lcl_4
                            lcl_12 = lcl_3
                        elif (lcl_13 == 32):
                            lcl_3 = _slot_0
                            lcl_3 = as__load(lcl_3)
                            lcl_3 = Expr(lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_3
                        else:
                            lcl_3 = _slot_0
                            lcl_3 = as__load(lcl_3)
                            lcl_3 = Expr(lcl_3)
                            _slot_local__1 = lcl_3
                            lcl_3 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_3
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 27):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_rbnf__sep__list__9(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_11 = _slot_1_check[1]
                    lcl_11 = lcl_11
                    _slot_1 = lcl_11
                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_12 = _slot_1
                    lcl_12 = Nonlocal(lcl_12)
                    lcl_11 = loc(lcl_11, lcl_12)
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 6):
                lcl_10 = parse_classhead(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 70):
                            lcl_3 = prim__tokens.offset
                            _off_2 = lcl_3
                            lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 1))
                            if lcl_3:
                                lcl_5 = prim__tokens.array[(prim__tokens.offset + 1)]
                                lcl_5 = lcl_5.idint
                                if (lcl_5 == 8):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_6 = _py_local_t
                                    _slot_1 = lcl_6
                                    lcl_6 = parse_block(prim__state, prim__tokens)
                                    _slot_2_check = lcl_6
                                    lcl_6 = _slot_2_check[0]
                                    lcl_6 = (lcl_6 is False)
                                    if lcl_6:
                                        lcl_6 = _slot_2_check
                                    else:
                                        lcl_7 = _slot_2_check[1]
                                        lcl_7 = lcl_7
                                        _slot_2 = lcl_7
                                        lcl_7 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                        lcl_8 = _slot_1
                                        lcl_8 = lcl_8.value
                                        lcl_9 = []
                                        lcl_14 = _slot_0
                                        lcl_15 = _slot_2
                                        lcl_16 = []
                                        lcl_14 = ClassDef(lcl_8, lcl_9, lcl_14, lcl_15, lcl_16)
                                        lcl_14 = loc(lcl_7, lcl_14)
                                        _slot_local__1 = lcl_14
                                        lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                        lcl_6 = lcl_14
                                    lcl_4 = lcl_6
                                elif (lcl_5 == 15):
                                    lcl_14 = parse_Ident(prim__state, prim__tokens)
                                    _slot_1_check = lcl_14
                                    lcl_14 = _slot_1_check[0]
                                    lcl_14 = (lcl_14 is False)
                                    if lcl_14:
                                        lcl_14 = _slot_1_check
                                    else:
                                        lcl_15 = _slot_1_check[1]
                                        lcl_15 = lcl_15
                                        _slot_1 = lcl_15
                                        lcl_15 = 15
                                        try:
                                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                            if (_py_local_tk.idint is lcl_15):
                                                prim__tokens.offset += 1
                                            else:
                                                _py_local_tk = None
                                        except IndexError:
                                            _py_local_tk = None
                                        lcl_15 = _py_local_tk
                                        _slot_2 = lcl_15
                                        lcl_15 = (_slot_2 is None)
                                        if lcl_15:
                                            lcl_16 = prim__tokens.offset
                                            lcl_16 = (lcl_16, 'quote <: not match')
                                            lcl_16 = prim__cons(lcl_16, prim__nil)
                                            lcl_16 = lcl_16
                                            lcl_16 = (False, lcl_16)
                                            lcl_15 = lcl_16
                                        else:
                                            lcl_16 = parse_exprs(prim__state, prim__tokens)
                                            _slot_3_check = lcl_16
                                            lcl_16 = _slot_3_check[0]
                                            lcl_16 = (lcl_16 is False)
                                            if lcl_16:
                                                lcl_16 = _slot_3_check
                                            else:
                                                lcl_6 = _slot_3_check[1]
                                                lcl_6 = lcl_6
                                                _slot_3 = lcl_6
                                                lcl_6 = parse_block(prim__state, prim__tokens)
                                                _slot_4_check = lcl_6
                                                lcl_6 = _slot_4_check[0]
                                                lcl_6 = (lcl_6 is False)
                                                if lcl_6:
                                                    lcl_6 = _slot_4_check
                                                else:
                                                    lcl_7 = _slot_4_check[1]
                                                    lcl_7 = lcl_7
                                                    _slot_4 = lcl_7
                                                    lcl_7 = (_slot_2.lineno, _slot_2.colno, _slot_2.filename)
                                                    lcl_8 = _slot_1
                                                    lcl_9 = _slot_3
                                                    lcl_9 = map(as__load, lcl_9)
                                                    lcl_9 = list__(lcl_9)
                                                    lcl_17 = _slot_0
                                                    lcl_18 = _slot_4
                                                    lcl_19 = []
                                                    lcl_17 = ClassDef(lcl_8, lcl_9, lcl_17, lcl_18, lcl_19)
                                                    lcl_17 = loc(lcl_7, lcl_17)
                                                    _slot_local__1 = lcl_17
                                                    lcl_17 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                                    lcl_6 = lcl_17
                                                lcl_16 = lcl_6
                                            lcl_15 = lcl_16
                                        lcl_14 = lcl_15
                                    lcl_4 = lcl_14
                                else:
                                    lcl_14 = parse_Ident(prim__state, prim__tokens)
                                    _slot_1_check = lcl_14
                                    lcl_14 = _slot_1_check[0]
                                    lcl_14 = (lcl_14 is False)
                                    if lcl_14:
                                        lcl_14 = _slot_1_check
                                    else:
                                        lcl_15 = _slot_1_check[1]
                                        lcl_15 = lcl_15
                                        _slot_1 = lcl_15
                                        lcl_15 = 15
                                        try:
                                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                            if (_py_local_tk.idint is lcl_15):
                                                prim__tokens.offset += 1
                                            else:
                                                _py_local_tk = None
                                        except IndexError:
                                            _py_local_tk = None
                                        lcl_15 = _py_local_tk
                                        _slot_2 = lcl_15
                                        lcl_15 = (_slot_2 is None)
                                        if lcl_15:
                                            lcl_16 = prim__tokens.offset
                                            lcl_16 = (lcl_16, 'quote <: not match')
                                            lcl_16 = prim__cons(lcl_16, prim__nil)
                                            lcl_16 = lcl_16
                                            lcl_16 = (False, lcl_16)
                                            lcl_15 = lcl_16
                                        else:
                                            lcl_16 = parse_exprs(prim__state, prim__tokens)
                                            _slot_3_check = lcl_16
                                            lcl_16 = _slot_3_check[0]
                                            lcl_16 = (lcl_16 is False)
                                            if lcl_16:
                                                lcl_16 = _slot_3_check
                                            else:
                                                lcl_17 = _slot_3_check[1]
                                                lcl_17 = lcl_17
                                                _slot_3 = lcl_17
                                                lcl_17 = parse_block(prim__state, prim__tokens)
                                                _slot_4_check = lcl_17
                                                lcl_17 = _slot_4_check[0]
                                                lcl_17 = (lcl_17 is False)
                                                if lcl_17:
                                                    lcl_17 = _slot_4_check
                                                else:
                                                    lcl_18 = _slot_4_check[1]
                                                    lcl_18 = lcl_18
                                                    _slot_4 = lcl_18
                                                    lcl_18 = (_slot_2.lineno, _slot_2.colno, _slot_2.filename)
                                                    lcl_19 = _slot_1
                                                    lcl_6 = _slot_3
                                                    lcl_6 = map(as__load, lcl_6)
                                                    lcl_6 = list__(lcl_6)
                                                    lcl_7 = _slot_0
                                                    lcl_8 = _slot_4
                                                    lcl_9 = []
                                                    lcl_19 = ClassDef(lcl_19, lcl_6, lcl_7, lcl_8, lcl_9)
                                                    lcl_18 = loc(lcl_18, lcl_19)
                                                    _slot_local__1 = lcl_18
                                                    lcl_18 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                                    lcl_17 = lcl_18
                                                lcl_16 = lcl_17
                                            lcl_15 = lcl_16
                                        lcl_14 = lcl_15
                                    lcl_4 = lcl_14
                                lcl_3 = lcl_4
                            else:
                                lcl_14 = (_off_2, 'stmt got EOF')
                                lcl_14 = prim__cons(lcl_14, prim__nil)
                                lcl_14 = lcl_14
                                lcl_14 = (False, lcl_14)
                                lcl_3 = lcl_14
                            lcl_12 = lcl_3
                        else:
                            lcl_14 = (_off_1, 'stmt lookahead failed')
                            lcl_14 = prim__cons(lcl_14, prim__nil)
                            lcl_14 = lcl_14
                            lcl_14 = (False, lcl_14)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 24):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_rbnf__sep__list__7(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_11 = _slot_1_check[1]
                    lcl_11 = lcl_11
                    _slot_1 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 25):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_2 = lcl_14
                            lcl_14 = prim__tokens.offset
                            _off_2 = lcl_14
                            lcl_14 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                            if lcl_14:
                                lcl_16 = prim__tokens.array[(prim__tokens.offset + 0)]
                                lcl_16 = lcl_16.idint
                                if (lcl_16 == 10):
                                    lcl_17 = parse_rbnf__list__8(prim__state, prim__tokens)
                                    _slot_3_check = lcl_17
                                    lcl_17 = _slot_3_check[0]
                                    lcl_17 = (lcl_17 is False)
                                    if lcl_17:
                                        lcl_17 = _slot_3_check
                                    else:
                                        lcl_18 = _slot_3_check[1]
                                        lcl_18 = lcl_18
                                        _slot_3 = lcl_18
                                        lcl_18 = parse_dotted__name(prim__state, prim__tokens)
                                        _slot_4_check = lcl_18
                                        lcl_18 = _slot_4_check[0]
                                        lcl_18 = (lcl_18 is False)
                                        if lcl_18:
                                            lcl_18 = _slot_4_check
                                        else:
                                            lcl_19 = _slot_4_check[1]
                                            lcl_19 = lcl_19
                                            _slot_4 = lcl_19
                                            lcl_19 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                            lcl_3 = _slot_4
                                            lcl_4 = _slot_1
                                            lcl_5 = _slot_3
                                            lcl_5 = len(lcl_5)
                                            lcl_3 = ImportFrom(lcl_3, lcl_4, lcl_5)
                                            lcl_19 = loc(lcl_19, lcl_3)
                                            _slot_local__1 = lcl_19
                                            lcl_19 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                            lcl_18 = lcl_19
                                        lcl_17 = lcl_18
                                    lcl_15 = lcl_17
                                elif (lcl_16 == 70):
                                    lcl_17 = parse_dotted__name(prim__state, prim__tokens)
                                    _slot_3_check = lcl_17
                                    lcl_17 = _slot_3_check[0]
                                    lcl_17 = (lcl_17 is False)
                                    if lcl_17:
                                        lcl_17 = _slot_3_check
                                    else:
                                        lcl_18 = _slot_3_check[1]
                                        lcl_18 = lcl_18
                                        _slot_3 = lcl_18
                                        lcl_18 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                        lcl_19 = _slot_3
                                        lcl_3 = _slot_1
                                        lcl_19 = ImportFrom(lcl_19, lcl_3, False)
                                        lcl_18 = loc(lcl_18, lcl_19)
                                        _slot_local__1 = lcl_18
                                        lcl_18 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                        lcl_17 = lcl_18
                                    lcl_15 = lcl_17
                                else:
                                    lcl_17 = (_off_2, 'stmt lookahead failed')
                                    lcl_17 = prim__cons(lcl_17, prim__nil)
                                    lcl_17 = lcl_17
                                    lcl_17 = (False, lcl_17)
                                    lcl_15 = lcl_17
                                lcl_14 = lcl_15
                            else:
                                lcl_15 = (_off_2, 'stmt got EOF')
                                lcl_15 = prim__cons(lcl_15, prim__nil)
                                lcl_15 = lcl_15
                                lcl_15 = (False, lcl_15)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_15 = _slot_1
                            lcl_15 = Import(lcl_15)
                            lcl_14 = loc(lcl_14, lcl_15)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_15 = _slot_1
                            lcl_15 = Import(lcl_15)
                            lcl_14 = loc(lcl_14, lcl_15)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 13):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_11 = _slot_1_check[1]
                    lcl_11 = lcl_11
                    _slot_1 = lcl_11
                    lcl_11 = parse_block(prim__state, prim__tokens)
                    _slot_2_check = lcl_11
                    lcl_11 = _slot_2_check[0]
                    lcl_11 = (lcl_11 is False)
                    if lcl_11:
                        lcl_11 = _slot_2_check
                    else:
                        lcl_12 = _slot_2_check[1]
                        lcl_12 = lcl_12
                        _slot_2 = lcl_12
                        lcl_12 = 14
                        try:
                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                            if (_py_local_tk.idint is lcl_12):
                                prim__tokens.offset += 1
                            else:
                                _py_local_tk = None
                        except IndexError:
                            _py_local_tk = None
                        lcl_12 = _py_local_tk
                        _slot_3 = lcl_12
                        lcl_12 = (_slot_3 is None)
                        if lcl_12:
                            lcl_13 = prim__tokens.offset
                            lcl_13 = (lcl_13, 'quote else not match')
                            lcl_13 = prim__cons(lcl_13, prim__nil)
                            lcl_13 = lcl_13
                            lcl_13 = (False, lcl_13)
                            lcl_12 = lcl_13
                        else:
                            lcl_13 = parse_block(prim__state, prim__tokens)
                            _slot_4_check = lcl_13
                            lcl_13 = _slot_4_check[0]
                            lcl_13 = (lcl_13 is False)
                            if lcl_13:
                                lcl_13 = _slot_4_check
                            else:
                                lcl_14 = _slot_4_check[1]
                                lcl_14 = lcl_14
                                _slot_4 = lcl_14
                                lcl_14 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_15 = _slot_1
                                lcl_15 = as__load(lcl_15)
                                lcl_16 = _slot_2
                                lcl_17 = _slot_4
                                lcl_15 = If(lcl_15, lcl_16, lcl_17)
                                lcl_14 = loc(lcl_14, lcl_15)
                                _slot_local__1 = lcl_14
                                lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_13 = lcl_14
                            lcl_12 = lcl_13
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 26):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_rbnf__sep__list__9(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_11 = _slot_1_check[1]
                    lcl_11 = lcl_11
                    _slot_1 = lcl_11
                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_12 = _slot_1
                    lcl_12 = Global(lcl_12)
                    lcl_11 = loc(lcl_11, lcl_12)
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 12):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_Ident(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_11 = _slot_1_check[1]
                    lcl_11 = lcl_11
                    _slot_1 = lcl_11
                    lcl_11 = parse_args(prim__state, prim__tokens)
                    _slot_2_check = lcl_11
                    lcl_11 = _slot_2_check[0]
                    lcl_11 = (lcl_11 is False)
                    if lcl_11:
                        lcl_11 = _slot_2_check
                    else:
                        lcl_12 = _slot_2_check[1]
                        lcl_12 = lcl_12
                        _slot_2 = lcl_12
                        lcl_12 = parse_block(prim__state, prim__tokens)
                        _slot_3_check = lcl_12
                        lcl_12 = _slot_3_check[0]
                        lcl_12 = (lcl_12 is False)
                        if lcl_12:
                            lcl_12 = _slot_3_check
                        else:
                            lcl_13 = _slot_3_check[1]
                            lcl_13 = lcl_13
                            _slot_3 = lcl_13
                            lcl_13 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_14 = _slot_1
                            lcl_15 = _slot_2
                            lcl_16 = _slot_3
                            lcl_17 = []
                            lcl_14 = FunctionDef(lcl_14, lcl_15, lcl_16, lcl_17, None)
                            lcl_13 = loc(lcl_13, lcl_14)
                            _slot_local__1 = lcl_13
                            lcl_13 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_13
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 18):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_rbnf__sep__list__5(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_11 = _slot_1_check[1]
                    lcl_11 = lcl_11
                    _slot_1 = lcl_11
                    lcl_11 = 19
                    try:
                        _py_local_tk = prim__tokens.array[prim__tokens.offset]
                        if (_py_local_tk.idint is lcl_11):
                            prim__tokens.offset += 1
                        else:
                            _py_local_tk = None
                    except IndexError:
                        _py_local_tk = None
                    lcl_11 = _py_local_tk
                    _slot_2 = lcl_11
                    lcl_11 = (_slot_2 is None)
                    if lcl_11:
                        lcl_12 = prim__tokens.offset
                        lcl_12 = (lcl_12, 'quote in not match')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = parse_expr(prim__state, prim__tokens)
                        _slot_3_check = lcl_12
                        lcl_12 = _slot_3_check[0]
                        lcl_12 = (lcl_12 is False)
                        if lcl_12:
                            lcl_12 = _slot_3_check
                        else:
                            lcl_13 = _slot_3_check[1]
                            lcl_13 = lcl_13
                            _slot_3 = lcl_13
                            lcl_13 = parse_block(prim__state, prim__tokens)
                            _slot_4_check = lcl_13
                            lcl_13 = _slot_4_check[0]
                            lcl_13 = (lcl_13 is False)
                            if lcl_13:
                                lcl_13 = _slot_4_check
                            else:
                                lcl_14 = _slot_4_check[1]
                                lcl_14 = lcl_14
                                _slot_4 = lcl_14
                                lcl_14 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                                lcl_15 = _slot_1
                                lcl_15 = tuple__if__more__than__1(lcl_15)
                                lcl_15 = as__store(lcl_15)
                                lcl_16 = _slot_3
                                lcl_16 = as__load(lcl_16)
                                lcl_17 = _slot_4
                                lcl_18 = []
                                lcl_15 = For(lcl_15, lcl_16, lcl_17, lcl_18)
                                lcl_14 = loc(lcl_14, lcl_15)
                                _slot_local__1 = lcl_14
                                lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_13 = lcl_14
                            lcl_12 = lcl_13
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 33):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_1 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_14
                            lcl_14 = _slot_2_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_2_check
                            else:
                                lcl_15 = _slot_2_check[1]
                                lcl_15 = lcl_15
                                _slot_2 = lcl_15
                                lcl_15 = _slot_0
                                lcl_15 = as__store(lcl_15)
                                lcl_15 = [lcl_15]
                                lcl_16 = _slot_2
                                lcl_16 = as__load(lcl_16)
                                lcl_15 = Assign(lcl_15, lcl_16)
                                _slot_local__1 = lcl_15
                                lcl_15 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 22):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_11 = Continue()
                lcl_10 = loc(lcl_10, lcl_11)
                _slot_local__1 = lcl_10
                lcl_10 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_10
            elif (lcl_2 == 5):
                lcl_10 = parse_classhead(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 70):
                            lcl_14 = prim__tokens.offset
                            _off_2 = lcl_14
                            lcl_14 = (len(prim__tokens.array) > (prim__tokens.offset + 1))
                            if lcl_14:
                                lcl_16 = prim__tokens.array[(prim__tokens.offset + 1)]
                                lcl_16 = lcl_16.idint
                                if (lcl_16 == 8):
                                    _py_local_i = prim__tokens.offset
                                    _py_local_t = prim__tokens.array[_py_local_i]
                                    prim__tokens.offset = (_py_local_i + 1)
                                    lcl_17 = _py_local_t
                                    _slot_1 = lcl_17
                                    lcl_17 = parse_block(prim__state, prim__tokens)
                                    _slot_2_check = lcl_17
                                    lcl_17 = _slot_2_check[0]
                                    lcl_17 = (lcl_17 is False)
                                    if lcl_17:
                                        lcl_17 = _slot_2_check
                                    else:
                                        lcl_18 = _slot_2_check[1]
                                        lcl_18 = lcl_18
                                        _slot_2 = lcl_18
                                        lcl_18 = (_slot_1.lineno, _slot_1.colno, _slot_1.filename)
                                        lcl_19 = _slot_1
                                        lcl_19 = lcl_19.value
                                        lcl_3 = []
                                        lcl_4 = _slot_0
                                        lcl_5 = _slot_2
                                        lcl_6 = []
                                        lcl_19 = ClassDef(lcl_19, lcl_3, lcl_4, lcl_5, lcl_6)
                                        lcl_18 = loc(lcl_18, lcl_19)
                                        _slot_local__1 = lcl_18
                                        lcl_18 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                        lcl_17 = lcl_18
                                    lcl_15 = lcl_17
                                elif (lcl_16 == 15):
                                    lcl_17 = parse_Ident(prim__state, prim__tokens)
                                    _slot_1_check = lcl_17
                                    lcl_17 = _slot_1_check[0]
                                    lcl_17 = (lcl_17 is False)
                                    if lcl_17:
                                        lcl_17 = _slot_1_check
                                    else:
                                        lcl_18 = _slot_1_check[1]
                                        lcl_18 = lcl_18
                                        _slot_1 = lcl_18
                                        lcl_18 = 15
                                        try:
                                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                            if (_py_local_tk.idint is lcl_18):
                                                prim__tokens.offset += 1
                                            else:
                                                _py_local_tk = None
                                        except IndexError:
                                            _py_local_tk = None
                                        lcl_18 = _py_local_tk
                                        _slot_2 = lcl_18
                                        lcl_18 = (_slot_2 is None)
                                        if lcl_18:
                                            lcl_19 = prim__tokens.offset
                                            lcl_19 = (lcl_19, 'quote <: not match')
                                            lcl_19 = prim__cons(lcl_19, prim__nil)
                                            lcl_19 = lcl_19
                                            lcl_19 = (False, lcl_19)
                                            lcl_18 = lcl_19
                                        else:
                                            lcl_19 = parse_exprs(prim__state, prim__tokens)
                                            _slot_3_check = lcl_19
                                            lcl_19 = _slot_3_check[0]
                                            lcl_19 = (lcl_19 is False)
                                            if lcl_19:
                                                lcl_19 = _slot_3_check
                                            else:
                                                lcl_3 = _slot_3_check[1]
                                                lcl_3 = lcl_3
                                                _slot_3 = lcl_3
                                                lcl_3 = parse_block(prim__state, prim__tokens)
                                                _slot_4_check = lcl_3
                                                lcl_3 = _slot_4_check[0]
                                                lcl_3 = (lcl_3 is False)
                                                if lcl_3:
                                                    lcl_3 = _slot_4_check
                                                else:
                                                    lcl_4 = _slot_4_check[1]
                                                    lcl_4 = lcl_4
                                                    _slot_4 = lcl_4
                                                    lcl_4 = (_slot_2.lineno, _slot_2.colno, _slot_2.filename)
                                                    lcl_5 = _slot_1
                                                    lcl_6 = _slot_3
                                                    lcl_6 = map(as__load, lcl_6)
                                                    lcl_6 = list__(lcl_6)
                                                    lcl_7 = _slot_0
                                                    lcl_8 = _slot_4
                                                    lcl_9 = []
                                                    lcl_5 = ClassDef(lcl_5, lcl_6, lcl_7, lcl_8, lcl_9)
                                                    lcl_4 = loc(lcl_4, lcl_5)
                                                    _slot_local__1 = lcl_4
                                                    lcl_4 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                                    lcl_3 = lcl_4
                                                lcl_19 = lcl_3
                                            lcl_18 = lcl_19
                                        lcl_17 = lcl_18
                                    lcl_15 = lcl_17
                                else:
                                    lcl_17 = parse_Ident(prim__state, prim__tokens)
                                    _slot_1_check = lcl_17
                                    lcl_17 = _slot_1_check[0]
                                    lcl_17 = (lcl_17 is False)
                                    if lcl_17:
                                        lcl_17 = _slot_1_check
                                    else:
                                        lcl_18 = _slot_1_check[1]
                                        lcl_18 = lcl_18
                                        _slot_1 = lcl_18
                                        lcl_18 = 15
                                        try:
                                            _py_local_tk = prim__tokens.array[prim__tokens.offset]
                                            if (_py_local_tk.idint is lcl_18):
                                                prim__tokens.offset += 1
                                            else:
                                                _py_local_tk = None
                                        except IndexError:
                                            _py_local_tk = None
                                        lcl_18 = _py_local_tk
                                        _slot_2 = lcl_18
                                        lcl_18 = (_slot_2 is None)
                                        if lcl_18:
                                            lcl_19 = prim__tokens.offset
                                            lcl_19 = (lcl_19, 'quote <: not match')
                                            lcl_19 = prim__cons(lcl_19, prim__nil)
                                            lcl_19 = lcl_19
                                            lcl_19 = (False, lcl_19)
                                            lcl_18 = lcl_19
                                        else:
                                            lcl_19 = parse_exprs(prim__state, prim__tokens)
                                            _slot_3_check = lcl_19
                                            lcl_19 = _slot_3_check[0]
                                            lcl_19 = (lcl_19 is False)
                                            if lcl_19:
                                                lcl_19 = _slot_3_check
                                            else:
                                                lcl_3 = _slot_3_check[1]
                                                lcl_3 = lcl_3
                                                _slot_3 = lcl_3
                                                lcl_3 = parse_block(prim__state, prim__tokens)
                                                _slot_4_check = lcl_3
                                                lcl_3 = _slot_4_check[0]
                                                lcl_3 = (lcl_3 is False)
                                                if lcl_3:
                                                    lcl_3 = _slot_4_check
                                                else:
                                                    lcl_4 = _slot_4_check[1]
                                                    lcl_4 = lcl_4
                                                    _slot_4 = lcl_4
                                                    lcl_4 = (_slot_2.lineno, _slot_2.colno, _slot_2.filename)
                                                    lcl_5 = _slot_1
                                                    lcl_6 = _slot_3
                                                    lcl_6 = map(as__load, lcl_6)
                                                    lcl_6 = list__(lcl_6)
                                                    lcl_7 = _slot_0
                                                    lcl_8 = _slot_4
                                                    lcl_9 = []
                                                    lcl_5 = ClassDef(lcl_5, lcl_6, lcl_7, lcl_8, lcl_9)
                                                    lcl_4 = loc(lcl_4, lcl_5)
                                                    _slot_local__1 = lcl_4
                                                    lcl_4 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                                    lcl_3 = lcl_4
                                                lcl_19 = lcl_3
                                            lcl_18 = lcl_19
                                        lcl_17 = lcl_18
                                    lcl_15 = lcl_17
                                lcl_14 = lcl_15
                            else:
                                lcl_15 = (_off_2, 'stmt got EOF')
                                lcl_15 = prim__cons(lcl_15, prim__nil)
                                lcl_15 = lcl_15
                                lcl_15 = (False, lcl_15)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = (_off_1, 'stmt lookahead failed')
                            lcl_14 = prim__cons(lcl_14, prim__nil)
                            lcl_14 = lcl_14
                            lcl_14 = (False, lcl_14)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 21):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                lcl_11 = Break()
                lcl_10 = loc(lcl_10, lcl_11)
                _slot_local__1 = lcl_10
                lcl_10 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                lcl_1 = lcl_10
            elif (lcl_2 == 23):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_10 = _py_local_t
                _slot_0 = lcl_10
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_1_check = lcl_10
                lcl_10 = _slot_1_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_1_check
                else:
                    lcl_11 = _slot_1_check[1]
                    lcl_11 = lcl_11
                    _slot_1 = lcl_11
                    lcl_11 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                    lcl_12 = _slot_1
                    lcl_12 = as__load(lcl_12)
                    lcl_12 = Assert(lcl_12, None)
                    lcl_11 = loc(lcl_11, lcl_12)
                    _slot_local__1 = lcl_11
                    lcl_11 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 62):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_1 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_14
                            lcl_14 = _slot_2_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_2_check
                            else:
                                lcl_15 = _slot_2_check[1]
                                lcl_15 = lcl_15
                                _slot_2 = lcl_15
                                lcl_15 = _slot_0
                                lcl_15 = as__store(lcl_15)
                                lcl_15 = [lcl_15]
                                lcl_16 = _slot_2
                                lcl_16 = as__load(lcl_16)
                                lcl_15 = Assign(lcl_15, lcl_16)
                                _slot_local__1 = lcl_15
                                lcl_15 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 65):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_1 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_14
                            lcl_14 = _slot_2_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_2_check
                            else:
                                lcl_15 = _slot_2_check[1]
                                lcl_15 = lcl_15
                                _slot_2 = lcl_15
                                lcl_15 = _slot_0
                                lcl_15 = as__store(lcl_15)
                                lcl_15 = [lcl_15]
                                lcl_16 = _slot_2
                                lcl_16 = as__load(lcl_16)
                                lcl_15 = Assign(lcl_15, lcl_16)
                                _slot_local__1 = lcl_15
                                lcl_15 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 64):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_1 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_14
                            lcl_14 = _slot_2_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_2_check
                            else:
                                lcl_15 = _slot_2_check[1]
                                lcl_15 = lcl_15
                                _slot_2 = lcl_15
                                lcl_15 = _slot_0
                                lcl_15 = as__store(lcl_15)
                                lcl_15 = [lcl_15]
                                lcl_16 = _slot_2
                                lcl_16 = as__load(lcl_16)
                                lcl_15 = Assign(lcl_15, lcl_16)
                                _slot_local__1 = lcl_15
                                lcl_15 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 66):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_1 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_14
                            lcl_14 = _slot_2_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_2_check
                            else:
                                lcl_15 = _slot_2_check[1]
                                lcl_15 = lcl_15
                                _slot_2 = lcl_15
                                lcl_15 = _slot_0
                                lcl_15 = as__store(lcl_15)
                                lcl_15 = [lcl_15]
                                lcl_16 = _slot_2
                                lcl_16 = as__load(lcl_16)
                                lcl_15 = Assign(lcl_15, lcl_16)
                                _slot_local__1 = lcl_15
                                lcl_15 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 63):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_1 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_14
                            lcl_14 = _slot_2_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_2_check
                            else:
                                lcl_15 = _slot_2_check[1]
                                lcl_15 = lcl_15
                                _slot_2 = lcl_15
                                lcl_15 = _slot_0
                                lcl_15 = as__store(lcl_15)
                                lcl_15 = [lcl_15]
                                lcl_16 = _slot_2
                                lcl_16 = as__load(lcl_16)
                                lcl_15 = Assign(lcl_15, lcl_16)
                                _slot_local__1 = lcl_15
                                lcl_15 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 51):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_1 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_14
                            lcl_14 = _slot_2_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_2_check
                            else:
                                lcl_15 = _slot_2_check[1]
                                lcl_15 = lcl_15
                                _slot_2 = lcl_15
                                lcl_15 = _slot_0
                                lcl_15 = as__store(lcl_15)
                                lcl_15 = [lcl_15]
                                lcl_16 = _slot_2
                                lcl_16 = as__load(lcl_16)
                                lcl_15 = Assign(lcl_15, lcl_16)
                                _slot_local__1 = lcl_15
                                lcl_15 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 3):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_1 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_14
                            lcl_14 = _slot_2_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_2_check
                            else:
                                lcl_15 = _slot_2_check[1]
                                lcl_15 = lcl_15
                                _slot_2 = lcl_15
                                lcl_15 = _slot_0
                                lcl_15 = as__store(lcl_15)
                                lcl_15 = [lcl_15]
                                lcl_16 = _slot_2
                                lcl_16 = as__load(lcl_16)
                                lcl_15 = Assign(lcl_15, lcl_16)
                                _slot_local__1 = lcl_15
                                lcl_15 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 71):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_1 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_14
                            lcl_14 = _slot_2_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_2_check
                            else:
                                lcl_15 = _slot_2_check[1]
                                lcl_15 = lcl_15
                                _slot_2 = lcl_15
                                lcl_15 = _slot_0
                                lcl_15 = as__store(lcl_15)
                                lcl_15 = [lcl_15]
                                lcl_16 = _slot_2
                                lcl_16 = as__load(lcl_16)
                                lcl_15 = Assign(lcl_15, lcl_16)
                                _slot_local__1 = lcl_15
                                lcl_15 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 69):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_1 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_14
                            lcl_14 = _slot_2_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_2_check
                            else:
                                lcl_15 = _slot_2_check[1]
                                lcl_15 = lcl_15
                                _slot_2 = lcl_15
                                lcl_15 = _slot_0
                                lcl_15 = as__store(lcl_15)
                                lcl_15 = [lcl_15]
                                lcl_16 = _slot_2
                                lcl_16 = as__load(lcl_16)
                                lcl_15 = Assign(lcl_15, lcl_16)
                                _slot_local__1 = lcl_15
                                lcl_15 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 70):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_1 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_14
                            lcl_14 = _slot_2_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_2_check
                            else:
                                lcl_15 = _slot_2_check[1]
                                lcl_15 = lcl_15
                                _slot_2 = lcl_15
                                lcl_15 = _slot_0
                                lcl_15 = as__store(lcl_15)
                                lcl_15 = [lcl_15]
                                lcl_16 = _slot_2
                                lcl_16 = as__load(lcl_16)
                                lcl_15 = Assign(lcl_15, lcl_16)
                                _slot_local__1 = lcl_15
                                lcl_15 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            elif (lcl_2 == 68):
                lcl_10 = parse_expr(prim__state, prim__tokens)
                _slot_0_check = lcl_10
                lcl_10 = _slot_0_check[0]
                lcl_10 = (lcl_10 is False)
                if lcl_10:
                    lcl_10 = _slot_0_check
                else:
                    lcl_11 = _slot_0_check[1]
                    lcl_11 = lcl_11
                    _slot_0 = lcl_11
                    lcl_11 = prim__tokens.offset
                    _off_1 = lcl_11
                    lcl_11 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                    if lcl_11:
                        lcl_13 = prim__tokens.array[(prim__tokens.offset + 0)]
                        lcl_13 = lcl_13.idint
                        if (lcl_13 == 31):
                            _py_local_i = prim__tokens.offset
                            _py_local_t = prim__tokens.array[_py_local_i]
                            prim__tokens.offset = (_py_local_i + 1)
                            lcl_14 = _py_local_t
                            _slot_1 = lcl_14
                            lcl_14 = parse_expr(prim__state, prim__tokens)
                            _slot_2_check = lcl_14
                            lcl_14 = _slot_2_check[0]
                            lcl_14 = (lcl_14 is False)
                            if lcl_14:
                                lcl_14 = _slot_2_check
                            else:
                                lcl_15 = _slot_2_check[1]
                                lcl_15 = lcl_15
                                _slot_2 = lcl_15
                                lcl_15 = _slot_0
                                lcl_15 = as__store(lcl_15)
                                lcl_15 = [lcl_15]
                                lcl_16 = _slot_2
                                lcl_16 = as__load(lcl_16)
                                lcl_15 = Assign(lcl_15, lcl_16)
                                _slot_local__1 = lcl_15
                                lcl_15 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                                lcl_14 = lcl_15
                            lcl_12 = lcl_14
                        elif (lcl_13 == 32):
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        else:
                            lcl_14 = _slot_0
                            lcl_14 = as__load(lcl_14)
                            lcl_14 = Expr(lcl_14)
                            _slot_local__1 = lcl_14
                            lcl_14 = lr_loop_stmt(_slot_local__1, prim__state, prim__tokens)
                            lcl_12 = lcl_14
                        lcl_11 = lcl_12
                    else:
                        lcl_12 = (_off_1, 'stmt got EOF')
                        lcl_12 = prim__cons(lcl_12, prim__nil)
                        lcl_12 = lcl_12
                        lcl_12 = (False, lcl_12)
                        lcl_11 = lcl_12
                    lcl_10 = lcl_11
                lcl_1 = lcl_10
            else:
                lcl_10 = (_off_0, 'stmt lookahead failed')
                lcl_10 = prim__cons(lcl_10, prim__nil)
                lcl_10 = lcl_10
                lcl_10 = (False, lcl_10)
                lcl_1 = lcl_10
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'stmt got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_stmts(prim__state, prim__tokens):
        lcl_0 = parse_rbnf__list__2(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = _slot_0
            _slot_local__1 = lcl_1
            lcl_1 = (True, _slot_local__1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_tuple__tail(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 2):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = 4
                try:
                    _py_local_tk = prim__tokens.array[prim__tokens.offset]
                    if (_py_local_tk.idint is lcl_3):
                        prim__tokens.offset += 1
                    else:
                        _py_local_tk = None
                except IndexError:
                    _py_local_tk = None
                lcl_3 = _py_local_tk
                _slot_1 = lcl_3
                lcl_3 = (_slot_1 is None)
                if lcl_3:
                    lcl_4 = prim__tokens.offset
                    lcl_4 = (lcl_4, 'quote ) not match')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                else:
                    _slot_local__1 = True
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 4):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                _slot_local__1 = False
                lcl_3 = (True, _slot_local__1)
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'tuple_tail lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'tuple_tail got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0

    def parse_withitem(prim__state, prim__tokens):
        lcl_0 = parse_expr(prim__state, prim__tokens)
        _slot_0_check = lcl_0
        lcl_0 = _slot_0_check[0]
        lcl_0 = (lcl_0 is False)
        if lcl_0:
            lcl_0 = _slot_0_check
        else:
            lcl_1 = _slot_0_check[1]
            lcl_1 = lcl_1
            _slot_0 = lcl_1
            lcl_1 = 7
            try:
                _py_local_tk = prim__tokens.array[prim__tokens.offset]
                if (_py_local_tk.idint is lcl_1):
                    prim__tokens.offset += 1
                else:
                    _py_local_tk = None
            except IndexError:
                _py_local_tk = None
            lcl_1 = _py_local_tk
            _slot_1 = lcl_1
            lcl_1 = (_slot_1 is None)
            if lcl_1:
                lcl_2 = prim__tokens.offset
                lcl_2 = (lcl_2, 'quote as not match')
                lcl_2 = prim__cons(lcl_2, prim__nil)
                lcl_2 = lcl_2
                lcl_2 = (False, lcl_2)
                lcl_1 = lcl_2
            else:
                lcl_2 = parse_expr(prim__state, prim__tokens)
                _slot_2_check = lcl_2
                lcl_2 = _slot_2_check[0]
                lcl_2 = (lcl_2 is False)
                if lcl_2:
                    lcl_2 = _slot_2_check
                else:
                    lcl_3 = _slot_2_check[1]
                    lcl_3 = lcl_3
                    _slot_2 = lcl_3
                    lcl_3 = _slot_0
                    lcl_3 = as__load(lcl_3)
                    lcl_4 = _slot_2
                    lcl_4 = as__store(lcl_4)
                    lcl_3 = withitem(lcl_3, lcl_4)
                    _slot_local__1 = lcl_3
                    lcl_3 = (True, _slot_local__1)
                    lcl_2 = lcl_3
                lcl_1 = lcl_2
            lcl_0 = lcl_1
        return lcl_0

    def parse_yield(prim__state, prim__tokens):
        lcl_0 = prim__tokens.offset
        _off_0 = lcl_0
        lcl_0 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
        if lcl_0:
            lcl_2 = prim__tokens.array[(prim__tokens.offset + 0)]
            lcl_2 = lcl_2.idint
            if (lcl_2 == 60):
                _py_local_i = prim__tokens.offset
                _py_local_t = prim__tokens.array[_py_local_i]
                prim__tokens.offset = (_py_local_i + 1)
                lcl_3 = _py_local_t
                _slot_0 = lcl_3
                lcl_3 = prim__tokens.offset
                _off_1 = lcl_3
                lcl_3 = (len(prim__tokens.array) > (prim__tokens.offset + 0))
                if lcl_3:
                    lcl_5 = prim__tokens.array[(prim__tokens.offset + 0)]
                    lcl_5 = lcl_5.idint
                    if (lcl_5 == 59):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 60):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 37):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 25):
                        _py_local_i = prim__tokens.offset
                        _py_local_t = prim__tokens.array[_py_local_i]
                        prim__tokens.offset = (_py_local_i + 1)
                        lcl_6 = _py_local_t
                        _slot_1 = lcl_6
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_2_check = lcl_6
                        lcl_6 = _slot_2_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_2_check
                        else:
                            lcl_7 = _slot_2_check[1]
                            lcl_7 = lcl_7
                            _slot_2 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_2
                            lcl_8 = YieldFrom(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 33):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 62):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 65):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 64):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 66):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 63):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 51):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 3):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 71):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 69):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 70):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    elif (lcl_5 == 68):
                        lcl_6 = parse_expr(prim__state, prim__tokens)
                        _slot_1_check = lcl_6
                        lcl_6 = _slot_1_check[0]
                        lcl_6 = (lcl_6 is False)
                        if lcl_6:
                            lcl_6 = _slot_1_check
                        else:
                            lcl_7 = _slot_1_check[1]
                            lcl_7 = lcl_7
                            _slot_1 = lcl_7
                            lcl_7 = (_slot_0.lineno, _slot_0.colno, _slot_0.filename)
                            lcl_8 = _slot_1
                            lcl_8 = tuple__if__more__than__1(lcl_8)
                            lcl_8 = Yield(lcl_8)
                            lcl_7 = loc(lcl_7, lcl_8)
                            _slot_local__1 = lcl_7
                            lcl_7 = (True, _slot_local__1)
                            lcl_6 = lcl_7
                        lcl_4 = lcl_6
                    else:
                        lcl_6 = (_off_1, 'yield lookahead failed')
                        lcl_6 = prim__cons(lcl_6, prim__nil)
                        lcl_6 = lcl_6
                        lcl_6 = (False, lcl_6)
                        lcl_4 = lcl_6
                    lcl_3 = lcl_4
                else:
                    lcl_4 = (_off_1, 'yield got EOF')
                    lcl_4 = prim__cons(lcl_4, prim__nil)
                    lcl_4 = lcl_4
                    lcl_4 = (False, lcl_4)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 62):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 65):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 64):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 66):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 63):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 3):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 71):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 69):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 70):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            elif (lcl_2 == 68):
                lcl_3 = parse_atom(prim__state, prim__tokens)
                _slot_0_check = lcl_3
                lcl_3 = _slot_0_check[0]
                lcl_3 = (lcl_3 is False)
                if lcl_3:
                    lcl_3 = _slot_0_check
                else:
                    lcl_4 = _slot_0_check[1]
                    lcl_4 = lcl_4
                    _slot_0 = lcl_4
                    lcl_4 = _slot_0
                    _slot_local__1 = lcl_4
                    lcl_4 = (True, _slot_local__1)
                    lcl_3 = lcl_4
                lcl_1 = lcl_3
            else:
                lcl_3 = (_off_0, 'yield lookahead failed')
                lcl_3 = prim__cons(lcl_3, prim__nil)
                lcl_3 = lcl_3
                lcl_3 = (False, lcl_3)
                lcl_1 = lcl_3
            lcl_0 = lcl_1
        else:
            lcl_1 = (_off_0, 'yield got EOF')
            lcl_1 = prim__cons(lcl_1, prim__nil)
            lcl_1 = lcl_1
            lcl_1 = (False, lcl_1)
            lcl_0 = lcl_1
        return lcl_0
    return parse_START
