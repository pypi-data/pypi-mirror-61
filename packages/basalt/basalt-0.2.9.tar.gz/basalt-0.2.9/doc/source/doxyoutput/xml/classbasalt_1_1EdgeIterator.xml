<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.15">
  <compounddef id="classbasalt_1_1EdgeIterator" kind="class" language="C++" prot="public">
    <compoundname>basalt::EdgeIterator</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::iterator&lt; std::input_iterator_tag, const edge_uid_t &gt;</basecompoundref>
    <includes refid="edge__iterator_8hpp" local="no">edge_iterator.hpp</includes>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="classbasalt_1_1EdgeIterator_1a744bcee0509aef12e1a624d1b7e7f712" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>EdgeOrientation</type>
            <declname>Orientation</declname>
            <defname>Orientation</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>basalt::EdgeIterator::EdgeIterator</definition>
        <argsstring>(const GraphImpl&lt; Orientation &gt; &amp;pimpl, size_t from)</argsstring>
        <name>EdgeIterator</name>
        <param>
          <type>const <ref refid="classbasalt_1_1GraphImpl" kindref="compound">GraphImpl</ref>&lt; Orientation &gt; &amp;</type>
          <declname>pimpl</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>from</declname>
        </param>
        <briefdescription>
<para>Ctors and dtors. </para>
        </briefdescription>
        <detaileddescription>
<para>Create an iterator over edges <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pimpl</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to implementation </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>from</parametername>
</parameternamelist>
<parameterdescription>
<para>Move iterator a specified index </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classbasalt_1_1EdgeIterator_1a0149d44b43a20682d20c43507497ba2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>basalt::EdgeIterator::EdgeIterator</definition>
        <argsstring>(const EdgeIterator &amp;other)</argsstring>
        <name>EdgeIterator</name>
        <param>
          <type>const <ref refid="classbasalt_1_1EdgeIterator" kindref="compound">EdgeIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Copy constructor <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>Other iterator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" line="36" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classbasalt_1_1EdgeIterator_1acf82b5969be148dba1841b6069d82ae9" prot="public" static="no">
        <type>std::shared_ptr&lt; EdgeIteratorImpl &gt;</type>
        <definition>using basalt::EdgeIterator::EdgeIteratorImpl_ptr =  std::shared_ptr&lt;EdgeIteratorImpl&gt;</definition>
        <argsstring></argsstring>
        <name>EdgeIteratorImpl_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" line="64" column="1" bodyfile="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classbasalt_1_1EdgeIterator_1a5c1cb72948ecca2ebea9675879a5435c" prot="private" static="no" mutable="no">
        <type>EdgeIteratorImpl_ptr</type>
        <definition>EdgeIteratorImpl_ptr basalt::EdgeIterator::pimpl_</definition>
        <argsstring></argsstring>
        <name>pimpl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" line="67" column="1" bodyfile="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classbasalt_1_1EdgeIterator_1a5253b9365c8b0a187a66baa2de0d3008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classbasalt_1_1EdgeIterator" kindref="compound">EdgeIterator</ref> &amp;</type>
        <definition>EdgeIterator&amp; basalt::EdgeIterator::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
<para>Move iterator to next element. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>this instance </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classbasalt_1_1EdgeIterator_1aaf8fa69853fc5a0baf1457be9a7e88a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classbasalt_1_1EdgeIterator" kindref="compound">EdgeIterator</ref></type>
        <definition>const EdgeIterator basalt::EdgeIterator::operator++</definition>
        <argsstring>(int)</argsstring>
        <name>operator++</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
<para>Advance the iterator by specified element positions. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>copy of the iterator before the operation </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classbasalt_1_1EdgeIterator_1ac5dd9ff6305bfd2c45a8d730ee448e26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basalt::EdgeIterator::operator==</definition>
        <argsstring>(const EdgeIterator &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classbasalt_1_1EdgeIterator" kindref="compound">EdgeIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>compare 2 edge iterators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classbasalt_1_1EdgeIterator_1a555ee8ec318271abeab97c8aa5bb3c18" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool basalt::EdgeIterator::operator!=</definition>
        <argsstring>(const EdgeIterator &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classbasalt_1_1EdgeIterator" kindref="compound">EdgeIterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>compare 2 edge iterators </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classbasalt_1_1EdgeIterator_1a14bb02eed04cc18f447d5c6e6d8fc373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const value_type &amp;</type>
        <definition>const value_type&amp; basalt::EdgeIterator::operator *</definition>
        <argsstring>()</argsstring>
        <name>operator *</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get edge at the current iterator position <simplesect kind="return"><para>constant reference to element </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" line="62" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Iterator class for edges. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1">
        <label>std::iterator&lt; std::input_iterator_tag, const edge_uid_t &gt;</label>
      </node>
      <node id="0">
        <label>basalt::EdgeIterator</label>
        <link refid="classbasalt_1_1EdgeIterator"/>
        <childnode refid="1" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3">
        <label>std::iterator&lt; std::input_iterator_tag, const edge_uid_t &gt;</label>
      </node>
      <node id="2">
        <label>basalt::EdgeIterator</label>
        <link refid="classbasalt_1_1EdgeIterator"/>
        <childnode refid="3" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" line="17" column="1" bodyfile="/goinfre/src/github.com/BlueBrain/basalt/include/basalt/edge_iterator.hpp" bodystart="17" bodyend="68"/>
    <listofallmembers>
      <member refid="classbasalt_1_1EdgeIterator_1a744bcee0509aef12e1a624d1b7e7f712" prot="public" virt="non-virtual"><scope>basalt::EdgeIterator</scope><name>EdgeIterator</name></member>
      <member refid="classbasalt_1_1EdgeIterator_1a0149d44b43a20682d20c43507497ba2f" prot="public" virt="non-virtual"><scope>basalt::EdgeIterator</scope><name>EdgeIterator</name></member>
      <member refid="classbasalt_1_1EdgeIterator_1acf82b5969be148dba1841b6069d82ae9" prot="public" virt="non-virtual"><scope>basalt::EdgeIterator</scope><name>EdgeIteratorImpl_ptr</name></member>
      <member refid="classbasalt_1_1EdgeIterator_1a14bb02eed04cc18f447d5c6e6d8fc373" prot="public" virt="non-virtual"><scope>basalt::EdgeIterator</scope><name>operator *</name></member>
      <member refid="classbasalt_1_1EdgeIterator_1a555ee8ec318271abeab97c8aa5bb3c18" prot="public" virt="non-virtual"><scope>basalt::EdgeIterator</scope><name>operator!=</name></member>
      <member refid="classbasalt_1_1EdgeIterator_1a5253b9365c8b0a187a66baa2de0d3008" prot="public" virt="non-virtual"><scope>basalt::EdgeIterator</scope><name>operator++</name></member>
      <member refid="classbasalt_1_1EdgeIterator_1aaf8fa69853fc5a0baf1457be9a7e88a5" prot="public" virt="non-virtual"><scope>basalt::EdgeIterator</scope><name>operator++</name></member>
      <member refid="classbasalt_1_1EdgeIterator_1ac5dd9ff6305bfd2c45a8d730ee448e26" prot="public" virt="non-virtual"><scope>basalt::EdgeIterator</scope><name>operator==</name></member>
      <member refid="classbasalt_1_1EdgeIterator_1a5c1cb72948ecca2ebea9675879a5435c" prot="private" virt="non-virtual"><scope>basalt::EdgeIterator</scope><name>pimpl_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
