#!/usr/bin/env python3

from __future__ import print_function
from __future__ import division
from __future__ import absolute_import
from __future__ import unicode_literals

import os
import time
import sys

import numpy

from argparse import ArgumentParser

from mangadap.drpfits import DRPFits

#-----------------------------------------------------------------------------

def calculate_covariance_cube(plate, ifudesign, ofile, nc=1, wave=None, directory_path=None):

    print('     PLATE: {0}'.format(plate))
    print(' IFUDESIGN: {0}'.format(ifudesign))

    # Access the DRP RSS file
    print('Attempting to open RSS file:')
    drpf = DRPFits(plate, ifudesign, 'RSS', read=True, directory_path=directory_path)
    print('     FOUND: {0}'.format(drpf.file_path()))

    nw = drpf['WAVE'].data.size                     # Number of wavelength channels

    if wave is not None:
        channel = numpy.argsort( numpy.absolute(drpf['WAVE'].data - wave) )[0]
        print('Nearest wavelength channel has wavelength {0:.1f} ang.'.format(
                                                                    drpf['WAVE'].data[channel]))
        C = drpf.covariance_matrix(channel)

    else:
        if nc >= nw or nc == 0:
            print('Calculating full covariance cube ...')
            C = drpf.covariance_cube()
            print('... done.')
        elif nc == 1:
            print('Calculating covariance matrix at central channel: {0:.1f} ang.'.format(
                                                                    drpf['WAVE'].data[nw/2]))
            C = drpf.covariance_matrix(nw/2)
        else:
            print('Calculating covariance in {0} wavelength channels...'.format(nc))
            if sys.version > '3':
                channels = numpy.linspace(0, nw-1, num=nc, dtype=numpy.int)
            else:
                channels = numpy.linspace(0, nw-1, num=nc).astype(numpy.int)
            C = drpf.covariance_cube(channels=channels)

    print('Writing data to {0}.'.format(ofile))
    C.write(ofile, clobber=True)            # Write the data

#-----------------------------------------------------------------------------

if __name__ == '__main__':
    t = time.perf_counter()

    parser = ArgumentParser()

    parser.add_argument('plate', type=int, help='plate ID to process')
    parser.add_argument('ifudesign', type=int, help='IFU design to process')
    parser.add_argument('output_file', type=str, help='Name for output file')

    mode = parser.add_mutually_exclusive_group(required=False)
    mode.add_argument('-n', '--numchannels', type=int,
                      help='Number of channels spread across the wavelength range for which '
                           'to compute the covariance matrix.  A value of 0 forces construction '
                           'of the full covariance cube.  The default is to calculate the '
                           'covariance matrix for a single channel at the central wavelength',
                      default=1)
    mode.add_argument('-w', '--wavelength', type=float,
                      help='Wavelength at which to compute a single covariance matrix; default '
                           'is the central wavelength', default=None)

    parser.add_argument('-d', '--directory_path', type=str,
                        help='Directory with the DRP produced RSS file; default uses environmental '
                             'variables to define the default MaNGA DRP redux path', default=None)

    arg = parser.parse_args()

    if os.path.isfile(arg.output_file):
        print('WARNING: Overwriting existing file {0}!'.format(arg.output_file))

    calculate_covariance_cube(arg.plate, arg.ifudesign, arg.output_file, nc=arg.numchannels,
                              wave=arg.wavelength, directory_path=arg.directory_path)

    print('Elapsed time: {0} seconds'.format(time.perf_counter() - t))



