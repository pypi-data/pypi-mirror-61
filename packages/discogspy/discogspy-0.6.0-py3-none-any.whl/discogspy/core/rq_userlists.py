# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/08_core.rq_userlists.ipynb (unless otherwise specified).

__all__ = ['get_userlists', 'get_userlist']

# Cell
import requests
from typing import Union
from . import *

# Cell


def get_userlists(user: Union[UserWithoutAuthentication,
                              UserWithUserTokenBasedAuthentication],
                  username: str,
                  page: Union[int, None] = None,
                  per_page: Union[int, None] = None,
                  ) -> requests.models.Response:
    """
    Get a list of user lists for the given user.

    Note: Private Lists will only display when authenticated as the owner.

    No user Authentication needed.

    Parameters:

    user: user object (required)

    username: string (required)
        -> The username of the owner of the user lists you are trying to fetch.

    page: number (optional)
        -> The page you want to request.

    per_page: number (optional)
        -> The number of items per page.
    """

    url = f"{USERS_URL}/{username}/lists"
    headers = user.headers
    params = user.params

    if page:
        params["page"] = max(1, page)
    if per_page:
        params["per_page"] = max(1, per_page)

    return requests.get(url, headers=headers, params=params)

# Cell


def get_userlist(user: Union[UserWithoutAuthentication,
                             UserWithUserTokenBasedAuthentication],
                 list_id: int
                 ) -> requests.models.Response:
    """
    Get a list of items from a specified user list from the given user.

    Note: Private Lists will only display when authenticated as the owner.

    No user Authentication needed.

    Parameters:

    user: user object (required)

    list_id: number (required)
        -> The ID of the List you are trying to fetch.
    """

    url = f"{LISTS_URL}/{list_id}"
    headers = user.headers
    params = user.params

    return requests.get(url, headers=headers, params=params)