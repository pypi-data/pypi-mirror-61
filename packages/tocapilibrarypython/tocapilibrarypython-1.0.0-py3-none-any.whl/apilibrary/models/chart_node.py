# coding=utf-8
# --------------------------------------------------------------------------
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model


class ChartNode(Model):
    """ChartNode.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar box_type:
    :vartype box_type: int
    :param virtual_level:
    :type virtual_level: int
    :ivar search_name:
    :vartype search_name: str
    :param unique_id:
    :type unique_id: str
    :param manager_id:
    :type manager_id: str
    :param original_manager_id:
    :type original_manager_id: str
    :param manager_display_name:
    :type manager_display_name: str
    :param mapped_id:
    :type mapped_id: str
    :param mapped_manager_display_name:
    :type mapped_manager_display_name: str
    :param display_name:
    :type display_name: str
    :param job_title:
    :type job_title: str
    :param email:
    :type email: str
    :param phone:
    :type phone: str
    :param group:
    :type group: str
    :param picture_url:
    :type picture_url: str
    :param is_assistant:
    :type is_assistant: bool
    :param has_hidden_reports:
    :type has_hidden_reports: bool
    :param is_coordinator:
    :type is_coordinator: bool
    :param is_joint_manager:
    :type is_joint_manager: bool
    :param is_drop_level:
    :type is_drop_level: bool
    :param is_drop_level_parent:
    :type is_drop_level_parent: bool
    :param height:
    :type height: int
    :param width:
    :type width: int
    :param is_department:
    :type is_department: bool
    :param is_vacant_position:
    :type is_vacant_position: bool
    :param is_temp_position:
    :type is_temp_position: bool
    :param vacant_position:
    :type vacant_position:
     ~teamorgchart.apilibrary.models.VacantPositionViewModel
    :ivar is_chart_addition:
    :vartype is_chart_addition: bool
    :ivar assistants:
    :vartype assistants: list[~teamorgchart.apilibrary.models.ChartNode]
    :ivar coordinators:
    :vartype coordinators: list[~teamorgchart.apilibrary.models.ChartNode]
    :ivar joint_managers:
    :vartype joint_managers: list[~teamorgchart.apilibrary.models.ChartNode]
    :ivar toc_impacts:
    :vartype toc_impacts: dict[str, str]
    :ivar toc_fields:
    :vartype toc_fields: dict[str, str]
    :param chart_layout:
    :type chart_layout: ~teamorgchart.apilibrary.models.ChartLayoutViewModel
    """

    _validation = {
        'box_type': {'readonly': True},
        'search_name': {'readonly': True},
        'is_chart_addition': {'readonly': True},
        'assistants': {'readonly': True},
        'coordinators': {'readonly': True},
        'joint_managers': {'readonly': True},
        'toc_impacts': {'readonly': True},
        'toc_fields': {'readonly': True},
    }

    _attribute_map = {
        'box_type': {'key': 'BoxType', 'type': 'int'},
        'virtual_level': {'key': 'VirtualLevel', 'type': 'int'},
        'search_name': {'key': 'SearchName', 'type': 'str'},
        'unique_id': {'key': 'UniqueId', 'type': 'str'},
        'manager_id': {'key': 'ManagerId', 'type': 'str'},
        'original_manager_id': {'key': 'OriginalManagerId', 'type': 'str'},
        'manager_display_name': {'key': 'ManagerDisplayName', 'type': 'str'},
        'mapped_id': {'key': 'MappedId', 'type': 'str'},
        'mapped_manager_display_name': {'key': 'MappedManagerDisplayName', 'type': 'str'},
        'display_name': {'key': 'DisplayName', 'type': 'str'},
        'job_title': {'key': 'JobTitle', 'type': 'str'},
        'email': {'key': 'Email', 'type': 'str'},
        'phone': {'key': 'Phone', 'type': 'str'},
        'group': {'key': 'Group', 'type': 'str'},
        'picture_url': {'key': 'PictureUrl', 'type': 'str'},
        'is_assistant': {'key': 'IsAssistant', 'type': 'bool'},
        'has_hidden_reports': {'key': 'HasHiddenReports', 'type': 'bool'},
        'is_coordinator': {'key': 'IsCoordinator', 'type': 'bool'},
        'is_joint_manager': {'key': 'IsJointManager', 'type': 'bool'},
        'is_drop_level': {'key': 'IsDropLevel', 'type': 'bool'},
        'is_drop_level_parent': {'key': 'IsDropLevelParent', 'type': 'bool'},
        'height': {'key': 'Height', 'type': 'int'},
        'width': {'key': 'Width', 'type': 'int'},
        'is_department': {'key': 'IsDepartment', 'type': 'bool'},
        'is_vacant_position': {'key': 'IsVacantPosition', 'type': 'bool'},
        'is_temp_position': {'key': 'IsTempPosition', 'type': 'bool'},
        'vacant_position': {'key': 'VacantPosition', 'type': 'VacantPositionViewModel'},
        'is_chart_addition': {'key': 'IsChartAddition', 'type': 'bool'},
        'assistants': {'key': 'Assistants', 'type': '[ChartNode]'},
        'coordinators': {'key': 'Coordinators', 'type': '[ChartNode]'},
        'joint_managers': {'key': 'JointManagers', 'type': '[ChartNode]'},
        'toc_impacts': {'key': 'TOC_Impacts', 'type': '{str}'},
        'toc_fields': {'key': 'TOC_Fields', 'type': '{str}'},
        'chart_layout': {'key': 'ChartLayout', 'type': 'ChartLayoutViewModel'},
    }

    def __init__(self, **kwargs):
        super(ChartNode, self).__init__(**kwargs)
        self.box_type = None
        self.virtual_level = kwargs.get('virtual_level', None)
        self.search_name = None
        self.unique_id = kwargs.get('unique_id', None)
        self.manager_id = kwargs.get('manager_id', None)
        self.original_manager_id = kwargs.get('original_manager_id', None)
        self.manager_display_name = kwargs.get('manager_display_name', None)
        self.mapped_id = kwargs.get('mapped_id', None)
        self.mapped_manager_display_name = kwargs.get('mapped_manager_display_name', None)
        self.display_name = kwargs.get('display_name', None)
        self.job_title = kwargs.get('job_title', None)
        self.email = kwargs.get('email', None)
        self.phone = kwargs.get('phone', None)
        self.group = kwargs.get('group', None)
        self.picture_url = kwargs.get('picture_url', None)
        self.is_assistant = kwargs.get('is_assistant', None)
        self.has_hidden_reports = kwargs.get('has_hidden_reports', None)
        self.is_coordinator = kwargs.get('is_coordinator', None)
        self.is_joint_manager = kwargs.get('is_joint_manager', None)
        self.is_drop_level = kwargs.get('is_drop_level', None)
        self.is_drop_level_parent = kwargs.get('is_drop_level_parent', None)
        self.height = kwargs.get('height', None)
        self.width = kwargs.get('width', None)
        self.is_department = kwargs.get('is_department', None)
        self.is_vacant_position = kwargs.get('is_vacant_position', None)
        self.is_temp_position = kwargs.get('is_temp_position', None)
        self.vacant_position = kwargs.get('vacant_position', None)
        self.is_chart_addition = None
        self.assistants = None
        self.coordinators = None
        self.joint_managers = None
        self.toc_impacts = None
        self.toc_fields = None
        self.chart_layout = kwargs.get('chart_layout', None)
