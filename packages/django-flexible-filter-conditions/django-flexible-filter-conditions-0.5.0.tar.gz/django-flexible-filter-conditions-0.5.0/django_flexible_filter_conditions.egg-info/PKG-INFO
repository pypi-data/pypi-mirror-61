Metadata-Version: 1.1
Name: django-flexible-filter-conditions
Version: 0.5.0
Summary: Flexible query filter conditions, that can be defined from django-admin and used for segmentation of date (i.e. Profiles).
Home-page: https://github.com/PetrDlouhy/django-flexible-filter-conditions
Author: Petr Dlouh√Ω
Author-email: petr.dlouhy@email.cz
License: MIT
Description: =================================
        Django flexible filter conditions
        =================================
        
        .. image:: https://badge.fury.io/py/django-flexible-filter-conditions.svg
            :target: https://badge.fury.io/py/django-flexible-filter-conditions
        
        .. image:: https://travis-ci.org/PetrDlouhy/django-flexible-filter-conditions.svg?branch=master
            :target: https://travis-ci.org/PetrDlouhy/django-flexible-filter-conditions
        
        .. image:: https://codecov.io/gh/PetrDlouhy/django-flexible-filter-conditions/branch/master/graph/badge.svg
            :target: https://codecov.io/gh/PetrDlouhy/django-flexible-filter-conditions
        
        Flexible query filter conditions, that can be defined from django-admin and used for segmentation of date (i.e. Profiles).
        
        Documentation
        -------------
        
        The full documentation is at https://django-flexible-filter-conditions.readthedocs.io.
        
        Quickstart
        ----------
        
        Install Django flexible filter conditions::
        
            pip install django-flexible-filter_conditions
        
        Add it to your `INSTALLED_APPS`:
        
        .. code-block:: python
        
            INSTALLED_APPS = (
                ...
                'flexible_filter_conditions.apps.FlexibleFilterConditionsConfig',
                ...
            )
        
        Add Django flexible filter conditions's URL patterns:
        
        .. code-block:: python
        
            FLEXIBLE_FILTER_CONDITIONS_FIELD_MAP = {
                'User': ('aklub.models', 'User'),
                'Profile': ('aklub.models', 'Profile'),
                'Payment': ('aklub.models', 'Payment'),
                'User.last_payment': ('aklub.models', 'Payment'),
                'User.userchannels': ('aklub.models', 'DonorPaymentChannel'),
            }
        
        
        
        Features
        --------
        
        * TODO
        
        Running Tests
        -------------
        
        Does the code actually work?
        
        ::
        
            source <YOURVIRTUALENV>/bin/activate
            (myenv) $ pip install tox
            (myenv) $ tox
        
        Credits
        -------
        
        Tools used in rendering this package:
        
        *  Cookiecutter_
        *  `cookiecutter-djangopackage`_
        
        .. _Cookiecutter: https://github.com/audreyr/cookiecutter
        .. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage
        
        
        
        
        History
        -------
        
        0.5.0 (2020-02-19)
        ++++++++++++++++++
        
        * refactor: remove filter_by_condition(), make it NamedCondition class method filter_by_query()
        * fix contains operator
        * add more testing
        
        0.4.0 (2020-02-18)
        ++++++++++++++++++
        
        * added support for new operators: in, list, date
        * mutlipe conditions in one named comdition can be added to support
          subsequent filters
        * add xor operator
        * add negate to condtition (and remove nor)
        
        
        0.3.0 (2020-01-23)
        ++++++++++++++++++
        
        * fixes and improvements for better user orientation
        
        
        0.2.0 (2020-01-21)
        ++++++++++++++++++
        
        * Added blank paremeter value
        * Added isnull filter
        
        0.1.0 (2020-01-14)
        ++++++++++++++++++
        
        * First release on PyPI.
        
Keywords: django-flexible-filter-conditions
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Framework :: Django :: 1.11
Classifier: Framework :: Django :: 2.1
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Natural Language :: English
Classifier: Programming Language :: Python :: 2
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.5
Classifier: Programming Language :: Python :: 3.6
