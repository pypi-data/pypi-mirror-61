# Generated by PyGodot binding generator
<%!
    singleton_map = {}

    def get_class_name(name, cls):
        if cls['singleton']:
            singleton_map[name] = name + 'Class'
            return name + 'Class'
        return name

    def get_base_name(name):
        if not name:
            return '_PyWrapped'

        if name in singleton_map:
            return singleton_map[name]

        return name
%>
from godot_headers.gdnative_api cimport godot_method_bind, godot_object

from ..core._wrapped cimport _PyWrapped

cdef __register_types()
cdef __init_method_bindings()
% for class_name, class_def, includes, forwards, methods in classes:
% if methods:

cdef struct __${class_name}__method_bindings:
    % for method_name, method, return_type, pxd_signature, signature, args, return_stmt, init_args in methods:
    godot_method_bind *mb_${method_name}
    % endfor
% endif

cdef class ${get_class_name(class_name, class_def)}(${get_base_name(class_def['base_class'])}):
    % if class_name == 'NativeScript':
    cdef godot_object *_new_instance(self)
    % else:
    pass
    % endif
% endfor
