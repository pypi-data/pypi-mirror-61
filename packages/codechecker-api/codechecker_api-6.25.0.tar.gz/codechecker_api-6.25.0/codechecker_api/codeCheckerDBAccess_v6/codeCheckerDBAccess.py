#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  def getRunData(self, runFilter, limit, offset, sortMode):
    """
    Parameters:
     - runFilter
     - limit
     - offset
     - sortMode
    """
    pass

  def getRunCount(self, runFilter):
    """
    Parameters:
     - runFilter
    """
    pass

  def getCheckCommand(self, runHistoryId, runId):
    """
    Parameters:
     - runHistoryId
     - runId
    """
    pass

  def getRunHistory(self, runIds, limit, offset, runHistoryFilter):
    """
    Parameters:
     - runIds
     - limit
     - offset
     - runHistoryFilter
    """
    pass

  def getRunHistoryCount(self, runIds, runHistoryFilter):
    """
    Parameters:
     - runIds
     - runHistoryFilter
    """
    pass

  def getDiffResultsHash(self, runIds, reportHashes, diffType, skipDetectionStatuses):
    """
    Parameters:
     - runIds
     - reportHashes
     - diffType
     - skipDetectionStatuses
    """
    pass

  def getReport(self, reportId):
    """
    Parameters:
     - reportId
    """
    pass

  def getRunResults(self, runIds, limit, offset, sortType, reportFilter, cmpData, getDetails):
    """
    Parameters:
     - runIds
     - limit
     - offset
     - sortType
     - reportFilter
     - cmpData
     - getDetails
    """
    pass

  def getRunReportCounts(self, runIds, reportFilter, limit, offset):
    """
    Parameters:
     - runIds
     - reportFilter
     - limit
     - offset
    """
    pass

  def getRunResultCount(self, runIds, reportFilter, cmpData):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
    """
    pass

  def getReportDetails(self, reportId):
    """
    Parameters:
     - reportId
    """
    pass

  def getSourceFileData(self, fileId, fileContent, encoding):
    """
    Parameters:
     - fileId
     - fileContent
     - encoding
    """
    pass

  def getLinesInSourceFileContents(self, linesInFilesRequested, encoding):
    """
    Parameters:
     - linesInFilesRequested
     - encoding
    """
    pass

  def isReviewStatusChangeDisabled(self):
    pass

  def changeReviewStatus(self, reportId, status, message):
    """
    Parameters:
     - reportId
     - status
     - message
    """
    pass

  def getComments(self, reportId):
    """
    Parameters:
     - reportId
    """
    pass

  def getCommentCount(self, reportId):
    """
    Parameters:
     - reportId
    """
    pass

  def addComment(self, reportId, comment):
    """
    Parameters:
     - reportId
     - comment
    """
    pass

  def updateComment(self, commentId, newMessage):
    """
    Parameters:
     - commentId
     - newMessage
    """
    pass

  def removeComment(self, commentId):
    """
    Parameters:
     - commentId
    """
    pass

  def getCheckerDoc(self, checkerId):
    """
    Parameters:
     - checkerId
    """
    pass

  def getPackageVersion(self):
    pass

  def removeRunResults(self, runIds):
    """
    Parameters:
     - runIds
    """
    pass

  def removeRunReports(self, runIds, reportFilter, cmpData):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
    """
    pass

  def removeRun(self, runId, runFilter):
    """
    Parameters:
     - runId
     - runFilter
    """
    pass

  def updateRunData(self, runId, newRunName):
    """
    Parameters:
     - runId
     - newRunName
    """
    pass

  def getSuppressFile(self):
    pass

  def getSeverityCounts(self, runIds, reportFilter, cmpData):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
    """
    pass

  def getCheckerMsgCounts(self, runIds, reportFilter, cmpData, limit, offset):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
     - limit
     - offset
    """
    pass

  def getReviewStatusCounts(self, runIds, reportFilter, cmpData):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
    """
    pass

  def getDetectionStatusCounts(self, runIds, reportFilter, cmpData):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
    """
    pass

  def getFileCounts(self, runIds, reportFilter, cmpData, limit, offset):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
     - limit
     - offset
    """
    pass

  def getCheckerCounts(self, runIds, reportFilter, cmpData, limit, offset):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
     - limit
     - offset
    """
    pass

  def getRunHistoryTagCounts(self, runIds, reportFilter, cmpData):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
    """
    pass

  def addSourceComponent(self, name, value, description):
    """
    Parameters:
     - name
     - value
     - description
    """
    pass

  def getSourceComponents(self, sourceComponentFilter):
    """
    Parameters:
     - sourceComponentFilter
    """
    pass

  def removeSourceComponent(self, name):
    """
    Parameters:
     - name
    """
    pass

  def getMissingContentHashes(self, fileHashes):
    """
    Parameters:
     - fileHashes
    """
    pass

  def massStoreRun(self, runName, tag, version, zipfile, force, trimPathPrefixes):
    """
    Parameters:
     - runName
     - tag
     - version
     - zipfile
     - force
     - trimPathPrefixes
    """
    pass

  def allowsStoringAnalysisStatistics(self):
    pass

  def getAnalysisStatisticsLimits(self):
    pass

  def storeAnalysisStatistics(self, runName, zipfile):
    """
    Parameters:
     - runName
     - zipfile
    """
    pass

  def getAnalysisStatistics(self, runId, runHistoryId):
    """
    Parameters:
     - runId
     - runHistoryId
    """
    pass


class Client(Iface):
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot is not None:
      self._oprot = oprot
    self._seqid = 0

  def getRunData(self, runFilter, limit, offset, sortMode):
    """
    Parameters:
     - runFilter
     - limit
     - offset
     - sortMode
    """
    self.send_getRunData(runFilter, limit, offset, sortMode)
    return self.recv_getRunData()

  def send_getRunData(self, runFilter, limit, offset, sortMode):
    self._oprot.writeMessageBegin('getRunData', TMessageType.CALL, self._seqid)
    args = getRunData_args()
    args.runFilter = runFilter
    args.limit = limit
    args.offset = offset
    args.sortMode = sortMode
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRunData(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getRunData_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRunData failed: unknown result");

  def getRunCount(self, runFilter):
    """
    Parameters:
     - runFilter
    """
    self.send_getRunCount(runFilter)
    return self.recv_getRunCount()

  def send_getRunCount(self, runFilter):
    self._oprot.writeMessageBegin('getRunCount', TMessageType.CALL, self._seqid)
    args = getRunCount_args()
    args.runFilter = runFilter
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRunCount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getRunCount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRunCount failed: unknown result");

  def getCheckCommand(self, runHistoryId, runId):
    """
    Parameters:
     - runHistoryId
     - runId
    """
    self.send_getCheckCommand(runHistoryId, runId)
    return self.recv_getCheckCommand()

  def send_getCheckCommand(self, runHistoryId, runId):
    self._oprot.writeMessageBegin('getCheckCommand', TMessageType.CALL, self._seqid)
    args = getCheckCommand_args()
    args.runHistoryId = runHistoryId
    args.runId = runId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCheckCommand(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCheckCommand_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCheckCommand failed: unknown result");

  def getRunHistory(self, runIds, limit, offset, runHistoryFilter):
    """
    Parameters:
     - runIds
     - limit
     - offset
     - runHistoryFilter
    """
    self.send_getRunHistory(runIds, limit, offset, runHistoryFilter)
    return self.recv_getRunHistory()

  def send_getRunHistory(self, runIds, limit, offset, runHistoryFilter):
    self._oprot.writeMessageBegin('getRunHistory', TMessageType.CALL, self._seqid)
    args = getRunHistory_args()
    args.runIds = runIds
    args.limit = limit
    args.offset = offset
    args.runHistoryFilter = runHistoryFilter
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRunHistory(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getRunHistory_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRunHistory failed: unknown result");

  def getRunHistoryCount(self, runIds, runHistoryFilter):
    """
    Parameters:
     - runIds
     - runHistoryFilter
    """
    self.send_getRunHistoryCount(runIds, runHistoryFilter)
    return self.recv_getRunHistoryCount()

  def send_getRunHistoryCount(self, runIds, runHistoryFilter):
    self._oprot.writeMessageBegin('getRunHistoryCount', TMessageType.CALL, self._seqid)
    args = getRunHistoryCount_args()
    args.runIds = runIds
    args.runHistoryFilter = runHistoryFilter
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRunHistoryCount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getRunHistoryCount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRunHistoryCount failed: unknown result");

  def getDiffResultsHash(self, runIds, reportHashes, diffType, skipDetectionStatuses):
    """
    Parameters:
     - runIds
     - reportHashes
     - diffType
     - skipDetectionStatuses
    """
    self.send_getDiffResultsHash(runIds, reportHashes, diffType, skipDetectionStatuses)
    return self.recv_getDiffResultsHash()

  def send_getDiffResultsHash(self, runIds, reportHashes, diffType, skipDetectionStatuses):
    self._oprot.writeMessageBegin('getDiffResultsHash', TMessageType.CALL, self._seqid)
    args = getDiffResultsHash_args()
    args.runIds = runIds
    args.reportHashes = reportHashes
    args.diffType = diffType
    args.skipDetectionStatuses = skipDetectionStatuses
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDiffResultsHash(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getDiffResultsHash_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDiffResultsHash failed: unknown result");

  def getReport(self, reportId):
    """
    Parameters:
     - reportId
    """
    self.send_getReport(reportId)
    return self.recv_getReport()

  def send_getReport(self, reportId):
    self._oprot.writeMessageBegin('getReport', TMessageType.CALL, self._seqid)
    args = getReport_args()
    args.reportId = reportId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getReport(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getReport_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getReport failed: unknown result");

  def getRunResults(self, runIds, limit, offset, sortType, reportFilter, cmpData, getDetails):
    """
    Parameters:
     - runIds
     - limit
     - offset
     - sortType
     - reportFilter
     - cmpData
     - getDetails
    """
    self.send_getRunResults(runIds, limit, offset, sortType, reportFilter, cmpData, getDetails)
    return self.recv_getRunResults()

  def send_getRunResults(self, runIds, limit, offset, sortType, reportFilter, cmpData, getDetails):
    self._oprot.writeMessageBegin('getRunResults', TMessageType.CALL, self._seqid)
    args = getRunResults_args()
    args.runIds = runIds
    args.limit = limit
    args.offset = offset
    args.sortType = sortType
    args.reportFilter = reportFilter
    args.cmpData = cmpData
    args.getDetails = getDetails
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRunResults(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getRunResults_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRunResults failed: unknown result");

  def getRunReportCounts(self, runIds, reportFilter, limit, offset):
    """
    Parameters:
     - runIds
     - reportFilter
     - limit
     - offset
    """
    self.send_getRunReportCounts(runIds, reportFilter, limit, offset)
    return self.recv_getRunReportCounts()

  def send_getRunReportCounts(self, runIds, reportFilter, limit, offset):
    self._oprot.writeMessageBegin('getRunReportCounts', TMessageType.CALL, self._seqid)
    args = getRunReportCounts_args()
    args.runIds = runIds
    args.reportFilter = reportFilter
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRunReportCounts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getRunReportCounts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRunReportCounts failed: unknown result");

  def getRunResultCount(self, runIds, reportFilter, cmpData):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
    """
    self.send_getRunResultCount(runIds, reportFilter, cmpData)
    return self.recv_getRunResultCount()

  def send_getRunResultCount(self, runIds, reportFilter, cmpData):
    self._oprot.writeMessageBegin('getRunResultCount', TMessageType.CALL, self._seqid)
    args = getRunResultCount_args()
    args.runIds = runIds
    args.reportFilter = reportFilter
    args.cmpData = cmpData
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRunResultCount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getRunResultCount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRunResultCount failed: unknown result");

  def getReportDetails(self, reportId):
    """
    Parameters:
     - reportId
    """
    self.send_getReportDetails(reportId)
    return self.recv_getReportDetails()

  def send_getReportDetails(self, reportId):
    self._oprot.writeMessageBegin('getReportDetails', TMessageType.CALL, self._seqid)
    args = getReportDetails_args()
    args.reportId = reportId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getReportDetails(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getReportDetails_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getReportDetails failed: unknown result");

  def getSourceFileData(self, fileId, fileContent, encoding):
    """
    Parameters:
     - fileId
     - fileContent
     - encoding
    """
    self.send_getSourceFileData(fileId, fileContent, encoding)
    return self.recv_getSourceFileData()

  def send_getSourceFileData(self, fileId, fileContent, encoding):
    self._oprot.writeMessageBegin('getSourceFileData', TMessageType.CALL, self._seqid)
    args = getSourceFileData_args()
    args.fileId = fileId
    args.fileContent = fileContent
    args.encoding = encoding
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSourceFileData(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSourceFileData_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSourceFileData failed: unknown result");

  def getLinesInSourceFileContents(self, linesInFilesRequested, encoding):
    """
    Parameters:
     - linesInFilesRequested
     - encoding
    """
    self.send_getLinesInSourceFileContents(linesInFilesRequested, encoding)
    return self.recv_getLinesInSourceFileContents()

  def send_getLinesInSourceFileContents(self, linesInFilesRequested, encoding):
    self._oprot.writeMessageBegin('getLinesInSourceFileContents', TMessageType.CALL, self._seqid)
    args = getLinesInSourceFileContents_args()
    args.linesInFilesRequested = linesInFilesRequested
    args.encoding = encoding
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getLinesInSourceFileContents(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getLinesInSourceFileContents_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getLinesInSourceFileContents failed: unknown result");

  def isReviewStatusChangeDisabled(self):
    self.send_isReviewStatusChangeDisabled()
    return self.recv_isReviewStatusChangeDisabled()

  def send_isReviewStatusChangeDisabled(self):
    self._oprot.writeMessageBegin('isReviewStatusChangeDisabled', TMessageType.CALL, self._seqid)
    args = isReviewStatusChangeDisabled_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isReviewStatusChangeDisabled(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = isReviewStatusChangeDisabled_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isReviewStatusChangeDisabled failed: unknown result");

  def changeReviewStatus(self, reportId, status, message):
    """
    Parameters:
     - reportId
     - status
     - message
    """
    self.send_changeReviewStatus(reportId, status, message)
    return self.recv_changeReviewStatus()

  def send_changeReviewStatus(self, reportId, status, message):
    self._oprot.writeMessageBegin('changeReviewStatus', TMessageType.CALL, self._seqid)
    args = changeReviewStatus_args()
    args.reportId = reportId
    args.status = status
    args.message = message
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changeReviewStatus(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = changeReviewStatus_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "changeReviewStatus failed: unknown result");

  def getComments(self, reportId):
    """
    Parameters:
     - reportId
    """
    self.send_getComments(reportId)
    return self.recv_getComments()

  def send_getComments(self, reportId):
    self._oprot.writeMessageBegin('getComments', TMessageType.CALL, self._seqid)
    args = getComments_args()
    args.reportId = reportId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getComments(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getComments_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getComments failed: unknown result");

  def getCommentCount(self, reportId):
    """
    Parameters:
     - reportId
    """
    self.send_getCommentCount(reportId)
    return self.recv_getCommentCount()

  def send_getCommentCount(self, reportId):
    self._oprot.writeMessageBegin('getCommentCount', TMessageType.CALL, self._seqid)
    args = getCommentCount_args()
    args.reportId = reportId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCommentCount(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCommentCount_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCommentCount failed: unknown result");

  def addComment(self, reportId, comment):
    """
    Parameters:
     - reportId
     - comment
    """
    self.send_addComment(reportId, comment)
    return self.recv_addComment()

  def send_addComment(self, reportId, comment):
    self._oprot.writeMessageBegin('addComment', TMessageType.CALL, self._seqid)
    args = addComment_args()
    args.reportId = reportId
    args.comment = comment
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addComment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addComment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addComment failed: unknown result");

  def updateComment(self, commentId, newMessage):
    """
    Parameters:
     - commentId
     - newMessage
    """
    self.send_updateComment(commentId, newMessage)
    return self.recv_updateComment()

  def send_updateComment(self, commentId, newMessage):
    self._oprot.writeMessageBegin('updateComment', TMessageType.CALL, self._seqid)
    args = updateComment_args()
    args.commentId = commentId
    args.newMessage = newMessage
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateComment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateComment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateComment failed: unknown result");

  def removeComment(self, commentId):
    """
    Parameters:
     - commentId
    """
    self.send_removeComment(commentId)
    return self.recv_removeComment()

  def send_removeComment(self, commentId):
    self._oprot.writeMessageBegin('removeComment', TMessageType.CALL, self._seqid)
    args = removeComment_args()
    args.commentId = commentId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeComment(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = removeComment_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "removeComment failed: unknown result");

  def getCheckerDoc(self, checkerId):
    """
    Parameters:
     - checkerId
    """
    self.send_getCheckerDoc(checkerId)
    return self.recv_getCheckerDoc()

  def send_getCheckerDoc(self, checkerId):
    self._oprot.writeMessageBegin('getCheckerDoc', TMessageType.CALL, self._seqid)
    args = getCheckerDoc_args()
    args.checkerId = checkerId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCheckerDoc(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCheckerDoc_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCheckerDoc failed: unknown result");

  def getPackageVersion(self):
    self.send_getPackageVersion()
    return self.recv_getPackageVersion()

  def send_getPackageVersion(self):
    self._oprot.writeMessageBegin('getPackageVersion', TMessageType.CALL, self._seqid)
    args = getPackageVersion_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getPackageVersion(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getPackageVersion_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getPackageVersion failed: unknown result");

  def removeRunResults(self, runIds):
    """
    Parameters:
     - runIds
    """
    self.send_removeRunResults(runIds)
    return self.recv_removeRunResults()

  def send_removeRunResults(self, runIds):
    self._oprot.writeMessageBegin('removeRunResults', TMessageType.CALL, self._seqid)
    args = removeRunResults_args()
    args.runIds = runIds
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeRunResults(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = removeRunResults_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    raise TApplicationException(TApplicationException.MISSING_RESULT, "removeRunResults failed: unknown result");

  def removeRunReports(self, runIds, reportFilter, cmpData):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
    """
    self.send_removeRunReports(runIds, reportFilter, cmpData)
    return self.recv_removeRunReports()

  def send_removeRunReports(self, runIds, reportFilter, cmpData):
    self._oprot.writeMessageBegin('removeRunReports', TMessageType.CALL, self._seqid)
    args = removeRunReports_args()
    args.runIds = runIds
    args.reportFilter = reportFilter
    args.cmpData = cmpData
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeRunReports(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = removeRunReports_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "removeRunReports failed: unknown result");

  def removeRun(self, runId, runFilter):
    """
    Parameters:
     - runId
     - runFilter
    """
    self.send_removeRun(runId, runFilter)
    return self.recv_removeRun()

  def send_removeRun(self, runId, runFilter):
    self._oprot.writeMessageBegin('removeRun', TMessageType.CALL, self._seqid)
    args = removeRun_args()
    args.runId = runId
    args.runFilter = runFilter
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeRun(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = removeRun_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "removeRun failed: unknown result");

  def updateRunData(self, runId, newRunName):
    """
    Parameters:
     - runId
     - newRunName
    """
    self.send_updateRunData(runId, newRunName)
    return self.recv_updateRunData()

  def send_updateRunData(self, runId, newRunName):
    self._oprot.writeMessageBegin('updateRunData', TMessageType.CALL, self._seqid)
    args = updateRunData_args()
    args.runId = runId
    args.newRunName = newRunName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateRunData(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = updateRunData_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateRunData failed: unknown result");

  def getSuppressFile(self):
    self.send_getSuppressFile()
    return self.recv_getSuppressFile()

  def send_getSuppressFile(self):
    self._oprot.writeMessageBegin('getSuppressFile', TMessageType.CALL, self._seqid)
    args = getSuppressFile_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSuppressFile(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSuppressFile_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSuppressFile failed: unknown result");

  def getSeverityCounts(self, runIds, reportFilter, cmpData):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
    """
    self.send_getSeverityCounts(runIds, reportFilter, cmpData)
    return self.recv_getSeverityCounts()

  def send_getSeverityCounts(self, runIds, reportFilter, cmpData):
    self._oprot.writeMessageBegin('getSeverityCounts', TMessageType.CALL, self._seqid)
    args = getSeverityCounts_args()
    args.runIds = runIds
    args.reportFilter = reportFilter
    args.cmpData = cmpData
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSeverityCounts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSeverityCounts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSeverityCounts failed: unknown result");

  def getCheckerMsgCounts(self, runIds, reportFilter, cmpData, limit, offset):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
     - limit
     - offset
    """
    self.send_getCheckerMsgCounts(runIds, reportFilter, cmpData, limit, offset)
    return self.recv_getCheckerMsgCounts()

  def send_getCheckerMsgCounts(self, runIds, reportFilter, cmpData, limit, offset):
    self._oprot.writeMessageBegin('getCheckerMsgCounts', TMessageType.CALL, self._seqid)
    args = getCheckerMsgCounts_args()
    args.runIds = runIds
    args.reportFilter = reportFilter
    args.cmpData = cmpData
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCheckerMsgCounts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCheckerMsgCounts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCheckerMsgCounts failed: unknown result");

  def getReviewStatusCounts(self, runIds, reportFilter, cmpData):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
    """
    self.send_getReviewStatusCounts(runIds, reportFilter, cmpData)
    return self.recv_getReviewStatusCounts()

  def send_getReviewStatusCounts(self, runIds, reportFilter, cmpData):
    self._oprot.writeMessageBegin('getReviewStatusCounts', TMessageType.CALL, self._seqid)
    args = getReviewStatusCounts_args()
    args.runIds = runIds
    args.reportFilter = reportFilter
    args.cmpData = cmpData
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getReviewStatusCounts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getReviewStatusCounts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getReviewStatusCounts failed: unknown result");

  def getDetectionStatusCounts(self, runIds, reportFilter, cmpData):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
    """
    self.send_getDetectionStatusCounts(runIds, reportFilter, cmpData)
    return self.recv_getDetectionStatusCounts()

  def send_getDetectionStatusCounts(self, runIds, reportFilter, cmpData):
    self._oprot.writeMessageBegin('getDetectionStatusCounts', TMessageType.CALL, self._seqid)
    args = getDetectionStatusCounts_args()
    args.runIds = runIds
    args.reportFilter = reportFilter
    args.cmpData = cmpData
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getDetectionStatusCounts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getDetectionStatusCounts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getDetectionStatusCounts failed: unknown result");

  def getFileCounts(self, runIds, reportFilter, cmpData, limit, offset):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
     - limit
     - offset
    """
    self.send_getFileCounts(runIds, reportFilter, cmpData, limit, offset)
    return self.recv_getFileCounts()

  def send_getFileCounts(self, runIds, reportFilter, cmpData, limit, offset):
    self._oprot.writeMessageBegin('getFileCounts', TMessageType.CALL, self._seqid)
    args = getFileCounts_args()
    args.runIds = runIds
    args.reportFilter = reportFilter
    args.cmpData = cmpData
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getFileCounts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getFileCounts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getFileCounts failed: unknown result");

  def getCheckerCounts(self, runIds, reportFilter, cmpData, limit, offset):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
     - limit
     - offset
    """
    self.send_getCheckerCounts(runIds, reportFilter, cmpData, limit, offset)
    return self.recv_getCheckerCounts()

  def send_getCheckerCounts(self, runIds, reportFilter, cmpData, limit, offset):
    self._oprot.writeMessageBegin('getCheckerCounts', TMessageType.CALL, self._seqid)
    args = getCheckerCounts_args()
    args.runIds = runIds
    args.reportFilter = reportFilter
    args.cmpData = cmpData
    args.limit = limit
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getCheckerCounts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getCheckerCounts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getCheckerCounts failed: unknown result");

  def getRunHistoryTagCounts(self, runIds, reportFilter, cmpData):
    """
    Parameters:
     - runIds
     - reportFilter
     - cmpData
    """
    self.send_getRunHistoryTagCounts(runIds, reportFilter, cmpData)
    return self.recv_getRunHistoryTagCounts()

  def send_getRunHistoryTagCounts(self, runIds, reportFilter, cmpData):
    self._oprot.writeMessageBegin('getRunHistoryTagCounts', TMessageType.CALL, self._seqid)
    args = getRunHistoryTagCounts_args()
    args.runIds = runIds
    args.reportFilter = reportFilter
    args.cmpData = cmpData
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getRunHistoryTagCounts(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getRunHistoryTagCounts_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getRunHistoryTagCounts failed: unknown result");

  def addSourceComponent(self, name, value, description):
    """
    Parameters:
     - name
     - value
     - description
    """
    self.send_addSourceComponent(name, value, description)
    return self.recv_addSourceComponent()

  def send_addSourceComponent(self, name, value, description):
    self._oprot.writeMessageBegin('addSourceComponent', TMessageType.CALL, self._seqid)
    args = addSourceComponent_args()
    args.name = name
    args.value = value
    args.description = description
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addSourceComponent(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = addSourceComponent_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "addSourceComponent failed: unknown result");

  def getSourceComponents(self, sourceComponentFilter):
    """
    Parameters:
     - sourceComponentFilter
    """
    self.send_getSourceComponents(sourceComponentFilter)
    return self.recv_getSourceComponents()

  def send_getSourceComponents(self, sourceComponentFilter):
    self._oprot.writeMessageBegin('getSourceComponents', TMessageType.CALL, self._seqid)
    args = getSourceComponents_args()
    args.sourceComponentFilter = sourceComponentFilter
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSourceComponents(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getSourceComponents_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSourceComponents failed: unknown result");

  def removeSourceComponent(self, name):
    """
    Parameters:
     - name
    """
    self.send_removeSourceComponent(name)
    return self.recv_removeSourceComponent()

  def send_removeSourceComponent(self, name):
    self._oprot.writeMessageBegin('removeSourceComponent', TMessageType.CALL, self._seqid)
    args = removeSourceComponent_args()
    args.name = name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeSourceComponent(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = removeSourceComponent_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "removeSourceComponent failed: unknown result");

  def getMissingContentHashes(self, fileHashes):
    """
    Parameters:
     - fileHashes
    """
    self.send_getMissingContentHashes(fileHashes)
    return self.recv_getMissingContentHashes()

  def send_getMissingContentHashes(self, fileHashes):
    self._oprot.writeMessageBegin('getMissingContentHashes', TMessageType.CALL, self._seqid)
    args = getMissingContentHashes_args()
    args.fileHashes = fileHashes
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getMissingContentHashes(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getMissingContentHashes_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getMissingContentHashes failed: unknown result");

  def massStoreRun(self, runName, tag, version, zipfile, force, trimPathPrefixes):
    """
    Parameters:
     - runName
     - tag
     - version
     - zipfile
     - force
     - trimPathPrefixes
    """
    self.send_massStoreRun(runName, tag, version, zipfile, force, trimPathPrefixes)
    return self.recv_massStoreRun()

  def send_massStoreRun(self, runName, tag, version, zipfile, force, trimPathPrefixes):
    self._oprot.writeMessageBegin('massStoreRun', TMessageType.CALL, self._seqid)
    args = massStoreRun_args()
    args.runName = runName
    args.tag = tag
    args.version = version
    args.zipfile = zipfile
    args.force = force
    args.trimPathPrefixes = trimPathPrefixes
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_massStoreRun(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = massStoreRun_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "massStoreRun failed: unknown result");

  def allowsStoringAnalysisStatistics(self):
    self.send_allowsStoringAnalysisStatistics()
    return self.recv_allowsStoringAnalysisStatistics()

  def send_allowsStoringAnalysisStatistics(self):
    self._oprot.writeMessageBegin('allowsStoringAnalysisStatistics', TMessageType.CALL, self._seqid)
    args = allowsStoringAnalysisStatistics_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_allowsStoringAnalysisStatistics(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = allowsStoringAnalysisStatistics_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "allowsStoringAnalysisStatistics failed: unknown result");

  def getAnalysisStatisticsLimits(self):
    self.send_getAnalysisStatisticsLimits()
    return self.recv_getAnalysisStatisticsLimits()

  def send_getAnalysisStatisticsLimits(self):
    self._oprot.writeMessageBegin('getAnalysisStatisticsLimits', TMessageType.CALL, self._seqid)
    args = getAnalysisStatisticsLimits_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAnalysisStatisticsLimits(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAnalysisStatisticsLimits_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAnalysisStatisticsLimits failed: unknown result");

  def storeAnalysisStatistics(self, runName, zipfile):
    """
    Parameters:
     - runName
     - zipfile
    """
    self.send_storeAnalysisStatistics(runName, zipfile)
    return self.recv_storeAnalysisStatistics()

  def send_storeAnalysisStatistics(self, runName, zipfile):
    self._oprot.writeMessageBegin('storeAnalysisStatistics', TMessageType.CALL, self._seqid)
    args = storeAnalysisStatistics_args()
    args.runName = runName
    args.zipfile = zipfile
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_storeAnalysisStatistics(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = storeAnalysisStatistics_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "storeAnalysisStatistics failed: unknown result");

  def getAnalysisStatistics(self, runId, runHistoryId):
    """
    Parameters:
     - runId
     - runHistoryId
    """
    self.send_getAnalysisStatistics(runId, runHistoryId)
    return self.recv_getAnalysisStatistics()

  def send_getAnalysisStatistics(self, runId, runHistoryId):
    self._oprot.writeMessageBegin('getAnalysisStatistics', TMessageType.CALL, self._seqid)
    args = getAnalysisStatistics_args()
    args.runId = runId
    args.runHistoryId = runHistoryId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAnalysisStatistics(self):
    iprot = self._iprot
    (fname, mtype, rseqid) = iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(iprot)
      iprot.readMessageEnd()
      raise x
    result = getAnalysisStatistics_result()
    result.read(iprot)
    iprot.readMessageEnd()
    if result.success is not None:
      return result.success
    if result.requestError is not None:
      raise result.requestError
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAnalysisStatistics failed: unknown result");


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getRunData"] = Processor.process_getRunData
    self._processMap["getRunCount"] = Processor.process_getRunCount
    self._processMap["getCheckCommand"] = Processor.process_getCheckCommand
    self._processMap["getRunHistory"] = Processor.process_getRunHistory
    self._processMap["getRunHistoryCount"] = Processor.process_getRunHistoryCount
    self._processMap["getDiffResultsHash"] = Processor.process_getDiffResultsHash
    self._processMap["getReport"] = Processor.process_getReport
    self._processMap["getRunResults"] = Processor.process_getRunResults
    self._processMap["getRunReportCounts"] = Processor.process_getRunReportCounts
    self._processMap["getRunResultCount"] = Processor.process_getRunResultCount
    self._processMap["getReportDetails"] = Processor.process_getReportDetails
    self._processMap["getSourceFileData"] = Processor.process_getSourceFileData
    self._processMap["getLinesInSourceFileContents"] = Processor.process_getLinesInSourceFileContents
    self._processMap["isReviewStatusChangeDisabled"] = Processor.process_isReviewStatusChangeDisabled
    self._processMap["changeReviewStatus"] = Processor.process_changeReviewStatus
    self._processMap["getComments"] = Processor.process_getComments
    self._processMap["getCommentCount"] = Processor.process_getCommentCount
    self._processMap["addComment"] = Processor.process_addComment
    self._processMap["updateComment"] = Processor.process_updateComment
    self._processMap["removeComment"] = Processor.process_removeComment
    self._processMap["getCheckerDoc"] = Processor.process_getCheckerDoc
    self._processMap["getPackageVersion"] = Processor.process_getPackageVersion
    self._processMap["removeRunResults"] = Processor.process_removeRunResults
    self._processMap["removeRunReports"] = Processor.process_removeRunReports
    self._processMap["removeRun"] = Processor.process_removeRun
    self._processMap["updateRunData"] = Processor.process_updateRunData
    self._processMap["getSuppressFile"] = Processor.process_getSuppressFile
    self._processMap["getSeverityCounts"] = Processor.process_getSeverityCounts
    self._processMap["getCheckerMsgCounts"] = Processor.process_getCheckerMsgCounts
    self._processMap["getReviewStatusCounts"] = Processor.process_getReviewStatusCounts
    self._processMap["getDetectionStatusCounts"] = Processor.process_getDetectionStatusCounts
    self._processMap["getFileCounts"] = Processor.process_getFileCounts
    self._processMap["getCheckerCounts"] = Processor.process_getCheckerCounts
    self._processMap["getRunHistoryTagCounts"] = Processor.process_getRunHistoryTagCounts
    self._processMap["addSourceComponent"] = Processor.process_addSourceComponent
    self._processMap["getSourceComponents"] = Processor.process_getSourceComponents
    self._processMap["removeSourceComponent"] = Processor.process_removeSourceComponent
    self._processMap["getMissingContentHashes"] = Processor.process_getMissingContentHashes
    self._processMap["massStoreRun"] = Processor.process_massStoreRun
    self._processMap["allowsStoringAnalysisStatistics"] = Processor.process_allowsStoringAnalysisStatistics
    self._processMap["getAnalysisStatisticsLimits"] = Processor.process_getAnalysisStatisticsLimits
    self._processMap["storeAnalysisStatistics"] = Processor.process_storeAnalysisStatistics
    self._processMap["getAnalysisStatistics"] = Processor.process_getAnalysisStatistics

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getRunData(self, seqid, iprot, oprot):
    args = getRunData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRunData_result()
    try:
      result.success = self._handler.getRunData(args.runFilter, args.limit, args.offset, args.sortMode)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getRunData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getRunCount(self, seqid, iprot, oprot):
    args = getRunCount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRunCount_result()
    try:
      result.success = self._handler.getRunCount(args.runFilter)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getRunCount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCheckCommand(self, seqid, iprot, oprot):
    args = getCheckCommand_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCheckCommand_result()
    try:
      result.success = self._handler.getCheckCommand(args.runHistoryId, args.runId)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getCheckCommand", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getRunHistory(self, seqid, iprot, oprot):
    args = getRunHistory_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRunHistory_result()
    try:
      result.success = self._handler.getRunHistory(args.runIds, args.limit, args.offset, args.runHistoryFilter)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getRunHistory", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getRunHistoryCount(self, seqid, iprot, oprot):
    args = getRunHistoryCount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRunHistoryCount_result()
    try:
      result.success = self._handler.getRunHistoryCount(args.runIds, args.runHistoryFilter)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getRunHistoryCount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDiffResultsHash(self, seqid, iprot, oprot):
    args = getDiffResultsHash_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDiffResultsHash_result()
    try:
      result.success = self._handler.getDiffResultsHash(args.runIds, args.reportHashes, args.diffType, args.skipDetectionStatuses)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getDiffResultsHash", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getReport(self, seqid, iprot, oprot):
    args = getReport_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getReport_result()
    try:
      result.success = self._handler.getReport(args.reportId)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getReport", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getRunResults(self, seqid, iprot, oprot):
    args = getRunResults_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRunResults_result()
    try:
      result.success = self._handler.getRunResults(args.runIds, args.limit, args.offset, args.sortType, args.reportFilter, args.cmpData, args.getDetails)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getRunResults", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getRunReportCounts(self, seqid, iprot, oprot):
    args = getRunReportCounts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRunReportCounts_result()
    try:
      result.success = self._handler.getRunReportCounts(args.runIds, args.reportFilter, args.limit, args.offset)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getRunReportCounts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getRunResultCount(self, seqid, iprot, oprot):
    args = getRunResultCount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRunResultCount_result()
    try:
      result.success = self._handler.getRunResultCount(args.runIds, args.reportFilter, args.cmpData)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getRunResultCount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getReportDetails(self, seqid, iprot, oprot):
    args = getReportDetails_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getReportDetails_result()
    try:
      result.success = self._handler.getReportDetails(args.reportId)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getReportDetails", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSourceFileData(self, seqid, iprot, oprot):
    args = getSourceFileData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSourceFileData_result()
    try:
      result.success = self._handler.getSourceFileData(args.fileId, args.fileContent, args.encoding)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getSourceFileData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getLinesInSourceFileContents(self, seqid, iprot, oprot):
    args = getLinesInSourceFileContents_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getLinesInSourceFileContents_result()
    try:
      result.success = self._handler.getLinesInSourceFileContents(args.linesInFilesRequested, args.encoding)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getLinesInSourceFileContents", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_isReviewStatusChangeDisabled(self, seqid, iprot, oprot):
    args = isReviewStatusChangeDisabled_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = isReviewStatusChangeDisabled_result()
    try:
      result.success = self._handler.isReviewStatusChangeDisabled()
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("isReviewStatusChangeDisabled", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changeReviewStatus(self, seqid, iprot, oprot):
    args = changeReviewStatus_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changeReviewStatus_result()
    try:
      result.success = self._handler.changeReviewStatus(args.reportId, args.status, args.message)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("changeReviewStatus", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getComments(self, seqid, iprot, oprot):
    args = getComments_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getComments_result()
    try:
      result.success = self._handler.getComments(args.reportId)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getComments", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCommentCount(self, seqid, iprot, oprot):
    args = getCommentCount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCommentCount_result()
    try:
      result.success = self._handler.getCommentCount(args.reportId)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getCommentCount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addComment(self, seqid, iprot, oprot):
    args = addComment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addComment_result()
    try:
      result.success = self._handler.addComment(args.reportId, args.comment)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("addComment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateComment(self, seqid, iprot, oprot):
    args = updateComment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateComment_result()
    try:
      result.success = self._handler.updateComment(args.commentId, args.newMessage)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("updateComment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeComment(self, seqid, iprot, oprot):
    args = removeComment_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeComment_result()
    try:
      result.success = self._handler.removeComment(args.commentId)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("removeComment", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCheckerDoc(self, seqid, iprot, oprot):
    args = getCheckerDoc_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCheckerDoc_result()
    try:
      result.success = self._handler.getCheckerDoc(args.checkerId)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getCheckerDoc", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getPackageVersion(self, seqid, iprot, oprot):
    args = getPackageVersion_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getPackageVersion_result()
    result.success = self._handler.getPackageVersion()
    oprot.writeMessageBegin("getPackageVersion", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeRunResults(self, seqid, iprot, oprot):
    args = removeRunResults_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeRunResults_result()
    result.success = self._handler.removeRunResults(args.runIds)
    oprot.writeMessageBegin("removeRunResults", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeRunReports(self, seqid, iprot, oprot):
    args = removeRunReports_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeRunReports_result()
    try:
      result.success = self._handler.removeRunReports(args.runIds, args.reportFilter, args.cmpData)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("removeRunReports", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeRun(self, seqid, iprot, oprot):
    args = removeRun_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeRun_result()
    try:
      result.success = self._handler.removeRun(args.runId, args.runFilter)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("removeRun", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateRunData(self, seqid, iprot, oprot):
    args = updateRunData_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateRunData_result()
    try:
      result.success = self._handler.updateRunData(args.runId, args.newRunName)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("updateRunData", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSuppressFile(self, seqid, iprot, oprot):
    args = getSuppressFile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSuppressFile_result()
    try:
      result.success = self._handler.getSuppressFile()
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getSuppressFile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSeverityCounts(self, seqid, iprot, oprot):
    args = getSeverityCounts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSeverityCounts_result()
    try:
      result.success = self._handler.getSeverityCounts(args.runIds, args.reportFilter, args.cmpData)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getSeverityCounts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCheckerMsgCounts(self, seqid, iprot, oprot):
    args = getCheckerMsgCounts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCheckerMsgCounts_result()
    try:
      result.success = self._handler.getCheckerMsgCounts(args.runIds, args.reportFilter, args.cmpData, args.limit, args.offset)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getCheckerMsgCounts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getReviewStatusCounts(self, seqid, iprot, oprot):
    args = getReviewStatusCounts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getReviewStatusCounts_result()
    try:
      result.success = self._handler.getReviewStatusCounts(args.runIds, args.reportFilter, args.cmpData)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getReviewStatusCounts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getDetectionStatusCounts(self, seqid, iprot, oprot):
    args = getDetectionStatusCounts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getDetectionStatusCounts_result()
    try:
      result.success = self._handler.getDetectionStatusCounts(args.runIds, args.reportFilter, args.cmpData)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getDetectionStatusCounts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getFileCounts(self, seqid, iprot, oprot):
    args = getFileCounts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getFileCounts_result()
    try:
      result.success = self._handler.getFileCounts(args.runIds, args.reportFilter, args.cmpData, args.limit, args.offset)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getFileCounts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getCheckerCounts(self, seqid, iprot, oprot):
    args = getCheckerCounts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getCheckerCounts_result()
    try:
      result.success = self._handler.getCheckerCounts(args.runIds, args.reportFilter, args.cmpData, args.limit, args.offset)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getCheckerCounts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getRunHistoryTagCounts(self, seqid, iprot, oprot):
    args = getRunHistoryTagCounts_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getRunHistoryTagCounts_result()
    try:
      result.success = self._handler.getRunHistoryTagCounts(args.runIds, args.reportFilter, args.cmpData)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getRunHistoryTagCounts", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addSourceComponent(self, seqid, iprot, oprot):
    args = addSourceComponent_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addSourceComponent_result()
    try:
      result.success = self._handler.addSourceComponent(args.name, args.value, args.description)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("addSourceComponent", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSourceComponents(self, seqid, iprot, oprot):
    args = getSourceComponents_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSourceComponents_result()
    try:
      result.success = self._handler.getSourceComponents(args.sourceComponentFilter)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getSourceComponents", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeSourceComponent(self, seqid, iprot, oprot):
    args = removeSourceComponent_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeSourceComponent_result()
    try:
      result.success = self._handler.removeSourceComponent(args.name)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("removeSourceComponent", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getMissingContentHashes(self, seqid, iprot, oprot):
    args = getMissingContentHashes_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getMissingContentHashes_result()
    try:
      result.success = self._handler.getMissingContentHashes(args.fileHashes)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getMissingContentHashes", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_massStoreRun(self, seqid, iprot, oprot):
    args = massStoreRun_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = massStoreRun_result()
    try:
      result.success = self._handler.massStoreRun(args.runName, args.tag, args.version, args.zipfile, args.force, args.trimPathPrefixes)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("massStoreRun", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_allowsStoringAnalysisStatistics(self, seqid, iprot, oprot):
    args = allowsStoringAnalysisStatistics_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = allowsStoringAnalysisStatistics_result()
    try:
      result.success = self._handler.allowsStoringAnalysisStatistics()
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("allowsStoringAnalysisStatistics", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAnalysisStatisticsLimits(self, seqid, iprot, oprot):
    args = getAnalysisStatisticsLimits_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAnalysisStatisticsLimits_result()
    try:
      result.success = self._handler.getAnalysisStatisticsLimits()
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getAnalysisStatisticsLimits", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_storeAnalysisStatistics(self, seqid, iprot, oprot):
    args = storeAnalysisStatistics_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = storeAnalysisStatistics_result()
    try:
      result.success = self._handler.storeAnalysisStatistics(args.runName, args.zipfile)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("storeAnalysisStatistics", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAnalysisStatistics(self, seqid, iprot, oprot):
    args = getAnalysisStatistics_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAnalysisStatistics_result()
    try:
      result.success = self._handler.getAnalysisStatistics(args.runId, args.runHistoryId)
    except codechecker_api_shared.ttypes.RequestFailed, requestError:
      result.requestError = requestError
    oprot.writeMessageBegin("getAnalysisStatistics", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getRunData_args:
  """
  Attributes:
   - runFilter
   - limit
   - offset
   - sortMode
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'runFilter', (RunFilter, RunFilter.thrift_spec), None, ), # 1
    (2, TType.I64, 'limit', None, None, ), # 2
    (3, TType.I64, 'offset', None, None, ), # 3
    (4, TType.STRUCT, 'sortMode', (RunSortMode, RunSortMode.thrift_spec), None, ), # 4
  )

  def __init__(self, runFilter=None, limit=None, offset=None, sortMode=None,):
    self.runFilter = runFilter
    self.limit = limit
    self.offset = offset
    self.sortMode = sortMode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.runFilter = RunFilter()
          self.runFilter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.limit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.sortMode = RunSortMode()
          self.sortMode.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunData_args')
    if self.runFilter is not None:
      oprot.writeFieldBegin('runFilter', TType.STRUCT, 1)
      self.runFilter.write(oprot)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I64, 2)
      oprot.writeI64(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 3)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    if self.sortMode is not None:
      oprot.writeFieldBegin('sortMode', TType.STRUCT, 4)
      self.sortMode.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runFilter)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    value = (value * 31) ^ hash(self.sortMode)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunData_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(RunData, RunData.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype177, _size174) = iprot.readListBegin()
          for _i178 in xrange(_size174):
            _elem179 = RunData()
            _elem179.read(iprot)
            self.success.append(_elem179)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter180 in self.success:
        iter180.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunCount_args:
  """
  Attributes:
   - runFilter
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'runFilter', (RunFilter, RunFilter.thrift_spec), None, ), # 1
  )

  def __init__(self, runFilter=None,):
    self.runFilter = runFilter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.runFilter = RunFilter()
          self.runFilter.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunCount_args')
    if self.runFilter is not None:
      oprot.writeFieldBegin('runFilter', TType.STRUCT, 1)
      self.runFilter.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runFilter)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunCount_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunCount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCheckCommand_args:
  """
  Attributes:
   - runHistoryId
   - runId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'runHistoryId', None, None, ), # 1
    (2, TType.I64, 'runId', None, None, ), # 2
  )

  def __init__(self, runHistoryId=None, runId=None,):
    self.runHistoryId = runHistoryId
    self.runId = runId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.runHistoryId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.runId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCheckCommand_args')
    if self.runHistoryId is not None:
      oprot.writeFieldBegin('runHistoryId', TType.I64, 1)
      oprot.writeI64(self.runHistoryId)
      oprot.writeFieldEnd()
    if self.runId is not None:
      oprot.writeFieldBegin('runId', TType.I64, 2)
      oprot.writeI64(self.runId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runHistoryId)
    value = (value * 31) ^ hash(self.runId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCheckCommand_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCheckCommand_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunHistory_args:
  """
  Attributes:
   - runIds
   - limit
   - offset
   - runHistoryFilter
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.I64, 'limit', None, None, ), # 2
    (3, TType.I64, 'offset', None, None, ), # 3
    (4, TType.STRUCT, 'runHistoryFilter', (RunHistoryFilter, RunHistoryFilter.thrift_spec), None, ), # 4
  )

  def __init__(self, runIds=None, limit=None, offset=None, runHistoryFilter=None,):
    self.runIds = runIds
    self.limit = limit
    self.offset = offset
    self.runHistoryFilter = runHistoryFilter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype184, _size181) = iprot.readListBegin()
          for _i185 in xrange(_size181):
            _elem186 = iprot.readI64();
            self.runIds.append(_elem186)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.limit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.runHistoryFilter = RunHistoryFilter()
          self.runHistoryFilter.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunHistory_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter187 in self.runIds:
        oprot.writeI64(iter187)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I64, 2)
      oprot.writeI64(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 3)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    if self.runHistoryFilter is not None:
      oprot.writeFieldBegin('runHistoryFilter', TType.STRUCT, 4)
      self.runHistoryFilter.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    value = (value * 31) ^ hash(self.runHistoryFilter)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunHistory_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(RunHistoryData, RunHistoryData.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype191, _size188) = iprot.readListBegin()
          for _i192 in xrange(_size188):
            _elem193 = RunHistoryData()
            _elem193.read(iprot)
            self.success.append(_elem193)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunHistory_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter194 in self.success:
        iter194.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunHistoryCount_args:
  """
  Attributes:
   - runIds
   - runHistoryFilter
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'runHistoryFilter', (RunHistoryFilter, RunHistoryFilter.thrift_spec), None, ), # 2
  )

  def __init__(self, runIds=None, runHistoryFilter=None,):
    self.runIds = runIds
    self.runHistoryFilter = runHistoryFilter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype198, _size195) = iprot.readListBegin()
          for _i199 in xrange(_size195):
            _elem200 = iprot.readI64();
            self.runIds.append(_elem200)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.runHistoryFilter = RunHistoryFilter()
          self.runHistoryFilter.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunHistoryCount_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter201 in self.runIds:
        oprot.writeI64(iter201)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.runHistoryFilter is not None:
      oprot.writeFieldBegin('runHistoryFilter', TType.STRUCT, 2)
      self.runHistoryFilter.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.runHistoryFilter)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunHistoryCount_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunHistoryCount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDiffResultsHash_args:
  """
  Attributes:
   - runIds
   - reportHashes
   - diffType
   - skipDetectionStatuses
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.LIST, 'reportHashes', (TType.STRING,None), None, ), # 2
    (3, TType.I32, 'diffType', None, None, ), # 3
    (4, TType.LIST, 'skipDetectionStatuses', (TType.I32,None), None, ), # 4
  )

  def __init__(self, runIds=None, reportHashes=None, diffType=None, skipDetectionStatuses=None,):
    self.runIds = runIds
    self.reportHashes = reportHashes
    self.diffType = diffType
    self.skipDetectionStatuses = skipDetectionStatuses

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype205, _size202) = iprot.readListBegin()
          for _i206 in xrange(_size202):
            _elem207 = iprot.readI64();
            self.runIds.append(_elem207)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.reportHashes = []
          (_etype211, _size208) = iprot.readListBegin()
          for _i212 in xrange(_size208):
            _elem213 = iprot.readString();
            self.reportHashes.append(_elem213)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.diffType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.skipDetectionStatuses = []
          (_etype217, _size214) = iprot.readListBegin()
          for _i218 in xrange(_size214):
            _elem219 = iprot.readI32();
            self.skipDetectionStatuses.append(_elem219)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDiffResultsHash_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter220 in self.runIds:
        oprot.writeI64(iter220)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reportHashes is not None:
      oprot.writeFieldBegin('reportHashes', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.reportHashes))
      for iter221 in self.reportHashes:
        oprot.writeString(iter221)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.diffType is not None:
      oprot.writeFieldBegin('diffType', TType.I32, 3)
      oprot.writeI32(self.diffType)
      oprot.writeFieldEnd()
    if self.skipDetectionStatuses is not None:
      oprot.writeFieldBegin('skipDetectionStatuses', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.skipDetectionStatuses))
      for iter222 in self.skipDetectionStatuses:
        oprot.writeI32(iter222)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.reportHashes)
    value = (value * 31) ^ hash(self.diffType)
    value = (value * 31) ^ hash(self.skipDetectionStatuses)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDiffResultsHash_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype226, _size223) = iprot.readListBegin()
          for _i227 in xrange(_size223):
            _elem228 = iprot.readString();
            self.success.append(_elem228)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDiffResultsHash_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter229 in self.success:
        oprot.writeString(iter229)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getReport_args:
  """
  Attributes:
   - reportId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'reportId', None, None, ), # 1
  )

  def __init__(self, reportId=None,):
    self.reportId = reportId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.reportId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getReport_args')
    if self.reportId is not None:
      oprot.writeFieldBegin('reportId', TType.I64, 1)
      oprot.writeI64(self.reportId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.reportId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getReport_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ReportData, ReportData.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ReportData()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getReport_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunResults_args:
  """
  Attributes:
   - runIds
   - limit
   - offset
   - sortType
   - reportFilter
   - cmpData
   - getDetails
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.I64, 'limit', None, None, ), # 2
    (3, TType.I64, 'offset', None, None, ), # 3
    (4, TType.LIST, 'sortType', (TType.STRUCT,(SortMode, SortMode.thrift_spec)), None, ), # 4
    (5, TType.STRUCT, 'reportFilter', (ReportFilter, ReportFilter.thrift_spec), None, ), # 5
    (6, TType.STRUCT, 'cmpData', (CompareData, CompareData.thrift_spec), None, ), # 6
    (7, TType.BOOL, 'getDetails', None, None, ), # 7
  )

  def __init__(self, runIds=None, limit=None, offset=None, sortType=None, reportFilter=None, cmpData=None, getDetails=None,):
    self.runIds = runIds
    self.limit = limit
    self.offset = offset
    self.sortType = sortType
    self.reportFilter = reportFilter
    self.cmpData = cmpData
    self.getDetails = getDetails

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype233, _size230) = iprot.readListBegin()
          for _i234 in xrange(_size230):
            _elem235 = iprot.readI64();
            self.runIds.append(_elem235)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.limit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.sortType = []
          (_etype239, _size236) = iprot.readListBegin()
          for _i240 in xrange(_size236):
            _elem241 = SortMode()
            _elem241.read(iprot)
            self.sortType.append(_elem241)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.reportFilter = ReportFilter()
          self.reportFilter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRUCT:
          self.cmpData = CompareData()
          self.cmpData.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.getDetails = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunResults_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter242 in self.runIds:
        oprot.writeI64(iter242)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I64, 2)
      oprot.writeI64(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 3)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    if self.sortType is not None:
      oprot.writeFieldBegin('sortType', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.sortType))
      for iter243 in self.sortType:
        iter243.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reportFilter is not None:
      oprot.writeFieldBegin('reportFilter', TType.STRUCT, 5)
      self.reportFilter.write(oprot)
      oprot.writeFieldEnd()
    if self.cmpData is not None:
      oprot.writeFieldBegin('cmpData', TType.STRUCT, 6)
      self.cmpData.write(oprot)
      oprot.writeFieldEnd()
    if self.getDetails is not None:
      oprot.writeFieldBegin('getDetails', TType.BOOL, 7)
      oprot.writeBool(self.getDetails)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    value = (value * 31) ^ hash(self.sortType)
    value = (value * 31) ^ hash(self.reportFilter)
    value = (value * 31) ^ hash(self.cmpData)
    value = (value * 31) ^ hash(self.getDetails)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunResults_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(ReportData, ReportData.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype247, _size244) = iprot.readListBegin()
          for _i248 in xrange(_size244):
            _elem249 = ReportData()
            _elem249.read(iprot)
            self.success.append(_elem249)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunResults_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter250 in self.success:
        iter250.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunReportCounts_args:
  """
  Attributes:
   - runIds
   - reportFilter
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'reportFilter', (ReportFilter, ReportFilter.thrift_spec), None, ), # 2
    (3, TType.I64, 'limit', None, None, ), # 3
    (4, TType.I64, 'offset', None, None, ), # 4
  )

  def __init__(self, runIds=None, reportFilter=None, limit=None, offset=None,):
    self.runIds = runIds
    self.reportFilter = reportFilter
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype254, _size251) = iprot.readListBegin()
          for _i255 in xrange(_size251):
            _elem256 = iprot.readI64();
            self.runIds.append(_elem256)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reportFilter = ReportFilter()
          self.reportFilter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.limit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunReportCounts_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter257 in self.runIds:
        oprot.writeI64(iter257)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reportFilter is not None:
      oprot.writeFieldBegin('reportFilter', TType.STRUCT, 2)
      self.reportFilter.write(oprot)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I64, 3)
      oprot.writeI64(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 4)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.reportFilter)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunReportCounts_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(RunReportCount, RunReportCount.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype261, _size258) = iprot.readListBegin()
          for _i262 in xrange(_size258):
            _elem263 = RunReportCount()
            _elem263.read(iprot)
            self.success.append(_elem263)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunReportCounts_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter264 in self.success:
        iter264.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunResultCount_args:
  """
  Attributes:
   - runIds
   - reportFilter
   - cmpData
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'reportFilter', (ReportFilter, ReportFilter.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'cmpData', (CompareData, CompareData.thrift_spec), None, ), # 3
  )

  def __init__(self, runIds=None, reportFilter=None, cmpData=None,):
    self.runIds = runIds
    self.reportFilter = reportFilter
    self.cmpData = cmpData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype268, _size265) = iprot.readListBegin()
          for _i269 in xrange(_size265):
            _elem270 = iprot.readI64();
            self.runIds.append(_elem270)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reportFilter = ReportFilter()
          self.reportFilter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cmpData = CompareData()
          self.cmpData.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunResultCount_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter271 in self.runIds:
        oprot.writeI64(iter271)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reportFilter is not None:
      oprot.writeFieldBegin('reportFilter', TType.STRUCT, 2)
      self.reportFilter.write(oprot)
      oprot.writeFieldEnd()
    if self.cmpData is not None:
      oprot.writeFieldBegin('cmpData', TType.STRUCT, 3)
      self.cmpData.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.reportFilter)
    value = (value * 31) ^ hash(self.cmpData)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunResultCount_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunResultCount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getReportDetails_args:
  """
  Attributes:
   - reportId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'reportId', None, None, ), # 1
  )

  def __init__(self, reportId=None,):
    self.reportId = reportId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.reportId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getReportDetails_args')
    if self.reportId is not None:
      oprot.writeFieldBegin('reportId', TType.I64, 1)
      oprot.writeI64(self.reportId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.reportId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getReportDetails_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (ReportDetails, ReportDetails.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = ReportDetails()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getReportDetails_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSourceFileData_args:
  """
  Attributes:
   - fileId
   - fileContent
   - encoding
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'fileId', None, None, ), # 1
    (2, TType.BOOL, 'fileContent', None, None, ), # 2
    (3, TType.I32, 'encoding', None, None, ), # 3
  )

  def __init__(self, fileId=None, fileContent=None, encoding=None,):
    self.fileId = fileId
    self.fileContent = fileContent
    self.encoding = encoding

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.fileId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.BOOL:
          self.fileContent = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.encoding = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSourceFileData_args')
    if self.fileId is not None:
      oprot.writeFieldBegin('fileId', TType.I64, 1)
      oprot.writeI64(self.fileId)
      oprot.writeFieldEnd()
    if self.fileContent is not None:
      oprot.writeFieldBegin('fileContent', TType.BOOL, 2)
      oprot.writeBool(self.fileContent)
      oprot.writeFieldEnd()
    if self.encoding is not None:
      oprot.writeFieldBegin('encoding', TType.I32, 3)
      oprot.writeI32(self.encoding)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fileId)
    value = (value * 31) ^ hash(self.fileContent)
    value = (value * 31) ^ hash(self.encoding)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSourceFileData_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (SourceFileData, SourceFileData.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = SourceFileData()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSourceFileData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getLinesInSourceFileContents_args:
  """
  Attributes:
   - linesInFilesRequested
   - encoding
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'linesInFilesRequested', (TType.STRUCT,(LinesInFilesRequested, LinesInFilesRequested.thrift_spec)), None, ), # 1
    (2, TType.I32, 'encoding', None, None, ), # 2
  )

  def __init__(self, linesInFilesRequested=None, encoding=None,):
    self.linesInFilesRequested = linesInFilesRequested
    self.encoding = encoding

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.linesInFilesRequested = []
          (_etype275, _size272) = iprot.readListBegin()
          for _i276 in xrange(_size272):
            _elem277 = LinesInFilesRequested()
            _elem277.read(iprot)
            self.linesInFilesRequested.append(_elem277)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.encoding = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getLinesInSourceFileContents_args')
    if self.linesInFilesRequested is not None:
      oprot.writeFieldBegin('linesInFilesRequested', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.linesInFilesRequested))
      for iter278 in self.linesInFilesRequested:
        iter278.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.encoding is not None:
      oprot.writeFieldBegin('encoding', TType.I32, 2)
      oprot.writeI32(self.encoding)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.linesInFilesRequested)
    value = (value * 31) ^ hash(self.encoding)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getLinesInSourceFileContents_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I64,None,TType.MAP,(TType.I64,None,TType.STRING,None)), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype280, _vtype281, _size279 ) = iprot.readMapBegin()
          for _i283 in xrange(_size279):
            _key284 = iprot.readI64();
            _val285 = {}
            (_ktype287, _vtype288, _size286 ) = iprot.readMapBegin()
            for _i290 in xrange(_size286):
              _key291 = iprot.readI64();
              _val292 = iprot.readString();
              _val285[_key291] = _val292
            iprot.readMapEnd()
            self.success[_key284] = _val285
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getLinesInSourceFileContents_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I64, TType.MAP, len(self.success))
      for kiter293,viter294 in self.success.items():
        oprot.writeI64(kiter293)
        oprot.writeMapBegin(TType.I64, TType.STRING, len(viter294))
        for kiter295,viter296 in viter294.items():
          oprot.writeI64(kiter295)
          oprot.writeString(viter296)
        oprot.writeMapEnd()
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class isReviewStatusChangeDisabled_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isReviewStatusChangeDisabled_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class isReviewStatusChangeDisabled_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isReviewStatusChangeDisabled_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeReviewStatus_args:
  """
  Attributes:
   - reportId
   - status
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'reportId', None, None, ), # 1
    (2, TType.I32, 'status', None, None, ), # 2
    (3, TType.STRING, 'message', None, None, ), # 3
  )

  def __init__(self, reportId=None, status=None, message=None,):
    self.reportId = reportId
    self.status = status
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.reportId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.message = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeReviewStatus_args')
    if self.reportId is not None:
      oprot.writeFieldBegin('reportId', TType.I64, 1)
      oprot.writeI64(self.reportId)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 2)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 3)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.reportId)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeReviewStatus_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeReviewStatus_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getComments_args:
  """
  Attributes:
   - reportId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'reportId', None, None, ), # 1
  )

  def __init__(self, reportId=None,):
    self.reportId = reportId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.reportId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getComments_args')
    if self.reportId is not None:
      oprot.writeFieldBegin('reportId', TType.I64, 1)
      oprot.writeI64(self.reportId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.reportId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getComments_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(CommentData, CommentData.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype300, _size297) = iprot.readListBegin()
          for _i301 in xrange(_size297):
            _elem302 = CommentData()
            _elem302.read(iprot)
            self.success.append(_elem302)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getComments_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter303 in self.success:
        iter303.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCommentCount_args:
  """
  Attributes:
   - reportId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'reportId', None, None, ), # 1
  )

  def __init__(self, reportId=None,):
    self.reportId = reportId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.reportId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCommentCount_args')
    if self.reportId is not None:
      oprot.writeFieldBegin('reportId', TType.I64, 1)
      oprot.writeI64(self.reportId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.reportId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCommentCount_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCommentCount_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addComment_args:
  """
  Attributes:
   - reportId
   - comment
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'reportId', None, None, ), # 1
    (2, TType.STRUCT, 'comment', (CommentData, CommentData.thrift_spec), None, ), # 2
  )

  def __init__(self, reportId=None, comment=None,):
    self.reportId = reportId
    self.comment = comment

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.reportId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.comment = CommentData()
          self.comment.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addComment_args')
    if self.reportId is not None:
      oprot.writeFieldBegin('reportId', TType.I64, 1)
      oprot.writeI64(self.reportId)
      oprot.writeFieldEnd()
    if self.comment is not None:
      oprot.writeFieldBegin('comment', TType.STRUCT, 2)
      self.comment.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.reportId)
    value = (value * 31) ^ hash(self.comment)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addComment_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addComment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateComment_args:
  """
  Attributes:
   - commentId
   - newMessage
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'commentId', None, None, ), # 1
    (2, TType.STRING, 'newMessage', None, None, ), # 2
  )

  def __init__(self, commentId=None, newMessage=None,):
    self.commentId = commentId
    self.newMessage = newMessage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.commentId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.newMessage = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateComment_args')
    if self.commentId is not None:
      oprot.writeFieldBegin('commentId', TType.I64, 1)
      oprot.writeI64(self.commentId)
      oprot.writeFieldEnd()
    if self.newMessage is not None:
      oprot.writeFieldBegin('newMessage', TType.STRING, 2)
      oprot.writeString(self.newMessage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.commentId)
    value = (value * 31) ^ hash(self.newMessage)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateComment_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateComment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeComment_args:
  """
  Attributes:
   - commentId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'commentId', None, None, ), # 1
  )

  def __init__(self, commentId=None,):
    self.commentId = commentId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.commentId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeComment_args')
    if self.commentId is not None:
      oprot.writeFieldBegin('commentId', TType.I64, 1)
      oprot.writeI64(self.commentId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.commentId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeComment_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeComment_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCheckerDoc_args:
  """
  Attributes:
   - checkerId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'checkerId', None, None, ), # 1
  )

  def __init__(self, checkerId=None,):
    self.checkerId = checkerId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.checkerId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCheckerDoc_args')
    if self.checkerId is not None:
      oprot.writeFieldBegin('checkerId', TType.STRING, 1)
      oprot.writeString(self.checkerId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.checkerId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCheckerDoc_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCheckerDoc_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPackageVersion_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPackageVersion_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getPackageVersion_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getPackageVersion_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeRunResults_args:
  """
  Attributes:
   - runIds
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
  )

  def __init__(self, runIds=None,):
    self.runIds = runIds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype307, _size304) = iprot.readListBegin()
          for _i308 in xrange(_size304):
            _elem309 = iprot.readI64();
            self.runIds.append(_elem309)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeRunResults_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter310 in self.runIds:
        oprot.writeI64(iter310)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeRunResults_result:
  """
  Attributes:
   - success
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
  )

  def __init__(self, success=None,):
    self.success = success

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeRunResults_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeRunReports_args:
  """
  Attributes:
   - runIds
   - reportFilter
   - cmpData
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'reportFilter', (ReportFilter, ReportFilter.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'cmpData', (CompareData, CompareData.thrift_spec), None, ), # 3
  )

  def __init__(self, runIds=None, reportFilter=None, cmpData=None,):
    self.runIds = runIds
    self.reportFilter = reportFilter
    self.cmpData = cmpData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype314, _size311) = iprot.readListBegin()
          for _i315 in xrange(_size311):
            _elem316 = iprot.readI64();
            self.runIds.append(_elem316)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reportFilter = ReportFilter()
          self.reportFilter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cmpData = CompareData()
          self.cmpData.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeRunReports_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter317 in self.runIds:
        oprot.writeI64(iter317)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reportFilter is not None:
      oprot.writeFieldBegin('reportFilter', TType.STRUCT, 2)
      self.reportFilter.write(oprot)
      oprot.writeFieldEnd()
    if self.cmpData is not None:
      oprot.writeFieldBegin('cmpData', TType.STRUCT, 3)
      self.cmpData.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.reportFilter)
    value = (value * 31) ^ hash(self.cmpData)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeRunReports_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeRunReports_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeRun_args:
  """
  Attributes:
   - runId
   - runFilter
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'runId', None, None, ), # 1
    (2, TType.STRUCT, 'runFilter', (RunFilter, RunFilter.thrift_spec), None, ), # 2
  )

  def __init__(self, runId=None, runFilter=None,):
    self.runId = runId
    self.runFilter = runFilter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.runId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.runFilter = RunFilter()
          self.runFilter.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeRun_args')
    if self.runId is not None:
      oprot.writeFieldBegin('runId', TType.I64, 1)
      oprot.writeI64(self.runId)
      oprot.writeFieldEnd()
    if self.runFilter is not None:
      oprot.writeFieldBegin('runFilter', TType.STRUCT, 2)
      self.runFilter.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runId)
    value = (value * 31) ^ hash(self.runFilter)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeRun_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeRun_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateRunData_args:
  """
  Attributes:
   - runId
   - newRunName
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'runId', None, None, ), # 1
    (2, TType.STRING, 'newRunName', None, None, ), # 2
  )

  def __init__(self, runId=None, newRunName=None,):
    self.runId = runId
    self.newRunName = newRunName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.runId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.newRunName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateRunData_args')
    if self.runId is not None:
      oprot.writeFieldBegin('runId', TType.I64, 1)
      oprot.writeI64(self.runId)
      oprot.writeFieldEnd()
    if self.newRunName is not None:
      oprot.writeFieldBegin('newRunName', TType.STRING, 2)
      oprot.writeString(self.newRunName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runId)
    value = (value * 31) ^ hash(self.newRunName)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateRunData_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateRunData_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSuppressFile_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSuppressFile_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSuppressFile_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSuppressFile_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSeverityCounts_args:
  """
  Attributes:
   - runIds
   - reportFilter
   - cmpData
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'reportFilter', (ReportFilter, ReportFilter.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'cmpData', (CompareData, CompareData.thrift_spec), None, ), # 3
  )

  def __init__(self, runIds=None, reportFilter=None, cmpData=None,):
    self.runIds = runIds
    self.reportFilter = reportFilter
    self.cmpData = cmpData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype321, _size318) = iprot.readListBegin()
          for _i322 in xrange(_size318):
            _elem323 = iprot.readI64();
            self.runIds.append(_elem323)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reportFilter = ReportFilter()
          self.reportFilter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cmpData = CompareData()
          self.cmpData.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSeverityCounts_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter324 in self.runIds:
        oprot.writeI64(iter324)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reportFilter is not None:
      oprot.writeFieldBegin('reportFilter', TType.STRUCT, 2)
      self.reportFilter.write(oprot)
      oprot.writeFieldEnd()
    if self.cmpData is not None:
      oprot.writeFieldBegin('cmpData', TType.STRUCT, 3)
      self.cmpData.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.reportFilter)
    value = (value * 31) ^ hash(self.cmpData)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSeverityCounts_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype326, _vtype327, _size325 ) = iprot.readMapBegin()
          for _i329 in xrange(_size325):
            _key330 = iprot.readI32();
            _val331 = iprot.readI64();
            self.success[_key330] = _val331
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSeverityCounts_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.I64, len(self.success))
      for kiter332,viter333 in self.success.items():
        oprot.writeI32(kiter332)
        oprot.writeI64(viter333)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCheckerMsgCounts_args:
  """
  Attributes:
   - runIds
   - reportFilter
   - cmpData
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'reportFilter', (ReportFilter, ReportFilter.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'cmpData', (CompareData, CompareData.thrift_spec), None, ), # 3
    (4, TType.I64, 'limit', None, None, ), # 4
    (5, TType.I64, 'offset', None, None, ), # 5
  )

  def __init__(self, runIds=None, reportFilter=None, cmpData=None, limit=None, offset=None,):
    self.runIds = runIds
    self.reportFilter = reportFilter
    self.cmpData = cmpData
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype337, _size334) = iprot.readListBegin()
          for _i338 in xrange(_size334):
            _elem339 = iprot.readI64();
            self.runIds.append(_elem339)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reportFilter = ReportFilter()
          self.reportFilter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cmpData = CompareData()
          self.cmpData.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.limit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCheckerMsgCounts_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter340 in self.runIds:
        oprot.writeI64(iter340)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reportFilter is not None:
      oprot.writeFieldBegin('reportFilter', TType.STRUCT, 2)
      self.reportFilter.write(oprot)
      oprot.writeFieldEnd()
    if self.cmpData is not None:
      oprot.writeFieldBegin('cmpData', TType.STRUCT, 3)
      self.cmpData.write(oprot)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I64, 4)
      oprot.writeI64(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 5)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.reportFilter)
    value = (value * 31) ^ hash(self.cmpData)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCheckerMsgCounts_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype342, _vtype343, _size341 ) = iprot.readMapBegin()
          for _i345 in xrange(_size341):
            _key346 = iprot.readString();
            _val347 = iprot.readI64();
            self.success[_key346] = _val347
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCheckerMsgCounts_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.success))
      for kiter348,viter349 in self.success.items():
        oprot.writeString(kiter348)
        oprot.writeI64(viter349)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getReviewStatusCounts_args:
  """
  Attributes:
   - runIds
   - reportFilter
   - cmpData
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'reportFilter', (ReportFilter, ReportFilter.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'cmpData', (CompareData, CompareData.thrift_spec), None, ), # 3
  )

  def __init__(self, runIds=None, reportFilter=None, cmpData=None,):
    self.runIds = runIds
    self.reportFilter = reportFilter
    self.cmpData = cmpData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype353, _size350) = iprot.readListBegin()
          for _i354 in xrange(_size350):
            _elem355 = iprot.readI64();
            self.runIds.append(_elem355)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reportFilter = ReportFilter()
          self.reportFilter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cmpData = CompareData()
          self.cmpData.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getReviewStatusCounts_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter356 in self.runIds:
        oprot.writeI64(iter356)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reportFilter is not None:
      oprot.writeFieldBegin('reportFilter', TType.STRUCT, 2)
      self.reportFilter.write(oprot)
      oprot.writeFieldEnd()
    if self.cmpData is not None:
      oprot.writeFieldBegin('cmpData', TType.STRUCT, 3)
      self.cmpData.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.reportFilter)
    value = (value * 31) ^ hash(self.cmpData)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getReviewStatusCounts_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype358, _vtype359, _size357 ) = iprot.readMapBegin()
          for _i361 in xrange(_size357):
            _key362 = iprot.readI32();
            _val363 = iprot.readI64();
            self.success[_key362] = _val363
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getReviewStatusCounts_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.I64, len(self.success))
      for kiter364,viter365 in self.success.items():
        oprot.writeI32(kiter364)
        oprot.writeI64(viter365)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDetectionStatusCounts_args:
  """
  Attributes:
   - runIds
   - reportFilter
   - cmpData
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'reportFilter', (ReportFilter, ReportFilter.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'cmpData', (CompareData, CompareData.thrift_spec), None, ), # 3
  )

  def __init__(self, runIds=None, reportFilter=None, cmpData=None,):
    self.runIds = runIds
    self.reportFilter = reportFilter
    self.cmpData = cmpData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype369, _size366) = iprot.readListBegin()
          for _i370 in xrange(_size366):
            _elem371 = iprot.readI64();
            self.runIds.append(_elem371)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reportFilter = ReportFilter()
          self.reportFilter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cmpData = CompareData()
          self.cmpData.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDetectionStatusCounts_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter372 in self.runIds:
        oprot.writeI64(iter372)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reportFilter is not None:
      oprot.writeFieldBegin('reportFilter', TType.STRUCT, 2)
      self.reportFilter.write(oprot)
      oprot.writeFieldEnd()
    if self.cmpData is not None:
      oprot.writeFieldBegin('cmpData', TType.STRUCT, 3)
      self.cmpData.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.reportFilter)
    value = (value * 31) ^ hash(self.cmpData)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getDetectionStatusCounts_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype374, _vtype375, _size373 ) = iprot.readMapBegin()
          for _i377 in xrange(_size373):
            _key378 = iprot.readI32();
            _val379 = iprot.readI64();
            self.success[_key378] = _val379
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getDetectionStatusCounts_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.I64, len(self.success))
      for kiter380,viter381 in self.success.items():
        oprot.writeI32(kiter380)
        oprot.writeI64(viter381)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getFileCounts_args:
  """
  Attributes:
   - runIds
   - reportFilter
   - cmpData
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'reportFilter', (ReportFilter, ReportFilter.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'cmpData', (CompareData, CompareData.thrift_spec), None, ), # 3
    (4, TType.I64, 'limit', None, None, ), # 4
    (5, TType.I64, 'offset', None, None, ), # 5
  )

  def __init__(self, runIds=None, reportFilter=None, cmpData=None, limit=None, offset=None,):
    self.runIds = runIds
    self.reportFilter = reportFilter
    self.cmpData = cmpData
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype385, _size382) = iprot.readListBegin()
          for _i386 in xrange(_size382):
            _elem387 = iprot.readI64();
            self.runIds.append(_elem387)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reportFilter = ReportFilter()
          self.reportFilter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cmpData = CompareData()
          self.cmpData.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.limit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getFileCounts_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter388 in self.runIds:
        oprot.writeI64(iter388)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reportFilter is not None:
      oprot.writeFieldBegin('reportFilter', TType.STRUCT, 2)
      self.reportFilter.write(oprot)
      oprot.writeFieldEnd()
    if self.cmpData is not None:
      oprot.writeFieldBegin('cmpData', TType.STRUCT, 3)
      self.cmpData.write(oprot)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I64, 4)
      oprot.writeI64(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 5)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.reportFilter)
    value = (value * 31) ^ hash(self.cmpData)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getFileCounts_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype390, _vtype391, _size389 ) = iprot.readMapBegin()
          for _i393 in xrange(_size389):
            _key394 = iprot.readString();
            _val395 = iprot.readI64();
            self.success[_key394] = _val395
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getFileCounts_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.I64, len(self.success))
      for kiter396,viter397 in self.success.items():
        oprot.writeString(kiter396)
        oprot.writeI64(viter397)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCheckerCounts_args:
  """
  Attributes:
   - runIds
   - reportFilter
   - cmpData
   - limit
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'reportFilter', (ReportFilter, ReportFilter.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'cmpData', (CompareData, CompareData.thrift_spec), None, ), # 3
    (4, TType.I64, 'limit', None, None, ), # 4
    (5, TType.I64, 'offset', None, None, ), # 5
  )

  def __init__(self, runIds=None, reportFilter=None, cmpData=None, limit=None, offset=None,):
    self.runIds = runIds
    self.reportFilter = reportFilter
    self.cmpData = cmpData
    self.limit = limit
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype401, _size398) = iprot.readListBegin()
          for _i402 in xrange(_size398):
            _elem403 = iprot.readI64();
            self.runIds.append(_elem403)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reportFilter = ReportFilter()
          self.reportFilter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cmpData = CompareData()
          self.cmpData.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.limit = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.offset = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCheckerCounts_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter404 in self.runIds:
        oprot.writeI64(iter404)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reportFilter is not None:
      oprot.writeFieldBegin('reportFilter', TType.STRUCT, 2)
      self.reportFilter.write(oprot)
      oprot.writeFieldEnd()
    if self.cmpData is not None:
      oprot.writeFieldBegin('cmpData', TType.STRUCT, 3)
      self.cmpData.write(oprot)
      oprot.writeFieldEnd()
    if self.limit is not None:
      oprot.writeFieldBegin('limit', TType.I64, 4)
      oprot.writeI64(self.limit)
      oprot.writeFieldEnd()
    if self.offset is not None:
      oprot.writeFieldBegin('offset', TType.I64, 5)
      oprot.writeI64(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.reportFilter)
    value = (value * 31) ^ hash(self.cmpData)
    value = (value * 31) ^ hash(self.limit)
    value = (value * 31) ^ hash(self.offset)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getCheckerCounts_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(CheckerCount, CheckerCount.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype408, _size405) = iprot.readListBegin()
          for _i409 in xrange(_size405):
            _elem410 = CheckerCount()
            _elem410.read(iprot)
            self.success.append(_elem410)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getCheckerCounts_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter411 in self.success:
        iter411.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunHistoryTagCounts_args:
  """
  Attributes:
   - runIds
   - reportFilter
   - cmpData
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'runIds', (TType.I64,None), None, ), # 1
    (2, TType.STRUCT, 'reportFilter', (ReportFilter, ReportFilter.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'cmpData', (CompareData, CompareData.thrift_spec), None, ), # 3
  )

  def __init__(self, runIds=None, reportFilter=None, cmpData=None,):
    self.runIds = runIds
    self.reportFilter = reportFilter
    self.cmpData = cmpData

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.runIds = []
          (_etype415, _size412) = iprot.readListBegin()
          for _i416 in xrange(_size412):
            _elem417 = iprot.readI64();
            self.runIds.append(_elem417)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.reportFilter = ReportFilter()
          self.reportFilter.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.cmpData = CompareData()
          self.cmpData.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunHistoryTagCounts_args')
    if self.runIds is not None:
      oprot.writeFieldBegin('runIds', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.runIds))
      for iter418 in self.runIds:
        oprot.writeI64(iter418)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.reportFilter is not None:
      oprot.writeFieldBegin('reportFilter', TType.STRUCT, 2)
      self.reportFilter.write(oprot)
      oprot.writeFieldEnd()
    if self.cmpData is not None:
      oprot.writeFieldBegin('cmpData', TType.STRUCT, 3)
      self.cmpData.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runIds)
    value = (value * 31) ^ hash(self.reportFilter)
    value = (value * 31) ^ hash(self.cmpData)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getRunHistoryTagCounts_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(RunTagCount, RunTagCount.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype422, _size419) = iprot.readListBegin()
          for _i423 in xrange(_size419):
            _elem424 = RunTagCount()
            _elem424.read(iprot)
            self.success.append(_elem424)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getRunHistoryTagCounts_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter425 in self.success:
        iter425.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSourceComponent_args:
  """
  Attributes:
   - name
   - value
   - description
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.STRING, 'value', None, None, ), # 2
    (3, TType.STRING, 'description', None, None, ), # 3
  )

  def __init__(self, name=None, value=None, description=None,):
    self.name = name
    self.value = value
    self.description = description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSourceComponent_args')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 2)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    if self.description is not None:
      oprot.writeFieldBegin('description', TType.STRING, 3)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.description)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addSourceComponent_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addSourceComponent_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSourceComponents_args:
  """
  Attributes:
   - sourceComponentFilter
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'sourceComponentFilter', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, sourceComponentFilter=None,):
    self.sourceComponentFilter = sourceComponentFilter

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.sourceComponentFilter = []
          (_etype429, _size426) = iprot.readListBegin()
          for _i430 in xrange(_size426):
            _elem431 = iprot.readString();
            self.sourceComponentFilter.append(_elem431)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSourceComponents_args')
    if self.sourceComponentFilter is not None:
      oprot.writeFieldBegin('sourceComponentFilter', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.sourceComponentFilter))
      for iter432 in self.sourceComponentFilter:
        oprot.writeString(iter432)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.sourceComponentFilter)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSourceComponents_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(SourceComponentData, SourceComponentData.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype436, _size433) = iprot.readListBegin()
          for _i437 in xrange(_size433):
            _elem438 = SourceComponentData()
            _elem438.read(iprot)
            self.success.append(_elem438)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSourceComponents_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter439 in self.success:
        iter439.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeSourceComponent_args:
  """
  Attributes:
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
  )

  def __init__(self, name=None,):
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeSourceComponent_args')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeSourceComponent_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeSourceComponent_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMissingContentHashes_args:
  """
  Attributes:
   - fileHashes
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'fileHashes', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, fileHashes=None,):
    self.fileHashes = fileHashes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.fileHashes = []
          (_etype443, _size440) = iprot.readListBegin()
          for _i444 in xrange(_size440):
            _elem445 = iprot.readString();
            self.fileHashes.append(_elem445)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMissingContentHashes_args')
    if self.fileHashes is not None:
      oprot.writeFieldBegin('fileHashes', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.fileHashes))
      for iter446 in self.fileHashes:
        oprot.writeString(iter446)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.fileHashes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getMissingContentHashes_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING,None), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype450, _size447) = iprot.readListBegin()
          for _i451 in xrange(_size447):
            _elem452 = iprot.readString();
            self.success.append(_elem452)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getMissingContentHashes_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRING, len(self.success))
      for iter453 in self.success:
        oprot.writeString(iter453)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class massStoreRun_args:
  """
  Attributes:
   - runName
   - tag
   - version
   - zipfile
   - force
   - trimPathPrefixes
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'runName', None, None, ), # 1
    (2, TType.STRING, 'tag', None, None, ), # 2
    (3, TType.STRING, 'version', None, None, ), # 3
    (4, TType.STRING, 'zipfile', None, None, ), # 4
    (5, TType.BOOL, 'force', None, None, ), # 5
    (6, TType.LIST, 'trimPathPrefixes', (TType.STRING,None), None, ), # 6
  )

  def __init__(self, runName=None, tag=None, version=None, zipfile=None, force=None, trimPathPrefixes=None,):
    self.runName = runName
    self.tag = tag
    self.version = version
    self.zipfile = zipfile
    self.force = force
    self.trimPathPrefixes = trimPathPrefixes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.runName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tag = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.zipfile = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.force = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.trimPathPrefixes = []
          (_etype457, _size454) = iprot.readListBegin()
          for _i458 in xrange(_size454):
            _elem459 = iprot.readString();
            self.trimPathPrefixes.append(_elem459)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('massStoreRun_args')
    if self.runName is not None:
      oprot.writeFieldBegin('runName', TType.STRING, 1)
      oprot.writeString(self.runName)
      oprot.writeFieldEnd()
    if self.tag is not None:
      oprot.writeFieldBegin('tag', TType.STRING, 2)
      oprot.writeString(self.tag)
      oprot.writeFieldEnd()
    if self.version is not None:
      oprot.writeFieldBegin('version', TType.STRING, 3)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    if self.zipfile is not None:
      oprot.writeFieldBegin('zipfile', TType.STRING, 4)
      oprot.writeString(self.zipfile)
      oprot.writeFieldEnd()
    if self.force is not None:
      oprot.writeFieldBegin('force', TType.BOOL, 5)
      oprot.writeBool(self.force)
      oprot.writeFieldEnd()
    if self.trimPathPrefixes is not None:
      oprot.writeFieldBegin('trimPathPrefixes', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.trimPathPrefixes))
      for iter460 in self.trimPathPrefixes:
        oprot.writeString(iter460)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runName)
    value = (value * 31) ^ hash(self.tag)
    value = (value * 31) ^ hash(self.version)
    value = (value * 31) ^ hash(self.zipfile)
    value = (value * 31) ^ hash(self.force)
    value = (value * 31) ^ hash(self.trimPathPrefixes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class massStoreRun_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.I64, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.I64:
          self.success = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('massStoreRun_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.I64, 0)
      oprot.writeI64(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class allowsStoringAnalysisStatistics_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('allowsStoringAnalysisStatistics_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class allowsStoringAnalysisStatistics_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('allowsStoringAnalysisStatistics_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAnalysisStatisticsLimits_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAnalysisStatisticsLimits_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAnalysisStatisticsLimits_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.I32,None,TType.I64,None), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype462, _vtype463, _size461 ) = iprot.readMapBegin()
          for _i465 in xrange(_size461):
            _key466 = iprot.readI32();
            _val467 = iprot.readI64();
            self.success[_key466] = _val467
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAnalysisStatisticsLimits_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.I32, TType.I64, len(self.success))
      for kiter468,viter469 in self.success.items():
        oprot.writeI32(kiter468)
        oprot.writeI64(viter469)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class storeAnalysisStatistics_args:
  """
  Attributes:
   - runName
   - zipfile
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'runName', None, None, ), # 1
    (2, TType.STRING, 'zipfile', None, None, ), # 2
  )

  def __init__(self, runName=None, zipfile=None,):
    self.runName = runName
    self.zipfile = zipfile

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.runName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.zipfile = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('storeAnalysisStatistics_args')
    if self.runName is not None:
      oprot.writeFieldBegin('runName', TType.STRING, 1)
      oprot.writeString(self.runName)
      oprot.writeFieldEnd()
    if self.zipfile is not None:
      oprot.writeFieldBegin('zipfile', TType.STRING, 2)
      oprot.writeString(self.zipfile)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runName)
    value = (value * 31) ^ hash(self.zipfile)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class storeAnalysisStatistics_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('storeAnalysisStatistics_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAnalysisStatistics_args:
  """
  Attributes:
   - runId
   - runHistoryId
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'runId', None, None, ), # 1
    (2, TType.I64, 'runHistoryId', None, None, ), # 2
  )

  def __init__(self, runId=None, runHistoryId=None,):
    self.runId = runId
    self.runHistoryId = runHistoryId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.runId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.runHistoryId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAnalysisStatistics_args')
    if self.runId is not None:
      oprot.writeFieldBegin('runId', TType.I64, 1)
      oprot.writeI64(self.runId)
      oprot.writeFieldEnd()
    if self.runHistoryId is not None:
      oprot.writeFieldBegin('runHistoryId', TType.I64, 2)
      oprot.writeI64(self.runHistoryId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runId)
    value = (value * 31) ^ hash(self.runHistoryId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAnalysisStatistics_result:
  """
  Attributes:
   - success
   - requestError
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.STRUCT,(AnalyzerStatistics, AnalyzerStatistics.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'requestError', (codechecker_api_shared.ttypes.RequestFailed, codechecker_api_shared.ttypes.RequestFailed.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, requestError=None,):
    self.success = success
    self.requestError = requestError

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype471, _vtype472, _size470 ) = iprot.readMapBegin()
          for _i474 in xrange(_size470):
            _key475 = iprot.readString();
            _val476 = AnalyzerStatistics()
            _val476.read(iprot)
            self.success[_key475] = _val476
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.requestError = codechecker_api_shared.ttypes.RequestFailed()
          self.requestError.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAnalysisStatistics_result')
    if self.success is not None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.success))
      for kiter477,viter478 in self.success.items():
        oprot.writeString(kiter477)
        viter478.write(oprot)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.requestError is not None:
      oprot.writeFieldBegin('requestError', TType.STRUCT, 1)
      self.requestError.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.success)
    value = (value * 31) ^ hash(self.requestError)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
