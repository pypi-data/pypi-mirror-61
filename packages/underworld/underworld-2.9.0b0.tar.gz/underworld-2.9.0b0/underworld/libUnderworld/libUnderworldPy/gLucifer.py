# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _gLucifer.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_gLucifer')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_gLucifer')
    _gLucifer = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_gLucifer', [dirname(__file__)])
        except ImportError:
            import _gLucifer
            return _gLucifer
        if fp is not None:
            try:
                _mod = imp.load_module('_gLucifer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _gLucifer = swig_import_helper()
    del swig_import_helper
else:
    import _gLucifer
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import underworld.libUnderworld.libUnderworldPy.StGermain
import underworld.libUnderworld.libUnderworldPy.StgDomain
import underworld.libUnderworld.libUnderworldPy.StgFEM
import underworld.libUnderworld.libUnderworldPy.PICellerator

def cdata(ptr: 'void *', nelements: 'size_t'=1) -> "SWIGCDATA":
    return _gLucifer.cdata(ptr, nelements)
cdata = _gLucifer.cdata

def memmove(data: 'void *', indata: 'void const *') -> "void":
    return _gLucifer.memmove(data, indata)
memmove = _gLucifer.memmove

def new_farray(nelements: 'size_t') -> "float *":
    return _gLucifer.new_farray(nelements)
new_farray = _gLucifer.new_farray

def delete_farray(ary: 'float *') -> "void":
    return _gLucifer.delete_farray(ary)
delete_farray = _gLucifer.delete_farray

def farray_getitem(ary: 'float *', index: 'size_t') -> "float":
    return _gLucifer.farray_getitem(ary, index)
farray_getitem = _gLucifer.farray_getitem

def farray_setitem(ary: 'float *', index: 'size_t', value: 'float') -> "void":
    return _gLucifer.farray_setitem(ary, index, value)
farray_setitem = _gLucifer.farray_setitem
lucLeftHanded = _gLucifer.lucLeftHanded
lucRightHanded = _gLucifer.lucRightHanded
class lucColour(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    red = _swig_property(_gLucifer.lucColour_red_get, _gLucifer.lucColour_red_set)
    green = _swig_property(_gLucifer.lucColour_green_get, _gLucifer.lucColour_green_set)
    blue = _swig_property(_gLucifer.lucColour_blue_get, _gLucifer.lucColour_blue_set)
    opacity = _swig_property(_gLucifer.lucColour_opacity_get, _gLucifer.lucColour_opacity_set)

    def __init__(self):
        _gLucifer.lucColour_swiginit(self, _gLucifer.new_lucColour())
    __swig_destroy__ = _gLucifer.delete_lucColour
lucColour_swigregister = _gLucifer.lucColour_swigregister
lucColour_swigregister(lucColour)
cvar = _gLucifer.cvar
lucColourMap_Type = cvar.lucColourMap_Type

class lucColourMap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_gLucifer.lucColourMap__sizeOfSelf_get, _gLucifer.lucColourMap__sizeOfSelf_set)
    _deleteSelf = _swig_property(_gLucifer.lucColourMap__deleteSelf_get, _gLucifer.lucColourMap__deleteSelf_set)
    type = _swig_property(_gLucifer.lucColourMap_type_get, _gLucifer.lucColourMap_type_set)
    nRefs = _swig_property(_gLucifer.lucColourMap_nRefs_get, _gLucifer.lucColourMap_nRefs_set)
    locked = _swig_property(_gLucifer.lucColourMap_locked_get, _gLucifer.lucColourMap_locked_set)
    _delete = _swig_property(_gLucifer.lucColourMap__delete_get, _gLucifer.lucColourMap__delete_set)
    _print = _swig_property(_gLucifer.lucColourMap__print_get, _gLucifer.lucColourMap__print_set)
    _copy = _swig_property(_gLucifer.lucColourMap__copy_get, _gLucifer.lucColourMap__copy_set)
    name = _swig_property(_gLucifer.lucColourMap_name_get, _gLucifer.lucColourMap_name_set)
    nameAllocationType = _swig_property(_gLucifer.lucColourMap_nameAllocationType_get, _gLucifer.lucColourMap_nameAllocationType_set)
    _defaultConstructor = _swig_property(_gLucifer.lucColourMap__defaultConstructor_get, _gLucifer.lucColourMap__defaultConstructor_set)
    _construct = _swig_property(_gLucifer.lucColourMap__construct_get, _gLucifer.lucColourMap__construct_set)
    _build = _swig_property(_gLucifer.lucColourMap__build_get, _gLucifer.lucColourMap__build_set)
    _initialise = _swig_property(_gLucifer.lucColourMap__initialise_get, _gLucifer.lucColourMap__initialise_set)
    _execute = _swig_property(_gLucifer.lucColourMap__execute_get, _gLucifer.lucColourMap__execute_set)
    _destroy = _swig_property(_gLucifer.lucColourMap__destroy_get, _gLucifer.lucColourMap__destroy_set)
    isConstructed = _swig_property(_gLucifer.lucColourMap_isConstructed_get, _gLucifer.lucColourMap_isConstructed_set)
    isBuilt = _swig_property(_gLucifer.lucColourMap_isBuilt_get, _gLucifer.lucColourMap_isBuilt_set)
    isInitialised = _swig_property(_gLucifer.lucColourMap_isInitialised_get, _gLucifer.lucColourMap_isInitialised_set)
    hasExecuted = _swig_property(_gLucifer.lucColourMap_hasExecuted_get, _gLucifer.lucColourMap_hasExecuted_set)
    isDestroyed = _swig_property(_gLucifer.lucColourMap_isDestroyed_get, _gLucifer.lucColourMap_isDestroyed_set)
    constructType = _swig_property(_gLucifer.lucColourMap_constructType_get, _gLucifer.lucColourMap_constructType_set)
    buildType = _swig_property(_gLucifer.lucColourMap_buildType_get, _gLucifer.lucColourMap_buildType_set)
    initialiseType = _swig_property(_gLucifer.lucColourMap_initialiseType_get, _gLucifer.lucColourMap_initialiseType_set)
    executeType = _swig_property(_gLucifer.lucColourMap_executeType_get, _gLucifer.lucColourMap_executeType_set)
    destroyType = _swig_property(_gLucifer.lucColourMap_destroyType_get, _gLucifer.lucColourMap_destroyType_set)
    context = _swig_property(_gLucifer.lucColourMap_context_get, _gLucifer.lucColourMap_context_set)
    minimum = _swig_property(_gLucifer.lucColourMap_minimum_get, _gLucifer.lucColourMap_minimum_set)
    maximum = _swig_property(_gLucifer.lucColourMap_maximum_get, _gLucifer.lucColourMap_maximum_set)
    id = _swig_property(_gLucifer.lucColourMap_id_get, _gLucifer.lucColourMap_id_set)
    properties = _swig_property(_gLucifer.lucColourMap_properties_get, _gLucifer.lucColourMap_properties_set)

    def __init__(self):
        _gLucifer.lucColourMap_swiginit(self, _gLucifer.new_lucColourMap())
    __swig_destroy__ = _gLucifer.delete_lucColourMap
lucColourMap_swigregister = _gLucifer.lucColourMap_swigregister
lucColourMap_swigregister(lucColourMap)


def lucColourMap_New(name: 'Name', properties: 'char *') -> "lucColourMap *":
    return _gLucifer.lucColourMap_New(name, properties)
lucColourMap_New = _gLucifer.lucColourMap_New

def _lucColourMap_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *') -> "lucColourMap *":
    return _gLucifer._lucColourMap_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy)
_lucColourMap_New = _gLucifer._lucColourMap_New

def _lucColourMap_Init(arg1: 'lucColourMap *', properties: 'char *') -> "void":
    return _gLucifer._lucColourMap_Init(arg1, properties)
_lucColourMap_Init = _gLucifer._lucColourMap_Init

def _lucColourMap_Delete(colourMap: 'void *') -> "void":
    return _gLucifer._lucColourMap_Delete(colourMap)
_lucColourMap_Delete = _gLucifer._lucColourMap_Delete

def _lucColourMap_DefaultNew(name: 'Name') -> "void *":
    return _gLucifer._lucColourMap_DefaultNew(name)
_lucColourMap_DefaultNew = _gLucifer._lucColourMap_DefaultNew

def _lucColourMap_AssignFromXML(colourMap: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer._lucColourMap_AssignFromXML(colourMap, cf, data)
_lucColourMap_AssignFromXML = _gLucifer._lucColourMap_AssignFromXML

def _lucColourMap_Build(colourMap: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucColourMap_Build(colourMap, data)
_lucColourMap_Build = _gLucifer._lucColourMap_Build

def _lucColourMap_Initialise(colourMap: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucColourMap_Initialise(colourMap, data)
_lucColourMap_Initialise = _gLucifer._lucColourMap_Initialise

def _lucColourMap_Execute(colourMap: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucColourMap_Execute(colourMap, data)
_lucColourMap_Execute = _gLucifer._lucColourMap_Execute

def _lucColourMap_Destroy(colourMap: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucColourMap_Destroy(colourMap, data)
_lucColourMap_Destroy = _gLucifer._lucColourMap_Destroy

def lucColourMap_SetProperties(colourMap: 'void *', props: 'char *') -> "void":
    return _gLucifer.lucColourMap_SetProperties(colourMap, props)
lucColourMap_SetProperties = _gLucifer.lucColourMap_SetProperties

def lucColourMap_SetMinMax(colourMap: 'void *', min: 'double', max: 'double') -> "void":
    return _gLucifer.lucColourMap_SetMinMax(colourMap, min, max)
lucColourMap_SetMinMax = _gLucifer.lucColourMap_SetMinMax
class lucDrawingObject(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_gLucifer.lucDrawingObject__sizeOfSelf_get, _gLucifer.lucDrawingObject__sizeOfSelf_set)
    _deleteSelf = _swig_property(_gLucifer.lucDrawingObject__deleteSelf_get, _gLucifer.lucDrawingObject__deleteSelf_set)
    type = _swig_property(_gLucifer.lucDrawingObject_type_get, _gLucifer.lucDrawingObject_type_set)
    nRefs = _swig_property(_gLucifer.lucDrawingObject_nRefs_get, _gLucifer.lucDrawingObject_nRefs_set)
    locked = _swig_property(_gLucifer.lucDrawingObject_locked_get, _gLucifer.lucDrawingObject_locked_set)
    _delete = _swig_property(_gLucifer.lucDrawingObject__delete_get, _gLucifer.lucDrawingObject__delete_set)
    _print = _swig_property(_gLucifer.lucDrawingObject__print_get, _gLucifer.lucDrawingObject__print_set)
    _copy = _swig_property(_gLucifer.lucDrawingObject__copy_get, _gLucifer.lucDrawingObject__copy_set)
    name = _swig_property(_gLucifer.lucDrawingObject_name_get, _gLucifer.lucDrawingObject_name_set)
    nameAllocationType = _swig_property(_gLucifer.lucDrawingObject_nameAllocationType_get, _gLucifer.lucDrawingObject_nameAllocationType_set)
    _defaultConstructor = _swig_property(_gLucifer.lucDrawingObject__defaultConstructor_get, _gLucifer.lucDrawingObject__defaultConstructor_set)
    _construct = _swig_property(_gLucifer.lucDrawingObject__construct_get, _gLucifer.lucDrawingObject__construct_set)
    _build = _swig_property(_gLucifer.lucDrawingObject__build_get, _gLucifer.lucDrawingObject__build_set)
    _initialise = _swig_property(_gLucifer.lucDrawingObject__initialise_get, _gLucifer.lucDrawingObject__initialise_set)
    _execute = _swig_property(_gLucifer.lucDrawingObject__execute_get, _gLucifer.lucDrawingObject__execute_set)
    _destroy = _swig_property(_gLucifer.lucDrawingObject__destroy_get, _gLucifer.lucDrawingObject__destroy_set)
    isConstructed = _swig_property(_gLucifer.lucDrawingObject_isConstructed_get, _gLucifer.lucDrawingObject_isConstructed_set)
    isBuilt = _swig_property(_gLucifer.lucDrawingObject_isBuilt_get, _gLucifer.lucDrawingObject_isBuilt_set)
    isInitialised = _swig_property(_gLucifer.lucDrawingObject_isInitialised_get, _gLucifer.lucDrawingObject_isInitialised_set)
    hasExecuted = _swig_property(_gLucifer.lucDrawingObject_hasExecuted_get, _gLucifer.lucDrawingObject_hasExecuted_set)
    isDestroyed = _swig_property(_gLucifer.lucDrawingObject_isDestroyed_get, _gLucifer.lucDrawingObject_isDestroyed_set)
    constructType = _swig_property(_gLucifer.lucDrawingObject_constructType_get, _gLucifer.lucDrawingObject_constructType_set)
    buildType = _swig_property(_gLucifer.lucDrawingObject_buildType_get, _gLucifer.lucDrawingObject_buildType_set)
    initialiseType = _swig_property(_gLucifer.lucDrawingObject_initialiseType_get, _gLucifer.lucDrawingObject_initialiseType_set)
    executeType = _swig_property(_gLucifer.lucDrawingObject_executeType_get, _gLucifer.lucDrawingObject_executeType_set)
    destroyType = _swig_property(_gLucifer.lucDrawingObject_destroyType_get, _gLucifer.lucDrawingObject_destroyType_set)
    context = _swig_property(_gLucifer.lucDrawingObject_context_get, _gLucifer.lucDrawingObject_context_set)
    _setup = _swig_property(_gLucifer.lucDrawingObject__setup_get, _gLucifer.lucDrawingObject__setup_set)
    _draw = _swig_property(_gLucifer.lucDrawingObject__draw_get, _gLucifer.lucDrawingObject__draw_set)
    _cleanUp = _swig_property(_gLucifer.lucDrawingObject__cleanUp_get, _gLucifer.lucDrawingObject__cleanUp_set)
    needsToCleanUp = _swig_property(_gLucifer.lucDrawingObject_needsToCleanUp_get, _gLucifer.lucDrawingObject_needsToCleanUp_set)
    needsToDraw = _swig_property(_gLucifer.lucDrawingObject_needsToDraw_get, _gLucifer.lucDrawingObject_needsToDraw_set)
    depthSort = _swig_property(_gLucifer.lucDrawingObject_depthSort_get, _gLucifer.lucDrawingObject_depthSort_set)
    position = _swig_property(_gLucifer.lucDrawingObject_position_get, _gLucifer.lucDrawingObject_position_set)
    disabled = _swig_property(_gLucifer.lucDrawingObject_disabled_get, _gLucifer.lucDrawingObject_disabled_set)
    colourMap = _swig_property(_gLucifer.lucDrawingObject_colourMap_get, _gLucifer.lucDrawingObject_colourMap_set)
    colour = _swig_property(_gLucifer.lucDrawingObject_colour_get, _gLucifer.lucDrawingObject_colour_set)
    opacity = _swig_property(_gLucifer.lucDrawingObject_opacity_get, _gLucifer.lucDrawingObject_opacity_set)
    id = _swig_property(_gLucifer.lucDrawingObject_id_get, _gLucifer.lucDrawingObject_id_set)
    properties = _swig_property(_gLucifer.lucDrawingObject_properties_get, _gLucifer.lucDrawingObject_properties_set)
    comm = _swig_property(_gLucifer.lucDrawingObject_comm_get, _gLucifer.lucDrawingObject_comm_set)
    rank = _swig_property(_gLucifer.lucDrawingObject_rank_get, _gLucifer.lucDrawingObject_rank_set)
    nproc = _swig_property(_gLucifer.lucDrawingObject_nproc_get, _gLucifer.lucDrawingObject_nproc_set)

    def __init__(self):
        _gLucifer.lucDrawingObject_swiginit(self, _gLucifer.new_lucDrawingObject())
    __swig_destroy__ = _gLucifer.delete_lucDrawingObject
lucDrawingObject_swigregister = _gLucifer.lucDrawingObject_swigregister
lucDrawingObject_swigregister(lucDrawingObject)
lucDrawingObject_Type = cvar.lucDrawingObject_Type


def _lucDrawingObject_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _setup: 'lucDrawingObject_SetupFunction *', _draw: 'lucDrawingObject_DrawFunction *', _cleanUp: 'lucDrawingObject_CleanUpFunction *') -> "lucDrawingObject *":
    return _gLucifer._lucDrawingObject_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _setup, _draw, _cleanUp)
_lucDrawingObject_New = _gLucifer._lucDrawingObject_New

def _lucDrawingObject_Delete(drawingObject: 'void *') -> "void":
    return _gLucifer._lucDrawingObject_Delete(drawingObject)
_lucDrawingObject_Delete = _gLucifer._lucDrawingObject_Delete

def _lucDrawingObject_Print(drawingObject: 'void *', stream: 'Stream *') -> "void":
    return _gLucifer._lucDrawingObject_Print(drawingObject, stream)
_lucDrawingObject_Print = _gLucifer._lucDrawingObject_Print

def _lucDrawingObject_Copy(drawingObject: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _gLucifer._lucDrawingObject_Copy(drawingObject, dest, deep, nameExt, ptrMap)
_lucDrawingObject_Copy = _gLucifer._lucDrawingObject_Copy

def _lucDrawingObject_DefaultNew(name: 'Name') -> "void *":
    return _gLucifer._lucDrawingObject_DefaultNew(name)
_lucDrawingObject_DefaultNew = _gLucifer._lucDrawingObject_DefaultNew

def _lucDrawingObject_AssignFromXML(drawingObject: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer._lucDrawingObject_AssignFromXML(drawingObject, cf, data)
_lucDrawingObject_AssignFromXML = _gLucifer._lucDrawingObject_AssignFromXML

def _lucDrawingObject_Build(camera: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucDrawingObject_Build(camera, data)
_lucDrawingObject_Build = _gLucifer._lucDrawingObject_Build

def _lucDrawingObject_Initialise(camera: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucDrawingObject_Initialise(camera, data)
_lucDrawingObject_Initialise = _gLucifer._lucDrawingObject_Initialise

def _lucDrawingObject_Execute(camera: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucDrawingObject_Execute(camera, data)
_lucDrawingObject_Execute = _gLucifer._lucDrawingObject_Execute

def _lucDrawingObject_Destroy(camera: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucDrawingObject_Destroy(camera, data)
_lucDrawingObject_Destroy = _gLucifer._lucDrawingObject_Destroy

def lucDrawingObject_Setup(drawingObject: 'void *', database: 'lucDatabase *', context: 'void *') -> "void":
    return _gLucifer.lucDrawingObject_Setup(drawingObject, database, context)
lucDrawingObject_Setup = _gLucifer.lucDrawingObject_Setup

def lucDrawingObject_Draw(drawingObject: 'void *', database: 'lucDatabase *', context: 'void *') -> "void":
    return _gLucifer.lucDrawingObject_Draw(drawingObject, database, context)
lucDrawingObject_Draw = _gLucifer.lucDrawingObject_Draw

def lucDrawingObject_CleanUp(drawingObject: 'void *') -> "void":
    return _gLucifer.lucDrawingObject_CleanUp(drawingObject)
lucDrawingObject_CleanUp = _gLucifer.lucDrawingObject_CleanUp
GreaterThan = _gLucifer.GreaterThan
LessThan = _gLucifer.LessThan
EqualTo = _gLucifer.EqualTo
class lucDrawingObjectMask(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_gLucifer.lucDrawingObjectMask_type_get, _gLucifer.lucDrawingObjectMask_type_set)
    value = _swig_property(_gLucifer.lucDrawingObjectMask_value_get, _gLucifer.lucDrawingObjectMask_value_set)
    tolerance = _swig_property(_gLucifer.lucDrawingObjectMask_tolerance_get, _gLucifer.lucDrawingObjectMask_tolerance_set)

    def __init__(self):
        _gLucifer.lucDrawingObjectMask_swiginit(self, _gLucifer.new_lucDrawingObjectMask())
    __swig_destroy__ = _gLucifer.delete_lucDrawingObjectMask
lucDrawingObjectMask_swigregister = _gLucifer.lucDrawingObjectMask_swigregister
lucDrawingObjectMask_swigregister(lucDrawingObjectMask)


def lucDrawingObjectMask_Construct(arg1: 'lucDrawingObjectMask', drawingObjectName: 'Name', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer.lucDrawingObjectMask_Construct(arg1, drawingObjectName, cf, data)
lucDrawingObjectMask_Construct = _gLucifer.lucDrawingObjectMask_Construct

def lucDrawingObjectMask_Test(arg1: 'lucDrawingObjectMask', value: 'double') -> "Bool":
    return _gLucifer.lucDrawingObjectMask_Test(arg1, value)
lucDrawingObjectMask_Test = _gLucifer.lucDrawingObjectMask_Test

def lucDrawingObject_SyncShadowValues(drawingObject: 'void *', field: 'void *') -> "void":
    return _gLucifer.lucDrawingObject_SyncShadowValues(drawingObject, field)
lucDrawingObject_SyncShadowValues = _gLucifer.lucDrawingObject_SyncShadowValues

def lucDrawingObject_SetProperties(drawingObject: 'void *', props: 'char *') -> "void":
    return _gLucifer.lucDrawingObject_SetProperties(drawingObject, props)
lucDrawingObject_SetProperties = _gLucifer.lucDrawingObject_SetProperties
MAX_PATH = _gLucifer.MAX_PATH
class lucGeometryData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = _swig_property(_gLucifer.lucGeometryData_data_get, _gLucifer.lucGeometryData_data_set)
    size = _swig_property(_gLucifer.lucGeometryData_size_get, _gLucifer.lucGeometryData_size_set)
    count = _swig_property(_gLucifer.lucGeometryData_count_get, _gLucifer.lucGeometryData_count_set)
    allocated = _swig_property(_gLucifer.lucGeometryData_allocated_get, _gLucifer.lucGeometryData_allocated_set)
    width = _swig_property(_gLucifer.lucGeometryData_width_get, _gLucifer.lucGeometryData_width_set)
    height = _swig_property(_gLucifer.lucGeometryData_height_get, _gLucifer.lucGeometryData_height_set)
    minimum = _swig_property(_gLucifer.lucGeometryData_minimum_get, _gLucifer.lucGeometryData_minimum_set)
    maximum = _swig_property(_gLucifer.lucGeometryData_maximum_get, _gLucifer.lucGeometryData_maximum_set)
    min = _swig_property(_gLucifer.lucGeometryData_min_get, _gLucifer.lucGeometryData_min_set)
    max = _swig_property(_gLucifer.lucGeometryData_max_get, _gLucifer.lucGeometryData_max_set)
    labels = _swig_property(_gLucifer.lucGeometryData_labels_get, _gLucifer.lucGeometryData_labels_set)

    def __init__(self):
        _gLucifer.lucGeometryData_swiginit(self, _gLucifer.new_lucGeometryData())
    __swig_destroy__ = _gLucifer.delete_lucGeometryData
lucGeometryData_swigregister = _gLucifer.lucGeometryData_swigregister
lucGeometryData_swigregister(lucGeometryData)

class lucDatabase(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_gLucifer.lucDatabase__sizeOfSelf_get, _gLucifer.lucDatabase__sizeOfSelf_set)
    _deleteSelf = _swig_property(_gLucifer.lucDatabase__deleteSelf_get, _gLucifer.lucDatabase__deleteSelf_set)
    type = _swig_property(_gLucifer.lucDatabase_type_get, _gLucifer.lucDatabase_type_set)
    nRefs = _swig_property(_gLucifer.lucDatabase_nRefs_get, _gLucifer.lucDatabase_nRefs_set)
    locked = _swig_property(_gLucifer.lucDatabase_locked_get, _gLucifer.lucDatabase_locked_set)
    _delete = _swig_property(_gLucifer.lucDatabase__delete_get, _gLucifer.lucDatabase__delete_set)
    _print = _swig_property(_gLucifer.lucDatabase__print_get, _gLucifer.lucDatabase__print_set)
    _copy = _swig_property(_gLucifer.lucDatabase__copy_get, _gLucifer.lucDatabase__copy_set)
    name = _swig_property(_gLucifer.lucDatabase_name_get, _gLucifer.lucDatabase_name_set)
    nameAllocationType = _swig_property(_gLucifer.lucDatabase_nameAllocationType_get, _gLucifer.lucDatabase_nameAllocationType_set)
    _defaultConstructor = _swig_property(_gLucifer.lucDatabase__defaultConstructor_get, _gLucifer.lucDatabase__defaultConstructor_set)
    _construct = _swig_property(_gLucifer.lucDatabase__construct_get, _gLucifer.lucDatabase__construct_set)
    _build = _swig_property(_gLucifer.lucDatabase__build_get, _gLucifer.lucDatabase__build_set)
    _initialise = _swig_property(_gLucifer.lucDatabase__initialise_get, _gLucifer.lucDatabase__initialise_set)
    _execute = _swig_property(_gLucifer.lucDatabase__execute_get, _gLucifer.lucDatabase__execute_set)
    _destroy = _swig_property(_gLucifer.lucDatabase__destroy_get, _gLucifer.lucDatabase__destroy_set)
    isConstructed = _swig_property(_gLucifer.lucDatabase_isConstructed_get, _gLucifer.lucDatabase_isConstructed_set)
    isBuilt = _swig_property(_gLucifer.lucDatabase_isBuilt_get, _gLucifer.lucDatabase_isBuilt_set)
    isInitialised = _swig_property(_gLucifer.lucDatabase_isInitialised_get, _gLucifer.lucDatabase_isInitialised_set)
    hasExecuted = _swig_property(_gLucifer.lucDatabase_hasExecuted_get, _gLucifer.lucDatabase_hasExecuted_set)
    isDestroyed = _swig_property(_gLucifer.lucDatabase_isDestroyed_get, _gLucifer.lucDatabase_isDestroyed_set)
    constructType = _swig_property(_gLucifer.lucDatabase_constructType_get, _gLucifer.lucDatabase_constructType_set)
    buildType = _swig_property(_gLucifer.lucDatabase_buildType_get, _gLucifer.lucDatabase_buildType_set)
    initialiseType = _swig_property(_gLucifer.lucDatabase_initialiseType_get, _gLucifer.lucDatabase_initialiseType_set)
    executeType = _swig_property(_gLucifer.lucDatabase_executeType_get, _gLucifer.lucDatabase_executeType_set)
    destroyType = _swig_property(_gLucifer.lucDatabase_destroyType_get, _gLucifer.lucDatabase_destroyType_set)
    context = _swig_property(_gLucifer.lucDatabase_context_get, _gLucifer.lucDatabase_context_set)
    drawingObjects = _swig_property(_gLucifer.lucDatabase_drawingObjects_get, _gLucifer.lucDatabase_drawingObjects_set)
    labels = _swig_property(_gLucifer.lucDatabase_labels_get, _gLucifer.lucDatabase_labels_set)
    label_lengths = _swig_property(_gLucifer.lucDatabase_label_lengths_get, _gLucifer.lucDatabase_label_lengths_set)
    data = _swig_property(_gLucifer.lucDatabase_data_get, _gLucifer.lucDatabase_data_set)
    bin_path = _swig_property(_gLucifer.lucDatabase_bin_path_get, _gLucifer.lucDatabase_bin_path_set)
    db = _swig_property(_gLucifer.lucDatabase_db_get, _gLucifer.lucDatabase_db_set)
    db2 = _swig_property(_gLucifer.lucDatabase_db2_get, _gLucifer.lucDatabase_db2_set)
    memdb = _swig_property(_gLucifer.lucDatabase_memdb_get, _gLucifer.lucDatabase_memdb_set)
    path = _swig_property(_gLucifer.lucDatabase_path_get, _gLucifer.lucDatabase_path_set)
    filename = _swig_property(_gLucifer.lucDatabase_filename_get, _gLucifer.lucDatabase_filename_set)
    vfs = _swig_property(_gLucifer.lucDatabase_vfs_get, _gLucifer.lucDatabase_vfs_set)
    compressed = _swig_property(_gLucifer.lucDatabase_compressed_get, _gLucifer.lucDatabase_compressed_set)
    singleFile = _swig_property(_gLucifer.lucDatabase_singleFile_get, _gLucifer.lucDatabase_singleFile_set)
    splitTransactions = _swig_property(_gLucifer.lucDatabase_splitTransactions_get, _gLucifer.lucDatabase_splitTransactions_set)
    deleteAfter = _swig_property(_gLucifer.lucDatabase_deleteAfter_get, _gLucifer.lucDatabase_deleteAfter_set)
    viewonly = _swig_property(_gLucifer.lucDatabase_viewonly_get, _gLucifer.lucDatabase_viewonly_set)
    rank = _swig_property(_gLucifer.lucDatabase_rank_get, _gLucifer.lucDatabase_rank_set)
    nproc = _swig_property(_gLucifer.lucDatabase_nproc_get, _gLucifer.lucDatabase_nproc_set)
    communicator = _swig_property(_gLucifer.lucDatabase_communicator_get, _gLucifer.lucDatabase_communicator_set)
    timeStep = _swig_property(_gLucifer.lucDatabase_timeStep_get, _gLucifer.lucDatabase_timeStep_set)

    def __init__(self):
        _gLucifer.lucDatabase_swiginit(self, _gLucifer.new_lucDatabase())
    __swig_destroy__ = _gLucifer.delete_lucDatabase
lucDatabase_swigregister = _gLucifer.lucDatabase_swigregister
lucDatabase_swigregister(lucDatabase)
lucDatabase_Type = cvar.lucDatabase_Type


def _lucDatabase_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *') -> "lucDatabase *":
    return _gLucifer._lucDatabase_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy)
_lucDatabase_New = _gLucifer._lucDatabase_New

def lucDatabase_New(context: 'AbstractContext *', deleteAfter: 'int', splitTransactions: 'Bool', compressed: 'Bool', singleFile: 'Bool', filename: 'char *', vfs: 'char *') -> "lucDatabase *":
    return _gLucifer.lucDatabase_New(context, deleteAfter, splitTransactions, compressed, singleFile, filename, vfs)
lucDatabase_New = _gLucifer.lucDatabase_New

def _lucDatabase_Delete(database: 'void *') -> "void":
    return _gLucifer._lucDatabase_Delete(database)
_lucDatabase_Delete = _gLucifer._lucDatabase_Delete

def _lucDatabase_DefaultNew(name: 'Name') -> "void *":
    return _gLucifer._lucDatabase_DefaultNew(name)
_lucDatabase_DefaultNew = _gLucifer._lucDatabase_DefaultNew

def _lucDatabase_AssignFromXML(database: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer._lucDatabase_AssignFromXML(database, cf, data)
_lucDatabase_AssignFromXML = _gLucifer._lucDatabase_AssignFromXML

def _lucDatabase_Build(database: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucDatabase_Build(database, data)
_lucDatabase_Build = _gLucifer._lucDatabase_Build

def _lucDatabase_Initialise(database: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucDatabase_Initialise(database, data)
_lucDatabase_Initialise = _gLucifer._lucDatabase_Initialise

def _lucDatabase_Execute(database: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucDatabase_Execute(database, data)
_lucDatabase_Execute = _gLucifer._lucDatabase_Execute

def _lucDatabase_Destroy(database: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucDatabase_Destroy(database, data)
_lucDatabase_Destroy = _gLucifer._lucDatabase_Destroy

def lucDatabase_Dump(database: 'void *') -> "void":
    return _gLucifer.lucDatabase_Dump(database)
lucDatabase_Dump = _gLucifer.lucDatabase_Dump

def lucDatabase_OutputDrawingObject(arg1: 'lucDatabase *', object: 'lucDrawingObject *') -> "void":
    return _gLucifer.lucDatabase_OutputDrawingObject(arg1, object)
lucDatabase_OutputDrawingObject = _gLucifer.lucDatabase_OutputDrawingObject

def lucDatabase_OutputColourMap(arg1: 'lucDatabase *', colourMap: 'lucColourMap *', object: 'lucDrawingObject *', type: 'lucGeometryDataType') -> "void":
    return _gLucifer.lucDatabase_OutputColourMap(arg1, colourMap, object, type)
lucDatabase_OutputColourMap = _gLucifer.lucDatabase_OutputColourMap

def lucDatabase_ClearGeometry(arg1: 'lucDatabase *') -> "void":
    return _gLucifer.lucDatabase_ClearGeometry(arg1)
lucDatabase_ClearGeometry = _gLucifer.lucDatabase_ClearGeometry

def lucDatabase_OutputGeometry(arg1: 'lucDatabase *', object_id: 'int') -> "void":
    return _gLucifer.lucDatabase_OutputGeometry(arg1, object_id)
lucDatabase_OutputGeometry = _gLucifer.lucDatabase_OutputGeometry

def lucDatabase_GatherCounts(arg1: 'lucDatabase *', count: 'int', counts: 'int *', offsets: 'int *') -> "int":
    return _gLucifer.lucDatabase_GatherCounts(arg1, count, counts, offsets)
lucDatabase_GatherCounts = _gLucifer.lucDatabase_GatherCounts

def lucDatabase_GatherGeometry(arg1: 'lucDatabase *', type: 'lucGeometryType', data_type: 'lucGeometryDataType') -> "void":
    return _gLucifer.lucDatabase_GatherGeometry(arg1, type, data_type)
lucDatabase_GatherGeometry = _gLucifer.lucDatabase_GatherGeometry

def lucDatabase_GatherLabels(arg1: 'lucDatabase *', type: 'lucGeometryType') -> "void":
    return _gLucifer.lucDatabase_GatherLabels(arg1, type)
lucDatabase_GatherLabels = _gLucifer.lucDatabase_GatherLabels

def lucDatabase_AddGridVertices(arg1: 'lucDatabase *', n: 'int', width: 'int', data: 'float *') -> "void":
    return _gLucifer.lucDatabase_AddGridVertices(arg1, n, width, data)
lucDatabase_AddGridVertices = _gLucifer.lucDatabase_AddGridVertices

def lucDatabase_AddGridVertex(arg1: 'lucDatabase *', width: 'int', height: 'int', data: 'float *') -> "void":
    return _gLucifer.lucDatabase_AddGridVertex(arg1, width, height, data)
lucDatabase_AddGridVertex = _gLucifer.lucDatabase_AddGridVertex

def lucDatabase_AddVertices(arg1: 'lucDatabase *', n: 'int', type: 'lucGeometryType', data: 'float *') -> "void":
    return _gLucifer.lucDatabase_AddVertices(arg1, n, type, data)
lucDatabase_AddVertices = _gLucifer.lucDatabase_AddVertices

def lucDatabase_AddVerticesWidth(arg1: 'lucDatabase *', n: 'int', type: 'lucGeometryType', width: 'int', data: 'float *') -> "void":
    return _gLucifer.lucDatabase_AddVerticesWidth(arg1, n, type, width, data)
lucDatabase_AddVerticesWidth = _gLucifer.lucDatabase_AddVerticesWidth

def lucDatabase_AddNormals(arg1: 'lucDatabase *', n: 'int', type: 'lucGeometryType', data: 'float *') -> "void":
    return _gLucifer.lucDatabase_AddNormals(arg1, n, type, data)
lucDatabase_AddNormals = _gLucifer.lucDatabase_AddNormals

def lucDatabase_AddNormal(arg1: 'lucDatabase *', type: 'lucGeometryType', norm: 'XYZ') -> "void":
    return _gLucifer.lucDatabase_AddNormal(arg1, type, norm)
lucDatabase_AddNormal = _gLucifer.lucDatabase_AddNormal

def lucDatabase_AddVectors(arg1: 'lucDatabase *', n: 'int', type: 'lucGeometryType', min: 'float', max: 'float', data: 'float *') -> "void":
    return _gLucifer.lucDatabase_AddVectors(arg1, n, type, min, max, data)
lucDatabase_AddVectors = _gLucifer.lucDatabase_AddVectors

def lucDatabase_AddValues(arg1: 'lucDatabase *', n: 'int', type: 'lucGeometryType', data_type: 'lucGeometryDataType', colourMap: 'lucColourMap *', data: 'float *') -> "void":
    return _gLucifer.lucDatabase_AddValues(arg1, n, type, data_type, colourMap, data)
lucDatabase_AddValues = _gLucifer.lucDatabase_AddValues

def lucDatabase_AddIndex(arg1: 'lucDatabase *', type: 'lucGeometryType', index: 'unsigned int') -> "void":
    return _gLucifer.lucDatabase_AddIndex(arg1, type, index)
lucDatabase_AddIndex = _gLucifer.lucDatabase_AddIndex

def lucDatabase_AddRGBA(arg1: 'lucDatabase *', type: 'lucGeometryType', opacity: 'float', colour: 'lucColour *') -> "void":
    return _gLucifer.lucDatabase_AddRGBA(arg1, type, opacity, colour)
lucDatabase_AddRGBA = _gLucifer.lucDatabase_AddRGBA

def lucDatabase_AddTexCoord(arg1: 'lucDatabase *', type: 'lucGeometryType', x: 'float', y: 'float') -> "void":
    return _gLucifer.lucDatabase_AddTexCoord(arg1, type, x, y)
lucDatabase_AddTexCoord = _gLucifer.lucDatabase_AddTexCoord

def lucDatabase_AddLabel(arg1: 'lucDatabase *', type: 'lucGeometryType', label: 'char *') -> "void":
    return _gLucifer.lucDatabase_AddLabel(arg1, type, label)
lucDatabase_AddLabel = _gLucifer.lucDatabase_AddLabel

def lucDatabase_AddVolumeSlice(arg1: 'lucDatabase *', width: 'int', height: 'int', corners: 'float *', colourMap: 'lucColourMap *', data: 'float *') -> "void":
    return _gLucifer.lucDatabase_AddVolumeSlice(arg1, width, height, corners, colourMap, data)
lucDatabase_AddVolumeSlice = _gLucifer.lucDatabase_AddVolumeSlice

def lucGeometryData_New(data_type: 'lucGeometryDataType') -> "lucGeometryData *":
    return _gLucifer.lucGeometryData_New(data_type)
lucGeometryData_New = _gLucifer.lucGeometryData_New

def lucGeometryData_Clear(arg1: 'lucGeometryData') -> "void":
    return _gLucifer.lucGeometryData_Clear(arg1)
lucGeometryData_Clear = _gLucifer.lucGeometryData_Clear

def lucGeometryData_Delete(arg1: 'lucGeometryData') -> "void":
    return _gLucifer.lucGeometryData_Delete(arg1)
lucGeometryData_Delete = _gLucifer.lucGeometryData_Delete

def lucGeometryData_Read(arg1: 'lucGeometryData', items: 'int', data: 'float *') -> "void":
    return _gLucifer.lucGeometryData_Read(arg1, items, data)
lucGeometryData_Read = _gLucifer.lucGeometryData_Read

def lucGeometryData_Setup(arg1: 'lucGeometryData', min: 'float', max: 'float') -> "void":
    return _gLucifer.lucGeometryData_Setup(arg1, min, max)
lucGeometryData_Setup = _gLucifer.lucGeometryData_Setup

def lucDatabase_OpenDatabase(arg1: 'lucDatabase *') -> "void":
    return _gLucifer.lucDatabase_OpenDatabase(arg1)
lucDatabase_OpenDatabase = _gLucifer.lucDatabase_OpenDatabase

def lucDatabase_CreateDatabase(arg1: 'lucDatabase *') -> "void":
    return _gLucifer.lucDatabase_CreateDatabase(arg1)
lucDatabase_CreateDatabase = _gLucifer.lucDatabase_CreateDatabase

def lucDatabase_IssueSQL(db: 'sqlite3 *', SQL: 'char const *') -> "Bool":
    return _gLucifer.lucDatabase_IssueSQL(db, SQL)
lucDatabase_IssueSQL = _gLucifer.lucDatabase_IssueSQL

def lucDatabase_BeginTransaction(arg1: 'lucDatabase *') -> "Bool":
    return _gLucifer.lucDatabase_BeginTransaction(arg1)
lucDatabase_BeginTransaction = _gLucifer.lucDatabase_BeginTransaction

def lucDatabase_Commit(arg1: 'lucDatabase *') -> "void":
    return _gLucifer.lucDatabase_Commit(arg1)
lucDatabase_Commit = _gLucifer.lucDatabase_Commit

def lucDatabase_AttachDatabase(arg1: 'lucDatabase *') -> "void":
    return _gLucifer.lucDatabase_AttachDatabase(arg1)
lucDatabase_AttachDatabase = _gLucifer.lucDatabase_AttachDatabase

def lucDatabase_DeleteGeometry(arg1: 'lucDatabase *', start_timestep: 'int', end_timestep: 'int') -> "void":
    return _gLucifer.lucDatabase_DeleteGeometry(arg1, start_timestep, end_timestep)
lucDatabase_DeleteGeometry = _gLucifer.lucDatabase_DeleteGeometry

def lucDatabase_WriteGeometry(arg1: 'lucDatabase *', index: 'int', type: 'lucGeometryType', data_type: 'lucGeometryDataType', object_id: 'int', block: 'lucGeometryData') -> "int":
    return _gLucifer.lucDatabase_WriteGeometry(arg1, index, type, data_type, object_id, block)
lucDatabase_WriteGeometry = _gLucifer.lucDatabase_WriteGeometry

def lucDatabase_BackupDb(fromDb: 'sqlite3 *', toDb: 'sqlite3 *') -> "void":
    return _gLucifer.lucDatabase_BackupDb(fromDb, toDb)
lucDatabase_BackupDb = _gLucifer.lucDatabase_BackupDb

def lucDatabase_BackupDbFile(arg1: 'lucDatabase *', filename: 'char *') -> "void":
    return _gLucifer.lucDatabase_BackupDbFile(arg1, filename)
lucDatabase_BackupDbFile = _gLucifer.lucDatabase_BackupDbFile

def lucDatabase_WriteState(arg1: 'lucDatabase *', name: 'char const *', properties: 'char const *') -> "void":
    return _gLucifer.lucDatabase_WriteState(arg1, name, properties)
lucDatabase_WriteState = _gLucifer.lucDatabase_WriteState

def StGermainBase_Finalise() -> "Bool":
    return _gLucifer.StGermainBase_Finalise()
StGermainBase_Finalise = _gLucifer.StGermainBase_Finalise

def StGermainBase_Init(argc: 'int *', argv: 'char **[]') -> "Bool":
    return _gLucifer.StGermainBase_Init(argc, argv)
StGermainBase_Init = _gLucifer.StGermainBase_Init
lucMinType = _gLucifer.lucMinType
lucLabelType = _gLucifer.lucLabelType
lucPointType = _gLucifer.lucPointType
lucGridType = _gLucifer.lucGridType
lucTriangleType = _gLucifer.lucTriangleType
lucVectorType = _gLucifer.lucVectorType
lucTracerType = _gLucifer.lucTracerType
lucLineType = _gLucifer.lucLineType
lucShapeType = _gLucifer.lucShapeType
lucVolumeType = _gLucifer.lucVolumeType
lucMaxType = _gLucifer.lucMaxType
lucMinDataType = _gLucifer.lucMinDataType
lucVertexData = _gLucifer.lucVertexData
lucNormalData = _gLucifer.lucNormalData
lucVectorData = _gLucifer.lucVectorData
lucColourValueData = _gLucifer.lucColourValueData
lucOpacityValueData = _gLucifer.lucOpacityValueData
lucRedValueData = _gLucifer.lucRedValueData
lucGreenValueData = _gLucifer.lucGreenValueData
lucBlueValueData = _gLucifer.lucBlueValueData
lucIndexData = _gLucifer.lucIndexData
lucXWidthData = _gLucifer.lucXWidthData
lucYHeightData = _gLucifer.lucYHeightData
lucZLengthData = _gLucifer.lucZLengthData
lucRGBAData = _gLucifer.lucRGBAData
lucTexCoordData = _gLucifer.lucTexCoordData
lucSizeData = _gLucifer.lucSizeData
lucLuminanceData = _gLucifer.lucLuminanceData
lucRGBData = _gLucifer.lucRGBData
lucMaxDataType = _gLucifer.lucMaxDataType
class lucCrossSection_cppdata(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    func = _swig_property(_gLucifer.lucCrossSection_cppdata_func_get, _gLucifer.lucCrossSection_cppdata_func_set)
    fn = _swig_property(_gLucifer.lucCrossSection_cppdata_fn_get, _gLucifer.lucCrossSection_cppdata_fn_set)

    def __init__(self):
        _gLucifer.lucCrossSection_cppdata_swiginit(self, _gLucifer.new_lucCrossSection_cppdata())
    __swig_destroy__ = _gLucifer.delete_lucCrossSection_cppdata
lucCrossSection_cppdata_swigregister = _gLucifer.lucCrossSection_cppdata_swigregister
lucCrossSection_cppdata_swigregister(lucCrossSection_cppdata)


def _lucCrossSection_SetFn(_self: 'void *', fn: 'Fn::Function *') -> "void":
    return _gLucifer._lucCrossSection_SetFn(_self, fn)
_lucCrossSection_SetFn = _gLucifer._lucCrossSection_SetFn
class lucCrossSection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_gLucifer.lucCrossSection__sizeOfSelf_get, _gLucifer.lucCrossSection__sizeOfSelf_set)
    _deleteSelf = _swig_property(_gLucifer.lucCrossSection__deleteSelf_get, _gLucifer.lucCrossSection__deleteSelf_set)
    type = _swig_property(_gLucifer.lucCrossSection_type_get, _gLucifer.lucCrossSection_type_set)
    nRefs = _swig_property(_gLucifer.lucCrossSection_nRefs_get, _gLucifer.lucCrossSection_nRefs_set)
    locked = _swig_property(_gLucifer.lucCrossSection_locked_get, _gLucifer.lucCrossSection_locked_set)
    _delete = _swig_property(_gLucifer.lucCrossSection__delete_get, _gLucifer.lucCrossSection__delete_set)
    _print = _swig_property(_gLucifer.lucCrossSection__print_get, _gLucifer.lucCrossSection__print_set)
    _copy = _swig_property(_gLucifer.lucCrossSection__copy_get, _gLucifer.lucCrossSection__copy_set)
    name = _swig_property(_gLucifer.lucCrossSection_name_get, _gLucifer.lucCrossSection_name_set)
    nameAllocationType = _swig_property(_gLucifer.lucCrossSection_nameAllocationType_get, _gLucifer.lucCrossSection_nameAllocationType_set)
    _defaultConstructor = _swig_property(_gLucifer.lucCrossSection__defaultConstructor_get, _gLucifer.lucCrossSection__defaultConstructor_set)
    _construct = _swig_property(_gLucifer.lucCrossSection__construct_get, _gLucifer.lucCrossSection__construct_set)
    _build = _swig_property(_gLucifer.lucCrossSection__build_get, _gLucifer.lucCrossSection__build_set)
    _initialise = _swig_property(_gLucifer.lucCrossSection__initialise_get, _gLucifer.lucCrossSection__initialise_set)
    _execute = _swig_property(_gLucifer.lucCrossSection__execute_get, _gLucifer.lucCrossSection__execute_set)
    _destroy = _swig_property(_gLucifer.lucCrossSection__destroy_get, _gLucifer.lucCrossSection__destroy_set)
    isConstructed = _swig_property(_gLucifer.lucCrossSection_isConstructed_get, _gLucifer.lucCrossSection_isConstructed_set)
    isBuilt = _swig_property(_gLucifer.lucCrossSection_isBuilt_get, _gLucifer.lucCrossSection_isBuilt_set)
    isInitialised = _swig_property(_gLucifer.lucCrossSection_isInitialised_get, _gLucifer.lucCrossSection_isInitialised_set)
    hasExecuted = _swig_property(_gLucifer.lucCrossSection_hasExecuted_get, _gLucifer.lucCrossSection_hasExecuted_set)
    isDestroyed = _swig_property(_gLucifer.lucCrossSection_isDestroyed_get, _gLucifer.lucCrossSection_isDestroyed_set)
    constructType = _swig_property(_gLucifer.lucCrossSection_constructType_get, _gLucifer.lucCrossSection_constructType_set)
    buildType = _swig_property(_gLucifer.lucCrossSection_buildType_get, _gLucifer.lucCrossSection_buildType_set)
    initialiseType = _swig_property(_gLucifer.lucCrossSection_initialiseType_get, _gLucifer.lucCrossSection_initialiseType_set)
    executeType = _swig_property(_gLucifer.lucCrossSection_executeType_get, _gLucifer.lucCrossSection_executeType_set)
    destroyType = _swig_property(_gLucifer.lucCrossSection_destroyType_get, _gLucifer.lucCrossSection_destroyType_set)
    context = _swig_property(_gLucifer.lucCrossSection_context_get, _gLucifer.lucCrossSection_context_set)
    _setup = _swig_property(_gLucifer.lucCrossSection__setup_get, _gLucifer.lucCrossSection__setup_set)
    _draw = _swig_property(_gLucifer.lucCrossSection__draw_get, _gLucifer.lucCrossSection__draw_set)
    _cleanUp = _swig_property(_gLucifer.lucCrossSection__cleanUp_get, _gLucifer.lucCrossSection__cleanUp_set)
    needsToCleanUp = _swig_property(_gLucifer.lucCrossSection_needsToCleanUp_get, _gLucifer.lucCrossSection_needsToCleanUp_set)
    needsToDraw = _swig_property(_gLucifer.lucCrossSection_needsToDraw_get, _gLucifer.lucCrossSection_needsToDraw_set)
    depthSort = _swig_property(_gLucifer.lucCrossSection_depthSort_get, _gLucifer.lucCrossSection_depthSort_set)
    position = _swig_property(_gLucifer.lucCrossSection_position_get, _gLucifer.lucCrossSection_position_set)
    disabled = _swig_property(_gLucifer.lucCrossSection_disabled_get, _gLucifer.lucCrossSection_disabled_set)
    colourMap = _swig_property(_gLucifer.lucCrossSection_colourMap_get, _gLucifer.lucCrossSection_colourMap_set)
    colour = _swig_property(_gLucifer.lucCrossSection_colour_get, _gLucifer.lucCrossSection_colour_set)
    opacity = _swig_property(_gLucifer.lucCrossSection_opacity_get, _gLucifer.lucCrossSection_opacity_set)
    id = _swig_property(_gLucifer.lucCrossSection_id_get, _gLucifer.lucCrossSection_id_set)
    properties = _swig_property(_gLucifer.lucCrossSection_properties_get, _gLucifer.lucCrossSection_properties_set)
    comm = _swig_property(_gLucifer.lucCrossSection_comm_get, _gLucifer.lucCrossSection_comm_set)
    rank = _swig_property(_gLucifer.lucCrossSection_rank_get, _gLucifer.lucCrossSection_rank_set)
    nproc = _swig_property(_gLucifer.lucCrossSection_nproc_get, _gLucifer.lucCrossSection_nproc_set)
    mesh = _swig_property(_gLucifer.lucCrossSection_mesh_get, _gLucifer.lucCrossSection_mesh_set)
    value = _swig_property(_gLucifer.lucCrossSection_value_get, _gLucifer.lucCrossSection_value_set)
    defaultResolution = _swig_property(_gLucifer.lucCrossSection_defaultResolution_get, _gLucifer.lucCrossSection_defaultResolution_set)
    resolutionA = _swig_property(_gLucifer.lucCrossSection_resolutionA_get, _gLucifer.lucCrossSection_resolutionA_set)
    resolutionB = _swig_property(_gLucifer.lucCrossSection_resolutionB_get, _gLucifer.lucCrossSection_resolutionB_set)
    onMesh = _swig_property(_gLucifer.lucCrossSection_onMesh_get, _gLucifer.lucCrossSection_onMesh_set)
    normal = _swig_property(_gLucifer.lucCrossSection_normal_get, _gLucifer.lucCrossSection_normal_set)
    coord1 = _swig_property(_gLucifer.lucCrossSection_coord1_get, _gLucifer.lucCrossSection_coord1_set)
    coord2 = _swig_property(_gLucifer.lucCrossSection_coord2_get, _gLucifer.lucCrossSection_coord2_set)
    coord3 = _swig_property(_gLucifer.lucCrossSection_coord3_get, _gLucifer.lucCrossSection_coord3_set)
    axis = _swig_property(_gLucifer.lucCrossSection_axis_get, _gLucifer.lucCrossSection_axis_set)
    axis1 = _swig_property(_gLucifer.lucCrossSection_axis1_get, _gLucifer.lucCrossSection_axis1_set)
    axis2 = _swig_property(_gLucifer.lucCrossSection_axis2_get, _gLucifer.lucCrossSection_axis2_set)
    isSet = _swig_property(_gLucifer.lucCrossSection_isSet_get, _gLucifer.lucCrossSection_isSet_set)
    interpolate = _swig_property(_gLucifer.lucCrossSection_interpolate_get, _gLucifer.lucCrossSection_interpolate_set)
    axisAligned = _swig_property(_gLucifer.lucCrossSection_axisAligned_get, _gLucifer.lucCrossSection_axisAligned_set)
    gatherData = _swig_property(_gLucifer.lucCrossSection_gatherData_get, _gLucifer.lucCrossSection_gatherData_set)
    offsetEdges = _swig_property(_gLucifer.lucCrossSection_offsetEdges_get, _gLucifer.lucCrossSection_offsetEdges_set)
    vertices = _swig_property(_gLucifer.lucCrossSection_vertices_get, _gLucifer.lucCrossSection_vertices_set)
    values = _swig_property(_gLucifer.lucCrossSection_values_get, _gLucifer.lucCrossSection_values_set)
    min = _swig_property(_gLucifer.lucCrossSection_min_get, _gLucifer.lucCrossSection_min_set)
    max = _swig_property(_gLucifer.lucCrossSection_max_get, _gLucifer.lucCrossSection_max_set)
    fieldComponentCount = _swig_property(_gLucifer.lucCrossSection_fieldComponentCount_get, _gLucifer.lucCrossSection_fieldComponentCount_set)
    cppdata = _swig_property(_gLucifer.lucCrossSection_cppdata_get, _gLucifer.lucCrossSection_cppdata_set)
    dim = _swig_property(_gLucifer.lucCrossSection_dim_get, _gLucifer.lucCrossSection_dim_set)
    vertexGridHandle = _swig_property(_gLucifer.lucCrossSection_vertexGridHandle_get, _gLucifer.lucCrossSection_vertexGridHandle_set)
    dims = _swig_property(_gLucifer.lucCrossSection_dims_get, _gLucifer.lucCrossSection_dims_set)
    fieldDim = _swig_property(_gLucifer.lucCrossSection_fieldDim_get, _gLucifer.lucCrossSection_fieldDim_set)
    valueMin = _swig_property(_gLucifer.lucCrossSection_valueMin_get, _gLucifer.lucCrossSection_valueMin_set)
    valueMax = _swig_property(_gLucifer.lucCrossSection_valueMax_get, _gLucifer.lucCrossSection_valueMax_set)

    def __init__(self):
        _gLucifer.lucCrossSection_swiginit(self, _gLucifer.new_lucCrossSection())
    __swig_destroy__ = _gLucifer.delete_lucCrossSection
lucCrossSection_swigregister = _gLucifer.lucCrossSection_swigregister
lucCrossSection_swigregister(lucCrossSection)
lucCrossSection_Type = cvar.lucCrossSection_Type


def _lucCrossSection_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _setup: 'lucDrawingObject_SetupFunction *', _draw: 'lucDrawingObject_DrawFunction *', _cleanUp: 'lucDrawingObject_CleanUpFunction *') -> "lucCrossSection *":
    return _gLucifer._lucCrossSection_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _setup, _draw, _cleanUp)
_lucCrossSection_New = _gLucifer._lucCrossSection_New

def _lucCrossSection_Delete(drawingObject: 'void *') -> "void":
    return _gLucifer._lucCrossSection_Delete(drawingObject)
_lucCrossSection_Delete = _gLucifer._lucCrossSection_Delete

def _lucCrossSection_Print(drawingObject: 'void *', stream: 'Stream *') -> "void":
    return _gLucifer._lucCrossSection_Print(drawingObject, stream)
_lucCrossSection_Print = _gLucifer._lucCrossSection_Print

def _lucCrossSection_DefaultNew(name: 'Name') -> "void *":
    return _gLucifer._lucCrossSection_DefaultNew(name)
_lucCrossSection_DefaultNew = _gLucifer._lucCrossSection_DefaultNew

def _lucCrossSection_AssignFromXML(drawingObject: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer._lucCrossSection_AssignFromXML(drawingObject, cf, data)
_lucCrossSection_AssignFromXML = _gLucifer._lucCrossSection_AssignFromXML

def _lucCrossSection_Build(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucCrossSection_Build(drawingObject, data)
_lucCrossSection_Build = _gLucifer._lucCrossSection_Build

def _lucCrossSection_Initialise(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucCrossSection_Initialise(drawingObject, data)
_lucCrossSection_Initialise = _gLucifer._lucCrossSection_Initialise

def _lucCrossSection_Execute(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucCrossSection_Execute(drawingObject, data)
_lucCrossSection_Execute = _gLucifer._lucCrossSection_Execute

def _lucCrossSection_Destroy(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucCrossSection_Destroy(drawingObject, data)
_lucCrossSection_Destroy = _gLucifer._lucCrossSection_Destroy

def _lucCrossSection_Setup(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucCrossSection_Setup(drawingObject, database, _context)
_lucCrossSection_Setup = _gLucifer._lucCrossSection_Setup

def _lucCrossSection_Draw(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucCrossSection_Draw(drawingObject, database, _context)
_lucCrossSection_Draw = _gLucifer._lucCrossSection_Draw

def lucCrossSection_Interpolate2d(crossSection: 'void *', factorA: 'double', factorB: 'double', coord: 'XYZ') -> "void":
    return _gLucifer.lucCrossSection_Interpolate2d(crossSection, factorA, factorB, coord)
lucCrossSection_Interpolate2d = _gLucifer.lucCrossSection_Interpolate2d

def lucCrossSection_SetPosition(crossSection: 'void *') -> "void":
    return _gLucifer.lucCrossSection_SetPosition(crossSection)
lucCrossSection_SetPosition = _gLucifer.lucCrossSection_SetPosition

def lucCrossSection_GetValue(crossSection: 'void *', min: 'double', max: 'double') -> "double":
    return _gLucifer.lucCrossSection_GetValue(crossSection, min, max)
lucCrossSection_GetValue = _gLucifer.lucCrossSection_GetValue

def lucCrossSection_Set(crossSection: 'void *', val: 'double', axis: 'Axis', interpolate: 'Bool') -> "lucCrossSection *":
    return _gLucifer.lucCrossSection_Set(crossSection, val, axis, interpolate)
lucCrossSection_Set = _gLucifer.lucCrossSection_Set

def lucCrossSection_Slice(crossSection: 'void *', val: 'double', interpolate: 'Bool') -> "lucCrossSection *":
    return _gLucifer.lucCrossSection_Slice(crossSection, val, interpolate)
lucCrossSection_Slice = _gLucifer.lucCrossSection_Slice

def lucCrossSection_AllocateSampleData(drawingObject: 'void *', dims: 'int') -> "void":
    return _gLucifer.lucCrossSection_AllocateSampleData(drawingObject, dims)
lucCrossSection_AllocateSampleData = _gLucifer.lucCrossSection_AllocateSampleData

def lucCrossSection_SampleField(drawingObject: 'void *', reverse: 'Bool') -> "void":
    return _gLucifer.lucCrossSection_SampleField(drawingObject, reverse)
lucCrossSection_SampleField = _gLucifer.lucCrossSection_SampleField

def lucCrossSection_SampleMesh(drawingObject: 'void *', reverse: 'Bool') -> "void":
    return _gLucifer.lucCrossSection_SampleMesh(drawingObject, reverse)
lucCrossSection_SampleMesh = _gLucifer.lucCrossSection_SampleMesh

def lucCrossSection_FreeSampleData(drawingObject: 'void *') -> "void":
    return _gLucifer.lucCrossSection_FreeSampleData(drawingObject)
lucCrossSection_FreeSampleData = _gLucifer.lucCrossSection_FreeSampleData
class lucSwarmViewer_cppdata(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    fn_colour = _swig_property(_gLucifer.lucSwarmViewer_cppdata_fn_colour_get, _gLucifer.lucSwarmViewer_cppdata_fn_colour_set)
    func_colour = _swig_property(_gLucifer.lucSwarmViewer_cppdata_func_colour_get, _gLucifer.lucSwarmViewer_cppdata_func_colour_set)
    fn_mask = _swig_property(_gLucifer.lucSwarmViewer_cppdata_fn_mask_get, _gLucifer.lucSwarmViewer_cppdata_fn_mask_set)
    func_mask = _swig_property(_gLucifer.lucSwarmViewer_cppdata_func_mask_get, _gLucifer.lucSwarmViewer_cppdata_func_mask_set)
    fn_size = _swig_property(_gLucifer.lucSwarmViewer_cppdata_fn_size_get, _gLucifer.lucSwarmViewer_cppdata_fn_size_set)
    func_size = _swig_property(_gLucifer.lucSwarmViewer_cppdata_func_size_get, _gLucifer.lucSwarmViewer_cppdata_func_size_set)
    fn_opacity = _swig_property(_gLucifer.lucSwarmViewer_cppdata_fn_opacity_get, _gLucifer.lucSwarmViewer_cppdata_fn_opacity_set)
    func_opacity = _swig_property(_gLucifer.lucSwarmViewer_cppdata_func_opacity_get, _gLucifer.lucSwarmViewer_cppdata_func_opacity_set)

    def __init__(self):
        _gLucifer.lucSwarmViewer_cppdata_swiginit(self, _gLucifer.new_lucSwarmViewer_cppdata())
    __swig_destroy__ = _gLucifer.delete_lucSwarmViewer_cppdata
lucSwarmViewer_cppdata_swigregister = _gLucifer.lucSwarmViewer_cppdata_swigregister
lucSwarmViewer_cppdata_swigregister(lucSwarmViewer_cppdata)


def _lucSwarmViewer_SetFn(_self: 'void *', fn_colour: 'Fn::Function *', fn_mask: 'Fn::Function *', fn_size: 'Fn::Function *', fn_opacity: 'Fn::Function *') -> "void":
    return _gLucifer._lucSwarmViewer_SetFn(_self, fn_colour, fn_mask, fn_size, fn_opacity)
_lucSwarmViewer_SetFn = _gLucifer._lucSwarmViewer_SetFn
class lucSwarmViewer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_gLucifer.lucSwarmViewer__sizeOfSelf_get, _gLucifer.lucSwarmViewer__sizeOfSelf_set)
    _deleteSelf = _swig_property(_gLucifer.lucSwarmViewer__deleteSelf_get, _gLucifer.lucSwarmViewer__deleteSelf_set)
    type = _swig_property(_gLucifer.lucSwarmViewer_type_get, _gLucifer.lucSwarmViewer_type_set)
    nRefs = _swig_property(_gLucifer.lucSwarmViewer_nRefs_get, _gLucifer.lucSwarmViewer_nRefs_set)
    locked = _swig_property(_gLucifer.lucSwarmViewer_locked_get, _gLucifer.lucSwarmViewer_locked_set)
    _delete = _swig_property(_gLucifer.lucSwarmViewer__delete_get, _gLucifer.lucSwarmViewer__delete_set)
    _print = _swig_property(_gLucifer.lucSwarmViewer__print_get, _gLucifer.lucSwarmViewer__print_set)
    _copy = _swig_property(_gLucifer.lucSwarmViewer__copy_get, _gLucifer.lucSwarmViewer__copy_set)
    name = _swig_property(_gLucifer.lucSwarmViewer_name_get, _gLucifer.lucSwarmViewer_name_set)
    nameAllocationType = _swig_property(_gLucifer.lucSwarmViewer_nameAllocationType_get, _gLucifer.lucSwarmViewer_nameAllocationType_set)
    _defaultConstructor = _swig_property(_gLucifer.lucSwarmViewer__defaultConstructor_get, _gLucifer.lucSwarmViewer__defaultConstructor_set)
    _construct = _swig_property(_gLucifer.lucSwarmViewer__construct_get, _gLucifer.lucSwarmViewer__construct_set)
    _build = _swig_property(_gLucifer.lucSwarmViewer__build_get, _gLucifer.lucSwarmViewer__build_set)
    _initialise = _swig_property(_gLucifer.lucSwarmViewer__initialise_get, _gLucifer.lucSwarmViewer__initialise_set)
    _execute = _swig_property(_gLucifer.lucSwarmViewer__execute_get, _gLucifer.lucSwarmViewer__execute_set)
    _destroy = _swig_property(_gLucifer.lucSwarmViewer__destroy_get, _gLucifer.lucSwarmViewer__destroy_set)
    isConstructed = _swig_property(_gLucifer.lucSwarmViewer_isConstructed_get, _gLucifer.lucSwarmViewer_isConstructed_set)
    isBuilt = _swig_property(_gLucifer.lucSwarmViewer_isBuilt_get, _gLucifer.lucSwarmViewer_isBuilt_set)
    isInitialised = _swig_property(_gLucifer.lucSwarmViewer_isInitialised_get, _gLucifer.lucSwarmViewer_isInitialised_set)
    hasExecuted = _swig_property(_gLucifer.lucSwarmViewer_hasExecuted_get, _gLucifer.lucSwarmViewer_hasExecuted_set)
    isDestroyed = _swig_property(_gLucifer.lucSwarmViewer_isDestroyed_get, _gLucifer.lucSwarmViewer_isDestroyed_set)
    constructType = _swig_property(_gLucifer.lucSwarmViewer_constructType_get, _gLucifer.lucSwarmViewer_constructType_set)
    buildType = _swig_property(_gLucifer.lucSwarmViewer_buildType_get, _gLucifer.lucSwarmViewer_buildType_set)
    initialiseType = _swig_property(_gLucifer.lucSwarmViewer_initialiseType_get, _gLucifer.lucSwarmViewer_initialiseType_set)
    executeType = _swig_property(_gLucifer.lucSwarmViewer_executeType_get, _gLucifer.lucSwarmViewer_executeType_set)
    destroyType = _swig_property(_gLucifer.lucSwarmViewer_destroyType_get, _gLucifer.lucSwarmViewer_destroyType_set)
    context = _swig_property(_gLucifer.lucSwarmViewer_context_get, _gLucifer.lucSwarmViewer_context_set)
    _setup = _swig_property(_gLucifer.lucSwarmViewer__setup_get, _gLucifer.lucSwarmViewer__setup_set)
    _draw = _swig_property(_gLucifer.lucSwarmViewer__draw_get, _gLucifer.lucSwarmViewer__draw_set)
    _cleanUp = _swig_property(_gLucifer.lucSwarmViewer__cleanUp_get, _gLucifer.lucSwarmViewer__cleanUp_set)
    needsToCleanUp = _swig_property(_gLucifer.lucSwarmViewer_needsToCleanUp_get, _gLucifer.lucSwarmViewer_needsToCleanUp_set)
    needsToDraw = _swig_property(_gLucifer.lucSwarmViewer_needsToDraw_get, _gLucifer.lucSwarmViewer_needsToDraw_set)
    depthSort = _swig_property(_gLucifer.lucSwarmViewer_depthSort_get, _gLucifer.lucSwarmViewer_depthSort_set)
    position = _swig_property(_gLucifer.lucSwarmViewer_position_get, _gLucifer.lucSwarmViewer_position_set)
    disabled = _swig_property(_gLucifer.lucSwarmViewer_disabled_get, _gLucifer.lucSwarmViewer_disabled_set)
    colourMap = _swig_property(_gLucifer.lucSwarmViewer_colourMap_get, _gLucifer.lucSwarmViewer_colourMap_set)
    colour = _swig_property(_gLucifer.lucSwarmViewer_colour_get, _gLucifer.lucSwarmViewer_colour_set)
    opacity = _swig_property(_gLucifer.lucSwarmViewer_opacity_get, _gLucifer.lucSwarmViewer_opacity_set)
    id = _swig_property(_gLucifer.lucSwarmViewer_id_get, _gLucifer.lucSwarmViewer_id_set)
    properties = _swig_property(_gLucifer.lucSwarmViewer_properties_get, _gLucifer.lucSwarmViewer_properties_set)
    comm = _swig_property(_gLucifer.lucSwarmViewer_comm_get, _gLucifer.lucSwarmViewer_comm_set)
    rank = _swig_property(_gLucifer.lucSwarmViewer_rank_get, _gLucifer.lucSwarmViewer_rank_set)
    nproc = _swig_property(_gLucifer.lucSwarmViewer_nproc_get, _gLucifer.lucSwarmViewer_nproc_set)
    _plotParticle = _swig_property(_gLucifer.lucSwarmViewer__plotParticle_get, _gLucifer.lucSwarmViewer__plotParticle_set)
    _setParticleColour = _swig_property(_gLucifer.lucSwarmViewer__setParticleColour_get, _gLucifer.lucSwarmViewer__setParticleColour_set)
    swarm = _swig_property(_gLucifer.lucSwarmViewer_swarm_get, _gLucifer.lucSwarmViewer_swarm_set)
    opacityColourMap = _swig_property(_gLucifer.lucSwarmViewer_opacityColourMap_get, _gLucifer.lucSwarmViewer_opacityColourMap_set)
    geomType = _swig_property(_gLucifer.lucSwarmViewer_geomType_get, _gLucifer.lucSwarmViewer_geomType_set)
    cppdata = _swig_property(_gLucifer.lucSwarmViewer_cppdata_get, _gLucifer.lucSwarmViewer_cppdata_set)

    def __init__(self):
        _gLucifer.lucSwarmViewer_swiginit(self, _gLucifer.new_lucSwarmViewer())
    __swig_destroy__ = _gLucifer.delete_lucSwarmViewer
lucSwarmViewer_swigregister = _gLucifer.lucSwarmViewer_swigregister
lucSwarmViewer_swigregister(lucSwarmViewer)
lucSwarmViewer_Type = cvar.lucSwarmViewer_Type


def _lucSwarmViewer_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _setup: 'lucDrawingObject_SetupFunction *', _draw: 'lucDrawingObject_DrawFunction *', _cleanUp: 'lucDrawingObject_CleanUpFunction *', _plotParticle: 'lucSwarmViewer_PlotParticleFunction *', _setParticleColour: 'lucSwarmViewer_SetParticleColourFunction *') -> "lucSwarmViewer *":
    return _gLucifer._lucSwarmViewer_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _setup, _draw, _cleanUp, _plotParticle, _setParticleColour)
_lucSwarmViewer_New = _gLucifer._lucSwarmViewer_New

def _lucSwarmViewer_Delete(drawingObject: 'void *') -> "void":
    return _gLucifer._lucSwarmViewer_Delete(drawingObject)
_lucSwarmViewer_Delete = _gLucifer._lucSwarmViewer_Delete

def _lucSwarmViewer_Print(drawingObject: 'void *', stream: 'Stream *') -> "void":
    return _gLucifer._lucSwarmViewer_Print(drawingObject, stream)
_lucSwarmViewer_Print = _gLucifer._lucSwarmViewer_Print

def _lucSwarmViewer_Copy(drawingObject: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _gLucifer._lucSwarmViewer_Copy(drawingObject, dest, deep, nameExt, ptrMap)
_lucSwarmViewer_Copy = _gLucifer._lucSwarmViewer_Copy

def _lucSwarmViewer_DefaultNew(name: 'Name') -> "void *":
    return _gLucifer._lucSwarmViewer_DefaultNew(name)
_lucSwarmViewer_DefaultNew = _gLucifer._lucSwarmViewer_DefaultNew

def _lucSwarmViewer_AssignFromXML(drawingObject: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer._lucSwarmViewer_AssignFromXML(drawingObject, cf, data)
_lucSwarmViewer_AssignFromXML = _gLucifer._lucSwarmViewer_AssignFromXML

def _lucSwarmViewer_Build(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucSwarmViewer_Build(drawingObject, data)
_lucSwarmViewer_Build = _gLucifer._lucSwarmViewer_Build

def _lucSwarmViewer_Initialise(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucSwarmViewer_Initialise(drawingObject, data)
_lucSwarmViewer_Initialise = _gLucifer._lucSwarmViewer_Initialise

def _lucSwarmViewer_Execute(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucSwarmViewer_Execute(drawingObject, data)
_lucSwarmViewer_Execute = _gLucifer._lucSwarmViewer_Execute

def _lucSwarmViewer_Destroy(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucSwarmViewer_Destroy(drawingObject, data)
_lucSwarmViewer_Destroy = _gLucifer._lucSwarmViewer_Destroy

def _lucSwarmViewer_Setup(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucSwarmViewer_Setup(drawingObject, database, _context)
_lucSwarmViewer_Setup = _gLucifer._lucSwarmViewer_Setup

def _lucSwarmViewer_Draw(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucSwarmViewer_Draw(drawingObject, database, _context)
_lucSwarmViewer_Draw = _gLucifer._lucSwarmViewer_Draw

def lucSwarmViewer_SetColourComponent(object: 'void *', database: 'lucDatabase *', var: 'SwarmVariable', lParticle_I: 'Particle_Index', type: 'lucGeometryDataType', colourMap: 'lucColourMap *') -> "void":
    return _gLucifer.lucSwarmViewer_SetColourComponent(object, database, var, lParticle_I, type, colourMap)
lucSwarmViewer_SetColourComponent = _gLucifer.lucSwarmViewer_SetColourComponent

def _lucSwarmViewer_SetParticleColour(drawingObject: 'void *', database: 'lucDatabase *', lParticle_I: 'Particle_Index') -> "void":
    return _gLucifer._lucSwarmViewer_SetParticleColour(drawingObject, database, lParticle_I)
_lucSwarmViewer_SetParticleColour = _gLucifer._lucSwarmViewer_SetParticleColour

def _lucSwarmViewer_PlotParticle(drawingObject: 'void *', database: 'lucDatabase *', lParticle_I: 'Particle_Index') -> "void":
    return _gLucifer._lucSwarmViewer_PlotParticle(drawingObject, database, lParticle_I)
_lucSwarmViewer_PlotParticle = _gLucifer._lucSwarmViewer_PlotParticle

def lucSwarmViewer_GetScalar(variable: 'SwarmVariable', lParticle_I: 'Particle_Index', defaultVal: 'float') -> "float":
    return _gLucifer.lucSwarmViewer_GetScalar(variable, lParticle_I, defaultVal)
lucSwarmViewer_GetScalar = _gLucifer.lucSwarmViewer_GetScalar

def lucSwarmViewer_InitialiseVariable(object: 'void *', variableName: 'Name', scalarRequired: 'Bool', data: 'void *') -> "SwarmVariable *":
    return _gLucifer.lucSwarmViewer_InitialiseVariable(object, variableName, scalarRequired, data)
lucSwarmViewer_InitialiseVariable = _gLucifer.lucSwarmViewer_InitialiseVariable

def lucSwarmViewer_UpdateVariables(drawingObject: 'void *') -> "void":
    return _gLucifer.lucSwarmViewer_UpdateVariables(drawingObject)
lucSwarmViewer_UpdateVariables = _gLucifer.lucSwarmViewer_UpdateVariables
class lucVectorArrows(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_gLucifer.lucVectorArrows__sizeOfSelf_get, _gLucifer.lucVectorArrows__sizeOfSelf_set)
    _deleteSelf = _swig_property(_gLucifer.lucVectorArrows__deleteSelf_get, _gLucifer.lucVectorArrows__deleteSelf_set)
    type = _swig_property(_gLucifer.lucVectorArrows_type_get, _gLucifer.lucVectorArrows_type_set)
    nRefs = _swig_property(_gLucifer.lucVectorArrows_nRefs_get, _gLucifer.lucVectorArrows_nRefs_set)
    locked = _swig_property(_gLucifer.lucVectorArrows_locked_get, _gLucifer.lucVectorArrows_locked_set)
    _delete = _swig_property(_gLucifer.lucVectorArrows__delete_get, _gLucifer.lucVectorArrows__delete_set)
    _print = _swig_property(_gLucifer.lucVectorArrows__print_get, _gLucifer.lucVectorArrows__print_set)
    _copy = _swig_property(_gLucifer.lucVectorArrows__copy_get, _gLucifer.lucVectorArrows__copy_set)
    name = _swig_property(_gLucifer.lucVectorArrows_name_get, _gLucifer.lucVectorArrows_name_set)
    nameAllocationType = _swig_property(_gLucifer.lucVectorArrows_nameAllocationType_get, _gLucifer.lucVectorArrows_nameAllocationType_set)
    _defaultConstructor = _swig_property(_gLucifer.lucVectorArrows__defaultConstructor_get, _gLucifer.lucVectorArrows__defaultConstructor_set)
    _construct = _swig_property(_gLucifer.lucVectorArrows__construct_get, _gLucifer.lucVectorArrows__construct_set)
    _build = _swig_property(_gLucifer.lucVectorArrows__build_get, _gLucifer.lucVectorArrows__build_set)
    _initialise = _swig_property(_gLucifer.lucVectorArrows__initialise_get, _gLucifer.lucVectorArrows__initialise_set)
    _execute = _swig_property(_gLucifer.lucVectorArrows__execute_get, _gLucifer.lucVectorArrows__execute_set)
    _destroy = _swig_property(_gLucifer.lucVectorArrows__destroy_get, _gLucifer.lucVectorArrows__destroy_set)
    isConstructed = _swig_property(_gLucifer.lucVectorArrows_isConstructed_get, _gLucifer.lucVectorArrows_isConstructed_set)
    isBuilt = _swig_property(_gLucifer.lucVectorArrows_isBuilt_get, _gLucifer.lucVectorArrows_isBuilt_set)
    isInitialised = _swig_property(_gLucifer.lucVectorArrows_isInitialised_get, _gLucifer.lucVectorArrows_isInitialised_set)
    hasExecuted = _swig_property(_gLucifer.lucVectorArrows_hasExecuted_get, _gLucifer.lucVectorArrows_hasExecuted_set)
    isDestroyed = _swig_property(_gLucifer.lucVectorArrows_isDestroyed_get, _gLucifer.lucVectorArrows_isDestroyed_set)
    constructType = _swig_property(_gLucifer.lucVectorArrows_constructType_get, _gLucifer.lucVectorArrows_constructType_set)
    buildType = _swig_property(_gLucifer.lucVectorArrows_buildType_get, _gLucifer.lucVectorArrows_buildType_set)
    initialiseType = _swig_property(_gLucifer.lucVectorArrows_initialiseType_get, _gLucifer.lucVectorArrows_initialiseType_set)
    executeType = _swig_property(_gLucifer.lucVectorArrows_executeType_get, _gLucifer.lucVectorArrows_executeType_set)
    destroyType = _swig_property(_gLucifer.lucVectorArrows_destroyType_get, _gLucifer.lucVectorArrows_destroyType_set)
    context = _swig_property(_gLucifer.lucVectorArrows_context_get, _gLucifer.lucVectorArrows_context_set)
    _setup = _swig_property(_gLucifer.lucVectorArrows__setup_get, _gLucifer.lucVectorArrows__setup_set)
    _draw = _swig_property(_gLucifer.lucVectorArrows__draw_get, _gLucifer.lucVectorArrows__draw_set)
    _cleanUp = _swig_property(_gLucifer.lucVectorArrows__cleanUp_get, _gLucifer.lucVectorArrows__cleanUp_set)
    needsToCleanUp = _swig_property(_gLucifer.lucVectorArrows_needsToCleanUp_get, _gLucifer.lucVectorArrows_needsToCleanUp_set)
    needsToDraw = _swig_property(_gLucifer.lucVectorArrows_needsToDraw_get, _gLucifer.lucVectorArrows_needsToDraw_set)
    depthSort = _swig_property(_gLucifer.lucVectorArrows_depthSort_get, _gLucifer.lucVectorArrows_depthSort_set)
    position = _swig_property(_gLucifer.lucVectorArrows_position_get, _gLucifer.lucVectorArrows_position_set)
    disabled = _swig_property(_gLucifer.lucVectorArrows_disabled_get, _gLucifer.lucVectorArrows_disabled_set)
    colourMap = _swig_property(_gLucifer.lucVectorArrows_colourMap_get, _gLucifer.lucVectorArrows_colourMap_set)
    colour = _swig_property(_gLucifer.lucVectorArrows_colour_get, _gLucifer.lucVectorArrows_colour_set)
    opacity = _swig_property(_gLucifer.lucVectorArrows_opacity_get, _gLucifer.lucVectorArrows_opacity_set)
    id = _swig_property(_gLucifer.lucVectorArrows_id_get, _gLucifer.lucVectorArrows_id_set)
    properties = _swig_property(_gLucifer.lucVectorArrows_properties_get, _gLucifer.lucVectorArrows_properties_set)
    comm = _swig_property(_gLucifer.lucVectorArrows_comm_get, _gLucifer.lucVectorArrows_comm_set)
    rank = _swig_property(_gLucifer.lucVectorArrows_rank_get, _gLucifer.lucVectorArrows_rank_set)
    nproc = _swig_property(_gLucifer.lucVectorArrows_nproc_get, _gLucifer.lucVectorArrows_nproc_set)
    mesh = _swig_property(_gLucifer.lucVectorArrows_mesh_get, _gLucifer.lucVectorArrows_mesh_set)
    value = _swig_property(_gLucifer.lucVectorArrows_value_get, _gLucifer.lucVectorArrows_value_set)
    defaultResolution = _swig_property(_gLucifer.lucVectorArrows_defaultResolution_get, _gLucifer.lucVectorArrows_defaultResolution_set)
    resolutionA = _swig_property(_gLucifer.lucVectorArrows_resolutionA_get, _gLucifer.lucVectorArrows_resolutionA_set)
    resolutionB = _swig_property(_gLucifer.lucVectorArrows_resolutionB_get, _gLucifer.lucVectorArrows_resolutionB_set)
    onMesh = _swig_property(_gLucifer.lucVectorArrows_onMesh_get, _gLucifer.lucVectorArrows_onMesh_set)
    normal = _swig_property(_gLucifer.lucVectorArrows_normal_get, _gLucifer.lucVectorArrows_normal_set)
    coord1 = _swig_property(_gLucifer.lucVectorArrows_coord1_get, _gLucifer.lucVectorArrows_coord1_set)
    coord2 = _swig_property(_gLucifer.lucVectorArrows_coord2_get, _gLucifer.lucVectorArrows_coord2_set)
    coord3 = _swig_property(_gLucifer.lucVectorArrows_coord3_get, _gLucifer.lucVectorArrows_coord3_set)
    axis = _swig_property(_gLucifer.lucVectorArrows_axis_get, _gLucifer.lucVectorArrows_axis_set)
    axis1 = _swig_property(_gLucifer.lucVectorArrows_axis1_get, _gLucifer.lucVectorArrows_axis1_set)
    axis2 = _swig_property(_gLucifer.lucVectorArrows_axis2_get, _gLucifer.lucVectorArrows_axis2_set)
    isSet = _swig_property(_gLucifer.lucVectorArrows_isSet_get, _gLucifer.lucVectorArrows_isSet_set)
    interpolate = _swig_property(_gLucifer.lucVectorArrows_interpolate_get, _gLucifer.lucVectorArrows_interpolate_set)
    axisAligned = _swig_property(_gLucifer.lucVectorArrows_axisAligned_get, _gLucifer.lucVectorArrows_axisAligned_set)
    gatherData = _swig_property(_gLucifer.lucVectorArrows_gatherData_get, _gLucifer.lucVectorArrows_gatherData_set)
    offsetEdges = _swig_property(_gLucifer.lucVectorArrows_offsetEdges_get, _gLucifer.lucVectorArrows_offsetEdges_set)
    vertices = _swig_property(_gLucifer.lucVectorArrows_vertices_get, _gLucifer.lucVectorArrows_vertices_set)
    values = _swig_property(_gLucifer.lucVectorArrows_values_get, _gLucifer.lucVectorArrows_values_set)
    min = _swig_property(_gLucifer.lucVectorArrows_min_get, _gLucifer.lucVectorArrows_min_set)
    max = _swig_property(_gLucifer.lucVectorArrows_max_get, _gLucifer.lucVectorArrows_max_set)
    fieldComponentCount = _swig_property(_gLucifer.lucVectorArrows_fieldComponentCount_get, _gLucifer.lucVectorArrows_fieldComponentCount_set)
    cppdata = _swig_property(_gLucifer.lucVectorArrows_cppdata_get, _gLucifer.lucVectorArrows_cppdata_set)
    dim = _swig_property(_gLucifer.lucVectorArrows_dim_get, _gLucifer.lucVectorArrows_dim_set)
    vertexGridHandle = _swig_property(_gLucifer.lucVectorArrows_vertexGridHandle_get, _gLucifer.lucVectorArrows_vertexGridHandle_set)
    dims = _swig_property(_gLucifer.lucVectorArrows_dims_get, _gLucifer.lucVectorArrows_dims_set)
    fieldDim = _swig_property(_gLucifer.lucVectorArrows_fieldDim_get, _gLucifer.lucVectorArrows_fieldDim_set)
    valueMin = _swig_property(_gLucifer.lucVectorArrows_valueMin_get, _gLucifer.lucVectorArrows_valueMin_set)
    valueMax = _swig_property(_gLucifer.lucVectorArrows_valueMax_get, _gLucifer.lucVectorArrows_valueMax_set)
    resolution = _swig_property(_gLucifer.lucVectorArrows_resolution_get, _gLucifer.lucVectorArrows_resolution_set)
    maximum = _swig_property(_gLucifer.lucVectorArrows_maximum_get, _gLucifer.lucVectorArrows_maximum_set)
    dynamicRange = _swig_property(_gLucifer.lucVectorArrows_dynamicRange_get, _gLucifer.lucVectorArrows_dynamicRange_set)

    def __init__(self):
        _gLucifer.lucVectorArrows_swiginit(self, _gLucifer.new_lucVectorArrows())
    __swig_destroy__ = _gLucifer.delete_lucVectorArrows
lucVectorArrows_swigregister = _gLucifer.lucVectorArrows_swigregister
lucVectorArrows_swigregister(lucVectorArrows)
lucVectorArrows_Type = cvar.lucVectorArrows_Type


def _lucVectorArrows_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _setup: 'lucDrawingObject_SetupFunction *', _draw: 'lucDrawingObject_DrawFunction *', _cleanUp: 'lucDrawingObject_CleanUpFunction *') -> "lucVectorArrows *":
    return _gLucifer._lucVectorArrows_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _setup, _draw, _cleanUp)
_lucVectorArrows_New = _gLucifer._lucVectorArrows_New

def _lucVectorArrows_Delete(drawingObject: 'void *') -> "void":
    return _gLucifer._lucVectorArrows_Delete(drawingObject)
_lucVectorArrows_Delete = _gLucifer._lucVectorArrows_Delete

def _lucVectorArrows_Print(drawingObject: 'void *', stream: 'Stream *') -> "void":
    return _gLucifer._lucVectorArrows_Print(drawingObject, stream)
_lucVectorArrows_Print = _gLucifer._lucVectorArrows_Print

def _lucVectorArrows_DefaultNew(name: 'Name') -> "void *":
    return _gLucifer._lucVectorArrows_DefaultNew(name)
_lucVectorArrows_DefaultNew = _gLucifer._lucVectorArrows_DefaultNew

def _lucVectorArrows_AssignFromXML(drawingObject: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer._lucVectorArrows_AssignFromXML(drawingObject, cf, data)
_lucVectorArrows_AssignFromXML = _gLucifer._lucVectorArrows_AssignFromXML

def _lucVectorArrows_Build(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucVectorArrows_Build(drawingObject, data)
_lucVectorArrows_Build = _gLucifer._lucVectorArrows_Build

def _lucVectorArrows_Initialise(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucVectorArrows_Initialise(drawingObject, data)
_lucVectorArrows_Initialise = _gLucifer._lucVectorArrows_Initialise

def _lucVectorArrows_Execute(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucVectorArrows_Execute(drawingObject, data)
_lucVectorArrows_Execute = _gLucifer._lucVectorArrows_Execute

def _lucVectorArrows_Destroy(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucVectorArrows_Destroy(drawingObject, data)
_lucVectorArrows_Destroy = _gLucifer._lucVectorArrows_Destroy

def _lucVectorArrows_Draw(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucVectorArrows_Draw(drawingObject, database, _context)
_lucVectorArrows_Draw = _gLucifer._lucVectorArrows_Draw

def _lucVectorArrows_DrawCrossSection(drawingObject: 'void *', database: 'lucDatabase *') -> "void":
    return _gLucifer._lucVectorArrows_DrawCrossSection(drawingObject, database)
_lucVectorArrows_DrawCrossSection = _gLucifer._lucVectorArrows_DrawCrossSection

def _lucVectorArrows_DrawMeshCrossSection(drawingObject: 'void *', database: 'lucDatabase *') -> "void":
    return _gLucifer._lucVectorArrows_DrawMeshCrossSection(drawingObject, database)
_lucVectorArrows_DrawMeshCrossSection = _gLucifer._lucVectorArrows_DrawMeshCrossSection
class lucMeshViewer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_gLucifer.lucMeshViewer__sizeOfSelf_get, _gLucifer.lucMeshViewer__sizeOfSelf_set)
    _deleteSelf = _swig_property(_gLucifer.lucMeshViewer__deleteSelf_get, _gLucifer.lucMeshViewer__deleteSelf_set)
    type = _swig_property(_gLucifer.lucMeshViewer_type_get, _gLucifer.lucMeshViewer_type_set)
    nRefs = _swig_property(_gLucifer.lucMeshViewer_nRefs_get, _gLucifer.lucMeshViewer_nRefs_set)
    locked = _swig_property(_gLucifer.lucMeshViewer_locked_get, _gLucifer.lucMeshViewer_locked_set)
    _delete = _swig_property(_gLucifer.lucMeshViewer__delete_get, _gLucifer.lucMeshViewer__delete_set)
    _print = _swig_property(_gLucifer.lucMeshViewer__print_get, _gLucifer.lucMeshViewer__print_set)
    _copy = _swig_property(_gLucifer.lucMeshViewer__copy_get, _gLucifer.lucMeshViewer__copy_set)
    name = _swig_property(_gLucifer.lucMeshViewer_name_get, _gLucifer.lucMeshViewer_name_set)
    nameAllocationType = _swig_property(_gLucifer.lucMeshViewer_nameAllocationType_get, _gLucifer.lucMeshViewer_nameAllocationType_set)
    _defaultConstructor = _swig_property(_gLucifer.lucMeshViewer__defaultConstructor_get, _gLucifer.lucMeshViewer__defaultConstructor_set)
    _construct = _swig_property(_gLucifer.lucMeshViewer__construct_get, _gLucifer.lucMeshViewer__construct_set)
    _build = _swig_property(_gLucifer.lucMeshViewer__build_get, _gLucifer.lucMeshViewer__build_set)
    _initialise = _swig_property(_gLucifer.lucMeshViewer__initialise_get, _gLucifer.lucMeshViewer__initialise_set)
    _execute = _swig_property(_gLucifer.lucMeshViewer__execute_get, _gLucifer.lucMeshViewer__execute_set)
    _destroy = _swig_property(_gLucifer.lucMeshViewer__destroy_get, _gLucifer.lucMeshViewer__destroy_set)
    isConstructed = _swig_property(_gLucifer.lucMeshViewer_isConstructed_get, _gLucifer.lucMeshViewer_isConstructed_set)
    isBuilt = _swig_property(_gLucifer.lucMeshViewer_isBuilt_get, _gLucifer.lucMeshViewer_isBuilt_set)
    isInitialised = _swig_property(_gLucifer.lucMeshViewer_isInitialised_get, _gLucifer.lucMeshViewer_isInitialised_set)
    hasExecuted = _swig_property(_gLucifer.lucMeshViewer_hasExecuted_get, _gLucifer.lucMeshViewer_hasExecuted_set)
    isDestroyed = _swig_property(_gLucifer.lucMeshViewer_isDestroyed_get, _gLucifer.lucMeshViewer_isDestroyed_set)
    constructType = _swig_property(_gLucifer.lucMeshViewer_constructType_get, _gLucifer.lucMeshViewer_constructType_set)
    buildType = _swig_property(_gLucifer.lucMeshViewer_buildType_get, _gLucifer.lucMeshViewer_buildType_set)
    initialiseType = _swig_property(_gLucifer.lucMeshViewer_initialiseType_get, _gLucifer.lucMeshViewer_initialiseType_set)
    executeType = _swig_property(_gLucifer.lucMeshViewer_executeType_get, _gLucifer.lucMeshViewer_executeType_set)
    destroyType = _swig_property(_gLucifer.lucMeshViewer_destroyType_get, _gLucifer.lucMeshViewer_destroyType_set)
    context = _swig_property(_gLucifer.lucMeshViewer_context_get, _gLucifer.lucMeshViewer_context_set)
    _setup = _swig_property(_gLucifer.lucMeshViewer__setup_get, _gLucifer.lucMeshViewer__setup_set)
    _draw = _swig_property(_gLucifer.lucMeshViewer__draw_get, _gLucifer.lucMeshViewer__draw_set)
    _cleanUp = _swig_property(_gLucifer.lucMeshViewer__cleanUp_get, _gLucifer.lucMeshViewer__cleanUp_set)
    needsToCleanUp = _swig_property(_gLucifer.lucMeshViewer_needsToCleanUp_get, _gLucifer.lucMeshViewer_needsToCleanUp_set)
    needsToDraw = _swig_property(_gLucifer.lucMeshViewer_needsToDraw_get, _gLucifer.lucMeshViewer_needsToDraw_set)
    depthSort = _swig_property(_gLucifer.lucMeshViewer_depthSort_get, _gLucifer.lucMeshViewer_depthSort_set)
    position = _swig_property(_gLucifer.lucMeshViewer_position_get, _gLucifer.lucMeshViewer_position_set)
    disabled = _swig_property(_gLucifer.lucMeshViewer_disabled_get, _gLucifer.lucMeshViewer_disabled_set)
    colourMap = _swig_property(_gLucifer.lucMeshViewer_colourMap_get, _gLucifer.lucMeshViewer_colourMap_set)
    colour = _swig_property(_gLucifer.lucMeshViewer_colour_get, _gLucifer.lucMeshViewer_colour_set)
    opacity = _swig_property(_gLucifer.lucMeshViewer_opacity_get, _gLucifer.lucMeshViewer_opacity_set)
    id = _swig_property(_gLucifer.lucMeshViewer_id_get, _gLucifer.lucMeshViewer_id_set)
    properties = _swig_property(_gLucifer.lucMeshViewer_properties_get, _gLucifer.lucMeshViewer_properties_set)
    comm = _swig_property(_gLucifer.lucMeshViewer_comm_get, _gLucifer.lucMeshViewer_comm_set)
    rank = _swig_property(_gLucifer.lucMeshViewer_rank_get, _gLucifer.lucMeshViewer_rank_set)
    nproc = _swig_property(_gLucifer.lucMeshViewer_nproc_get, _gLucifer.lucMeshViewer_nproc_set)
    mesh = _swig_property(_gLucifer.lucMeshViewer_mesh_get, _gLucifer.lucMeshViewer_mesh_set)
    colourVariable = _swig_property(_gLucifer.lucMeshViewer_colourVariable_get, _gLucifer.lucMeshViewer_colourVariable_set)
    nEdges = _swig_property(_gLucifer.lucMeshViewer_nEdges_get, _gLucifer.lucMeshViewer_nEdges_set)
    edges = _swig_property(_gLucifer.lucMeshViewer_edges_get, _gLucifer.lucMeshViewer_edges_set)
    nodeNumbers = _swig_property(_gLucifer.lucMeshViewer_nodeNumbers_get, _gLucifer.lucMeshViewer_nodeNumbers_set)
    elementNumbers = _swig_property(_gLucifer.lucMeshViewer_elementNumbers_get, _gLucifer.lucMeshViewer_elementNumbers_set)
    displayNodes = _swig_property(_gLucifer.lucMeshViewer_displayNodes_get, _gLucifer.lucMeshViewer_displayNodes_set)
    displayEdges = _swig_property(_gLucifer.lucMeshViewer_displayEdges_get, _gLucifer.lucMeshViewer_displayEdges_set)
    segments = _swig_property(_gLucifer.lucMeshViewer_segments_get, _gLucifer.lucMeshViewer_segments_set)

    def __init__(self):
        _gLucifer.lucMeshViewer_swiginit(self, _gLucifer.new_lucMeshViewer())
    __swig_destroy__ = _gLucifer.delete_lucMeshViewer
lucMeshViewer_swigregister = _gLucifer.lucMeshViewer_swigregister
lucMeshViewer_swigregister(lucMeshViewer)
lucMeshViewer_Type = cvar.lucMeshViewer_Type


def _lucMeshViewer_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _setup: 'lucDrawingObject_SetupFunction *', _draw: 'lucDrawingObject_DrawFunction *', _cleanUp: 'lucDrawingObject_CleanUpFunction *') -> "lucMeshViewer *":
    return _gLucifer._lucMeshViewer_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _setup, _draw, _cleanUp)
_lucMeshViewer_New = _gLucifer._lucMeshViewer_New

def _lucMeshViewer_Delete(drawingObject: 'void *') -> "void":
    return _gLucifer._lucMeshViewer_Delete(drawingObject)
_lucMeshViewer_Delete = _gLucifer._lucMeshViewer_Delete

def _lucMeshViewer_Print(drawingObject: 'void *', stream: 'Stream *') -> "void":
    return _gLucifer._lucMeshViewer_Print(drawingObject, stream)
_lucMeshViewer_Print = _gLucifer._lucMeshViewer_Print

def _lucMeshViewer_Copy(drawingObject: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _gLucifer._lucMeshViewer_Copy(drawingObject, dest, deep, nameExt, ptrMap)
_lucMeshViewer_Copy = _gLucifer._lucMeshViewer_Copy

def _lucMeshViewer_DefaultNew(name: 'Name') -> "void *":
    return _gLucifer._lucMeshViewer_DefaultNew(name)
_lucMeshViewer_DefaultNew = _gLucifer._lucMeshViewer_DefaultNew

def _lucMeshViewer_AssignFromXML(drawingObject: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer._lucMeshViewer_AssignFromXML(drawingObject, cf, data)
_lucMeshViewer_AssignFromXML = _gLucifer._lucMeshViewer_AssignFromXML

def _lucMeshViewer_Build(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucMeshViewer_Build(drawingObject, data)
_lucMeshViewer_Build = _gLucifer._lucMeshViewer_Build

def _lucMeshViewer_Initialise(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucMeshViewer_Initialise(drawingObject, data)
_lucMeshViewer_Initialise = _gLucifer._lucMeshViewer_Initialise

def _lucMeshViewer_Execute(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucMeshViewer_Execute(drawingObject, data)
_lucMeshViewer_Execute = _gLucifer._lucMeshViewer_Execute

def _lucMeshViewer_Destroy(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucMeshViewer_Destroy(drawingObject, data)
_lucMeshViewer_Destroy = _gLucifer._lucMeshViewer_Destroy

def _lucMeshViewer_Setup(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucMeshViewer_Setup(drawingObject, database, _context)
_lucMeshViewer_Setup = _gLucifer._lucMeshViewer_Setup

def _lucMeshViewer_Draw(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucMeshViewer_Draw(drawingObject, database, _context)
_lucMeshViewer_Draw = _gLucifer._lucMeshViewer_Draw

def lucMeshViewer_RenderEdges(arg1: 'lucMeshViewer', database: 'lucDatabase *') -> "void":
    return _gLucifer.lucMeshViewer_RenderEdges(arg1, database)
lucMeshViewer_RenderEdges = _gLucifer.lucMeshViewer_RenderEdges

def lucMeshViewer_PrintAllElementsNumber(drawingObject: 'void *', database: 'lucDatabase *') -> "void":
    return _gLucifer.lucMeshViewer_PrintAllElementsNumber(drawingObject, database)
lucMeshViewer_PrintAllElementsNumber = _gLucifer.lucMeshViewer_PrintAllElementsNumber
class Surface_Triangle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pos = _swig_property(_gLucifer.Surface_Triangle_pos_get, _gLucifer.Surface_Triangle_pos_set)
    value = _swig_property(_gLucifer.Surface_Triangle_value_get, _gLucifer.Surface_Triangle_value_set)
    wall = _swig_property(_gLucifer.Surface_Triangle_wall_get, _gLucifer.Surface_Triangle_wall_set)

    def __init__(self):
        _gLucifer.Surface_Triangle_swiginit(self, _gLucifer.new_Surface_Triangle())
    __swig_destroy__ = _gLucifer.delete_Surface_Triangle
Surface_Triangle_swigregister = _gLucifer.Surface_Triangle_swigregister
Surface_Triangle_swigregister(Surface_Triangle)
lucIsosurface_Type = cvar.lucIsosurface_Type

class Vertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    value = _swig_property(_gLucifer.Vertex_value_get, _gLucifer.Vertex_value_set)
    pos = _swig_property(_gLucifer.Vertex_pos_get, _gLucifer.Vertex_pos_set)
    element_I = _swig_property(_gLucifer.Vertex_element_I_get, _gLucifer.Vertex_element_I_set)

    def __init__(self):
        _gLucifer.Vertex_swiginit(self, _gLucifer.new_Vertex())
    __swig_destroy__ = _gLucifer.delete_Vertex
Vertex_swigregister = _gLucifer.Vertex_swigregister
Vertex_swigregister(Vertex)

class lucIsosurface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_gLucifer.lucIsosurface__sizeOfSelf_get, _gLucifer.lucIsosurface__sizeOfSelf_set)
    _deleteSelf = _swig_property(_gLucifer.lucIsosurface__deleteSelf_get, _gLucifer.lucIsosurface__deleteSelf_set)
    type = _swig_property(_gLucifer.lucIsosurface_type_get, _gLucifer.lucIsosurface_type_set)
    nRefs = _swig_property(_gLucifer.lucIsosurface_nRefs_get, _gLucifer.lucIsosurface_nRefs_set)
    locked = _swig_property(_gLucifer.lucIsosurface_locked_get, _gLucifer.lucIsosurface_locked_set)
    _delete = _swig_property(_gLucifer.lucIsosurface__delete_get, _gLucifer.lucIsosurface__delete_set)
    _print = _swig_property(_gLucifer.lucIsosurface__print_get, _gLucifer.lucIsosurface__print_set)
    _copy = _swig_property(_gLucifer.lucIsosurface__copy_get, _gLucifer.lucIsosurface__copy_set)
    name = _swig_property(_gLucifer.lucIsosurface_name_get, _gLucifer.lucIsosurface_name_set)
    nameAllocationType = _swig_property(_gLucifer.lucIsosurface_nameAllocationType_get, _gLucifer.lucIsosurface_nameAllocationType_set)
    _defaultConstructor = _swig_property(_gLucifer.lucIsosurface__defaultConstructor_get, _gLucifer.lucIsosurface__defaultConstructor_set)
    _construct = _swig_property(_gLucifer.lucIsosurface__construct_get, _gLucifer.lucIsosurface__construct_set)
    _build = _swig_property(_gLucifer.lucIsosurface__build_get, _gLucifer.lucIsosurface__build_set)
    _initialise = _swig_property(_gLucifer.lucIsosurface__initialise_get, _gLucifer.lucIsosurface__initialise_set)
    _execute = _swig_property(_gLucifer.lucIsosurface__execute_get, _gLucifer.lucIsosurface__execute_set)
    _destroy = _swig_property(_gLucifer.lucIsosurface__destroy_get, _gLucifer.lucIsosurface__destroy_set)
    isConstructed = _swig_property(_gLucifer.lucIsosurface_isConstructed_get, _gLucifer.lucIsosurface_isConstructed_set)
    isBuilt = _swig_property(_gLucifer.lucIsosurface_isBuilt_get, _gLucifer.lucIsosurface_isBuilt_set)
    isInitialised = _swig_property(_gLucifer.lucIsosurface_isInitialised_get, _gLucifer.lucIsosurface_isInitialised_set)
    hasExecuted = _swig_property(_gLucifer.lucIsosurface_hasExecuted_get, _gLucifer.lucIsosurface_hasExecuted_set)
    isDestroyed = _swig_property(_gLucifer.lucIsosurface_isDestroyed_get, _gLucifer.lucIsosurface_isDestroyed_set)
    constructType = _swig_property(_gLucifer.lucIsosurface_constructType_get, _gLucifer.lucIsosurface_constructType_set)
    buildType = _swig_property(_gLucifer.lucIsosurface_buildType_get, _gLucifer.lucIsosurface_buildType_set)
    initialiseType = _swig_property(_gLucifer.lucIsosurface_initialiseType_get, _gLucifer.lucIsosurface_initialiseType_set)
    executeType = _swig_property(_gLucifer.lucIsosurface_executeType_get, _gLucifer.lucIsosurface_executeType_set)
    destroyType = _swig_property(_gLucifer.lucIsosurface_destroyType_get, _gLucifer.lucIsosurface_destroyType_set)
    context = _swig_property(_gLucifer.lucIsosurface_context_get, _gLucifer.lucIsosurface_context_set)
    _setup = _swig_property(_gLucifer.lucIsosurface__setup_get, _gLucifer.lucIsosurface__setup_set)
    _draw = _swig_property(_gLucifer.lucIsosurface__draw_get, _gLucifer.lucIsosurface__draw_set)
    _cleanUp = _swig_property(_gLucifer.lucIsosurface__cleanUp_get, _gLucifer.lucIsosurface__cleanUp_set)
    needsToCleanUp = _swig_property(_gLucifer.lucIsosurface_needsToCleanUp_get, _gLucifer.lucIsosurface_needsToCleanUp_set)
    needsToDraw = _swig_property(_gLucifer.lucIsosurface_needsToDraw_get, _gLucifer.lucIsosurface_needsToDraw_set)
    depthSort = _swig_property(_gLucifer.lucIsosurface_depthSort_get, _gLucifer.lucIsosurface_depthSort_set)
    position = _swig_property(_gLucifer.lucIsosurface_position_get, _gLucifer.lucIsosurface_position_set)
    disabled = _swig_property(_gLucifer.lucIsosurface_disabled_get, _gLucifer.lucIsosurface_disabled_set)
    colourMap = _swig_property(_gLucifer.lucIsosurface_colourMap_get, _gLucifer.lucIsosurface_colourMap_set)
    colour = _swig_property(_gLucifer.lucIsosurface_colour_get, _gLucifer.lucIsosurface_colour_set)
    opacity = _swig_property(_gLucifer.lucIsosurface_opacity_get, _gLucifer.lucIsosurface_opacity_set)
    id = _swig_property(_gLucifer.lucIsosurface_id_get, _gLucifer.lucIsosurface_id_set)
    properties = _swig_property(_gLucifer.lucIsosurface_properties_get, _gLucifer.lucIsosurface_properties_set)
    comm = _swig_property(_gLucifer.lucIsosurface_comm_get, _gLucifer.lucIsosurface_comm_set)
    rank = _swig_property(_gLucifer.lucIsosurface_rank_get, _gLucifer.lucIsosurface_rank_set)
    nproc = _swig_property(_gLucifer.lucIsosurface_nproc_get, _gLucifer.lucIsosurface_nproc_set)
    isosurfaceField = _swig_property(_gLucifer.lucIsosurface_isosurfaceField_get, _gLucifer.lucIsosurface_isosurfaceField_set)
    isovalue = _swig_property(_gLucifer.lucIsosurface_isovalue_get, _gLucifer.lucIsosurface_isovalue_set)
    resolution = _swig_property(_gLucifer.lucIsosurface_resolution_get, _gLucifer.lucIsosurface_resolution_set)
    drawWalls = _swig_property(_gLucifer.lucIsosurface_drawWalls_get, _gLucifer.lucIsosurface_drawWalls_set)
    sampleGlobal = _swig_property(_gLucifer.lucIsosurface_sampleGlobal_get, _gLucifer.lucIsosurface_sampleGlobal_set)
    globalMin = _swig_property(_gLucifer.lucIsosurface_globalMin_get, _gLucifer.lucIsosurface_globalMin_set)
    globalMax = _swig_property(_gLucifer.lucIsosurface_globalMax_get, _gLucifer.lucIsosurface_globalMax_set)
    colourField = _swig_property(_gLucifer.lucIsosurface_colourField_get, _gLucifer.lucIsosurface_colourField_set)
    maskField = _swig_property(_gLucifer.lucIsosurface_maskField_get, _gLucifer.lucIsosurface_maskField_set)
    mask = _swig_property(_gLucifer.lucIsosurface_mask_get, _gLucifer.lucIsosurface_mask_set)
    triangleList = _swig_property(_gLucifer.lucIsosurface_triangleList_get, _gLucifer.lucIsosurface_triangleList_set)
    triangleCount = _swig_property(_gLucifer.lucIsosurface_triangleCount_get, _gLucifer.lucIsosurface_triangleCount_set)
    trianglesAlloced = _swig_property(_gLucifer.lucIsosurface_trianglesAlloced_get, _gLucifer.lucIsosurface_trianglesAlloced_set)
    nx = _swig_property(_gLucifer.lucIsosurface_nx_get, _gLucifer.lucIsosurface_nx_set)
    ny = _swig_property(_gLucifer.lucIsosurface_ny_get, _gLucifer.lucIsosurface_ny_set)
    nz = _swig_property(_gLucifer.lucIsosurface_nz_get, _gLucifer.lucIsosurface_nz_set)
    elementRes = _swig_property(_gLucifer.lucIsosurface_elementRes_get, _gLucifer.lucIsosurface_elementRes_set)

    def __init__(self):
        _gLucifer.lucIsosurface_swiginit(self, _gLucifer.new_lucIsosurface())
    __swig_destroy__ = _gLucifer.delete_lucIsosurface
lucIsosurface_swigregister = _gLucifer.lucIsosurface_swigregister
lucIsosurface_swigregister(lucIsosurface)


def _lucIsosurface_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _setup: 'lucDrawingObject_SetupFunction *', _draw: 'lucDrawingObject_DrawFunction *', _cleanUp: 'lucDrawingObject_CleanUpFunction *') -> "lucIsosurface *":
    return _gLucifer._lucIsosurface_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _setup, _draw, _cleanUp)
_lucIsosurface_New = _gLucifer._lucIsosurface_New

def _lucIsosurface_Delete(drawingObject: 'void *') -> "void":
    return _gLucifer._lucIsosurface_Delete(drawingObject)
_lucIsosurface_Delete = _gLucifer._lucIsosurface_Delete

def _lucIsosurface_Print(drawingObject: 'void *', stream: 'Stream *') -> "void":
    return _gLucifer._lucIsosurface_Print(drawingObject, stream)
_lucIsosurface_Print = _gLucifer._lucIsosurface_Print

def _lucIsosurface_DefaultNew(name: 'Name') -> "void *":
    return _gLucifer._lucIsosurface_DefaultNew(name)
_lucIsosurface_DefaultNew = _gLucifer._lucIsosurface_DefaultNew

def _lucIsosurface_AssignFromXML(drawingObject: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer._lucIsosurface_AssignFromXML(drawingObject, cf, data)
_lucIsosurface_AssignFromXML = _gLucifer._lucIsosurface_AssignFromXML

def _lucIsosurface_Build(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucIsosurface_Build(drawingObject, data)
_lucIsosurface_Build = _gLucifer._lucIsosurface_Build

def _lucIsosurface_Initialise(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucIsosurface_Initialise(drawingObject, data)
_lucIsosurface_Initialise = _gLucifer._lucIsosurface_Initialise

def _lucIsosurface_Execute(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucIsosurface_Execute(drawingObject, data)
_lucIsosurface_Execute = _gLucifer._lucIsosurface_Execute

def _lucIsosurface_Destroy(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucIsosurface_Destroy(drawingObject, data)
_lucIsosurface_Destroy = _gLucifer._lucIsosurface_Destroy

def _lucIsosurface_Setup(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucIsosurface_Setup(drawingObject, database, _context)
_lucIsosurface_Setup = _gLucifer._lucIsosurface_Setup

def _lucIsosurface_Write(drawingObject: 'void *', database: 'lucDatabase *', walls: 'Bool') -> "void":
    return _gLucifer._lucIsosurface_Write(drawingObject, database, walls)
_lucIsosurface_Write = _gLucifer._lucIsosurface_Write

def _lucIsosurface_Draw(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucIsosurface_Draw(drawingObject, database, _context)
_lucIsosurface_Draw = _gLucifer._lucIsosurface_Draw

def lucIsosurface_MarchingCubes(arg1: 'lucIsosurface', vertex: 'Vertex ***') -> "void":
    return _gLucifer.lucIsosurface_MarchingCubes(arg1, vertex)
lucIsosurface_MarchingCubes = _gLucifer.lucIsosurface_MarchingCubes

def lucIsosurface_DrawWalls(arg1: 'lucIsosurface', array: 'Vertex ***') -> "void":
    return _gLucifer.lucIsosurface_DrawWalls(arg1, array)
lucIsosurface_DrawWalls = _gLucifer.lucIsosurface_DrawWalls

def lucIsosurface_MarchingRectangles(arg1: 'lucIsosurface', points: 'Vertex **', squareType: 'char') -> "void":
    return _gLucifer.lucIsosurface_MarchingRectangles(arg1, points, squareType)
lucIsosurface_MarchingRectangles = _gLucifer.lucIsosurface_MarchingRectangles

def lucIsosurface_WallElement(arg1: 'lucIsosurface', points: 'Vertex **') -> "void":
    return _gLucifer.lucIsosurface_WallElement(arg1, points)
lucIsosurface_WallElement = _gLucifer.lucIsosurface_WallElement
class labelCoord(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_gLucifer.labelCoord_x_get, _gLucifer.labelCoord_x_set)
    y = _swig_property(_gLucifer.labelCoord_y_get, _gLucifer.labelCoord_y_set)
    z = _swig_property(_gLucifer.labelCoord_z_get, _gLucifer.labelCoord_z_set)
    filled = _swig_property(_gLucifer.labelCoord_filled_get, _gLucifer.labelCoord_filled_set)
    isovalue = _swig_property(_gLucifer.labelCoord_isovalue_get, _gLucifer.labelCoord_isovalue_set)

    def __init__(self):
        _gLucifer.labelCoord_swiginit(self, _gLucifer.new_labelCoord())
    __swig_destroy__ = _gLucifer.delete_labelCoord
labelCoord_swigregister = _gLucifer.labelCoord_swigregister
labelCoord_swigregister(labelCoord)
lucContourCrossSection_Type = cvar.lucContourCrossSection_Type

class lucContourCrossSection(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_gLucifer.lucContourCrossSection__sizeOfSelf_get, _gLucifer.lucContourCrossSection__sizeOfSelf_set)
    _deleteSelf = _swig_property(_gLucifer.lucContourCrossSection__deleteSelf_get, _gLucifer.lucContourCrossSection__deleteSelf_set)
    type = _swig_property(_gLucifer.lucContourCrossSection_type_get, _gLucifer.lucContourCrossSection_type_set)
    nRefs = _swig_property(_gLucifer.lucContourCrossSection_nRefs_get, _gLucifer.lucContourCrossSection_nRefs_set)
    locked = _swig_property(_gLucifer.lucContourCrossSection_locked_get, _gLucifer.lucContourCrossSection_locked_set)
    _delete = _swig_property(_gLucifer.lucContourCrossSection__delete_get, _gLucifer.lucContourCrossSection__delete_set)
    _print = _swig_property(_gLucifer.lucContourCrossSection__print_get, _gLucifer.lucContourCrossSection__print_set)
    _copy = _swig_property(_gLucifer.lucContourCrossSection__copy_get, _gLucifer.lucContourCrossSection__copy_set)
    name = _swig_property(_gLucifer.lucContourCrossSection_name_get, _gLucifer.lucContourCrossSection_name_set)
    nameAllocationType = _swig_property(_gLucifer.lucContourCrossSection_nameAllocationType_get, _gLucifer.lucContourCrossSection_nameAllocationType_set)
    _defaultConstructor = _swig_property(_gLucifer.lucContourCrossSection__defaultConstructor_get, _gLucifer.lucContourCrossSection__defaultConstructor_set)
    _construct = _swig_property(_gLucifer.lucContourCrossSection__construct_get, _gLucifer.lucContourCrossSection__construct_set)
    _build = _swig_property(_gLucifer.lucContourCrossSection__build_get, _gLucifer.lucContourCrossSection__build_set)
    _initialise = _swig_property(_gLucifer.lucContourCrossSection__initialise_get, _gLucifer.lucContourCrossSection__initialise_set)
    _execute = _swig_property(_gLucifer.lucContourCrossSection__execute_get, _gLucifer.lucContourCrossSection__execute_set)
    _destroy = _swig_property(_gLucifer.lucContourCrossSection__destroy_get, _gLucifer.lucContourCrossSection__destroy_set)
    isConstructed = _swig_property(_gLucifer.lucContourCrossSection_isConstructed_get, _gLucifer.lucContourCrossSection_isConstructed_set)
    isBuilt = _swig_property(_gLucifer.lucContourCrossSection_isBuilt_get, _gLucifer.lucContourCrossSection_isBuilt_set)
    isInitialised = _swig_property(_gLucifer.lucContourCrossSection_isInitialised_get, _gLucifer.lucContourCrossSection_isInitialised_set)
    hasExecuted = _swig_property(_gLucifer.lucContourCrossSection_hasExecuted_get, _gLucifer.lucContourCrossSection_hasExecuted_set)
    isDestroyed = _swig_property(_gLucifer.lucContourCrossSection_isDestroyed_get, _gLucifer.lucContourCrossSection_isDestroyed_set)
    constructType = _swig_property(_gLucifer.lucContourCrossSection_constructType_get, _gLucifer.lucContourCrossSection_constructType_set)
    buildType = _swig_property(_gLucifer.lucContourCrossSection_buildType_get, _gLucifer.lucContourCrossSection_buildType_set)
    initialiseType = _swig_property(_gLucifer.lucContourCrossSection_initialiseType_get, _gLucifer.lucContourCrossSection_initialiseType_set)
    executeType = _swig_property(_gLucifer.lucContourCrossSection_executeType_get, _gLucifer.lucContourCrossSection_executeType_set)
    destroyType = _swig_property(_gLucifer.lucContourCrossSection_destroyType_get, _gLucifer.lucContourCrossSection_destroyType_set)
    context = _swig_property(_gLucifer.lucContourCrossSection_context_get, _gLucifer.lucContourCrossSection_context_set)
    _setup = _swig_property(_gLucifer.lucContourCrossSection__setup_get, _gLucifer.lucContourCrossSection__setup_set)
    _draw = _swig_property(_gLucifer.lucContourCrossSection__draw_get, _gLucifer.lucContourCrossSection__draw_set)
    _cleanUp = _swig_property(_gLucifer.lucContourCrossSection__cleanUp_get, _gLucifer.lucContourCrossSection__cleanUp_set)
    needsToCleanUp = _swig_property(_gLucifer.lucContourCrossSection_needsToCleanUp_get, _gLucifer.lucContourCrossSection_needsToCleanUp_set)
    needsToDraw = _swig_property(_gLucifer.lucContourCrossSection_needsToDraw_get, _gLucifer.lucContourCrossSection_needsToDraw_set)
    depthSort = _swig_property(_gLucifer.lucContourCrossSection_depthSort_get, _gLucifer.lucContourCrossSection_depthSort_set)
    position = _swig_property(_gLucifer.lucContourCrossSection_position_get, _gLucifer.lucContourCrossSection_position_set)
    disabled = _swig_property(_gLucifer.lucContourCrossSection_disabled_get, _gLucifer.lucContourCrossSection_disabled_set)
    colourMap = _swig_property(_gLucifer.lucContourCrossSection_colourMap_get, _gLucifer.lucContourCrossSection_colourMap_set)
    colour = _swig_property(_gLucifer.lucContourCrossSection_colour_get, _gLucifer.lucContourCrossSection_colour_set)
    opacity = _swig_property(_gLucifer.lucContourCrossSection_opacity_get, _gLucifer.lucContourCrossSection_opacity_set)
    id = _swig_property(_gLucifer.lucContourCrossSection_id_get, _gLucifer.lucContourCrossSection_id_set)
    properties = _swig_property(_gLucifer.lucContourCrossSection_properties_get, _gLucifer.lucContourCrossSection_properties_set)
    comm = _swig_property(_gLucifer.lucContourCrossSection_comm_get, _gLucifer.lucContourCrossSection_comm_set)
    rank = _swig_property(_gLucifer.lucContourCrossSection_rank_get, _gLucifer.lucContourCrossSection_rank_set)
    nproc = _swig_property(_gLucifer.lucContourCrossSection_nproc_get, _gLucifer.lucContourCrossSection_nproc_set)
    mesh = _swig_property(_gLucifer.lucContourCrossSection_mesh_get, _gLucifer.lucContourCrossSection_mesh_set)
    value = _swig_property(_gLucifer.lucContourCrossSection_value_get, _gLucifer.lucContourCrossSection_value_set)
    defaultResolution = _swig_property(_gLucifer.lucContourCrossSection_defaultResolution_get, _gLucifer.lucContourCrossSection_defaultResolution_set)
    resolutionA = _swig_property(_gLucifer.lucContourCrossSection_resolutionA_get, _gLucifer.lucContourCrossSection_resolutionA_set)
    resolutionB = _swig_property(_gLucifer.lucContourCrossSection_resolutionB_get, _gLucifer.lucContourCrossSection_resolutionB_set)
    onMesh = _swig_property(_gLucifer.lucContourCrossSection_onMesh_get, _gLucifer.lucContourCrossSection_onMesh_set)
    normal = _swig_property(_gLucifer.lucContourCrossSection_normal_get, _gLucifer.lucContourCrossSection_normal_set)
    coord1 = _swig_property(_gLucifer.lucContourCrossSection_coord1_get, _gLucifer.lucContourCrossSection_coord1_set)
    coord2 = _swig_property(_gLucifer.lucContourCrossSection_coord2_get, _gLucifer.lucContourCrossSection_coord2_set)
    coord3 = _swig_property(_gLucifer.lucContourCrossSection_coord3_get, _gLucifer.lucContourCrossSection_coord3_set)
    axis = _swig_property(_gLucifer.lucContourCrossSection_axis_get, _gLucifer.lucContourCrossSection_axis_set)
    axis1 = _swig_property(_gLucifer.lucContourCrossSection_axis1_get, _gLucifer.lucContourCrossSection_axis1_set)
    axis2 = _swig_property(_gLucifer.lucContourCrossSection_axis2_get, _gLucifer.lucContourCrossSection_axis2_set)
    isSet = _swig_property(_gLucifer.lucContourCrossSection_isSet_get, _gLucifer.lucContourCrossSection_isSet_set)
    interpolate = _swig_property(_gLucifer.lucContourCrossSection_interpolate_get, _gLucifer.lucContourCrossSection_interpolate_set)
    axisAligned = _swig_property(_gLucifer.lucContourCrossSection_axisAligned_get, _gLucifer.lucContourCrossSection_axisAligned_set)
    gatherData = _swig_property(_gLucifer.lucContourCrossSection_gatherData_get, _gLucifer.lucContourCrossSection_gatherData_set)
    offsetEdges = _swig_property(_gLucifer.lucContourCrossSection_offsetEdges_get, _gLucifer.lucContourCrossSection_offsetEdges_set)
    vertices = _swig_property(_gLucifer.lucContourCrossSection_vertices_get, _gLucifer.lucContourCrossSection_vertices_set)
    values = _swig_property(_gLucifer.lucContourCrossSection_values_get, _gLucifer.lucContourCrossSection_values_set)
    min = _swig_property(_gLucifer.lucContourCrossSection_min_get, _gLucifer.lucContourCrossSection_min_set)
    max = _swig_property(_gLucifer.lucContourCrossSection_max_get, _gLucifer.lucContourCrossSection_max_set)
    fieldComponentCount = _swig_property(_gLucifer.lucContourCrossSection_fieldComponentCount_get, _gLucifer.lucContourCrossSection_fieldComponentCount_set)
    cppdata = _swig_property(_gLucifer.lucContourCrossSection_cppdata_get, _gLucifer.lucContourCrossSection_cppdata_set)
    dim = _swig_property(_gLucifer.lucContourCrossSection_dim_get, _gLucifer.lucContourCrossSection_dim_set)
    vertexGridHandle = _swig_property(_gLucifer.lucContourCrossSection_vertexGridHandle_get, _gLucifer.lucContourCrossSection_vertexGridHandle_set)
    dims = _swig_property(_gLucifer.lucContourCrossSection_dims_get, _gLucifer.lucContourCrossSection_dims_set)
    fieldDim = _swig_property(_gLucifer.lucContourCrossSection_fieldDim_get, _gLucifer.lucContourCrossSection_fieldDim_set)
    valueMin = _swig_property(_gLucifer.lucContourCrossSection_valueMin_get, _gLucifer.lucContourCrossSection_valueMin_set)
    valueMax = _swig_property(_gLucifer.lucContourCrossSection_valueMax_get, _gLucifer.lucContourCrossSection_valueMax_set)
    labelFormat = _swig_property(_gLucifer.lucContourCrossSection_labelFormat_get, _gLucifer.lucContourCrossSection_labelFormat_set)
    unitScaling = _swig_property(_gLucifer.lucContourCrossSection_unitScaling_get, _gLucifer.lucContourCrossSection_unitScaling_set)
    interval = _swig_property(_gLucifer.lucContourCrossSection_interval_get, _gLucifer.lucContourCrossSection_interval_set)
    minIsovalue = _swig_property(_gLucifer.lucContourCrossSection_minIsovalue_get, _gLucifer.lucContourCrossSection_minIsovalue_set)
    maxIsovalue = _swig_property(_gLucifer.lucContourCrossSection_maxIsovalue_get, _gLucifer.lucContourCrossSection_maxIsovalue_set)
    coordIndex = _swig_property(_gLucifer.lucContourCrossSection_coordIndex_get, _gLucifer.lucContourCrossSection_coordIndex_set)
    printedIndex = _swig_property(_gLucifer.lucContourCrossSection_printedIndex_get, _gLucifer.lucContourCrossSection_printedIndex_set)

    def __init__(self):
        _gLucifer.lucContourCrossSection_swiginit(self, _gLucifer.new_lucContourCrossSection())
    __swig_destroy__ = _gLucifer.delete_lucContourCrossSection
lucContourCrossSection_swigregister = _gLucifer.lucContourCrossSection_swigregister
lucContourCrossSection_swigregister(lucContourCrossSection)


def _lucContourCrossSection_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _setup: 'lucDrawingObject_SetupFunction *', _draw: 'lucDrawingObject_DrawFunction *', _cleanUp: 'lucDrawingObject_CleanUpFunction *') -> "lucContourCrossSection *":
    return _gLucifer._lucContourCrossSection_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _setup, _draw, _cleanUp)
_lucContourCrossSection_New = _gLucifer._lucContourCrossSection_New

def _lucContourCrossSection_Delete(drawingObject: 'void *') -> "void":
    return _gLucifer._lucContourCrossSection_Delete(drawingObject)
_lucContourCrossSection_Delete = _gLucifer._lucContourCrossSection_Delete

def _lucContourCrossSection_Print(drawingObject: 'void *', stream: 'Stream *') -> "void":
    return _gLucifer._lucContourCrossSection_Print(drawingObject, stream)
_lucContourCrossSection_Print = _gLucifer._lucContourCrossSection_Print

def _lucContourCrossSection_DefaultNew(name: 'Name') -> "void *":
    return _gLucifer._lucContourCrossSection_DefaultNew(name)
_lucContourCrossSection_DefaultNew = _gLucifer._lucContourCrossSection_DefaultNew

def _lucContourCrossSection_AssignFromXML(drawingObject: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer._lucContourCrossSection_AssignFromXML(drawingObject, cf, data)
_lucContourCrossSection_AssignFromXML = _gLucifer._lucContourCrossSection_AssignFromXML

def _lucContourCrossSection_Build(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucContourCrossSection_Build(drawingObject, data)
_lucContourCrossSection_Build = _gLucifer._lucContourCrossSection_Build

def _lucContourCrossSection_Initialise(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucContourCrossSection_Initialise(drawingObject, data)
_lucContourCrossSection_Initialise = _gLucifer._lucContourCrossSection_Initialise

def _lucContourCrossSection_Execute(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucContourCrossSection_Execute(drawingObject, data)
_lucContourCrossSection_Execute = _gLucifer._lucContourCrossSection_Execute

def _lucContourCrossSection_Destroy(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucContourCrossSection_Destroy(drawingObject, data)
_lucContourCrossSection_Destroy = _gLucifer._lucContourCrossSection_Destroy

def _lucContourCrossSection_Setup(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucContourCrossSection_Setup(drawingObject, database, _context)
_lucContourCrossSection_Setup = _gLucifer._lucContourCrossSection_Setup

def _lucContourCrossSection_Draw(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucContourCrossSection_Draw(drawingObject, database, _context)
_lucContourCrossSection_Draw = _gLucifer._lucContourCrossSection_Draw

def lucContourCrossSection_DrawCrossSection(drawingObject: 'void *', database: 'lucDatabase *') -> "void":
    return _gLucifer.lucContourCrossSection_DrawCrossSection(drawingObject, database)
lucContourCrossSection_DrawCrossSection = _gLucifer.lucContourCrossSection_DrawCrossSection

def lucContourCrossSection_DrawContour(drawingObject: 'void *', database: 'lucDatabase *', isovalue: 'double') -> "void":
    return _gLucifer.lucContourCrossSection_DrawContour(drawingObject, database, isovalue)
lucContourCrossSection_DrawContour = _gLucifer.lucContourCrossSection_DrawContour

def lucContourCrossSection_PlotPoint(arg1: 'lucContourCrossSection', database: 'lucDatabase *', edge: 'char', isovalue: 'double', aIndex: 'int', bIndex: 'int') -> "void":
    return _gLucifer.lucContourCrossSection_PlotPoint(arg1, database, edge, isovalue, aIndex, bIndex)
lucContourCrossSection_PlotPoint = _gLucifer.lucContourCrossSection_PlotPoint
class lucScalarField(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_gLucifer.lucScalarField__sizeOfSelf_get, _gLucifer.lucScalarField__sizeOfSelf_set)
    _deleteSelf = _swig_property(_gLucifer.lucScalarField__deleteSelf_get, _gLucifer.lucScalarField__deleteSelf_set)
    type = _swig_property(_gLucifer.lucScalarField_type_get, _gLucifer.lucScalarField_type_set)
    nRefs = _swig_property(_gLucifer.lucScalarField_nRefs_get, _gLucifer.lucScalarField_nRefs_set)
    locked = _swig_property(_gLucifer.lucScalarField_locked_get, _gLucifer.lucScalarField_locked_set)
    _delete = _swig_property(_gLucifer.lucScalarField__delete_get, _gLucifer.lucScalarField__delete_set)
    _print = _swig_property(_gLucifer.lucScalarField__print_get, _gLucifer.lucScalarField__print_set)
    _copy = _swig_property(_gLucifer.lucScalarField__copy_get, _gLucifer.lucScalarField__copy_set)
    name = _swig_property(_gLucifer.lucScalarField_name_get, _gLucifer.lucScalarField_name_set)
    nameAllocationType = _swig_property(_gLucifer.lucScalarField_nameAllocationType_get, _gLucifer.lucScalarField_nameAllocationType_set)
    _defaultConstructor = _swig_property(_gLucifer.lucScalarField__defaultConstructor_get, _gLucifer.lucScalarField__defaultConstructor_set)
    _construct = _swig_property(_gLucifer.lucScalarField__construct_get, _gLucifer.lucScalarField__construct_set)
    _build = _swig_property(_gLucifer.lucScalarField__build_get, _gLucifer.lucScalarField__build_set)
    _initialise = _swig_property(_gLucifer.lucScalarField__initialise_get, _gLucifer.lucScalarField__initialise_set)
    _execute = _swig_property(_gLucifer.lucScalarField__execute_get, _gLucifer.lucScalarField__execute_set)
    _destroy = _swig_property(_gLucifer.lucScalarField__destroy_get, _gLucifer.lucScalarField__destroy_set)
    isConstructed = _swig_property(_gLucifer.lucScalarField_isConstructed_get, _gLucifer.lucScalarField_isConstructed_set)
    isBuilt = _swig_property(_gLucifer.lucScalarField_isBuilt_get, _gLucifer.lucScalarField_isBuilt_set)
    isInitialised = _swig_property(_gLucifer.lucScalarField_isInitialised_get, _gLucifer.lucScalarField_isInitialised_set)
    hasExecuted = _swig_property(_gLucifer.lucScalarField_hasExecuted_get, _gLucifer.lucScalarField_hasExecuted_set)
    isDestroyed = _swig_property(_gLucifer.lucScalarField_isDestroyed_get, _gLucifer.lucScalarField_isDestroyed_set)
    constructType = _swig_property(_gLucifer.lucScalarField_constructType_get, _gLucifer.lucScalarField_constructType_set)
    buildType = _swig_property(_gLucifer.lucScalarField_buildType_get, _gLucifer.lucScalarField_buildType_set)
    initialiseType = _swig_property(_gLucifer.lucScalarField_initialiseType_get, _gLucifer.lucScalarField_initialiseType_set)
    executeType = _swig_property(_gLucifer.lucScalarField_executeType_get, _gLucifer.lucScalarField_executeType_set)
    destroyType = _swig_property(_gLucifer.lucScalarField_destroyType_get, _gLucifer.lucScalarField_destroyType_set)
    context = _swig_property(_gLucifer.lucScalarField_context_get, _gLucifer.lucScalarField_context_set)
    _setup = _swig_property(_gLucifer.lucScalarField__setup_get, _gLucifer.lucScalarField__setup_set)
    _draw = _swig_property(_gLucifer.lucScalarField__draw_get, _gLucifer.lucScalarField__draw_set)
    _cleanUp = _swig_property(_gLucifer.lucScalarField__cleanUp_get, _gLucifer.lucScalarField__cleanUp_set)
    needsToCleanUp = _swig_property(_gLucifer.lucScalarField_needsToCleanUp_get, _gLucifer.lucScalarField_needsToCleanUp_set)
    needsToDraw = _swig_property(_gLucifer.lucScalarField_needsToDraw_get, _gLucifer.lucScalarField_needsToDraw_set)
    depthSort = _swig_property(_gLucifer.lucScalarField_depthSort_get, _gLucifer.lucScalarField_depthSort_set)
    position = _swig_property(_gLucifer.lucScalarField_position_get, _gLucifer.lucScalarField_position_set)
    disabled = _swig_property(_gLucifer.lucScalarField_disabled_get, _gLucifer.lucScalarField_disabled_set)
    colourMap = _swig_property(_gLucifer.lucScalarField_colourMap_get, _gLucifer.lucScalarField_colourMap_set)
    colour = _swig_property(_gLucifer.lucScalarField_colour_get, _gLucifer.lucScalarField_colour_set)
    opacity = _swig_property(_gLucifer.lucScalarField_opacity_get, _gLucifer.lucScalarField_opacity_set)
    id = _swig_property(_gLucifer.lucScalarField_id_get, _gLucifer.lucScalarField_id_set)
    properties = _swig_property(_gLucifer.lucScalarField_properties_get, _gLucifer.lucScalarField_properties_set)
    comm = _swig_property(_gLucifer.lucScalarField_comm_get, _gLucifer.lucScalarField_comm_set)
    rank = _swig_property(_gLucifer.lucScalarField_rank_get, _gLucifer.lucScalarField_rank_set)
    nproc = _swig_property(_gLucifer.lucScalarField_nproc_get, _gLucifer.lucScalarField_nproc_set)
    mesh = _swig_property(_gLucifer.lucScalarField_mesh_get, _gLucifer.lucScalarField_mesh_set)
    value = _swig_property(_gLucifer.lucScalarField_value_get, _gLucifer.lucScalarField_value_set)
    defaultResolution = _swig_property(_gLucifer.lucScalarField_defaultResolution_get, _gLucifer.lucScalarField_defaultResolution_set)
    resolutionA = _swig_property(_gLucifer.lucScalarField_resolutionA_get, _gLucifer.lucScalarField_resolutionA_set)
    resolutionB = _swig_property(_gLucifer.lucScalarField_resolutionB_get, _gLucifer.lucScalarField_resolutionB_set)
    onMesh = _swig_property(_gLucifer.lucScalarField_onMesh_get, _gLucifer.lucScalarField_onMesh_set)
    normal = _swig_property(_gLucifer.lucScalarField_normal_get, _gLucifer.lucScalarField_normal_set)
    coord1 = _swig_property(_gLucifer.lucScalarField_coord1_get, _gLucifer.lucScalarField_coord1_set)
    coord2 = _swig_property(_gLucifer.lucScalarField_coord2_get, _gLucifer.lucScalarField_coord2_set)
    coord3 = _swig_property(_gLucifer.lucScalarField_coord3_get, _gLucifer.lucScalarField_coord3_set)
    axis = _swig_property(_gLucifer.lucScalarField_axis_get, _gLucifer.lucScalarField_axis_set)
    axis1 = _swig_property(_gLucifer.lucScalarField_axis1_get, _gLucifer.lucScalarField_axis1_set)
    axis2 = _swig_property(_gLucifer.lucScalarField_axis2_get, _gLucifer.lucScalarField_axis2_set)
    isSet = _swig_property(_gLucifer.lucScalarField_isSet_get, _gLucifer.lucScalarField_isSet_set)
    interpolate = _swig_property(_gLucifer.lucScalarField_interpolate_get, _gLucifer.lucScalarField_interpolate_set)
    axisAligned = _swig_property(_gLucifer.lucScalarField_axisAligned_get, _gLucifer.lucScalarField_axisAligned_set)
    gatherData = _swig_property(_gLucifer.lucScalarField_gatherData_get, _gLucifer.lucScalarField_gatherData_set)
    offsetEdges = _swig_property(_gLucifer.lucScalarField_offsetEdges_get, _gLucifer.lucScalarField_offsetEdges_set)
    vertices = _swig_property(_gLucifer.lucScalarField_vertices_get, _gLucifer.lucScalarField_vertices_set)
    values = _swig_property(_gLucifer.lucScalarField_values_get, _gLucifer.lucScalarField_values_set)
    min = _swig_property(_gLucifer.lucScalarField_min_get, _gLucifer.lucScalarField_min_set)
    max = _swig_property(_gLucifer.lucScalarField_max_get, _gLucifer.lucScalarField_max_set)
    fieldComponentCount = _swig_property(_gLucifer.lucScalarField_fieldComponentCount_get, _gLucifer.lucScalarField_fieldComponentCount_set)
    cppdata = _swig_property(_gLucifer.lucScalarField_cppdata_get, _gLucifer.lucScalarField_cppdata_set)
    dim = _swig_property(_gLucifer.lucScalarField_dim_get, _gLucifer.lucScalarField_dim_set)
    vertexGridHandle = _swig_property(_gLucifer.lucScalarField_vertexGridHandle_get, _gLucifer.lucScalarField_vertexGridHandle_set)
    dims = _swig_property(_gLucifer.lucScalarField_dims_get, _gLucifer.lucScalarField_dims_set)
    fieldDim = _swig_property(_gLucifer.lucScalarField_fieldDim_get, _gLucifer.lucScalarField_fieldDim_set)
    valueMin = _swig_property(_gLucifer.lucScalarField_valueMin_get, _gLucifer.lucScalarField_valueMin_set)
    valueMax = _swig_property(_gLucifer.lucScalarField_valueMax_get, _gLucifer.lucScalarField_valueMax_set)
    drawSides = _swig_property(_gLucifer.lucScalarField_drawSides_get, _gLucifer.lucScalarField_drawSides_set)
    flipNormals = _swig_property(_gLucifer.lucScalarField_flipNormals_get, _gLucifer.lucScalarField_flipNormals_set)

    def __init__(self):
        _gLucifer.lucScalarField_swiginit(self, _gLucifer.new_lucScalarField())
    __swig_destroy__ = _gLucifer.delete_lucScalarField
lucScalarField_swigregister = _gLucifer.lucScalarField_swigregister
lucScalarField_swigregister(lucScalarField)
lucScalarField_Type = cvar.lucScalarField_Type


def _lucScalarField_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _setup: 'lucDrawingObject_SetupFunction *', _draw: 'lucDrawingObject_DrawFunction *', _cleanUp: 'lucDrawingObject_CleanUpFunction *') -> "lucScalarField *":
    return _gLucifer._lucScalarField_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _setup, _draw, _cleanUp)
_lucScalarField_New = _gLucifer._lucScalarField_New

def _lucScalarField_Delete(drawingObject: 'void *') -> "void":
    return _gLucifer._lucScalarField_Delete(drawingObject)
_lucScalarField_Delete = _gLucifer._lucScalarField_Delete

def _lucScalarField_Print(drawingObject: 'void *', stream: 'Stream *') -> "void":
    return _gLucifer._lucScalarField_Print(drawingObject, stream)
_lucScalarField_Print = _gLucifer._lucScalarField_Print

def _lucScalarField_DefaultNew(name: 'Name') -> "void *":
    return _gLucifer._lucScalarField_DefaultNew(name)
_lucScalarField_DefaultNew = _gLucifer._lucScalarField_DefaultNew

def _lucScalarField_AssignFromXML(drawingObject: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer._lucScalarField_AssignFromXML(drawingObject, cf, data)
_lucScalarField_AssignFromXML = _gLucifer._lucScalarField_AssignFromXML

def _lucScalarField_Build(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucScalarField_Build(drawingObject, data)
_lucScalarField_Build = _gLucifer._lucScalarField_Build

def _lucScalarField_Initialise(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucScalarField_Initialise(drawingObject, data)
_lucScalarField_Initialise = _gLucifer._lucScalarField_Initialise

def _lucScalarField_Execute(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucScalarField_Execute(drawingObject, data)
_lucScalarField_Execute = _gLucifer._lucScalarField_Execute

def _lucScalarField_Destroy(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucScalarField_Destroy(drawingObject, data)
_lucScalarField_Destroy = _gLucifer._lucScalarField_Destroy

def _lucScalarField_Draw(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucScalarField_Draw(drawingObject, database, _context)
_lucScalarField_Draw = _gLucifer._lucScalarField_Draw

def lucScalarField_DrawCrossSection(drawingObject: 'void *', database: 'lucDatabase *', backFacing: 'Bool') -> "void":
    return _gLucifer.lucScalarField_DrawCrossSection(drawingObject, database, backFacing)
lucScalarField_DrawCrossSection = _gLucifer.lucScalarField_DrawCrossSection

def lucScalarField_DrawMeshCrossSection(drawingObject: 'void *', database: 'lucDatabase *', backFacing: 'Bool') -> "void":
    return _gLucifer.lucScalarField_DrawMeshCrossSection(drawingObject, database, backFacing)
lucScalarField_DrawMeshCrossSection = _gLucifer.lucScalarField_DrawMeshCrossSection
class lucFieldSampler(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_gLucifer.lucFieldSampler__sizeOfSelf_get, _gLucifer.lucFieldSampler__sizeOfSelf_set)
    _deleteSelf = _swig_property(_gLucifer.lucFieldSampler__deleteSelf_get, _gLucifer.lucFieldSampler__deleteSelf_set)
    type = _swig_property(_gLucifer.lucFieldSampler_type_get, _gLucifer.lucFieldSampler_type_set)
    nRefs = _swig_property(_gLucifer.lucFieldSampler_nRefs_get, _gLucifer.lucFieldSampler_nRefs_set)
    locked = _swig_property(_gLucifer.lucFieldSampler_locked_get, _gLucifer.lucFieldSampler_locked_set)
    _delete = _swig_property(_gLucifer.lucFieldSampler__delete_get, _gLucifer.lucFieldSampler__delete_set)
    _print = _swig_property(_gLucifer.lucFieldSampler__print_get, _gLucifer.lucFieldSampler__print_set)
    _copy = _swig_property(_gLucifer.lucFieldSampler__copy_get, _gLucifer.lucFieldSampler__copy_set)
    name = _swig_property(_gLucifer.lucFieldSampler_name_get, _gLucifer.lucFieldSampler_name_set)
    nameAllocationType = _swig_property(_gLucifer.lucFieldSampler_nameAllocationType_get, _gLucifer.lucFieldSampler_nameAllocationType_set)
    _defaultConstructor = _swig_property(_gLucifer.lucFieldSampler__defaultConstructor_get, _gLucifer.lucFieldSampler__defaultConstructor_set)
    _construct = _swig_property(_gLucifer.lucFieldSampler__construct_get, _gLucifer.lucFieldSampler__construct_set)
    _build = _swig_property(_gLucifer.lucFieldSampler__build_get, _gLucifer.lucFieldSampler__build_set)
    _initialise = _swig_property(_gLucifer.lucFieldSampler__initialise_get, _gLucifer.lucFieldSampler__initialise_set)
    _execute = _swig_property(_gLucifer.lucFieldSampler__execute_get, _gLucifer.lucFieldSampler__execute_set)
    _destroy = _swig_property(_gLucifer.lucFieldSampler__destroy_get, _gLucifer.lucFieldSampler__destroy_set)
    isConstructed = _swig_property(_gLucifer.lucFieldSampler_isConstructed_get, _gLucifer.lucFieldSampler_isConstructed_set)
    isBuilt = _swig_property(_gLucifer.lucFieldSampler_isBuilt_get, _gLucifer.lucFieldSampler_isBuilt_set)
    isInitialised = _swig_property(_gLucifer.lucFieldSampler_isInitialised_get, _gLucifer.lucFieldSampler_isInitialised_set)
    hasExecuted = _swig_property(_gLucifer.lucFieldSampler_hasExecuted_get, _gLucifer.lucFieldSampler_hasExecuted_set)
    isDestroyed = _swig_property(_gLucifer.lucFieldSampler_isDestroyed_get, _gLucifer.lucFieldSampler_isDestroyed_set)
    constructType = _swig_property(_gLucifer.lucFieldSampler_constructType_get, _gLucifer.lucFieldSampler_constructType_set)
    buildType = _swig_property(_gLucifer.lucFieldSampler_buildType_get, _gLucifer.lucFieldSampler_buildType_set)
    initialiseType = _swig_property(_gLucifer.lucFieldSampler_initialiseType_get, _gLucifer.lucFieldSampler_initialiseType_set)
    executeType = _swig_property(_gLucifer.lucFieldSampler_executeType_get, _gLucifer.lucFieldSampler_executeType_set)
    destroyType = _swig_property(_gLucifer.lucFieldSampler_destroyType_get, _gLucifer.lucFieldSampler_destroyType_set)
    context = _swig_property(_gLucifer.lucFieldSampler_context_get, _gLucifer.lucFieldSampler_context_set)
    _setup = _swig_property(_gLucifer.lucFieldSampler__setup_get, _gLucifer.lucFieldSampler__setup_set)
    _draw = _swig_property(_gLucifer.lucFieldSampler__draw_get, _gLucifer.lucFieldSampler__draw_set)
    _cleanUp = _swig_property(_gLucifer.lucFieldSampler__cleanUp_get, _gLucifer.lucFieldSampler__cleanUp_set)
    needsToCleanUp = _swig_property(_gLucifer.lucFieldSampler_needsToCleanUp_get, _gLucifer.lucFieldSampler_needsToCleanUp_set)
    needsToDraw = _swig_property(_gLucifer.lucFieldSampler_needsToDraw_get, _gLucifer.lucFieldSampler_needsToDraw_set)
    depthSort = _swig_property(_gLucifer.lucFieldSampler_depthSort_get, _gLucifer.lucFieldSampler_depthSort_set)
    position = _swig_property(_gLucifer.lucFieldSampler_position_get, _gLucifer.lucFieldSampler_position_set)
    disabled = _swig_property(_gLucifer.lucFieldSampler_disabled_get, _gLucifer.lucFieldSampler_disabled_set)
    colourMap = _swig_property(_gLucifer.lucFieldSampler_colourMap_get, _gLucifer.lucFieldSampler_colourMap_set)
    colour = _swig_property(_gLucifer.lucFieldSampler_colour_get, _gLucifer.lucFieldSampler_colour_set)
    opacity = _swig_property(_gLucifer.lucFieldSampler_opacity_get, _gLucifer.lucFieldSampler_opacity_set)
    id = _swig_property(_gLucifer.lucFieldSampler_id_get, _gLucifer.lucFieldSampler_id_set)
    properties = _swig_property(_gLucifer.lucFieldSampler_properties_get, _gLucifer.lucFieldSampler_properties_set)
    comm = _swig_property(_gLucifer.lucFieldSampler_comm_get, _gLucifer.lucFieldSampler_comm_set)
    rank = _swig_property(_gLucifer.lucFieldSampler_rank_get, _gLucifer.lucFieldSampler_rank_set)
    nproc = _swig_property(_gLucifer.lucFieldSampler_nproc_get, _gLucifer.lucFieldSampler_nproc_set)
    mesh = _swig_property(_gLucifer.lucFieldSampler_mesh_get, _gLucifer.lucFieldSampler_mesh_set)
    value = _swig_property(_gLucifer.lucFieldSampler_value_get, _gLucifer.lucFieldSampler_value_set)
    defaultResolution = _swig_property(_gLucifer.lucFieldSampler_defaultResolution_get, _gLucifer.lucFieldSampler_defaultResolution_set)
    resolutionA = _swig_property(_gLucifer.lucFieldSampler_resolutionA_get, _gLucifer.lucFieldSampler_resolutionA_set)
    resolutionB = _swig_property(_gLucifer.lucFieldSampler_resolutionB_get, _gLucifer.lucFieldSampler_resolutionB_set)
    onMesh = _swig_property(_gLucifer.lucFieldSampler_onMesh_get, _gLucifer.lucFieldSampler_onMesh_set)
    normal = _swig_property(_gLucifer.lucFieldSampler_normal_get, _gLucifer.lucFieldSampler_normal_set)
    coord1 = _swig_property(_gLucifer.lucFieldSampler_coord1_get, _gLucifer.lucFieldSampler_coord1_set)
    coord2 = _swig_property(_gLucifer.lucFieldSampler_coord2_get, _gLucifer.lucFieldSampler_coord2_set)
    coord3 = _swig_property(_gLucifer.lucFieldSampler_coord3_get, _gLucifer.lucFieldSampler_coord3_set)
    axis = _swig_property(_gLucifer.lucFieldSampler_axis_get, _gLucifer.lucFieldSampler_axis_set)
    axis1 = _swig_property(_gLucifer.lucFieldSampler_axis1_get, _gLucifer.lucFieldSampler_axis1_set)
    axis2 = _swig_property(_gLucifer.lucFieldSampler_axis2_get, _gLucifer.lucFieldSampler_axis2_set)
    isSet = _swig_property(_gLucifer.lucFieldSampler_isSet_get, _gLucifer.lucFieldSampler_isSet_set)
    interpolate = _swig_property(_gLucifer.lucFieldSampler_interpolate_get, _gLucifer.lucFieldSampler_interpolate_set)
    axisAligned = _swig_property(_gLucifer.lucFieldSampler_axisAligned_get, _gLucifer.lucFieldSampler_axisAligned_set)
    gatherData = _swig_property(_gLucifer.lucFieldSampler_gatherData_get, _gLucifer.lucFieldSampler_gatherData_set)
    offsetEdges = _swig_property(_gLucifer.lucFieldSampler_offsetEdges_get, _gLucifer.lucFieldSampler_offsetEdges_set)
    vertices = _swig_property(_gLucifer.lucFieldSampler_vertices_get, _gLucifer.lucFieldSampler_vertices_set)
    values = _swig_property(_gLucifer.lucFieldSampler_values_get, _gLucifer.lucFieldSampler_values_set)
    min = _swig_property(_gLucifer.lucFieldSampler_min_get, _gLucifer.lucFieldSampler_min_set)
    max = _swig_property(_gLucifer.lucFieldSampler_max_get, _gLucifer.lucFieldSampler_max_set)
    fieldComponentCount = _swig_property(_gLucifer.lucFieldSampler_fieldComponentCount_get, _gLucifer.lucFieldSampler_fieldComponentCount_set)
    cppdata = _swig_property(_gLucifer.lucFieldSampler_cppdata_get, _gLucifer.lucFieldSampler_cppdata_set)
    dim = _swig_property(_gLucifer.lucFieldSampler_dim_get, _gLucifer.lucFieldSampler_dim_set)
    vertexGridHandle = _swig_property(_gLucifer.lucFieldSampler_vertexGridHandle_get, _gLucifer.lucFieldSampler_vertexGridHandle_set)
    dims = _swig_property(_gLucifer.lucFieldSampler_dims_get, _gLucifer.lucFieldSampler_dims_set)
    fieldDim = _swig_property(_gLucifer.lucFieldSampler_fieldDim_get, _gLucifer.lucFieldSampler_fieldDim_set)
    valueMin = _swig_property(_gLucifer.lucFieldSampler_valueMin_get, _gLucifer.lucFieldSampler_valueMin_set)
    valueMax = _swig_property(_gLucifer.lucFieldSampler_valueMax_get, _gLucifer.lucFieldSampler_valueMax_set)
    resolution = _swig_property(_gLucifer.lucFieldSampler_resolution_get, _gLucifer.lucFieldSampler_resolution_set)

    def __init__(self):
        _gLucifer.lucFieldSampler_swiginit(self, _gLucifer.new_lucFieldSampler())
    __swig_destroy__ = _gLucifer.delete_lucFieldSampler
lucFieldSampler_swigregister = _gLucifer.lucFieldSampler_swigregister
lucFieldSampler_swigregister(lucFieldSampler)
lucFieldSampler_Type = cvar.lucFieldSampler_Type


def _lucFieldSampler_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _setup: 'lucDrawingObject_SetupFunction *', _draw: 'lucDrawingObject_DrawFunction *', _cleanUp: 'lucDrawingObject_CleanUpFunction *') -> "lucFieldSampler *":
    return _gLucifer._lucFieldSampler_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _setup, _draw, _cleanUp)
_lucFieldSampler_New = _gLucifer._lucFieldSampler_New

def _lucFieldSampler_Delete(drawingObject: 'void *') -> "void":
    return _gLucifer._lucFieldSampler_Delete(drawingObject)
_lucFieldSampler_Delete = _gLucifer._lucFieldSampler_Delete

def _lucFieldSampler_Print(drawingObject: 'void *', stream: 'Stream *') -> "void":
    return _gLucifer._lucFieldSampler_Print(drawingObject, stream)
_lucFieldSampler_Print = _gLucifer._lucFieldSampler_Print

def _lucFieldSampler_DefaultNew(name: 'Name') -> "void *":
    return _gLucifer._lucFieldSampler_DefaultNew(name)
_lucFieldSampler_DefaultNew = _gLucifer._lucFieldSampler_DefaultNew

def _lucFieldSampler_AssignFromXML(drawingObject: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer._lucFieldSampler_AssignFromXML(drawingObject, cf, data)
_lucFieldSampler_AssignFromXML = _gLucifer._lucFieldSampler_AssignFromXML

def _lucFieldSampler_Build(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucFieldSampler_Build(drawingObject, data)
_lucFieldSampler_Build = _gLucifer._lucFieldSampler_Build

def _lucFieldSampler_Initialise(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucFieldSampler_Initialise(drawingObject, data)
_lucFieldSampler_Initialise = _gLucifer._lucFieldSampler_Initialise

def _lucFieldSampler_Execute(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucFieldSampler_Execute(drawingObject, data)
_lucFieldSampler_Execute = _gLucifer._lucFieldSampler_Execute

def _lucFieldSampler_Destroy(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucFieldSampler_Destroy(drawingObject, data)
_lucFieldSampler_Destroy = _gLucifer._lucFieldSampler_Destroy

def _lucFieldSampler_Draw(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucFieldSampler_Draw(drawingObject, database, _context)
_lucFieldSampler_Draw = _gLucifer._lucFieldSampler_Draw
class lucSampler_cppdata(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    func = _swig_property(_gLucifer.lucSampler_cppdata_func_get, _gLucifer.lucSampler_cppdata_func_set)
    fn = _swig_property(_gLucifer.lucSampler_cppdata_fn_get, _gLucifer.lucSampler_cppdata_fn_set)

    def __init__(self):
        _gLucifer.lucSampler_cppdata_swiginit(self, _gLucifer.new_lucSampler_cppdata())
    __swig_destroy__ = _gLucifer.delete_lucSampler_cppdata
lucSampler_cppdata_swigregister = _gLucifer.lucSampler_cppdata_swigregister
lucSampler_cppdata_swigregister(lucSampler_cppdata)


def _lucSampler_SetFn(_self: 'void *', fn: 'Fn::Function *') -> "void":
    return _gLucifer._lucSampler_SetFn(_self, fn)
_lucSampler_SetFn = _gLucifer._lucSampler_SetFn
class lucSampler(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_gLucifer.lucSampler__sizeOfSelf_get, _gLucifer.lucSampler__sizeOfSelf_set)
    _deleteSelf = _swig_property(_gLucifer.lucSampler__deleteSelf_get, _gLucifer.lucSampler__deleteSelf_set)
    type = _swig_property(_gLucifer.lucSampler_type_get, _gLucifer.lucSampler_type_set)
    nRefs = _swig_property(_gLucifer.lucSampler_nRefs_get, _gLucifer.lucSampler_nRefs_set)
    locked = _swig_property(_gLucifer.lucSampler_locked_get, _gLucifer.lucSampler_locked_set)
    _delete = _swig_property(_gLucifer.lucSampler__delete_get, _gLucifer.lucSampler__delete_set)
    _print = _swig_property(_gLucifer.lucSampler__print_get, _gLucifer.lucSampler__print_set)
    _copy = _swig_property(_gLucifer.lucSampler__copy_get, _gLucifer.lucSampler__copy_set)
    name = _swig_property(_gLucifer.lucSampler_name_get, _gLucifer.lucSampler_name_set)
    nameAllocationType = _swig_property(_gLucifer.lucSampler_nameAllocationType_get, _gLucifer.lucSampler_nameAllocationType_set)
    _defaultConstructor = _swig_property(_gLucifer.lucSampler__defaultConstructor_get, _gLucifer.lucSampler__defaultConstructor_set)
    _construct = _swig_property(_gLucifer.lucSampler__construct_get, _gLucifer.lucSampler__construct_set)
    _build = _swig_property(_gLucifer.lucSampler__build_get, _gLucifer.lucSampler__build_set)
    _initialise = _swig_property(_gLucifer.lucSampler__initialise_get, _gLucifer.lucSampler__initialise_set)
    _execute = _swig_property(_gLucifer.lucSampler__execute_get, _gLucifer.lucSampler__execute_set)
    _destroy = _swig_property(_gLucifer.lucSampler__destroy_get, _gLucifer.lucSampler__destroy_set)
    isConstructed = _swig_property(_gLucifer.lucSampler_isConstructed_get, _gLucifer.lucSampler_isConstructed_set)
    isBuilt = _swig_property(_gLucifer.lucSampler_isBuilt_get, _gLucifer.lucSampler_isBuilt_set)
    isInitialised = _swig_property(_gLucifer.lucSampler_isInitialised_get, _gLucifer.lucSampler_isInitialised_set)
    hasExecuted = _swig_property(_gLucifer.lucSampler_hasExecuted_get, _gLucifer.lucSampler_hasExecuted_set)
    isDestroyed = _swig_property(_gLucifer.lucSampler_isDestroyed_get, _gLucifer.lucSampler_isDestroyed_set)
    constructType = _swig_property(_gLucifer.lucSampler_constructType_get, _gLucifer.lucSampler_constructType_set)
    buildType = _swig_property(_gLucifer.lucSampler_buildType_get, _gLucifer.lucSampler_buildType_set)
    initialiseType = _swig_property(_gLucifer.lucSampler_initialiseType_get, _gLucifer.lucSampler_initialiseType_set)
    executeType = _swig_property(_gLucifer.lucSampler_executeType_get, _gLucifer.lucSampler_executeType_set)
    destroyType = _swig_property(_gLucifer.lucSampler_destroyType_get, _gLucifer.lucSampler_destroyType_set)
    context = _swig_property(_gLucifer.lucSampler_context_get, _gLucifer.lucSampler_context_set)
    _setup = _swig_property(_gLucifer.lucSampler__setup_get, _gLucifer.lucSampler__setup_set)
    _draw = _swig_property(_gLucifer.lucSampler__draw_get, _gLucifer.lucSampler__draw_set)
    _cleanUp = _swig_property(_gLucifer.lucSampler__cleanUp_get, _gLucifer.lucSampler__cleanUp_set)
    needsToCleanUp = _swig_property(_gLucifer.lucSampler_needsToCleanUp_get, _gLucifer.lucSampler_needsToCleanUp_set)
    needsToDraw = _swig_property(_gLucifer.lucSampler_needsToDraw_get, _gLucifer.lucSampler_needsToDraw_set)
    depthSort = _swig_property(_gLucifer.lucSampler_depthSort_get, _gLucifer.lucSampler_depthSort_set)
    position = _swig_property(_gLucifer.lucSampler_position_get, _gLucifer.lucSampler_position_set)
    disabled = _swig_property(_gLucifer.lucSampler_disabled_get, _gLucifer.lucSampler_disabled_set)
    colourMap = _swig_property(_gLucifer.lucSampler_colourMap_get, _gLucifer.lucSampler_colourMap_set)
    colour = _swig_property(_gLucifer.lucSampler_colour_get, _gLucifer.lucSampler_colour_set)
    opacity = _swig_property(_gLucifer.lucSampler_opacity_get, _gLucifer.lucSampler_opacity_set)
    id = _swig_property(_gLucifer.lucSampler_id_get, _gLucifer.lucSampler_id_set)
    properties = _swig_property(_gLucifer.lucSampler_properties_get, _gLucifer.lucSampler_properties_set)
    comm = _swig_property(_gLucifer.lucSampler_comm_get, _gLucifer.lucSampler_comm_set)
    rank = _swig_property(_gLucifer.lucSampler_rank_get, _gLucifer.lucSampler_rank_set)
    nproc = _swig_property(_gLucifer.lucSampler_nproc_get, _gLucifer.lucSampler_nproc_set)
    mesh = _swig_property(_gLucifer.lucSampler_mesh_get, _gLucifer.lucSampler_mesh_set)
    fieldComponentCount = _swig_property(_gLucifer.lucSampler_fieldComponentCount_get, _gLucifer.lucSampler_fieldComponentCount_set)
    cppdata = _swig_property(_gLucifer.lucSampler_cppdata_get, _gLucifer.lucSampler_cppdata_set)
    dim = _swig_property(_gLucifer.lucSampler_dim_get, _gLucifer.lucSampler_dim_set)
    fieldDim = _swig_property(_gLucifer.lucSampler_fieldDim_get, _gLucifer.lucSampler_fieldDim_set)

    def __init__(self):
        _gLucifer.lucSampler_swiginit(self, _gLucifer.new_lucSampler())
    __swig_destroy__ = _gLucifer.delete_lucSampler
lucSampler_swigregister = _gLucifer.lucSampler_swigregister
lucSampler_swigregister(lucSampler)
lucSampler_Type = cvar.lucSampler_Type


def _lucSampler_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _setup: 'lucDrawingObject_SetupFunction *', _draw: 'lucDrawingObject_DrawFunction *', _cleanUp: 'lucDrawingObject_CleanUpFunction *') -> "lucSampler *":
    return _gLucifer._lucSampler_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _setup, _draw, _cleanUp)
_lucSampler_New = _gLucifer._lucSampler_New

def _lucSampler_Delete(drawingObject: 'void *') -> "void":
    return _gLucifer._lucSampler_Delete(drawingObject)
_lucSampler_Delete = _gLucifer._lucSampler_Delete

def _lucSampler_Print(drawingObject: 'void *', stream: 'Stream *') -> "void":
    return _gLucifer._lucSampler_Print(drawingObject, stream)
_lucSampler_Print = _gLucifer._lucSampler_Print

def _lucSampler_DefaultNew(name: 'Name') -> "void *":
    return _gLucifer._lucSampler_DefaultNew(name)
_lucSampler_DefaultNew = _gLucifer._lucSampler_DefaultNew

def _lucSampler_AssignFromXML(drawingObject: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _gLucifer._lucSampler_AssignFromXML(drawingObject, cf, data)
_lucSampler_AssignFromXML = _gLucifer._lucSampler_AssignFromXML

def _lucSampler_Build(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucSampler_Build(drawingObject, data)
_lucSampler_Build = _gLucifer._lucSampler_Build

def _lucSampler_Initialise(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucSampler_Initialise(drawingObject, data)
_lucSampler_Initialise = _gLucifer._lucSampler_Initialise

def _lucSampler_Execute(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucSampler_Execute(drawingObject, data)
_lucSampler_Execute = _gLucifer._lucSampler_Execute

def _lucSampler_Destroy(drawingObject: 'void *', data: 'void *') -> "void":
    return _gLucifer._lucSampler_Destroy(drawingObject, data)
_lucSampler_Destroy = _gLucifer._lucSampler_Destroy

def _lucSampler_Setup(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucSampler_Setup(drawingObject, database, _context)
_lucSampler_Setup = _gLucifer._lucSampler_Setup

def _lucSampler_Draw(drawingObject: 'void *', database: 'lucDatabase *', _context: 'void *') -> "void":
    return _gLucifer._lucSampler_Draw(drawingObject, database, _context)
_lucSampler_Draw = _gLucifer._lucSampler_Draw

def lucSampler_SampleField(drawingObject: 'void *', vertices: 'float *', values: 'float *') -> "void":
    return _gLucifer.lucSampler_SampleField(drawingObject, vertices, values)
lucSampler_SampleField = _gLucifer.lucSampler_SampleField

def gLucifer_Finalise() -> "Bool":
    return _gLucifer.gLucifer_Finalise()
gLucifer_Finalise = _gLucifer.gLucifer_Finalise

def gLucifer_Init(argc: 'int *', argv: 'char **[]') -> "Bool":
    return _gLucifer.gLucifer_Init(argc, argv)
gLucifer_Init = _gLucifer.gLucifer_Init


