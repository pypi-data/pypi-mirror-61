# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _PICellerator.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PICellerator')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PICellerator')
    _PICellerator = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PICellerator', [dirname(__file__)])
        except ImportError:
            import _PICellerator
            return _PICellerator
        if fp is not None:
            try:
                _mod = imp.load_module('_PICellerator', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _PICellerator = swig_import_helper()
    del swig_import_helper
else:
    import _PICellerator
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import underworld.libUnderworld.libUnderworldPy.StGermain
import underworld.libUnderworld.libUnderworldPy.StgDomain
import underworld.libUnderworld.libUnderworldPy.StgFEM
class IntegrationPointsSwarm(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_PICellerator.IntegrationPointsSwarm__sizeOfSelf_get, _PICellerator.IntegrationPointsSwarm__sizeOfSelf_set)
    _deleteSelf = _swig_property(_PICellerator.IntegrationPointsSwarm__deleteSelf_get, _PICellerator.IntegrationPointsSwarm__deleteSelf_set)
    type = _swig_property(_PICellerator.IntegrationPointsSwarm_type_get, _PICellerator.IntegrationPointsSwarm_type_set)
    nRefs = _swig_property(_PICellerator.IntegrationPointsSwarm_nRefs_get, _PICellerator.IntegrationPointsSwarm_nRefs_set)
    locked = _swig_property(_PICellerator.IntegrationPointsSwarm_locked_get, _PICellerator.IntegrationPointsSwarm_locked_set)
    _delete = _swig_property(_PICellerator.IntegrationPointsSwarm__delete_get, _PICellerator.IntegrationPointsSwarm__delete_set)
    _print = _swig_property(_PICellerator.IntegrationPointsSwarm__print_get, _PICellerator.IntegrationPointsSwarm__print_set)
    _copy = _swig_property(_PICellerator.IntegrationPointsSwarm__copy_get, _PICellerator.IntegrationPointsSwarm__copy_set)
    name = _swig_property(_PICellerator.IntegrationPointsSwarm_name_get, _PICellerator.IntegrationPointsSwarm_name_set)
    nameAllocationType = _swig_property(_PICellerator.IntegrationPointsSwarm_nameAllocationType_get, _PICellerator.IntegrationPointsSwarm_nameAllocationType_set)
    _defaultConstructor = _swig_property(_PICellerator.IntegrationPointsSwarm__defaultConstructor_get, _PICellerator.IntegrationPointsSwarm__defaultConstructor_set)
    _construct = _swig_property(_PICellerator.IntegrationPointsSwarm__construct_get, _PICellerator.IntegrationPointsSwarm__construct_set)
    _build = _swig_property(_PICellerator.IntegrationPointsSwarm__build_get, _PICellerator.IntegrationPointsSwarm__build_set)
    _initialise = _swig_property(_PICellerator.IntegrationPointsSwarm__initialise_get, _PICellerator.IntegrationPointsSwarm__initialise_set)
    _execute = _swig_property(_PICellerator.IntegrationPointsSwarm__execute_get, _PICellerator.IntegrationPointsSwarm__execute_set)
    _destroy = _swig_property(_PICellerator.IntegrationPointsSwarm__destroy_get, _PICellerator.IntegrationPointsSwarm__destroy_set)
    isConstructed = _swig_property(_PICellerator.IntegrationPointsSwarm_isConstructed_get, _PICellerator.IntegrationPointsSwarm_isConstructed_set)
    isBuilt = _swig_property(_PICellerator.IntegrationPointsSwarm_isBuilt_get, _PICellerator.IntegrationPointsSwarm_isBuilt_set)
    isInitialised = _swig_property(_PICellerator.IntegrationPointsSwarm_isInitialised_get, _PICellerator.IntegrationPointsSwarm_isInitialised_set)
    hasExecuted = _swig_property(_PICellerator.IntegrationPointsSwarm_hasExecuted_get, _PICellerator.IntegrationPointsSwarm_hasExecuted_set)
    isDestroyed = _swig_property(_PICellerator.IntegrationPointsSwarm_isDestroyed_get, _PICellerator.IntegrationPointsSwarm_isDestroyed_set)
    constructType = _swig_property(_PICellerator.IntegrationPointsSwarm_constructType_get, _PICellerator.IntegrationPointsSwarm_constructType_set)
    buildType = _swig_property(_PICellerator.IntegrationPointsSwarm_buildType_get, _PICellerator.IntegrationPointsSwarm_buildType_set)
    initialiseType = _swig_property(_PICellerator.IntegrationPointsSwarm_initialiseType_get, _PICellerator.IntegrationPointsSwarm_initialiseType_set)
    executeType = _swig_property(_PICellerator.IntegrationPointsSwarm_executeType_get, _PICellerator.IntegrationPointsSwarm_executeType_set)
    destroyType = _swig_property(_PICellerator.IntegrationPointsSwarm_destroyType_get, _PICellerator.IntegrationPointsSwarm_destroyType_set)
    context = _swig_property(_PICellerator.IntegrationPointsSwarm_context_get, _PICellerator.IntegrationPointsSwarm_context_set)
    cellLayout = _swig_property(_PICellerator.IntegrationPointsSwarm_cellLayout_get, _PICellerator.IntegrationPointsSwarm_cellLayout_set)
    particleLayout = _swig_property(_PICellerator.IntegrationPointsSwarm_particleLayout_get, _PICellerator.IntegrationPointsSwarm_particleLayout_set)
    dim = _swig_property(_PICellerator.IntegrationPointsSwarm_dim_get, _PICellerator.IntegrationPointsSwarm_dim_set)
    extension_Register = _swig_property(_PICellerator.IntegrationPointsSwarm_extension_Register_get, _PICellerator.IntegrationPointsSwarm_extension_Register_set)
    debug = _swig_property(_PICellerator.IntegrationPointsSwarm_debug_get, _PICellerator.IntegrationPointsSwarm_debug_set)
    myRank = _swig_property(_PICellerator.IntegrationPointsSwarm_myRank_get, _PICellerator.IntegrationPointsSwarm_myRank_set)
    nProc = _swig_property(_PICellerator.IntegrationPointsSwarm_nProc_get, _PICellerator.IntegrationPointsSwarm_nProc_set)
    comm = _swig_property(_PICellerator.IntegrationPointsSwarm_comm_get, _PICellerator.IntegrationPointsSwarm_comm_set)
    isSwarmTypeToCheckPointAndReload = _swig_property(_PICellerator.IntegrationPointsSwarm_isSwarmTypeToCheckPointAndReload_get, _PICellerator.IntegrationPointsSwarm_isSwarmTypeToCheckPointAndReload_set)
    cellLocalCount = _swig_property(_PICellerator.IntegrationPointsSwarm_cellLocalCount_get, _PICellerator.IntegrationPointsSwarm_cellLocalCount_set)
    cellDomainCount = _swig_property(_PICellerator.IntegrationPointsSwarm_cellDomainCount_get, _PICellerator.IntegrationPointsSwarm_cellDomainCount_set)
    cellShadowCount = _swig_property(_PICellerator.IntegrationPointsSwarm_cellShadowCount_get, _PICellerator.IntegrationPointsSwarm_cellShadowCount_set)
    cellPointTbl = _swig_property(_PICellerator.IntegrationPointsSwarm_cellPointTbl_get, _PICellerator.IntegrationPointsSwarm_cellPointTbl_set)
    cellPointCountTbl = _swig_property(_PICellerator.IntegrationPointsSwarm_cellPointCountTbl_get, _PICellerator.IntegrationPointsSwarm_cellPointCountTbl_set)
    cellParticleTbl = _swig_property(_PICellerator.IntegrationPointsSwarm_cellParticleTbl_get, _PICellerator.IntegrationPointsSwarm_cellParticleTbl_set)
    cellParticleCountTbl = _swig_property(_PICellerator.IntegrationPointsSwarm_cellParticleCountTbl_get, _PICellerator.IntegrationPointsSwarm_cellParticleCountTbl_set)
    cellParticleSizeTbl = _swig_property(_PICellerator.IntegrationPointsSwarm_cellParticleSizeTbl_get, _PICellerator.IntegrationPointsSwarm_cellParticleSizeTbl_set)
    cellParticleTblDelta = _swig_property(_PICellerator.IntegrationPointsSwarm_cellParticleTblDelta_get, _PICellerator.IntegrationPointsSwarm_cellParticleTblDelta_set)
    particles = _swig_property(_PICellerator.IntegrationPointsSwarm_particles_get, _PICellerator.IntegrationPointsSwarm_particles_set)
    particleSize = _swig_property(_PICellerator.IntegrationPointsSwarm_particleSize_get, _PICellerator.IntegrationPointsSwarm_particleSize_set)
    preReallocParticleSize = _swig_property(_PICellerator.IntegrationPointsSwarm_preReallocParticleSize_get, _PICellerator.IntegrationPointsSwarm_preReallocParticleSize_set)
    particleLocalCount = _swig_property(_PICellerator.IntegrationPointsSwarm_particleLocalCount_get, _PICellerator.IntegrationPointsSwarm_particleLocalCount_set)
    particlesArraySize = _swig_property(_PICellerator.IntegrationPointsSwarm_particlesArraySize_get, _PICellerator.IntegrationPointsSwarm_particlesArraySize_set)
    particlesArrayDelta = _swig_property(_PICellerator.IntegrationPointsSwarm_particlesArrayDelta_get, _PICellerator.IntegrationPointsSwarm_particlesArrayDelta_set)
    extraParticlesFactor = _swig_property(_PICellerator.IntegrationPointsSwarm_extraParticlesFactor_get, _PICellerator.IntegrationPointsSwarm_extraParticlesFactor_set)
    shadowTablesBuilt = _swig_property(_PICellerator.IntegrationPointsSwarm_shadowTablesBuilt_get, _PICellerator.IntegrationPointsSwarm_shadowTablesBuilt_set)
    shadowCellParticleTbl = _swig_property(_PICellerator.IntegrationPointsSwarm_shadowCellParticleTbl_get, _PICellerator.IntegrationPointsSwarm_shadowCellParticleTbl_set)
    shadowCellParticleCountTbl = _swig_property(_PICellerator.IntegrationPointsSwarm_shadowCellParticleCountTbl_get, _PICellerator.IntegrationPointsSwarm_shadowCellParticleCountTbl_set)
    shadowParticles = _swig_property(_PICellerator.IntegrationPointsSwarm_shadowParticles_get, _PICellerator.IntegrationPointsSwarm_shadowParticles_set)
    shadowParticleCount = _swig_property(_PICellerator.IntegrationPointsSwarm_shadowParticleCount_get, _PICellerator.IntegrationPointsSwarm_shadowParticleCount_set)
    swarmVariable_Register = _swig_property(_PICellerator.IntegrationPointsSwarm_swarmVariable_Register_get, _PICellerator.IntegrationPointsSwarm_swarmVariable_Register_set)
    owningCellVariable = _swig_property(_PICellerator.IntegrationPointsSwarm_owningCellVariable_get, _PICellerator.IntegrationPointsSwarm_owningCellVariable_set)
    globalIdVariable = _swig_property(_PICellerator.IntegrationPointsSwarm_globalIdVariable_get, _PICellerator.IntegrationPointsSwarm_globalIdVariable_set)
    gidExtHandle = _swig_property(_PICellerator.IntegrationPointsSwarm_gidExtHandle_get, _PICellerator.IntegrationPointsSwarm_gidExtHandle_set)
    particleExtensionMgr = _swig_property(_PICellerator.IntegrationPointsSwarm_particleExtensionMgr_get, _PICellerator.IntegrationPointsSwarm_particleExtensionMgr_set)
    commHandlerList = _swig_property(_PICellerator.IntegrationPointsSwarm_commHandlerList_get, _PICellerator.IntegrationPointsSwarm_commHandlerList_set)
    nSwarmVars = _swig_property(_PICellerator.IntegrationPointsSwarm_nSwarmVars_get, _PICellerator.IntegrationPointsSwarm_nSwarmVars_set)
    swarmVars = _swig_property(_PICellerator.IntegrationPointsSwarm_swarmVars_get, _PICellerator.IntegrationPointsSwarm_swarmVars_set)
    ics = _swig_property(_PICellerator.IntegrationPointsSwarm_ics_get, _PICellerator.IntegrationPointsSwarm_ics_set)
    swarmReg_I = _swig_property(_PICellerator.IntegrationPointsSwarm_swarmReg_I_get, _PICellerator.IntegrationPointsSwarm_swarmReg_I_set)
    incArray = _swig_property(_PICellerator.IntegrationPointsSwarm_incArray_get, _PICellerator.IntegrationPointsSwarm_incArray_set)
    expanding = _swig_property(_PICellerator.IntegrationPointsSwarm_expanding_get, _PICellerator.IntegrationPointsSwarm_expanding_set)
    isAdvecting = _swig_property(_PICellerator.IntegrationPointsSwarm_isAdvecting_get, _PICellerator.IntegrationPointsSwarm_isAdvecting_set)
    mirroredSwarm = _swig_property(_PICellerator.IntegrationPointsSwarm_mirroredSwarm_get, _PICellerator.IntegrationPointsSwarm_mirroredSwarm_set)
    allow_parallel_nn = _swig_property(_PICellerator.IntegrationPointsSwarm_allow_parallel_nn_get, _PICellerator.IntegrationPointsSwarm_allow_parallel_nn_set)
    mesh = _swig_property(_PICellerator.IntegrationPointsSwarm_mesh_get, _PICellerator.IntegrationPointsSwarm_mesh_set)
    localCoordVariable = _swig_property(_PICellerator.IntegrationPointsSwarm_localCoordVariable_get, _PICellerator.IntegrationPointsSwarm_localCoordVariable_set)
    weightVariable = _swig_property(_PICellerator.IntegrationPointsSwarm_weightVariable_get, _PICellerator.IntegrationPointsSwarm_weightVariable_set)
    swarmsMappedTo = _swig_property(_PICellerator.IntegrationPointsSwarm_swarmsMappedTo_get, _PICellerator.IntegrationPointsSwarm_swarmsMappedTo_set)

    def __init__(self):
        _PICellerator.IntegrationPointsSwarm_swiginit(self, _PICellerator.new_IntegrationPointsSwarm())
    __swig_destroy__ = _PICellerator.delete_IntegrationPointsSwarm
IntegrationPointsSwarm_swigregister = _PICellerator.IntegrationPointsSwarm_swigregister
IntegrationPointsSwarm_swigregister(IntegrationPointsSwarm)
cvar = _PICellerator.cvar
IntegrationPointsSwarm_Type = cvar.IntegrationPointsSwarm_Type


def _IntegrationPointsSwarm_DefaultNew(name: 'Name') -> "void *":
    return _PICellerator._IntegrationPointsSwarm_DefaultNew(name)
_IntegrationPointsSwarm_DefaultNew = _PICellerator._IntegrationPointsSwarm_DefaultNew

def _IntegrationPointsSwarm_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', particleSize: 'SizeT', ics: 'void *') -> "IntegrationPointsSwarm *":
    return _PICellerator._IntegrationPointsSwarm_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, particleSize, ics)
_IntegrationPointsSwarm_New = _PICellerator._IntegrationPointsSwarm_New

def _IntegrationPointsSwarm_AssignFromXML(shape: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _PICellerator._IntegrationPointsSwarm_AssignFromXML(shape, cf, data)
_IntegrationPointsSwarm_AssignFromXML = _PICellerator._IntegrationPointsSwarm_AssignFromXML

def _IntegrationPointsSwarm_Init(swarm: 'void *', mesh: 'FeMesh') -> "void":
    return _PICellerator._IntegrationPointsSwarm_Init(swarm, mesh)
_IntegrationPointsSwarm_Init = _PICellerator._IntegrationPointsSwarm_Init

def _IntegrationPointsSwarm_Delete(integrationPoints: 'void *') -> "void":
    return _PICellerator._IntegrationPointsSwarm_Delete(integrationPoints)
_IntegrationPointsSwarm_Delete = _PICellerator._IntegrationPointsSwarm_Delete

def _IntegrationPointsSwarm_Print(integrationPoints: 'void *', stream: 'Stream *') -> "void":
    return _PICellerator._IntegrationPointsSwarm_Print(integrationPoints, stream)
_IntegrationPointsSwarm_Print = _PICellerator._IntegrationPointsSwarm_Print

def _IntegrationPointsSwarm_Build(integrationPoints: 'void *', data: 'void *') -> "void":
    return _PICellerator._IntegrationPointsSwarm_Build(integrationPoints, data)
_IntegrationPointsSwarm_Build = _PICellerator._IntegrationPointsSwarm_Build

def _IntegrationPointsSwarm_Initialise(integrationPoints: 'void *', data: 'void *') -> "void":
    return _PICellerator._IntegrationPointsSwarm_Initialise(integrationPoints, data)
_IntegrationPointsSwarm_Initialise = _PICellerator._IntegrationPointsSwarm_Initialise

def _IntegrationPointsSwarm_Execute(integrationPoints: 'void *', data: 'void *') -> "void":
    return _PICellerator._IntegrationPointsSwarm_Execute(integrationPoints, data)
_IntegrationPointsSwarm_Execute = _PICellerator._IntegrationPointsSwarm_Execute

def _IntegrationPointsSwarm_Destroy(integrationPoints: 'void *', data: 'void *') -> "void":
    return _PICellerator._IntegrationPointsSwarm_Destroy(integrationPoints, data)
_IntegrationPointsSwarm_Destroy = _PICellerator._IntegrationPointsSwarm_Destroy

def _IntegrationPointsSwarm_UpdateHook(timeIntegrator: 'void *', swarm: 'void *') -> "void":
    return _PICellerator._IntegrationPointsSwarm_UpdateHook(timeIntegrator, swarm)
_IntegrationPointsSwarm_UpdateHook = _PICellerator._IntegrationPointsSwarm_UpdateHook

def IntegrationPointsSwarm_ClearSwarmMaps(integrationPoints: 'void *') -> "void":
    return _PICellerator.IntegrationPointsSwarm_ClearSwarmMaps(integrationPoints)
IntegrationPointsSwarm_ClearSwarmMaps = _PICellerator.IntegrationPointsSwarm_ClearSwarmMaps
class CoincidentMapper(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_PICellerator.CoincidentMapper__sizeOfSelf_get, _PICellerator.CoincidentMapper__sizeOfSelf_set)
    _deleteSelf = _swig_property(_PICellerator.CoincidentMapper__deleteSelf_get, _PICellerator.CoincidentMapper__deleteSelf_set)
    type = _swig_property(_PICellerator.CoincidentMapper_type_get, _PICellerator.CoincidentMapper_type_set)
    nRefs = _swig_property(_PICellerator.CoincidentMapper_nRefs_get, _PICellerator.CoincidentMapper_nRefs_set)
    locked = _swig_property(_PICellerator.CoincidentMapper_locked_get, _PICellerator.CoincidentMapper_locked_set)
    _delete = _swig_property(_PICellerator.CoincidentMapper__delete_get, _PICellerator.CoincidentMapper__delete_set)
    _print = _swig_property(_PICellerator.CoincidentMapper__print_get, _PICellerator.CoincidentMapper__print_set)
    _copy = _swig_property(_PICellerator.CoincidentMapper__copy_get, _PICellerator.CoincidentMapper__copy_set)
    name = _swig_property(_PICellerator.CoincidentMapper_name_get, _PICellerator.CoincidentMapper_name_set)
    nameAllocationType = _swig_property(_PICellerator.CoincidentMapper_nameAllocationType_get, _PICellerator.CoincidentMapper_nameAllocationType_set)
    _defaultConstructor = _swig_property(_PICellerator.CoincidentMapper__defaultConstructor_get, _PICellerator.CoincidentMapper__defaultConstructor_set)
    _construct = _swig_property(_PICellerator.CoincidentMapper__construct_get, _PICellerator.CoincidentMapper__construct_set)
    _build = _swig_property(_PICellerator.CoincidentMapper__build_get, _PICellerator.CoincidentMapper__build_set)
    _initialise = _swig_property(_PICellerator.CoincidentMapper__initialise_get, _PICellerator.CoincidentMapper__initialise_set)
    _execute = _swig_property(_PICellerator.CoincidentMapper__execute_get, _PICellerator.CoincidentMapper__execute_set)
    _destroy = _swig_property(_PICellerator.CoincidentMapper__destroy_get, _PICellerator.CoincidentMapper__destroy_set)
    isConstructed = _swig_property(_PICellerator.CoincidentMapper_isConstructed_get, _PICellerator.CoincidentMapper_isConstructed_set)
    isBuilt = _swig_property(_PICellerator.CoincidentMapper_isBuilt_get, _PICellerator.CoincidentMapper_isBuilt_set)
    isInitialised = _swig_property(_PICellerator.CoincidentMapper_isInitialised_get, _PICellerator.CoincidentMapper_isInitialised_set)
    hasExecuted = _swig_property(_PICellerator.CoincidentMapper_hasExecuted_get, _PICellerator.CoincidentMapper_hasExecuted_set)
    isDestroyed = _swig_property(_PICellerator.CoincidentMapper_isDestroyed_get, _PICellerator.CoincidentMapper_isDestroyed_set)
    constructType = _swig_property(_PICellerator.CoincidentMapper_constructType_get, _PICellerator.CoincidentMapper_constructType_set)
    buildType = _swig_property(_PICellerator.CoincidentMapper_buildType_get, _PICellerator.CoincidentMapper_buildType_set)
    initialiseType = _swig_property(_PICellerator.CoincidentMapper_initialiseType_get, _PICellerator.CoincidentMapper_initialiseType_set)
    executeType = _swig_property(_PICellerator.CoincidentMapper_executeType_get, _PICellerator.CoincidentMapper_executeType_set)
    destroyType = _swig_property(_PICellerator.CoincidentMapper_destroyType_get, _PICellerator.CoincidentMapper_destroyType_set)
    integrationSwarm = _swig_property(_PICellerator.CoincidentMapper_integrationSwarm_get, _PICellerator.CoincidentMapper_integrationSwarm_set)
    materialSwarm = _swig_property(_PICellerator.CoincidentMapper_materialSwarm_get, _PICellerator.CoincidentMapper_materialSwarm_set)

    def __init__(self):
        _PICellerator.CoincidentMapper_swiginit(self, _PICellerator.new_CoincidentMapper())
    __swig_destroy__ = _PICellerator.delete_CoincidentMapper
CoincidentMapper_swigregister = _PICellerator.CoincidentMapper_swigregister
CoincidentMapper_swigregister(CoincidentMapper)
CoincidentMapper_Type = cvar.CoincidentMapper_Type


def _CoincidentMapper_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *') -> "CoincidentMapper *":
    return _PICellerator._CoincidentMapper_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy)
_CoincidentMapper_New = _PICellerator._CoincidentMapper_New

def _CoincidentMapper_Delete(mapper: 'void *') -> "void":
    return _PICellerator._CoincidentMapper_Delete(mapper)
_CoincidentMapper_Delete = _PICellerator._CoincidentMapper_Delete

def _CoincidentMapper_DefaultNew(name: 'Name') -> "void *":
    return _PICellerator._CoincidentMapper_DefaultNew(name)
_CoincidentMapper_DefaultNew = _PICellerator._CoincidentMapper_DefaultNew

def _CoincidentMapper_AssignFromXML(shape: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _PICellerator._CoincidentMapper_AssignFromXML(shape, cf, data)
_CoincidentMapper_AssignFromXML = _PICellerator._CoincidentMapper_AssignFromXML

def _CoincidentMapper_Build(mapper: 'void *', data: 'void *') -> "void":
    return _PICellerator._CoincidentMapper_Build(mapper, data)
_CoincidentMapper_Build = _PICellerator._CoincidentMapper_Build

def _CoincidentMapper_Initialise(mapper: 'void *', data: 'void *') -> "void":
    return _PICellerator._CoincidentMapper_Initialise(mapper, data)
_CoincidentMapper_Initialise = _PICellerator._CoincidentMapper_Initialise

def _CoincidentMapper_Map(mapper: 'void *') -> "void":
    return _PICellerator._CoincidentMapper_Map(mapper)
_CoincidentMapper_Map = _PICellerator._CoincidentMapper_Map
class SwarmMap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_PICellerator.SwarmMap__sizeOfSelf_get, _PICellerator.SwarmMap__sizeOfSelf_set)
    _deleteSelf = _swig_property(_PICellerator.SwarmMap__deleteSelf_get, _PICellerator.SwarmMap__deleteSelf_set)
    type = _swig_property(_PICellerator.SwarmMap_type_get, _PICellerator.SwarmMap_type_set)
    nRefs = _swig_property(_PICellerator.SwarmMap_nRefs_get, _PICellerator.SwarmMap_nRefs_set)
    locked = _swig_property(_PICellerator.SwarmMap_locked_get, _PICellerator.SwarmMap_locked_set)
    _delete = _swig_property(_PICellerator.SwarmMap__delete_get, _PICellerator.SwarmMap__delete_set)
    _print = _swig_property(_PICellerator.SwarmMap__print_get, _PICellerator.SwarmMap__print_set)
    _copy = _swig_property(_PICellerator.SwarmMap__copy_get, _PICellerator.SwarmMap__copy_set)
    swarm = _swig_property(_PICellerator.SwarmMap_swarm_get, _PICellerator.SwarmMap_swarm_set)
    elementCount = _swig_property(_PICellerator.SwarmMap_elementCount_get, _PICellerator.SwarmMap_elementCount_set)
    mapArray = _swig_property(_PICellerator.SwarmMap_mapArray_get, _PICellerator.SwarmMap_mapArray_set)

    def __init__(self):
        _PICellerator.SwarmMap_swiginit(self, _PICellerator.new_SwarmMap())
    __swig_destroy__ = _PICellerator.delete_SwarmMap
SwarmMap_swigregister = _PICellerator.SwarmMap_swigregister
SwarmMap_swigregister(SwarmMap)
SwarmMap_Type = cvar.SwarmMap_Type


def SwarmMap_New(swarm: 'IntegrationPointsSwarm') -> "SwarmMap *":
    return _PICellerator.SwarmMap_New(swarm)
SwarmMap_New = _PICellerator.SwarmMap_New

def _SwarmMap_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', swarm: 'IntegrationPointsSwarm') -> "SwarmMap *":
    return _PICellerator._SwarmMap_New(_sizeOfSelf, type, _delete, _print, _copy, swarm)
_SwarmMap_New = _PICellerator._SwarmMap_New

def _SwarmMap_Init(arg1: 'SwarmMap') -> "void":
    return _PICellerator._SwarmMap_Init(arg1)
_SwarmMap_Init = _PICellerator._SwarmMap_Init

def _SwarmMap_Delete(swarmMap: 'void *') -> "void":
    return _PICellerator._SwarmMap_Delete(swarmMap)
_SwarmMap_Delete = _PICellerator._SwarmMap_Delete

def _SwarmMap_Print(swarmMap: 'void *', stream: 'Stream *') -> "void":
    return _PICellerator._SwarmMap_Print(swarmMap, stream)
_SwarmMap_Print = _PICellerator._SwarmMap_Print

def SwarmMap_Clear(arg1: 'SwarmMap') -> "void":
    return _PICellerator.SwarmMap_Clear(arg1)
SwarmMap_Clear = _PICellerator.SwarmMap_Clear

def SwarmMap_Insert(arg1: 'SwarmMap', keyElementId: 'unsigned int', keyParticleCellId: 'unsigned int', insertValue: 'unsigned int') -> "void":
    return _PICellerator.SwarmMap_Insert(arg1, keyElementId, keyParticleCellId, insertValue)
SwarmMap_Insert = _PICellerator.SwarmMap_Insert

def SwarmMap_Map(arg1: 'SwarmMap', keyElementId: 'unsigned int', keyParticleCellId: 'unsigned int', returnValue: 'unsigned int *') -> "Bool":
    return _PICellerator.SwarmMap_Map(arg1, keyElementId, keyParticleCellId, returnValue)
SwarmMap_Map = _PICellerator.SwarmMap_Map
class GeneralSwarm(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_PICellerator.GeneralSwarm__sizeOfSelf_get, _PICellerator.GeneralSwarm__sizeOfSelf_set)
    _deleteSelf = _swig_property(_PICellerator.GeneralSwarm__deleteSelf_get, _PICellerator.GeneralSwarm__deleteSelf_set)
    type = _swig_property(_PICellerator.GeneralSwarm_type_get, _PICellerator.GeneralSwarm_type_set)
    nRefs = _swig_property(_PICellerator.GeneralSwarm_nRefs_get, _PICellerator.GeneralSwarm_nRefs_set)
    locked = _swig_property(_PICellerator.GeneralSwarm_locked_get, _PICellerator.GeneralSwarm_locked_set)
    _delete = _swig_property(_PICellerator.GeneralSwarm__delete_get, _PICellerator.GeneralSwarm__delete_set)
    _print = _swig_property(_PICellerator.GeneralSwarm__print_get, _PICellerator.GeneralSwarm__print_set)
    _copy = _swig_property(_PICellerator.GeneralSwarm__copy_get, _PICellerator.GeneralSwarm__copy_set)
    name = _swig_property(_PICellerator.GeneralSwarm_name_get, _PICellerator.GeneralSwarm_name_set)
    nameAllocationType = _swig_property(_PICellerator.GeneralSwarm_nameAllocationType_get, _PICellerator.GeneralSwarm_nameAllocationType_set)
    _defaultConstructor = _swig_property(_PICellerator.GeneralSwarm__defaultConstructor_get, _PICellerator.GeneralSwarm__defaultConstructor_set)
    _construct = _swig_property(_PICellerator.GeneralSwarm__construct_get, _PICellerator.GeneralSwarm__construct_set)
    _build = _swig_property(_PICellerator.GeneralSwarm__build_get, _PICellerator.GeneralSwarm__build_set)
    _initialise = _swig_property(_PICellerator.GeneralSwarm__initialise_get, _PICellerator.GeneralSwarm__initialise_set)
    _execute = _swig_property(_PICellerator.GeneralSwarm__execute_get, _PICellerator.GeneralSwarm__execute_set)
    _destroy = _swig_property(_PICellerator.GeneralSwarm__destroy_get, _PICellerator.GeneralSwarm__destroy_set)
    isConstructed = _swig_property(_PICellerator.GeneralSwarm_isConstructed_get, _PICellerator.GeneralSwarm_isConstructed_set)
    isBuilt = _swig_property(_PICellerator.GeneralSwarm_isBuilt_get, _PICellerator.GeneralSwarm_isBuilt_set)
    isInitialised = _swig_property(_PICellerator.GeneralSwarm_isInitialised_get, _PICellerator.GeneralSwarm_isInitialised_set)
    hasExecuted = _swig_property(_PICellerator.GeneralSwarm_hasExecuted_get, _PICellerator.GeneralSwarm_hasExecuted_set)
    isDestroyed = _swig_property(_PICellerator.GeneralSwarm_isDestroyed_get, _PICellerator.GeneralSwarm_isDestroyed_set)
    constructType = _swig_property(_PICellerator.GeneralSwarm_constructType_get, _PICellerator.GeneralSwarm_constructType_set)
    buildType = _swig_property(_PICellerator.GeneralSwarm_buildType_get, _PICellerator.GeneralSwarm_buildType_set)
    initialiseType = _swig_property(_PICellerator.GeneralSwarm_initialiseType_get, _PICellerator.GeneralSwarm_initialiseType_set)
    executeType = _swig_property(_PICellerator.GeneralSwarm_executeType_get, _PICellerator.GeneralSwarm_executeType_set)
    destroyType = _swig_property(_PICellerator.GeneralSwarm_destroyType_get, _PICellerator.GeneralSwarm_destroyType_set)
    context = _swig_property(_PICellerator.GeneralSwarm_context_get, _PICellerator.GeneralSwarm_context_set)
    cellLayout = _swig_property(_PICellerator.GeneralSwarm_cellLayout_get, _PICellerator.GeneralSwarm_cellLayout_set)
    particleLayout = _swig_property(_PICellerator.GeneralSwarm_particleLayout_get, _PICellerator.GeneralSwarm_particleLayout_set)
    dim = _swig_property(_PICellerator.GeneralSwarm_dim_get, _PICellerator.GeneralSwarm_dim_set)
    extension_Register = _swig_property(_PICellerator.GeneralSwarm_extension_Register_get, _PICellerator.GeneralSwarm_extension_Register_set)
    debug = _swig_property(_PICellerator.GeneralSwarm_debug_get, _PICellerator.GeneralSwarm_debug_set)
    myRank = _swig_property(_PICellerator.GeneralSwarm_myRank_get, _PICellerator.GeneralSwarm_myRank_set)
    nProc = _swig_property(_PICellerator.GeneralSwarm_nProc_get, _PICellerator.GeneralSwarm_nProc_set)
    comm = _swig_property(_PICellerator.GeneralSwarm_comm_get, _PICellerator.GeneralSwarm_comm_set)
    isSwarmTypeToCheckPointAndReload = _swig_property(_PICellerator.GeneralSwarm_isSwarmTypeToCheckPointAndReload_get, _PICellerator.GeneralSwarm_isSwarmTypeToCheckPointAndReload_set)
    cellLocalCount = _swig_property(_PICellerator.GeneralSwarm_cellLocalCount_get, _PICellerator.GeneralSwarm_cellLocalCount_set)
    cellDomainCount = _swig_property(_PICellerator.GeneralSwarm_cellDomainCount_get, _PICellerator.GeneralSwarm_cellDomainCount_set)
    cellShadowCount = _swig_property(_PICellerator.GeneralSwarm_cellShadowCount_get, _PICellerator.GeneralSwarm_cellShadowCount_set)
    cellPointTbl = _swig_property(_PICellerator.GeneralSwarm_cellPointTbl_get, _PICellerator.GeneralSwarm_cellPointTbl_set)
    cellPointCountTbl = _swig_property(_PICellerator.GeneralSwarm_cellPointCountTbl_get, _PICellerator.GeneralSwarm_cellPointCountTbl_set)
    cellParticleTbl = _swig_property(_PICellerator.GeneralSwarm_cellParticleTbl_get, _PICellerator.GeneralSwarm_cellParticleTbl_set)
    cellParticleCountTbl = _swig_property(_PICellerator.GeneralSwarm_cellParticleCountTbl_get, _PICellerator.GeneralSwarm_cellParticleCountTbl_set)
    cellParticleSizeTbl = _swig_property(_PICellerator.GeneralSwarm_cellParticleSizeTbl_get, _PICellerator.GeneralSwarm_cellParticleSizeTbl_set)
    cellParticleTblDelta = _swig_property(_PICellerator.GeneralSwarm_cellParticleTblDelta_get, _PICellerator.GeneralSwarm_cellParticleTblDelta_set)
    particles = _swig_property(_PICellerator.GeneralSwarm_particles_get, _PICellerator.GeneralSwarm_particles_set)
    particleSize = _swig_property(_PICellerator.GeneralSwarm_particleSize_get, _PICellerator.GeneralSwarm_particleSize_set)
    preReallocParticleSize = _swig_property(_PICellerator.GeneralSwarm_preReallocParticleSize_get, _PICellerator.GeneralSwarm_preReallocParticleSize_set)
    particleLocalCount = _swig_property(_PICellerator.GeneralSwarm_particleLocalCount_get, _PICellerator.GeneralSwarm_particleLocalCount_set)
    particlesArraySize = _swig_property(_PICellerator.GeneralSwarm_particlesArraySize_get, _PICellerator.GeneralSwarm_particlesArraySize_set)
    particlesArrayDelta = _swig_property(_PICellerator.GeneralSwarm_particlesArrayDelta_get, _PICellerator.GeneralSwarm_particlesArrayDelta_set)
    extraParticlesFactor = _swig_property(_PICellerator.GeneralSwarm_extraParticlesFactor_get, _PICellerator.GeneralSwarm_extraParticlesFactor_set)
    shadowTablesBuilt = _swig_property(_PICellerator.GeneralSwarm_shadowTablesBuilt_get, _PICellerator.GeneralSwarm_shadowTablesBuilt_set)
    shadowCellParticleTbl = _swig_property(_PICellerator.GeneralSwarm_shadowCellParticleTbl_get, _PICellerator.GeneralSwarm_shadowCellParticleTbl_set)
    shadowCellParticleCountTbl = _swig_property(_PICellerator.GeneralSwarm_shadowCellParticleCountTbl_get, _PICellerator.GeneralSwarm_shadowCellParticleCountTbl_set)
    shadowParticles = _swig_property(_PICellerator.GeneralSwarm_shadowParticles_get, _PICellerator.GeneralSwarm_shadowParticles_set)
    shadowParticleCount = _swig_property(_PICellerator.GeneralSwarm_shadowParticleCount_get, _PICellerator.GeneralSwarm_shadowParticleCount_set)
    swarmVariable_Register = _swig_property(_PICellerator.GeneralSwarm_swarmVariable_Register_get, _PICellerator.GeneralSwarm_swarmVariable_Register_set)
    owningCellVariable = _swig_property(_PICellerator.GeneralSwarm_owningCellVariable_get, _PICellerator.GeneralSwarm_owningCellVariable_set)
    globalIdVariable = _swig_property(_PICellerator.GeneralSwarm_globalIdVariable_get, _PICellerator.GeneralSwarm_globalIdVariable_set)
    gidExtHandle = _swig_property(_PICellerator.GeneralSwarm_gidExtHandle_get, _PICellerator.GeneralSwarm_gidExtHandle_set)
    particleExtensionMgr = _swig_property(_PICellerator.GeneralSwarm_particleExtensionMgr_get, _PICellerator.GeneralSwarm_particleExtensionMgr_set)
    commHandlerList = _swig_property(_PICellerator.GeneralSwarm_commHandlerList_get, _PICellerator.GeneralSwarm_commHandlerList_set)
    nSwarmVars = _swig_property(_PICellerator.GeneralSwarm_nSwarmVars_get, _PICellerator.GeneralSwarm_nSwarmVars_set)
    swarmVars = _swig_property(_PICellerator.GeneralSwarm_swarmVars_get, _PICellerator.GeneralSwarm_swarmVars_set)
    ics = _swig_property(_PICellerator.GeneralSwarm_ics_get, _PICellerator.GeneralSwarm_ics_set)
    swarmReg_I = _swig_property(_PICellerator.GeneralSwarm_swarmReg_I_get, _PICellerator.GeneralSwarm_swarmReg_I_set)
    incArray = _swig_property(_PICellerator.GeneralSwarm_incArray_get, _PICellerator.GeneralSwarm_incArray_set)
    expanding = _swig_property(_PICellerator.GeneralSwarm_expanding_get, _PICellerator.GeneralSwarm_expanding_set)
    isAdvecting = _swig_property(_PICellerator.GeneralSwarm_isAdvecting_get, _PICellerator.GeneralSwarm_isAdvecting_set)
    mirroredSwarm = _swig_property(_PICellerator.GeneralSwarm_mirroredSwarm_get, _PICellerator.GeneralSwarm_mirroredSwarm_set)
    allow_parallel_nn = _swig_property(_PICellerator.GeneralSwarm_allow_parallel_nn_get, _PICellerator.GeneralSwarm_allow_parallel_nn_set)
    swarmAdvector = _swig_property(_PICellerator.GeneralSwarm_swarmAdvector_get, _PICellerator.GeneralSwarm_swarmAdvector_set)
    escapedRoutine = _swig_property(_PICellerator.GeneralSwarm_escapedRoutine_get, _PICellerator.GeneralSwarm_escapedRoutine_set)
    particleCoordVariable = _swig_property(_PICellerator.GeneralSwarm_particleCoordVariable_get, _PICellerator.GeneralSwarm_particleCoordVariable_set)
    previousIntSwarmMap = _swig_property(_PICellerator.GeneralSwarm_previousIntSwarmMap_get, _PICellerator.GeneralSwarm_previousIntSwarmMap_set)
    intSwarmMapList = _swig_property(_PICellerator.GeneralSwarm_intSwarmMapList_get, _PICellerator.GeneralSwarm_intSwarmMapList_set)
    index = _swig_property(_PICellerator.GeneralSwarm_index_get, _PICellerator.GeneralSwarm_index_set)
    index_int = _swig_property(_PICellerator.GeneralSwarm_index_int_get, _PICellerator.GeneralSwarm_index_int_set)

    def __init__(self):
        _PICellerator.GeneralSwarm_swiginit(self, _PICellerator.new_GeneralSwarm())
    __swig_destroy__ = _PICellerator.delete_GeneralSwarm
GeneralSwarm.GeneralSwarm_AddParticlesFromCoordArray = new_instancemethod(_PICellerator.GeneralSwarm_GeneralSwarm_AddParticlesFromCoordArray, None, GeneralSwarm)
GeneralSwarm_swigregister = _PICellerator.GeneralSwarm_swigregister
GeneralSwarm_swigregister(GeneralSwarm)
GeneralSwarm_Type = cvar.GeneralSwarm_Type


def _GeneralSwarm_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', particleSize: 'SizeT', ics: 'void *') -> "GeneralSwarm *":
    return _PICellerator._GeneralSwarm_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, particleSize, ics)
_GeneralSwarm_New = _PICellerator._GeneralSwarm_New

def _GeneralSwarm_Delete(swarm: 'void *') -> "void":
    return _PICellerator._GeneralSwarm_Delete(swarm)
_GeneralSwarm_Delete = _PICellerator._GeneralSwarm_Delete

def _GeneralSwarm_DefaultNew(name: 'Name') -> "void *":
    return _PICellerator._GeneralSwarm_DefaultNew(name)
_GeneralSwarm_DefaultNew = _PICellerator._GeneralSwarm_DefaultNew

def _GeneralSwarm_AssignFromXML(shape: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _PICellerator._GeneralSwarm_AssignFromXML(shape, cf, data)
_GeneralSwarm_AssignFromXML = _PICellerator._GeneralSwarm_AssignFromXML

def _GeneralSwarm_Build(swarm: 'void *', data: 'void *') -> "void":
    return _PICellerator._GeneralSwarm_Build(swarm, data)
_GeneralSwarm_Build = _PICellerator._GeneralSwarm_Build

def _GeneralSwarm_Initialise(swarm: 'void *', data: 'void *') -> "void":
    return _PICellerator._GeneralSwarm_Initialise(swarm, data)
_GeneralSwarm_Initialise = _PICellerator._GeneralSwarm_Initialise

def _GeneralSwarm_Execute(swarm: 'void *', data: 'void *') -> "void":
    return _PICellerator._GeneralSwarm_Execute(swarm, data)
_GeneralSwarm_Execute = _PICellerator._GeneralSwarm_Execute

def _GeneralSwarm_Destroy(swarm: 'void *', data: 'void *') -> "void":
    return _PICellerator._GeneralSwarm_Destroy(swarm, data)
_GeneralSwarm_Destroy = _PICellerator._GeneralSwarm_Destroy

def _GeneralSwarm_Init(swarm: 'void *', escapedRoutine: 'EscapedRoutine *') -> "void":
    return _PICellerator._GeneralSwarm_Init(swarm, escapedRoutine)
_GeneralSwarm_Init = _PICellerator._GeneralSwarm_Init

def GeneralSwarm_GetExtensionAt(swarm: 'void *', point_I: 'Index', extHandle: 'Index') -> "void *":
    return _PICellerator.GeneralSwarm_GetExtensionAt(swarm, point_I, extHandle)
GeneralSwarm_GetExtensionAt = _PICellerator.GeneralSwarm_GetExtensionAt

def GeneralSwarm_AddParticlesFromCoordArray(_swarm: 'void *', count: 'Index') -> "PyObject *":
    return _PICellerator.GeneralSwarm_AddParticlesFromCoordArray(_swarm, count)
GeneralSwarm_AddParticlesFromCoordArray = _PICellerator.GeneralSwarm_AddParticlesFromCoordArray

def GeneralSwarm_AddParticle(swarm: 'void *', dim: 'Index', xI: 'double', xJ: 'double', xK: 'double') -> "int":
    return _PICellerator.GeneralSwarm_AddParticle(swarm, dim, xI, xJ, xK)
GeneralSwarm_AddParticle = _PICellerator.GeneralSwarm_AddParticle

def GeneralSwarm_IntegrationPointMap(_self: 'void *', intSwarm: 'void *', elementId: 'unsigned int', intPtCellId: 'unsigned int') -> "unsigned int":
    return _PICellerator.GeneralSwarm_IntegrationPointMap(_self, intSwarm, elementId, intPtCellId)
GeneralSwarm_IntegrationPointMap = _PICellerator.GeneralSwarm_IntegrationPointMap

def GeneralSwarm_ClearSwarmMaps(swarm: 'void *') -> "void":
    return _PICellerator.GeneralSwarm_ClearSwarmMaps(swarm)
GeneralSwarm_ClearSwarmMaps = _PICellerator.GeneralSwarm_ClearSwarmMaps

def GeneralSwarm_DeleteIndex(swarm: 'void *') -> "void":
    return _PICellerator.GeneralSwarm_DeleteIndex(swarm)
GeneralSwarm_DeleteIndex = _PICellerator.GeneralSwarm_DeleteIndex

def GeneralSwarm_GetClosestParticles(swarm: 'void *', coord: 'double const *', num_parts: 'int') -> "size_t":
    return _PICellerator.GeneralSwarm_GetClosestParticles(swarm, coord, num_parts)
GeneralSwarm_GetClosestParticles = _PICellerator.GeneralSwarm_GetClosestParticles
class SwarmAdvector(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_PICellerator.SwarmAdvector__sizeOfSelf_get, _PICellerator.SwarmAdvector__sizeOfSelf_set)
    _deleteSelf = _swig_property(_PICellerator.SwarmAdvector__deleteSelf_get, _PICellerator.SwarmAdvector__deleteSelf_set)
    type = _swig_property(_PICellerator.SwarmAdvector_type_get, _PICellerator.SwarmAdvector_type_set)
    nRefs = _swig_property(_PICellerator.SwarmAdvector_nRefs_get, _PICellerator.SwarmAdvector_nRefs_set)
    locked = _swig_property(_PICellerator.SwarmAdvector_locked_get, _PICellerator.SwarmAdvector_locked_set)
    _delete = _swig_property(_PICellerator.SwarmAdvector__delete_get, _PICellerator.SwarmAdvector__delete_set)
    _print = _swig_property(_PICellerator.SwarmAdvector__print_get, _PICellerator.SwarmAdvector__print_set)
    _copy = _swig_property(_PICellerator.SwarmAdvector__copy_get, _PICellerator.SwarmAdvector__copy_set)
    name = _swig_property(_PICellerator.SwarmAdvector_name_get, _PICellerator.SwarmAdvector_name_set)
    nameAllocationType = _swig_property(_PICellerator.SwarmAdvector_nameAllocationType_get, _PICellerator.SwarmAdvector_nameAllocationType_set)
    _defaultConstructor = _swig_property(_PICellerator.SwarmAdvector__defaultConstructor_get, _PICellerator.SwarmAdvector__defaultConstructor_set)
    _construct = _swig_property(_PICellerator.SwarmAdvector__construct_get, _PICellerator.SwarmAdvector__construct_set)
    _build = _swig_property(_PICellerator.SwarmAdvector__build_get, _PICellerator.SwarmAdvector__build_set)
    _initialise = _swig_property(_PICellerator.SwarmAdvector__initialise_get, _PICellerator.SwarmAdvector__initialise_set)
    _execute = _swig_property(_PICellerator.SwarmAdvector__execute_get, _PICellerator.SwarmAdvector__execute_set)
    _destroy = _swig_property(_PICellerator.SwarmAdvector__destroy_get, _PICellerator.SwarmAdvector__destroy_set)
    isConstructed = _swig_property(_PICellerator.SwarmAdvector_isConstructed_get, _PICellerator.SwarmAdvector_isConstructed_set)
    isBuilt = _swig_property(_PICellerator.SwarmAdvector_isBuilt_get, _PICellerator.SwarmAdvector_isBuilt_set)
    isInitialised = _swig_property(_PICellerator.SwarmAdvector_isInitialised_get, _PICellerator.SwarmAdvector_isInitialised_set)
    hasExecuted = _swig_property(_PICellerator.SwarmAdvector_hasExecuted_get, _PICellerator.SwarmAdvector_hasExecuted_set)
    isDestroyed = _swig_property(_PICellerator.SwarmAdvector_isDestroyed_get, _PICellerator.SwarmAdvector_isDestroyed_set)
    constructType = _swig_property(_PICellerator.SwarmAdvector_constructType_get, _PICellerator.SwarmAdvector_constructType_set)
    buildType = _swig_property(_PICellerator.SwarmAdvector_buildType_get, _PICellerator.SwarmAdvector_buildType_set)
    initialiseType = _swig_property(_PICellerator.SwarmAdvector_initialiseType_get, _PICellerator.SwarmAdvector_initialiseType_set)
    executeType = _swig_property(_PICellerator.SwarmAdvector_executeType_get, _PICellerator.SwarmAdvector_executeType_set)
    destroyType = _swig_property(_PICellerator.SwarmAdvector_destroyType_get, _PICellerator.SwarmAdvector_destroyType_set)
    context = _swig_property(_PICellerator.SwarmAdvector_context_get, _PICellerator.SwarmAdvector_context_set)
    _calculateTimeDeriv = _swig_property(_PICellerator.SwarmAdvector__calculateTimeDeriv_get, _PICellerator.SwarmAdvector__calculateTimeDeriv_set)
    _intermediate = _swig_property(_PICellerator.SwarmAdvector__intermediate_get, _PICellerator.SwarmAdvector__intermediate_set)
    timeIntegrator = _swig_property(_PICellerator.SwarmAdvector_timeIntegrator_get, _PICellerator.SwarmAdvector_timeIntegrator_set)
    variable = _swig_property(_PICellerator.SwarmAdvector_variable_get, _PICellerator.SwarmAdvector_variable_set)
    dataCount = _swig_property(_PICellerator.SwarmAdvector_dataCount_get, _PICellerator.SwarmAdvector_dataCount_set)
    data = _swig_property(_PICellerator.SwarmAdvector_data_get, _PICellerator.SwarmAdvector_data_set)
    allowFallbackToFirstOrder = _swig_property(_PICellerator.SwarmAdvector_allowFallbackToFirstOrder_get, _PICellerator.SwarmAdvector_allowFallbackToFirstOrder_set)
    debug = _swig_property(_PICellerator.SwarmAdvector_debug_get, _PICellerator.SwarmAdvector_debug_set)
    error_msg = _swig_property(_PICellerator.SwarmAdvector_error_msg_get, _PICellerator.SwarmAdvector_error_msg_set)
    swarm = _swig_property(_PICellerator.SwarmAdvector_swarm_get, _PICellerator.SwarmAdvector_swarm_set)
    velocityField = _swig_property(_PICellerator.SwarmAdvector_velocityField_get, _PICellerator.SwarmAdvector_velocityField_set)
    periodicBCsManager = _swig_property(_PICellerator.SwarmAdvector_periodicBCsManager_get, _PICellerator.SwarmAdvector_periodicBCsManager_set)

    def __init__(self):
        _PICellerator.SwarmAdvector_swiginit(self, _PICellerator.new_SwarmAdvector())
    __swig_destroy__ = _PICellerator.delete_SwarmAdvector
SwarmAdvector_swigregister = _PICellerator.SwarmAdvector_swigregister
SwarmAdvector_swigregister(SwarmAdvector)
SwarmAdvector_Type = cvar.SwarmAdvector_Type


def SwarmAdvector_New(name: 'Name', context: 'DomainContext *', timeIntegrator: 'TimeIntegrator', velocityField: 'FeVariable', allowFallbackToFirstOrder: 'Bool', swarm: 'GeneralSwarm', periodicBCsManager: 'PeriodicBoundariesManager *') -> "SwarmAdvector *":
    return _PICellerator.SwarmAdvector_New(name, context, timeIntegrator, velocityField, allowFallbackToFirstOrder, swarm, periodicBCsManager)
SwarmAdvector_New = _PICellerator.SwarmAdvector_New

def _SwarmAdvector_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _calculateTimeDeriv: 'TimeIntegrand_CalculateTimeDerivFunction *', _intermediate: 'TimeIntegrand_IntermediateFunction *') -> "SwarmAdvector *":
    return _PICellerator._SwarmAdvector_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _calculateTimeDeriv, _intermediate)
_SwarmAdvector_New = _PICellerator._SwarmAdvector_New

def _SwarmAdvector_Init(arg1: 'SwarmAdvector', velocityField: 'FeVariable', swarm: 'GeneralSwarm', periodicBCsManager: 'PeriodicBoundariesManager *') -> "void":
    return _PICellerator._SwarmAdvector_Init(arg1, velocityField, swarm, periodicBCsManager)
_SwarmAdvector_Init = _PICellerator._SwarmAdvector_Init

def _SwarmAdvector_Delete(materialSwarm: 'void *') -> "void":
    return _PICellerator._SwarmAdvector_Delete(materialSwarm)
_SwarmAdvector_Delete = _PICellerator._SwarmAdvector_Delete

def _SwarmAdvector_Print(materialSwarm: 'void *', stream: 'Stream *') -> "void":
    return _PICellerator._SwarmAdvector_Print(materialSwarm, stream)
_SwarmAdvector_Print = _PICellerator._SwarmAdvector_Print

def _SwarmAdvector_Copy(materialSwarm: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _PICellerator._SwarmAdvector_Copy(materialSwarm, dest, deep, nameExt, ptrMap)
_SwarmAdvector_Copy = _PICellerator._SwarmAdvector_Copy

def _SwarmAdvector_DefaultNew(name: 'Name') -> "void *":
    return _PICellerator._SwarmAdvector_DefaultNew(name)
_SwarmAdvector_DefaultNew = _PICellerator._SwarmAdvector_DefaultNew

def _SwarmAdvector_AssignFromXML(shape: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _PICellerator._SwarmAdvector_AssignFromXML(shape, cf, data)
_SwarmAdvector_AssignFromXML = _PICellerator._SwarmAdvector_AssignFromXML

def _SwarmAdvector_Build(materialSwarm: 'void *', data: 'void *') -> "void":
    return _PICellerator._SwarmAdvector_Build(materialSwarm, data)
_SwarmAdvector_Build = _PICellerator._SwarmAdvector_Build

def _SwarmAdvector_Initialise(materialSwarm: 'void *', data: 'void *') -> "void":
    return _PICellerator._SwarmAdvector_Initialise(materialSwarm, data)
_SwarmAdvector_Initialise = _PICellerator._SwarmAdvector_Initialise

def _SwarmAdvector_Execute(materialSwarm: 'void *', data: 'void *') -> "void":
    return _PICellerator._SwarmAdvector_Execute(materialSwarm, data)
_SwarmAdvector_Execute = _PICellerator._SwarmAdvector_Execute

def _SwarmAdvector_Destroy(materialSwarm: 'void *', data: 'void *') -> "void":
    return _PICellerator._SwarmAdvector_Destroy(materialSwarm, data)
_SwarmAdvector_Destroy = _PICellerator._SwarmAdvector_Destroy

def _SwarmAdvector_TimeDeriv(swarmAdvector: 'void *', array_I: 'Index', timeDeriv: 'double *') -> "Bool":
    return _PICellerator._SwarmAdvector_TimeDeriv(swarmAdvector, array_I, timeDeriv)
_SwarmAdvector_TimeDeriv = _PICellerator._SwarmAdvector_TimeDeriv

def _SwarmAdvector_TimeDeriv_Quicker4IrregularMesh(swarmAdvector: 'void *', array_I: 'Index', timeDeriv: 'double *') -> "Bool":
    return _PICellerator._SwarmAdvector_TimeDeriv_Quicker4IrregularMesh(swarmAdvector, array_I, timeDeriv)
_SwarmAdvector_TimeDeriv_Quicker4IrregularMesh = _PICellerator._SwarmAdvector_TimeDeriv_Quicker4IrregularMesh

def _SwarmAdvector_Intermediate(swarmAdvector: 'void *', array_I: 'Index') -> "void":
    return _PICellerator._SwarmAdvector_Intermediate(swarmAdvector, array_I)
_SwarmAdvector_Intermediate = _PICellerator._SwarmAdvector_Intermediate

def SwarmAdvector_MaxDt(swarmAdvector: 'void *') -> "double":
    return _PICellerator.SwarmAdvector_MaxDt(swarmAdvector)
SwarmAdvector_MaxDt = _PICellerator.SwarmAdvector_MaxDt
class EscapedRoutine(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_PICellerator.EscapedRoutine__sizeOfSelf_get, _PICellerator.EscapedRoutine__sizeOfSelf_set)
    _deleteSelf = _swig_property(_PICellerator.EscapedRoutine__deleteSelf_get, _PICellerator.EscapedRoutine__deleteSelf_set)
    type = _swig_property(_PICellerator.EscapedRoutine_type_get, _PICellerator.EscapedRoutine_type_set)
    nRefs = _swig_property(_PICellerator.EscapedRoutine_nRefs_get, _PICellerator.EscapedRoutine_nRefs_set)
    locked = _swig_property(_PICellerator.EscapedRoutine_locked_get, _PICellerator.EscapedRoutine_locked_set)
    _delete = _swig_property(_PICellerator.EscapedRoutine__delete_get, _PICellerator.EscapedRoutine__delete_set)
    _print = _swig_property(_PICellerator.EscapedRoutine__print_get, _PICellerator.EscapedRoutine__print_set)
    _copy = _swig_property(_PICellerator.EscapedRoutine__copy_get, _PICellerator.EscapedRoutine__copy_set)
    name = _swig_property(_PICellerator.EscapedRoutine_name_get, _PICellerator.EscapedRoutine_name_set)
    nameAllocationType = _swig_property(_PICellerator.EscapedRoutine_nameAllocationType_get, _PICellerator.EscapedRoutine_nameAllocationType_set)
    _defaultConstructor = _swig_property(_PICellerator.EscapedRoutine__defaultConstructor_get, _PICellerator.EscapedRoutine__defaultConstructor_set)
    _construct = _swig_property(_PICellerator.EscapedRoutine__construct_get, _PICellerator.EscapedRoutine__construct_set)
    _build = _swig_property(_PICellerator.EscapedRoutine__build_get, _PICellerator.EscapedRoutine__build_set)
    _initialise = _swig_property(_PICellerator.EscapedRoutine__initialise_get, _PICellerator.EscapedRoutine__initialise_set)
    _execute = _swig_property(_PICellerator.EscapedRoutine__execute_get, _PICellerator.EscapedRoutine__execute_set)
    _destroy = _swig_property(_PICellerator.EscapedRoutine__destroy_get, _PICellerator.EscapedRoutine__destroy_set)
    isConstructed = _swig_property(_PICellerator.EscapedRoutine_isConstructed_get, _PICellerator.EscapedRoutine_isConstructed_set)
    isBuilt = _swig_property(_PICellerator.EscapedRoutine_isBuilt_get, _PICellerator.EscapedRoutine_isBuilt_set)
    isInitialised = _swig_property(_PICellerator.EscapedRoutine_isInitialised_get, _PICellerator.EscapedRoutine_isInitialised_set)
    hasExecuted = _swig_property(_PICellerator.EscapedRoutine_hasExecuted_get, _PICellerator.EscapedRoutine_hasExecuted_set)
    isDestroyed = _swig_property(_PICellerator.EscapedRoutine_isDestroyed_get, _PICellerator.EscapedRoutine_isDestroyed_set)
    constructType = _swig_property(_PICellerator.EscapedRoutine_constructType_get, _PICellerator.EscapedRoutine_constructType_set)
    buildType = _swig_property(_PICellerator.EscapedRoutine_buildType_get, _PICellerator.EscapedRoutine_buildType_set)
    initialiseType = _swig_property(_PICellerator.EscapedRoutine_initialiseType_get, _PICellerator.EscapedRoutine_initialiseType_set)
    executeType = _swig_property(_PICellerator.EscapedRoutine_executeType_get, _PICellerator.EscapedRoutine_executeType_set)
    destroyType = _swig_property(_PICellerator.EscapedRoutine_destroyType_get, _PICellerator.EscapedRoutine_destroyType_set)
    _select = _swig_property(_PICellerator.EscapedRoutine__select_get, _PICellerator.EscapedRoutine__select_set)
    debug = _swig_property(_PICellerator.EscapedRoutine_debug_get, _PICellerator.EscapedRoutine_debug_set)
    dim = _swig_property(_PICellerator.EscapedRoutine_dim_get, _PICellerator.EscapedRoutine_dim_set)
    particlesToRemoveCount = _swig_property(_PICellerator.EscapedRoutine_particlesToRemoveCount_get, _PICellerator.EscapedRoutine_particlesToRemoveCount_set)
    particlesToRemoveAlloced = _swig_property(_PICellerator.EscapedRoutine_particlesToRemoveAlloced_get, _PICellerator.EscapedRoutine_particlesToRemoveAlloced_set)
    particlesToRemoveDelta = _swig_property(_PICellerator.EscapedRoutine_particlesToRemoveDelta_get, _PICellerator.EscapedRoutine_particlesToRemoveDelta_set)
    particlesToRemoveList = _swig_property(_PICellerator.EscapedRoutine_particlesToRemoveList_get, _PICellerator.EscapedRoutine_particlesToRemoveList_set)

    def __init__(self):
        _PICellerator.EscapedRoutine_swiginit(self, _PICellerator.new_EscapedRoutine())
    __swig_destroy__ = _PICellerator.delete_EscapedRoutine
EscapedRoutine_swigregister = _PICellerator.EscapedRoutine_swigregister
EscapedRoutine_swigregister(EscapedRoutine)
EscapedRoutine_Type = cvar.EscapedRoutine_Type


def _EscapedRoutine_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _select: 'EscapedRoutine_SelectFunction *') -> "EscapedRoutine *":
    return _PICellerator._EscapedRoutine_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _select)
_EscapedRoutine_New = _PICellerator._EscapedRoutine_New

def _EscapedRoutine_DefaultNew(name: 'Name') -> "void *":
    return _PICellerator._EscapedRoutine_DefaultNew(name)
_EscapedRoutine_DefaultNew = _PICellerator._EscapedRoutine_DefaultNew

def _EscapedRoutine_Init(escapedRoutine: 'void *', dim: 'Dimension_Index', particlesToRemoveDelta: 'Particle_Index') -> "void":
    return _PICellerator._EscapedRoutine_Init(escapedRoutine, dim, particlesToRemoveDelta)
_EscapedRoutine_Init = _PICellerator._EscapedRoutine_Init

def _EscapedRoutine_Delete(escapedRoutine: 'void *') -> "void":
    return _PICellerator._EscapedRoutine_Delete(escapedRoutine)
_EscapedRoutine_Delete = _PICellerator._EscapedRoutine_Delete

def _EscapedRoutine_Print(escapedRoutine: 'void *', stream: 'Stream *') -> "void":
    return _PICellerator._EscapedRoutine_Print(escapedRoutine, stream)
_EscapedRoutine_Print = _PICellerator._EscapedRoutine_Print

def _EscapedRoutine_Copy(escapedRoutine: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _PICellerator._EscapedRoutine_Copy(escapedRoutine, dest, deep, nameExt, ptrMap)
_EscapedRoutine_Copy = _PICellerator._EscapedRoutine_Copy

def _EscapedRoutine_AssignFromXML(shape: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _PICellerator._EscapedRoutine_AssignFromXML(shape, cf, data)
_EscapedRoutine_AssignFromXML = _PICellerator._EscapedRoutine_AssignFromXML

def _EscapedRoutine_Build(escapedRoutine: 'void *', data: 'void *') -> "void":
    return _PICellerator._EscapedRoutine_Build(escapedRoutine, data)
_EscapedRoutine_Build = _PICellerator._EscapedRoutine_Build

def _EscapedRoutine_Initialise(escapedRoutine: 'void *', data: 'void *') -> "void":
    return _PICellerator._EscapedRoutine_Initialise(escapedRoutine, data)
_EscapedRoutine_Initialise = _PICellerator._EscapedRoutine_Initialise

def _EscapedRoutine_Execute(escapedRoutine: 'void *', data: 'void *') -> "void":
    return _PICellerator._EscapedRoutine_Execute(escapedRoutine, data)
_EscapedRoutine_Execute = _PICellerator._EscapedRoutine_Execute

def _EscapedRoutine_Destroy(escapedRoutine: 'void *', data: 'void *') -> "void":
    return _PICellerator._EscapedRoutine_Destroy(escapedRoutine, data)
_EscapedRoutine_Destroy = _PICellerator._EscapedRoutine_Destroy

def EscapedRoutine_Select(escapedRoutine: 'void *', _swarm: 'void *') -> "void":
    return _PICellerator.EscapedRoutine_Select(escapedRoutine, _swarm)
EscapedRoutine_Select = _PICellerator.EscapedRoutine_Select

def _EscapedRoutine_Select(escapedRoutine: 'void *', _swarm: 'void *') -> "void":
    return _PICellerator._EscapedRoutine_Select(escapedRoutine, _swarm)
_EscapedRoutine_Select = _PICellerator._EscapedRoutine_Select

def EscapedRoutine_RemoveFromSwarm(escapedRoutine: 'void *', _swarm: 'void *') -> "void":
    return _PICellerator.EscapedRoutine_RemoveFromSwarm(escapedRoutine, _swarm)
EscapedRoutine_RemoveFromSwarm = _PICellerator.EscapedRoutine_RemoveFromSwarm

def EscapedRoutine_InitialiseParticleList(escapedRoutine: 'void *') -> "void":
    return _PICellerator.EscapedRoutine_InitialiseParticleList(escapedRoutine)
EscapedRoutine_InitialiseParticleList = _PICellerator.EscapedRoutine_InitialiseParticleList

def EscapedRoutine_SetParticleToRemove(escapedRoutine: 'void *', swarm: 'Swarm', lParticle_I: 'Particle_Index') -> "void":
    return _PICellerator.EscapedRoutine_SetParticleToRemove(escapedRoutine, swarm, lParticle_I)
EscapedRoutine_SetParticleToRemove = _PICellerator.EscapedRoutine_SetParticleToRemove

def _EscapedRoutine_CompareParticles(_aParticleInfo: 'void const *', _bParticleInfo: 'void const *') -> "int":
    return _PICellerator._EscapedRoutine_CompareParticles(_aParticleInfo, _bParticleInfo)
_EscapedRoutine_CompareParticles = _PICellerator._EscapedRoutine_CompareParticles

def EscapedRoutine_SortParticleList(escapedRoutine: 'void *') -> "void":
    return _PICellerator.EscapedRoutine_SortParticleList(escapedRoutine)
EscapedRoutine_SortParticleList = _PICellerator.EscapedRoutine_SortParticleList

def EscapedRoutine_RemoveParticles(escapedRoutine: 'void *', _swarm: 'void *') -> "void":
    return _PICellerator.EscapedRoutine_RemoveParticles(escapedRoutine, _swarm)
EscapedRoutine_RemoveParticles = _PICellerator.EscapedRoutine_RemoveParticles
class WeightsCalculator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_PICellerator.WeightsCalculator__sizeOfSelf_get, _PICellerator.WeightsCalculator__sizeOfSelf_set)
    _deleteSelf = _swig_property(_PICellerator.WeightsCalculator__deleteSelf_get, _PICellerator.WeightsCalculator__deleteSelf_set)
    type = _swig_property(_PICellerator.WeightsCalculator_type_get, _PICellerator.WeightsCalculator_type_set)
    nRefs = _swig_property(_PICellerator.WeightsCalculator_nRefs_get, _PICellerator.WeightsCalculator_nRefs_set)
    locked = _swig_property(_PICellerator.WeightsCalculator_locked_get, _PICellerator.WeightsCalculator_locked_set)
    _delete = _swig_property(_PICellerator.WeightsCalculator__delete_get, _PICellerator.WeightsCalculator__delete_set)
    _print = _swig_property(_PICellerator.WeightsCalculator__print_get, _PICellerator.WeightsCalculator__print_set)
    _copy = _swig_property(_PICellerator.WeightsCalculator__copy_get, _PICellerator.WeightsCalculator__copy_set)
    name = _swig_property(_PICellerator.WeightsCalculator_name_get, _PICellerator.WeightsCalculator_name_set)
    nameAllocationType = _swig_property(_PICellerator.WeightsCalculator_nameAllocationType_get, _PICellerator.WeightsCalculator_nameAllocationType_set)
    _defaultConstructor = _swig_property(_PICellerator.WeightsCalculator__defaultConstructor_get, _PICellerator.WeightsCalculator__defaultConstructor_set)
    _construct = _swig_property(_PICellerator.WeightsCalculator__construct_get, _PICellerator.WeightsCalculator__construct_set)
    _build = _swig_property(_PICellerator.WeightsCalculator__build_get, _PICellerator.WeightsCalculator__build_set)
    _initialise = _swig_property(_PICellerator.WeightsCalculator__initialise_get, _PICellerator.WeightsCalculator__initialise_set)
    _execute = _swig_property(_PICellerator.WeightsCalculator__execute_get, _PICellerator.WeightsCalculator__execute_set)
    _destroy = _swig_property(_PICellerator.WeightsCalculator__destroy_get, _PICellerator.WeightsCalculator__destroy_set)
    isConstructed = _swig_property(_PICellerator.WeightsCalculator_isConstructed_get, _PICellerator.WeightsCalculator_isConstructed_set)
    isBuilt = _swig_property(_PICellerator.WeightsCalculator_isBuilt_get, _PICellerator.WeightsCalculator_isBuilt_set)
    isInitialised = _swig_property(_PICellerator.WeightsCalculator_isInitialised_get, _PICellerator.WeightsCalculator_isInitialised_set)
    hasExecuted = _swig_property(_PICellerator.WeightsCalculator_hasExecuted_get, _PICellerator.WeightsCalculator_hasExecuted_set)
    isDestroyed = _swig_property(_PICellerator.WeightsCalculator_isDestroyed_get, _PICellerator.WeightsCalculator_isDestroyed_set)
    constructType = _swig_property(_PICellerator.WeightsCalculator_constructType_get, _PICellerator.WeightsCalculator_constructType_set)
    buildType = _swig_property(_PICellerator.WeightsCalculator_buildType_get, _PICellerator.WeightsCalculator_buildType_set)
    initialiseType = _swig_property(_PICellerator.WeightsCalculator_initialiseType_get, _PICellerator.WeightsCalculator_initialiseType_set)
    executeType = _swig_property(_PICellerator.WeightsCalculator_executeType_get, _PICellerator.WeightsCalculator_executeType_set)
    destroyType = _swig_property(_PICellerator.WeightsCalculator_destroyType_get, _PICellerator.WeightsCalculator_destroyType_set)
    context = _swig_property(_PICellerator.WeightsCalculator_context_get, _PICellerator.WeightsCalculator_context_set)
    _calculate = _swig_property(_PICellerator.WeightsCalculator__calculate_get, _PICellerator.WeightsCalculator__calculate_set)

    def __init__(self):
        _PICellerator.WeightsCalculator_swiginit(self, _PICellerator.new_WeightsCalculator())
    __swig_destroy__ = _PICellerator.delete_WeightsCalculator
WeightsCalculator_swigregister = _PICellerator.WeightsCalculator_swigregister
WeightsCalculator_swigregister(WeightsCalculator)
WeightsCalculator_Type = cvar.WeightsCalculator_Type


def _WeightsCalculator_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _calculate: 'WeightsCalculator_CalculateFunction *') -> "WeightsCalculator *":
    return _PICellerator._WeightsCalculator_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _calculate)
_WeightsCalculator_New = _PICellerator._WeightsCalculator_New

def _WeightsCalculator_Delete(arg1: 'void *') -> "void":
    return _PICellerator._WeightsCalculator_Delete(arg1)
_WeightsCalculator_Delete = _PICellerator._WeightsCalculator_Delete

def _WeightsCalculator_Print(arg1: 'void *', stream: 'Stream *') -> "void":
    return _PICellerator._WeightsCalculator_Print(arg1, stream)
_WeightsCalculator_Print = _PICellerator._WeightsCalculator_Print

def _WeightsCalculator_Copy(arg1: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _PICellerator._WeightsCalculator_Copy(arg1, dest, deep, nameExt, ptrMap)
_WeightsCalculator_Copy = _PICellerator._WeightsCalculator_Copy

def _WeightsCalculator_AssignFromXML(arg1: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _PICellerator._WeightsCalculator_AssignFromXML(arg1, cf, data)
_WeightsCalculator_AssignFromXML = _PICellerator._WeightsCalculator_AssignFromXML

def _WeightsCalculator_Build(arg1: 'void *', data: 'void *') -> "void":
    return _PICellerator._WeightsCalculator_Build(arg1, data)
_WeightsCalculator_Build = _PICellerator._WeightsCalculator_Build

def _WeightsCalculator_Destroy(arg1: 'void *', data: 'void *') -> "void":
    return _PICellerator._WeightsCalculator_Destroy(arg1, data)
_WeightsCalculator_Destroy = _PICellerator._WeightsCalculator_Destroy

def _WeightsCalculator_Initialise(arg1: 'void *', data: 'void *') -> "void":
    return _PICellerator._WeightsCalculator_Initialise(arg1, data)
_WeightsCalculator_Initialise = _PICellerator._WeightsCalculator_Initialise

def _WeightsCalculator_Execute(arg1: 'void *', data: 'void *') -> "void":
    return _PICellerator._WeightsCalculator_Execute(arg1, data)
_WeightsCalculator_Execute = _PICellerator._WeightsCalculator_Execute

def WeightsCalculator_CalculateCell(arg1: 'void *', swarm: 'void *', lCell_I: 'Cell_LocalIndex') -> "void":
    return _PICellerator.WeightsCalculator_CalculateCell(arg1, swarm, lCell_I)
WeightsCalculator_CalculateCell = _PICellerator.WeightsCalculator_CalculateCell

def WeightsCalculator_CalculateAll(arg1: 'void *', _swarm: 'void *') -> "void":
    return _PICellerator.WeightsCalculator_CalculateAll(arg1, _swarm)
WeightsCalculator_CalculateAll = _PICellerator.WeightsCalculator_CalculateAll

def WeightsCalculator_SetWeightsValueAll(arg1: 'void *', _swarm: 'void *', weight: 'double') -> "void":
    return _PICellerator.WeightsCalculator_SetWeightsValueAll(arg1, _swarm, weight)
WeightsCalculator_SetWeightsValueAll = _PICellerator.WeightsCalculator_SetWeightsValueAll

def WeightsCalculator_SetWeightsValueAllInCell(arg1: 'void *', _swarm: 'void *', lCell_I: 'Cell_LocalIndex', weight: 'double') -> "void":
    return _PICellerator.WeightsCalculator_SetWeightsValueAllInCell(arg1, _swarm, lCell_I, weight)
WeightsCalculator_SetWeightsValueAllInCell = _PICellerator.WeightsCalculator_SetWeightsValueAllInCell

def WeightsCalculator_FindConstraintOrder(arg1: 'void *', _swarm: 'void *', dim: 'Dimension_Index', stream: 'Stream *') -> "Constraint_Index":
    return _PICellerator.WeightsCalculator_FindConstraintOrder(arg1, _swarm, dim, stream)
WeightsCalculator_FindConstraintOrder = _PICellerator.WeightsCalculator_FindConstraintOrder

def WeightsCalculator_TestConstraint(arg1: 'void *', _swarm: 'void *', dim: 'Dimension_Index', order: 'Constraint_Index') -> "double":
    return _PICellerator.WeightsCalculator_TestConstraint(arg1, _swarm, dim, order)
WeightsCalculator_TestConstraint = _PICellerator.WeightsCalculator_TestConstraint

def WeightsCalculator_TestConstraintOverCell(arg1: 'void *', _swarm: 'void *', lCell_I: 'Cell_LocalIndex', dim: 'Dimension_Index', order: 'Constraint_Index') -> "double":
    return _PICellerator.WeightsCalculator_TestConstraintOverCell(arg1, _swarm, lCell_I, dim, order)
WeightsCalculator_TestConstraintOverCell = _PICellerator.WeightsCalculator_TestConstraintOverCell

def WeightsCalculator_GetConstraintLHS(arg1: 'void *', _swarm: 'void *', lCell_I: 'Cell_LocalIndex', power_i: 'Index', power_j: 'Index', power_k: 'Index') -> "double":
    return _PICellerator.WeightsCalculator_GetConstraintLHS(arg1, _swarm, lCell_I, power_i, power_j, power_k)
WeightsCalculator_GetConstraintLHS = _PICellerator.WeightsCalculator_GetConstraintLHS

def WeightsCalculator_GetLocalCoordSum(arg1: 'void *', _swarm: 'void *', lCell_I: 'Cell_LocalIndex', power_i: 'Index', power_j: 'Index', power_k: 'Index') -> "double":
    return _PICellerator.WeightsCalculator_GetLocalCoordSum(arg1, _swarm, lCell_I, power_i, power_j, power_k)
WeightsCalculator_GetLocalCoordSum = _PICellerator.WeightsCalculator_GetLocalCoordSum

def WeightsCalculator_SumCellWeights(arg1: 'void *', _swarm: 'void *', lCell_I: 'Cell_LocalIndex') -> "double":
    return _PICellerator.WeightsCalculator_SumCellWeights(arg1, _swarm, lCell_I)
WeightsCalculator_SumCellWeights = _PICellerator.WeightsCalculator_SumCellWeights

def WeightsCalculator_CheckEmptyCell(arg1: 'void *', _swarm: 'void *', lCell_I: 'Cell_LocalIndex') -> "void":
    return _PICellerator.WeightsCalculator_CheckEmptyCell(arg1, _swarm, lCell_I)
WeightsCalculator_CheckEmptyCell = _PICellerator.WeightsCalculator_CheckEmptyCell
class DVCWeights(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_PICellerator.DVCWeights__sizeOfSelf_get, _PICellerator.DVCWeights__sizeOfSelf_set)
    _deleteSelf = _swig_property(_PICellerator.DVCWeights__deleteSelf_get, _PICellerator.DVCWeights__deleteSelf_set)
    type = _swig_property(_PICellerator.DVCWeights_type_get, _PICellerator.DVCWeights_type_set)
    nRefs = _swig_property(_PICellerator.DVCWeights_nRefs_get, _PICellerator.DVCWeights_nRefs_set)
    locked = _swig_property(_PICellerator.DVCWeights_locked_get, _PICellerator.DVCWeights_locked_set)
    _delete = _swig_property(_PICellerator.DVCWeights__delete_get, _PICellerator.DVCWeights__delete_set)
    _print = _swig_property(_PICellerator.DVCWeights__print_get, _PICellerator.DVCWeights__print_set)
    _copy = _swig_property(_PICellerator.DVCWeights__copy_get, _PICellerator.DVCWeights__copy_set)
    name = _swig_property(_PICellerator.DVCWeights_name_get, _PICellerator.DVCWeights_name_set)
    nameAllocationType = _swig_property(_PICellerator.DVCWeights_nameAllocationType_get, _PICellerator.DVCWeights_nameAllocationType_set)
    _defaultConstructor = _swig_property(_PICellerator.DVCWeights__defaultConstructor_get, _PICellerator.DVCWeights__defaultConstructor_set)
    _construct = _swig_property(_PICellerator.DVCWeights__construct_get, _PICellerator.DVCWeights__construct_set)
    _build = _swig_property(_PICellerator.DVCWeights__build_get, _PICellerator.DVCWeights__build_set)
    _initialise = _swig_property(_PICellerator.DVCWeights__initialise_get, _PICellerator.DVCWeights__initialise_set)
    _execute = _swig_property(_PICellerator.DVCWeights__execute_get, _PICellerator.DVCWeights__execute_set)
    _destroy = _swig_property(_PICellerator.DVCWeights__destroy_get, _PICellerator.DVCWeights__destroy_set)
    isConstructed = _swig_property(_PICellerator.DVCWeights_isConstructed_get, _PICellerator.DVCWeights_isConstructed_set)
    isBuilt = _swig_property(_PICellerator.DVCWeights_isBuilt_get, _PICellerator.DVCWeights_isBuilt_set)
    isInitialised = _swig_property(_PICellerator.DVCWeights_isInitialised_get, _PICellerator.DVCWeights_isInitialised_set)
    hasExecuted = _swig_property(_PICellerator.DVCWeights_hasExecuted_get, _PICellerator.DVCWeights_hasExecuted_set)
    isDestroyed = _swig_property(_PICellerator.DVCWeights_isDestroyed_get, _PICellerator.DVCWeights_isDestroyed_set)
    constructType = _swig_property(_PICellerator.DVCWeights_constructType_get, _PICellerator.DVCWeights_constructType_set)
    buildType = _swig_property(_PICellerator.DVCWeights_buildType_get, _PICellerator.DVCWeights_buildType_set)
    initialiseType = _swig_property(_PICellerator.DVCWeights_initialiseType_get, _PICellerator.DVCWeights_initialiseType_set)
    executeType = _swig_property(_PICellerator.DVCWeights_executeType_get, _PICellerator.DVCWeights_executeType_set)
    destroyType = _swig_property(_PICellerator.DVCWeights_destroyType_get, _PICellerator.DVCWeights_destroyType_set)
    context = _swig_property(_PICellerator.DVCWeights_context_get, _PICellerator.DVCWeights_context_set)
    _calculate = _swig_property(_PICellerator.DVCWeights__calculate_get, _PICellerator.DVCWeights__calculate_set)
    resX = _swig_property(_PICellerator.DVCWeights_resX_get, _PICellerator.DVCWeights_resX_set)
    resY = _swig_property(_PICellerator.DVCWeights_resY_get, _PICellerator.DVCWeights_resY_set)
    resZ = _swig_property(_PICellerator.DVCWeights_resZ_get, _PICellerator.DVCWeights_resZ_set)
    nump = _swig_property(_PICellerator.DVCWeights_nump_get, _PICellerator.DVCWeights_nump_set)
    dx = _swig_property(_PICellerator.DVCWeights_dx_get, _PICellerator.DVCWeights_dx_set)
    dy = _swig_property(_PICellerator.DVCWeights_dy_get, _PICellerator.DVCWeights_dy_set)
    dz = _swig_property(_PICellerator.DVCWeights_dz_get, _PICellerator.DVCWeights_dz_set)
    visiteddvcweights = _swig_property(_PICellerator.DVCWeights_visiteddvcweights_get, _PICellerator.DVCWeights_visiteddvcweights_set)
    pList = _swig_property(_PICellerator.DVCWeights_pList_get, _PICellerator.DVCWeights_pList_set)
    bchain = _swig_property(_PICellerator.DVCWeights_bchain_get, _PICellerator.DVCWeights_bchain_set)
    cells = _swig_property(_PICellerator.DVCWeights_cells_get, _PICellerator.DVCWeights_cells_set)
    plistSize = _swig_property(_PICellerator.DVCWeights_plistSize_get, _PICellerator.DVCWeights_plistSize_set)
    bchainSize = _swig_property(_PICellerator.DVCWeights_bchainSize_get, _PICellerator.DVCWeights_bchainSize_set)
    bbmin = _swig_property(_PICellerator.DVCWeights_bbmin_get, _PICellerator.DVCWeights_bbmin_set)
    bbmax = _swig_property(_PICellerator.DVCWeights_bbmax_get, _PICellerator.DVCWeights_bbmax_set)

    def __init__(self):
        _PICellerator.DVCWeights_swiginit(self, _PICellerator.new_DVCWeights())
    __swig_destroy__ = _PICellerator.delete_DVCWeights
DVCWeights_swigregister = _PICellerator.DVCWeights_swigregister
DVCWeights_swigregister(DVCWeights)
DVCWeights_Type = cvar.DVCWeights_Type

DVC_INC = _PICellerator.DVC_INC
class cell(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    p = _swig_property(_PICellerator.cell_p_get, _PICellerator.cell_p_set)
    index = _swig_property(_PICellerator.cell_index_get, _PICellerator.cell_index_set)
    N = _swig_property(_PICellerator.cell_N_get, _PICellerator.cell_N_set)
    S = _swig_property(_PICellerator.cell_S_get, _PICellerator.cell_S_set)
    E = _swig_property(_PICellerator.cell_E_get, _PICellerator.cell_E_set)
    W = _swig_property(_PICellerator.cell_W_get, _PICellerator.cell_W_set)
    U = _swig_property(_PICellerator.cell_U_get, _PICellerator.cell_U_set)
    D = _swig_property(_PICellerator.cell_D_get, _PICellerator.cell_D_set)
    x = _swig_property(_PICellerator.cell_x_get, _PICellerator.cell_x_set)
    y = _swig_property(_PICellerator.cell_y_get, _PICellerator.cell_y_set)
    z = _swig_property(_PICellerator.cell_z_get, _PICellerator.cell_z_set)
    done = _swig_property(_PICellerator.cell_done_get, _PICellerator.cell_done_set)

    def __init__(self):
        _PICellerator.cell_swiginit(self, _PICellerator.new_cell())
    __swig_destroy__ = _PICellerator.delete_cell
cell_swigregister = _PICellerator.cell_swigregister
cell_swigregister(cell)

class chain(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    p = _swig_property(_PICellerator.chain_p_get, _PICellerator.chain_p_set)
    index = _swig_property(_PICellerator.chain_index_get, _PICellerator.chain_index_set)
    sizeofboundary = _swig_property(_PICellerator.chain_sizeofboundary_get, _PICellerator.chain_sizeofboundary_set)
    numclaimed = _swig_property(_PICellerator.chain_numclaimed_get, _PICellerator.chain_numclaimed_set)
    totalclaimed = _swig_property(_PICellerator.chain_totalclaimed_get, _PICellerator.chain_totalclaimed_set)
    new_bound_cells_malloced = _swig_property(_PICellerator.chain_new_bound_cells_malloced_get, _PICellerator.chain_new_bound_cells_malloced_set)
    new_claimed_cells_malloced = _swig_property(_PICellerator.chain_new_claimed_cells_malloced_get, _PICellerator.chain_new_claimed_cells_malloced_set)
    new_bound_cells = _swig_property(_PICellerator.chain_new_bound_cells_get, _PICellerator.chain_new_bound_cells_set)
    new_claimed_cells = _swig_property(_PICellerator.chain_new_claimed_cells_get, _PICellerator.chain_new_claimed_cells_set)
    done = _swig_property(_PICellerator.chain_done_get, _PICellerator.chain_done_set)

    def __init__(self):
        _PICellerator.chain_swiginit(self, _PICellerator.new_chain())
    __swig_destroy__ = _PICellerator.delete_chain
chain_swigregister = _PICellerator.chain_swigregister
chain_swigregister(chain)

class particle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    x = _swig_property(_PICellerator.particle_x_get, _PICellerator.particle_x_set)
    y = _swig_property(_PICellerator.particle_y_get, _PICellerator.particle_y_set)
    z = _swig_property(_PICellerator.particle_z_get, _PICellerator.particle_z_set)
    cx = _swig_property(_PICellerator.particle_cx_get, _PICellerator.particle_cx_set)
    cy = _swig_property(_PICellerator.particle_cy_get, _PICellerator.particle_cy_set)
    cz = _swig_property(_PICellerator.particle_cz_get, _PICellerator.particle_cz_set)
    w = _swig_property(_PICellerator.particle_w_get, _PICellerator.particle_w_set)
    index = _swig_property(_PICellerator.particle_index_get, _PICellerator.particle_index_set)

    def __init__(self):
        _PICellerator.particle_swiginit(self, _PICellerator.new_particle())
    __swig_destroy__ = _PICellerator.delete_particle
particle_swigregister = _PICellerator.particle_swigregister
particle_swigregister(particle)


def _DVCWeights_GetCentroids3D(cells: 'cell', pList: 'particle', n: 'int', m: 'int', l: 'int', nump: 'int', vol: 'double') -> "void":
    return _PICellerator._DVCWeights_GetCentroids3D(cells, pList, n, m, l, nump, vol)
_DVCWeights_GetCentroids3D = _PICellerator._DVCWeights_GetCentroids3D

def _DVCWeights_ClaimCells(bchain: 'chain', cells: 'cell', pList: 'particle', p_i: 'int') -> "void":
    return _PICellerator._DVCWeights_ClaimCells(bchain, cells, pList, p_i)
_DVCWeights_ClaimCells = _PICellerator._DVCWeights_ClaimCells

def _DVCWeights_UpdateBchain(bchain: 'chain', cells: 'cell', p_i: 'int') -> "void":
    return _PICellerator._DVCWeights_UpdateBchain(bchain, cells, p_i)
_DVCWeights_UpdateBchain = _PICellerator._DVCWeights_UpdateBchain

def _DVCWeights_ResetGrid3D(cells: 'cell', n: 'int') -> "void":
    return _PICellerator._DVCWeights_ResetGrid3D(cells, n)
_DVCWeights_ResetGrid3D = _PICellerator._DVCWeights_ResetGrid3D

def _DVCWeights_DistanceSquared(x0: 'double', y0: 'double', z0: 'double', x1: 'double', y1: 'double', z1: 'double') -> "double":
    return _PICellerator._DVCWeights_DistanceSquared(x0, y0, z0, x1, y1, z1)
_DVCWeights_DistanceSquared = _PICellerator._DVCWeights_DistanceSquared

def _DVCWeights_DistanceTest(x0: 'double', y0: 'double', z0: 'double', x1: 'double', y1: 'double', z1: 'double', x2: 'double', y2: 'double', z2: 'double') -> "double":
    return _PICellerator._DVCWeights_DistanceTest(x0, y0, z0, x1, y1, z1, x2, y2, z2)
_DVCWeights_DistanceTest = _PICellerator._DVCWeights_DistanceTest

def _DVCWeights_ConstructGrid(cell_list: 'cell **', n: 'int', m: 'int', l: 'int', x0: 'double', y0: 'double', z0: 'double', x1: 'double', y1: 'double', z1: 'double') -> "void":
    return _PICellerator._DVCWeights_ConstructGrid(cell_list, n, m, l, x0, y0, z0, x1, y1, z1)
_DVCWeights_ConstructGrid = _PICellerator._DVCWeights_ConstructGrid

def _DVCWeights_InitialiseStructs(arg1: 'DVCWeights', nump: 'int') -> "void":
    return _PICellerator._DVCWeights_InitialiseStructs(arg1, nump)
_DVCWeights_InitialiseStructs = _PICellerator._DVCWeights_InitialiseStructs

def _DVCWeights_CreateVoronoi3D(bchain: 'chain', pList: 'particle', cells: 'cell', dx: 'double', dy: 'double', dz: 'double', nump: 'int', numx: 'int', numy: 'int', numz: 'int', BBXMIN: 'double', BBXMAX: 'double', BBYMIN: 'double', BBYMAX: 'double', BBZMIN: 'double', BBZMAX: 'double') -> "void":
    return _PICellerator._DVCWeights_CreateVoronoi3D(bchain, pList, cells, dx, dy, dz, nump, numx, numy, numz, BBXMIN, BBXMAX, BBYMIN, BBYMAX, BBZMIN, BBZMAX)
_DVCWeights_CreateVoronoi3D = _PICellerator._DVCWeights_CreateVoronoi3D

def _DVCWeights_GetCentroids2D(cells: 'cell', pList: 'particle', n: 'int', m: 'int', nump: 'int', vol: 'double') -> "void":
    return _PICellerator._DVCWeights_GetCentroids2D(cells, pList, n, m, nump, vol)
_DVCWeights_GetCentroids2D = _PICellerator._DVCWeights_GetCentroids2D

def _DVCWeights_ClaimCells2D(bchain: 'chain', cells: 'cell', pList: 'particle', p_i: 'int') -> "void":
    return _PICellerator._DVCWeights_ClaimCells2D(bchain, cells, pList, p_i)
_DVCWeights_ClaimCells2D = _PICellerator._DVCWeights_ClaimCells2D

def _DVCWeights_UpdateBchain2D(bchain: 'chain', cells: 'cell', p_i: 'int') -> "void":
    return _PICellerator._DVCWeights_UpdateBchain2D(bchain, cells, p_i)
_DVCWeights_UpdateBchain2D = _PICellerator._DVCWeights_UpdateBchain2D

def _DVCWeights_ResetGrid2D(cells: 'cell', n: 'int') -> "void":
    return _PICellerator._DVCWeights_ResetGrid2D(cells, n)
_DVCWeights_ResetGrid2D = _PICellerator._DVCWeights_ResetGrid2D

def _DVCWeights_DistanceSquared2D(x0: 'double', y0: 'double', x1: 'double', y1: 'double') -> "double":
    return _PICellerator._DVCWeights_DistanceSquared2D(x0, y0, x1, y1)
_DVCWeights_DistanceSquared2D = _PICellerator._DVCWeights_DistanceSquared2D

def _DVCWeights_DistanceTest2D(x0: 'double', y0: 'double', x1: 'double', y1: 'double', x2: 'double', y2: 'double') -> "double":
    return _PICellerator._DVCWeights_DistanceTest2D(x0, y0, x1, y1, x2, y2)
_DVCWeights_DistanceTest2D = _PICellerator._DVCWeights_DistanceTest2D

def _DVCWeights_ConstructGrid2D(cell_list: 'cell **', m: 'int', l: 'int', x0: 'double', y0: 'double', x1: 'double', y1: 'double') -> "void":
    return _PICellerator._DVCWeights_ConstructGrid2D(cell_list, m, l, x0, y0, x1, y1)
_DVCWeights_ConstructGrid2D = _PICellerator._DVCWeights_ConstructGrid2D

def _DVCWeights_InitialiseStructs2D(arg1: 'DVCWeights', nump: 'int') -> "void":
    return _PICellerator._DVCWeights_InitialiseStructs2D(arg1, nump)
_DVCWeights_InitialiseStructs2D = _PICellerator._DVCWeights_InitialiseStructs2D

def _DVCWeights_CreateVoronoi2D(bchain: 'chain', pList: 'particle', cells: 'cell', dx: 'double', dy: 'double', nump: 'int', numx: 'int', numy: 'int', BBXMIN: 'double', BBXMAX: 'double', BBYMIN: 'double', BBYMAX: 'double') -> "void":
    return _PICellerator._DVCWeights_CreateVoronoi2D(bchain, pList, cells, dx, dy, nump, numx, numy, BBXMIN, BBXMAX, BBYMIN, BBYMAX)
_DVCWeights_CreateVoronoi2D = _PICellerator._DVCWeights_CreateVoronoi2D

def _DVCWeights_Calculate2D(dvcWeights: 'void *', _swarm: 'void *', lCell_I: 'Cell_LocalIndex') -> "void":
    return _PICellerator._DVCWeights_Calculate2D(dvcWeights, _swarm, lCell_I)
_DVCWeights_Calculate2D = _PICellerator._DVCWeights_Calculate2D

def _DVCWeights_Calculate3D(dvcWeights: 'void *', _swarm: 'void *', lCell_I: 'Cell_LocalIndex') -> "void":
    return _PICellerator._DVCWeights_Calculate3D(dvcWeights, _swarm, lCell_I)
_DVCWeights_Calculate3D = _PICellerator._DVCWeights_Calculate3D

def DVCWeights_New(name: 'Name', res: 'int *') -> "DVCWeights *":
    return _PICellerator.DVCWeights_New(name, res)
DVCWeights_New = _PICellerator.DVCWeights_New

def _DVCWeights_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _calculate: 'WeightsCalculator_CalculateFunction *') -> "DVCWeights *":
    return _PICellerator._DVCWeights_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _calculate)
_DVCWeights_New = _PICellerator._DVCWeights_New

def _DVCWeights_Init(dvcWeights: 'void *', res: 'int *') -> "void":
    return _PICellerator._DVCWeights_Init(dvcWeights, res)
_DVCWeights_Init = _PICellerator._DVCWeights_Init

def _DVCWeights_Delete(dvcWeights: 'void *') -> "void":
    return _PICellerator._DVCWeights_Delete(dvcWeights)
_DVCWeights_Delete = _PICellerator._DVCWeights_Delete

def _DVCWeights_Print(dvcWeights: 'void *', stream: 'Stream *') -> "void":
    return _PICellerator._DVCWeights_Print(dvcWeights, stream)
_DVCWeights_Print = _PICellerator._DVCWeights_Print

def _DVCWeights_Copy(dvcWeights: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _PICellerator._DVCWeights_Copy(dvcWeights, dest, deep, nameExt, ptrMap)
_DVCWeights_Copy = _PICellerator._DVCWeights_Copy

def _DVCWeights_DefaultNew(name: 'Name') -> "void *":
    return _PICellerator._DVCWeights_DefaultNew(name)
_DVCWeights_DefaultNew = _PICellerator._DVCWeights_DefaultNew

def _DVCWeights_AssignFromXML(dvcWeights: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _PICellerator._DVCWeights_AssignFromXML(dvcWeights, cf, data)
_DVCWeights_AssignFromXML = _PICellerator._DVCWeights_AssignFromXML

def _DVCWeights_Build(dvcWeights: 'void *', data: 'void *') -> "void":
    return _PICellerator._DVCWeights_Build(dvcWeights, data)
_DVCWeights_Build = _PICellerator._DVCWeights_Build

def _DVCWeights_Initialise(dvcWeights: 'void *', data: 'void *') -> "void":
    return _PICellerator._DVCWeights_Initialise(dvcWeights, data)
_DVCWeights_Initialise = _PICellerator._DVCWeights_Initialise

def _DVCWeights_Execute(dvcWeights: 'void *', data: 'void *') -> "void":
    return _PICellerator._DVCWeights_Execute(dvcWeights, data)
_DVCWeights_Execute = _PICellerator._DVCWeights_Execute

def _DVCWeights_Destroy(dvcWeights: 'void *', data: 'void *') -> "void":
    return _PICellerator._DVCWeights_Destroy(dvcWeights, data)
_DVCWeights_Destroy = _PICellerator._DVCWeights_Destroy

def _DVCWeights_Calculate(dvcWeights: 'void *', _swarm: 'void *', lCell_I: 'Cell_LocalIndex') -> "void":
    return _PICellerator._DVCWeights_Calculate(dvcWeights, _swarm, lCell_I)
_DVCWeights_Calculate = _PICellerator._DVCWeights_Calculate
class PCDVC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_PICellerator.PCDVC__sizeOfSelf_get, _PICellerator.PCDVC__sizeOfSelf_set)
    _deleteSelf = _swig_property(_PICellerator.PCDVC__deleteSelf_get, _PICellerator.PCDVC__deleteSelf_set)
    type = _swig_property(_PICellerator.PCDVC_type_get, _PICellerator.PCDVC_type_set)
    nRefs = _swig_property(_PICellerator.PCDVC_nRefs_get, _PICellerator.PCDVC_nRefs_set)
    locked = _swig_property(_PICellerator.PCDVC_locked_get, _PICellerator.PCDVC_locked_set)
    _delete = _swig_property(_PICellerator.PCDVC__delete_get, _PICellerator.PCDVC__delete_set)
    _print = _swig_property(_PICellerator.PCDVC__print_get, _PICellerator.PCDVC__print_set)
    _copy = _swig_property(_PICellerator.PCDVC__copy_get, _PICellerator.PCDVC__copy_set)
    name = _swig_property(_PICellerator.PCDVC_name_get, _PICellerator.PCDVC_name_set)
    nameAllocationType = _swig_property(_PICellerator.PCDVC_nameAllocationType_get, _PICellerator.PCDVC_nameAllocationType_set)
    _defaultConstructor = _swig_property(_PICellerator.PCDVC__defaultConstructor_get, _PICellerator.PCDVC__defaultConstructor_set)
    _construct = _swig_property(_PICellerator.PCDVC__construct_get, _PICellerator.PCDVC__construct_set)
    _build = _swig_property(_PICellerator.PCDVC__build_get, _PICellerator.PCDVC__build_set)
    _initialise = _swig_property(_PICellerator.PCDVC__initialise_get, _PICellerator.PCDVC__initialise_set)
    _execute = _swig_property(_PICellerator.PCDVC__execute_get, _PICellerator.PCDVC__execute_set)
    _destroy = _swig_property(_PICellerator.PCDVC__destroy_get, _PICellerator.PCDVC__destroy_set)
    isConstructed = _swig_property(_PICellerator.PCDVC_isConstructed_get, _PICellerator.PCDVC_isConstructed_set)
    isBuilt = _swig_property(_PICellerator.PCDVC_isBuilt_get, _PICellerator.PCDVC_isBuilt_set)
    isInitialised = _swig_property(_PICellerator.PCDVC_isInitialised_get, _PICellerator.PCDVC_isInitialised_set)
    hasExecuted = _swig_property(_PICellerator.PCDVC_hasExecuted_get, _PICellerator.PCDVC_hasExecuted_set)
    isDestroyed = _swig_property(_PICellerator.PCDVC_isDestroyed_get, _PICellerator.PCDVC_isDestroyed_set)
    constructType = _swig_property(_PICellerator.PCDVC_constructType_get, _PICellerator.PCDVC_constructType_set)
    buildType = _swig_property(_PICellerator.PCDVC_buildType_get, _PICellerator.PCDVC_buildType_set)
    initialiseType = _swig_property(_PICellerator.PCDVC_initialiseType_get, _PICellerator.PCDVC_initialiseType_set)
    executeType = _swig_property(_PICellerator.PCDVC_executeType_get, _PICellerator.PCDVC_executeType_set)
    destroyType = _swig_property(_PICellerator.PCDVC_destroyType_get, _PICellerator.PCDVC_destroyType_set)
    context = _swig_property(_PICellerator.PCDVC_context_get, _PICellerator.PCDVC_context_set)
    _calculate = _swig_property(_PICellerator.PCDVC__calculate_get, _PICellerator.PCDVC__calculate_set)
    resX = _swig_property(_PICellerator.PCDVC_resX_get, _PICellerator.PCDVC_resX_set)
    resY = _swig_property(_PICellerator.PCDVC_resY_get, _PICellerator.PCDVC_resY_set)
    resZ = _swig_property(_PICellerator.PCDVC_resZ_get, _PICellerator.PCDVC_resZ_set)
    nump = _swig_property(_PICellerator.PCDVC_nump_get, _PICellerator.PCDVC_nump_set)
    dx = _swig_property(_PICellerator.PCDVC_dx_get, _PICellerator.PCDVC_dx_set)
    dy = _swig_property(_PICellerator.PCDVC_dy_get, _PICellerator.PCDVC_dy_set)
    dz = _swig_property(_PICellerator.PCDVC_dz_get, _PICellerator.PCDVC_dz_set)
    visiteddvcweights = _swig_property(_PICellerator.PCDVC_visiteddvcweights_get, _PICellerator.PCDVC_visiteddvcweights_set)
    pList = _swig_property(_PICellerator.PCDVC_pList_get, _PICellerator.PCDVC_pList_set)
    bchain = _swig_property(_PICellerator.PCDVC_bchain_get, _PICellerator.PCDVC_bchain_set)
    cells = _swig_property(_PICellerator.PCDVC_cells_get, _PICellerator.PCDVC_cells_set)
    plistSize = _swig_property(_PICellerator.PCDVC_plistSize_get, _PICellerator.PCDVC_plistSize_set)
    bchainSize = _swig_property(_PICellerator.PCDVC_bchainSize_get, _PICellerator.PCDVC_bchainSize_set)
    bbmin = _swig_property(_PICellerator.PCDVC_bbmin_get, _PICellerator.PCDVC_bbmin_set)
    bbmax = _swig_property(_PICellerator.PCDVC_bbmax_get, _PICellerator.PCDVC_bbmax_set)
    materialPointsSwarm = _swig_property(_PICellerator.PCDVC_materialPointsSwarm_get, _PICellerator.PCDVC_materialPointsSwarm_set)
    upperT = _swig_property(_PICellerator.PCDVC_upperT_get, _PICellerator.PCDVC_upperT_set)
    lowerT = _swig_property(_PICellerator.PCDVC_lowerT_get, _PICellerator.PCDVC_lowerT_set)
    splitInInterfaceCells = _swig_property(_PICellerator.PCDVC_splitInInterfaceCells_get, _PICellerator.PCDVC_splitInInterfaceCells_set)
    deleteInInterfaceCells = _swig_property(_PICellerator.PCDVC_deleteInInterfaceCells_get, _PICellerator.PCDVC_deleteInInterfaceCells_set)
    maxDeletions = _swig_property(_PICellerator.PCDVC_maxDeletions_get, _PICellerator.PCDVC_maxDeletions_set)
    maxSplits = _swig_property(_PICellerator.PCDVC_maxSplits_get, _PICellerator.PCDVC_maxSplits_set)
    Inflow = _swig_property(_PICellerator.PCDVC_Inflow_get, _PICellerator.PCDVC_Inflow_set)
    CentPosRatio = _swig_property(_PICellerator.PCDVC_CentPosRatio_get, _PICellerator.PCDVC_CentPosRatio_set)
    ParticlesPerCell = _swig_property(_PICellerator.PCDVC_ParticlesPerCell_get, _PICellerator.PCDVC_ParticlesPerCell_set)
    Threshold = _swig_property(_PICellerator.PCDVC_Threshold_get, _PICellerator.PCDVC_Threshold_set)
    pcdvcvisited = _swig_property(_PICellerator.PCDVC_pcdvcvisited_get, _PICellerator.PCDVC_pcdvcvisited_set)

    def __init__(self):
        _PICellerator.PCDVC_swiginit(self, _PICellerator.new_PCDVC())
    __swig_destroy__ = _PICellerator.delete_PCDVC
PCDVC_swigregister = _PICellerator.PCDVC_swigregister
PCDVC_swigregister(PCDVC)
PCDVC_Type = cvar.PCDVC_Type

class deleteParticle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    indexWithinCell = _swig_property(_PICellerator.deleteParticle_indexWithinCell_get, _PICellerator.deleteParticle_indexWithinCell_set)
    indexOnCPU = _swig_property(_PICellerator.deleteParticle_indexOnCPU_get, _PICellerator.deleteParticle_indexOnCPU_set)

    def __init__(self):
        _PICellerator.deleteParticle_swiginit(self, _PICellerator.new_deleteParticle())
    __swig_destroy__ = _PICellerator.delete_deleteParticle
deleteParticle_swigregister = _PICellerator.deleteParticle_swigregister
deleteParticle_swigregister(deleteParticle)


def PCDVC_New(name: 'Name', res: 'int *', mps: 'GeneralSwarm', upT: 'double', lowT: 'double', maxDeletions: 'int', maxSplits: 'int', splitInInterfaceCells: 'Bool', deleteInInterfaceCells: 'Bool', Inflow: 'Bool', CentPosRatio: 'double', ParticlesPerCell: 'int', Threshold: 'double') -> "PCDVC *":
    return _PICellerator.PCDVC_New(name, res, mps, upT, lowT, maxDeletions, maxSplits, splitInInterfaceCells, deleteInInterfaceCells, Inflow, CentPosRatio, ParticlesPerCell, Threshold)
PCDVC_New = _PICellerator.PCDVC_New

def _PCDVC_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _calculate: 'WeightsCalculator_CalculateFunction *') -> "PCDVC *":
    return _PICellerator._PCDVC_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _calculate)
_PCDVC_New = _PICellerator._PCDVC_New

def _PCDVC_Init(pcdvc: 'void *', mps: 'GeneralSwarm', upT: 'double', lowT: 'double', maxDeletions: 'int', maxSplits: 'int', splitInInterfaceCells: 'Bool', deleteInInterfaceCells: 'Bool', Inflow: 'Bool', CentPosRatio: 'double', ParticlesPerCell: 'int', Threshold: 'double') -> "void":
    return _PICellerator._PCDVC_Init(pcdvc, mps, upT, lowT, maxDeletions, maxSplits, splitInInterfaceCells, deleteInInterfaceCells, Inflow, CentPosRatio, ParticlesPerCell, Threshold)
_PCDVC_Init = _PICellerator._PCDVC_Init

def _PCDVC_Delete(pcdvc: 'void *') -> "void":
    return _PICellerator._PCDVC_Delete(pcdvc)
_PCDVC_Delete = _PICellerator._PCDVC_Delete

def _PCDVC_Print(pcdvc: 'void *', stream: 'Stream *') -> "void":
    return _PICellerator._PCDVC_Print(pcdvc, stream)
_PCDVC_Print = _PICellerator._PCDVC_Print

def _PCDVC_Copy(pcdvc: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _PICellerator._PCDVC_Copy(pcdvc, dest, deep, nameExt, ptrMap)
_PCDVC_Copy = _PICellerator._PCDVC_Copy

def _PCDVC_DefaultNew(name: 'Name') -> "void *":
    return _PICellerator._PCDVC_DefaultNew(name)
_PCDVC_DefaultNew = _PICellerator._PCDVC_DefaultNew

def _PCDVC_AssignFromXML(pcdvc: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _PICellerator._PCDVC_AssignFromXML(pcdvc, cf, data)
_PCDVC_AssignFromXML = _PICellerator._PCDVC_AssignFromXML

def _PCDVC_Build(pcdvc: 'void *', data: 'void *') -> "void":
    return _PICellerator._PCDVC_Build(pcdvc, data)
_PCDVC_Build = _PICellerator._PCDVC_Build

def _PCDVC_Initialise(pcdvc: 'void *', data: 'void *') -> "void":
    return _PICellerator._PCDVC_Initialise(pcdvc, data)
_PCDVC_Initialise = _PICellerator._PCDVC_Initialise

def _PCDVC_Destroy(pcdvc: 'void *', data: 'void *') -> "void":
    return _PICellerator._PCDVC_Destroy(pcdvc, data)
_PCDVC_Destroy = _PICellerator._PCDVC_Destroy

def _PCDVC_Execute(pcdvc: 'void *', data: 'void *') -> "void":
    return _PICellerator._PCDVC_Execute(pcdvc, data)
_PCDVC_Execute = _PICellerator._PCDVC_Execute

def splitIntParticleByIndexWithinCell(intSwarm: 'IntegrationPointsSwarm', matSwarm: 'GeneralSwarm', lCell_I: 'Cell_LocalIndex', intParticleToSplit_IndexOnCPU: 'Particle_Index', xi: 'Coord') -> "void":
    return _PICellerator.splitIntParticleByIndexWithinCell(intSwarm, matSwarm, lCell_I, intParticleToSplit_IndexOnCPU, xi)
splitIntParticleByIndexWithinCell = _PICellerator.splitIntParticleByIndexWithinCell

def deleteIntParticleByIndexWithinCell(intSwarm: 'IntegrationPointsSwarm', matSwarm: 'GeneralSwarm', lCell_I: 'Cell_LocalIndex', intParticleToSplit_IndexWithinCell: 'Particle_Index') -> "void":
    return _PICellerator.deleteIntParticleByIndexWithinCell(intSwarm, matSwarm, lCell_I, intParticleToSplit_IndexWithinCell)
deleteIntParticleByIndexWithinCell = _PICellerator.deleteIntParticleByIndexWithinCell

def deleteIntParticleByIndexOnCPU(intSwarm: 'IntegrationPointsSwarm', matSwarm: 'GeneralSwarm', intParticleToSplit_IndexWithinCell: 'Particle_Index') -> "void":
    return _PICellerator.deleteIntParticleByIndexOnCPU(intSwarm, matSwarm, intParticleToSplit_IndexWithinCell)
deleteIntParticleByIndexOnCPU = _PICellerator.deleteIntParticleByIndexOnCPU

def _PCDVC_Calculate3D(pcdvc: 'void *', _swarm: 'void *', lCell_I: 'Cell_LocalIndex') -> "void":
    return _PICellerator._PCDVC_Calculate3D(pcdvc, _swarm, lCell_I)
_PCDVC_Calculate3D = _PICellerator._PCDVC_Calculate3D

def _PCDVC_Calculate2D(pcdvc: 'void *', _swarm: 'void *', lCell_I: 'Cell_LocalIndex') -> "void":
    return _PICellerator._PCDVC_Calculate2D(pcdvc, _swarm, lCell_I)
_PCDVC_Calculate2D = _PICellerator._PCDVC_Calculate2D

def _PCDVC_Calculate(pcdvc: 'void *', _swarm: 'void *', lCell_I: 'Cell_LocalIndex') -> "void":
    return _PICellerator._PCDVC_Calculate(pcdvc, _swarm, lCell_I)
_PCDVC_Calculate = _PICellerator._PCDVC_Calculate


