# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Function.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Function')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Function')
    _Function = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Function', [dirname(__file__)])
        except ImportError:
            import _Function
            return _Function
        if fp is not None:
            try:
                _mod = imp.load_module('_Function', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Function = swig_import_helper()
    del swig_import_helper
else:
    import _Function
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import underworld.libUnderworld.libUnderworldPy.StGermain
import underworld.libUnderworld.libUnderworldPy.StgDomain
import underworld.libUnderworld.libUnderworldPy.StgFEM
import underworld.libUnderworld.libUnderworldPy.PICellerator
class FunctionIO(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    Scalar = _Function.FunctionIO_Scalar
    Vector = _Function.FunctionIO_Vector
    SymmetricTensor = _Function.FunctionIO_SymmetricTensor
    Tensor = _Function.FunctionIO_Tensor
    Array = _Function.FunctionIO_Array
    __swig_destroy__ = _Function.delete_FunctionIO
    _iotype = _swig_property(_Function.FunctionIO__iotype_get, _Function.FunctionIO__iotype_set)
FunctionIO.clone = new_instancemethod(_Function.FunctionIO_clone, None, FunctionIO)
FunctionIO.cloneType = new_instancemethod(_Function.FunctionIO_cloneType, None, FunctionIO)
FunctionIO.iotype = new_instancemethod(_Function.FunctionIO_iotype, None, FunctionIO)
FunctionIO.size = new_instancemethod(_Function.FunctionIO_size, None, FunctionIO)
FunctionIO.resize = new_instancemethod(_Function.FunctionIO_resize, None, FunctionIO)
FunctionIO.dataRaw = new_instancemethod(_Function.FunctionIO_dataRaw, None, FunctionIO)
FunctionIO_swigregister = _Function.FunctionIO_swigregister
FunctionIO_swigregister(FunctionIO)

class Function(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Function.delete_Function
Function.getFunction = new_instancemethod(_Function.Function_getFunction, None, Function)
Function.set_pyfnerrorheader = new_instancemethod(_Function.Function_set_pyfnerrorheader, None, Function)
Function_swigregister = _Function.Function_swigregister
Function_swigregister(Function)

class Input(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _Function.Input_swiginit(self, _Function.new_Input())
    __swig_destroy__ = _Function.delete_Input
Input_swigregister = _Function.Input_swigregister
Input_swigregister(Input)

class SafeMaths(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.SafeMaths_swiginit(self, _Function.new_SafeMaths(fn))
    __swig_destroy__ = _Function.delete_SafeMaths
SafeMaths_swigregister = _Function.SafeMaths_swigregister
SafeMaths_swigregister(SafeMaths)

class CustomException(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn_input: 'Function', fn_condition: 'Function', fn_print: 'Function'=None):
        _Function.CustomException_swiginit(self, _Function.new_CustomException(fn_input, fn_condition, fn_print))
    __swig_destroy__ = _Function.delete_CustomException
CustomException_swigregister = _Function.CustomException_swigregister
CustomException_swigregister(CustomException)

class MinMax(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function', fn_norm: 'Function'=None, fn_auxiliary: 'Function'=None):
        _Function.MinMax_swiginit(self, _Function.new_MinMax(fn, fn_norm, fn_auxiliary))
    __swig_destroy__ = _Function.delete_MinMax
MinMax.getMin = new_instancemethod(_Function.MinMax_getMin, None, MinMax)
MinMax.getMax = new_instancemethod(_Function.MinMax_getMax, None, MinMax)
MinMax.getMinGlobal = new_instancemethod(_Function.MinMax_getMinGlobal, None, MinMax)
MinMax.getMaxGlobal = new_instancemethod(_Function.MinMax_getMaxGlobal, None, MinMax)
MinMax.getMinRank = new_instancemethod(_Function.MinMax_getMinRank, None, MinMax)
MinMax.getMaxRank = new_instancemethod(_Function.MinMax_getMaxRank, None, MinMax)
MinMax.getMinAux = new_instancemethod(_Function.MinMax_getMinAux, None, MinMax)
MinMax.getMaxAux = new_instancemethod(_Function.MinMax_getMaxAux, None, MinMax)
MinMax.reset = new_instancemethod(_Function.MinMax_reset, None, MinMax)
MinMax_swigregister = _Function.MinMax_swigregister
MinMax_swigregister(MinMax)

class At(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function', component: 'unsigned int'):
        _Function.At_swiginit(self, _Function.new_At(fn, component))
    __swig_destroy__ = _Function.delete_At
At_swigregister = _Function.At_swigregister
At_swigregister(At)

class Binary(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Function.delete_Binary
Binary_swigregister = _Function.Binary_swigregister
Binary_swigregister(Binary)

class Add(Binary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Add_swiginit(self, _Function.new_Add(fn1, fn2))
    __swig_destroy__ = _Function.delete_Add
Add_swigregister = _Function.Add_swigregister
Add_swigregister(Add)

class Subtract(Binary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Subtract_swiginit(self, _Function.new_Subtract(fn1, fn2))
    __swig_destroy__ = _Function.delete_Subtract
Subtract_swigregister = _Function.Subtract_swigregister
Subtract_swigregister(Subtract)

class Multiply(Binary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Multiply_swiginit(self, _Function.new_Multiply(fn1, fn2))
    __swig_destroy__ = _Function.delete_Multiply
Multiply_swigregister = _Function.Multiply_swigregister
Multiply_swigregister(Multiply)

class Divide(Binary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Divide_swiginit(self, _Function.new_Divide(fn1, fn2))
    __swig_destroy__ = _Function.delete_Divide
Divide_swigregister = _Function.Divide_swigregister
Divide_swigregister(Divide)

class Dot(Binary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Dot_swiginit(self, _Function.new_Dot(fn1, fn2))
    __swig_destroy__ = _Function.delete_Dot
Dot_swigregister = _Function.Dot_swigregister
Dot_swigregister(Dot)

class Pow(Binary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Pow_swiginit(self, _Function.new_Pow(fn1, fn2))
    __swig_destroy__ = _Function.delete_Pow
Pow_swigregister = _Function.Pow_swigregister
Pow_swigregister(Pow)

class Min(Binary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Min_swiginit(self, _Function.new_Min(fn1, fn2))
    __swig_destroy__ = _Function.delete_Min
Min_swigregister = _Function.Min_swigregister
Min_swigregister(Min)

class Max(Binary):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Max_swiginit(self, _Function.new_Max(fn1, fn2))
    __swig_destroy__ = _Function.delete_Max
Max_swigregister = _Function.Max_swigregister
Max_swigregister(Max)

class Constant(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, constio: 'FunctionIO'):
        _Function.Constant_swiginit(self, _Function.new_Constant(constio))
    __swig_destroy__ = _Function.delete_Constant
Constant.set_value = new_instancemethod(_Function.Constant_set_value, None, Constant)
Constant_swigregister = _Function.Constant_swigregister
Constant_swigregister(Constant)

class SwarmVariableFn(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, swarmvariable: 'void *'):
        _Function.SwarmVariableFn_swiginit(self, _Function.new_SwarmVariableFn(swarmvariable))
    __swig_destroy__ = _Function.delete_SwarmVariableFn
SwarmVariableFn_swigregister = _Function.SwarmVariableFn_swigregister
SwarmVariableFn_swigregister(SwarmVariableFn)

class ParticleFound(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, swarm: 'void *'):
        _Function.ParticleFound_swiginit(self, _Function.new_ParticleFound(swarm))
    __swig_destroy__ = _Function.delete_ParticleFound
ParticleFound_swigregister = _Function.ParticleFound_swigregister
ParticleFound_swigregister(ParticleFound)

class FeVariableFn(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fevariable: 'void *'):
        _Function.FeVariableFn_swiginit(self, _Function.new_FeVariableFn(fevariable))
    __swig_destroy__ = _Function.delete_FeVariableFn
FeVariableFn_swigregister = _Function.FeVariableFn_swigregister
FeVariableFn_swigregister(FeVariableFn)

class GradFeVariableFn(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fevariable: 'void *'):
        _Function.GradFeVariableFn_swiginit(self, _Function.new_GradFeVariableFn(fevariable))
    __swig_destroy__ = _Function.delete_GradFeVariableFn
GradFeVariableFn_swigregister = _Function.GradFeVariableFn_swigregister
GradFeVariableFn_swigregister(GradFeVariableFn)

class Map(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, keyFunc: 'Function', defaultFunc: 'Function'=None):
        _Function.Map_swiginit(self, _Function.new_Map(keyFunc, defaultFunc))
    __swig_destroy__ = _Function.delete_Map
Map.insert = new_instancemethod(_Function.Map_insert, None, Map)
Map_swigregister = _Function.Map_swigregister
Map_swigregister(Map)

class TensorFunc(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    get_symmetric = _Function.TensorFunc_get_symmetric
    get_antisymmetric = _Function.TensorFunc_get_antisymmetric
    second_invariant = _Function.TensorFunc_second_invariant
    get_deviatoric = _Function.TensorFunc_get_deviatoric

    def __init__(self, fn: 'Function', partFunc: 'Fn::TensorFunc::TensorFuncFunc'):
        _Function.TensorFunc_swiginit(self, _Function.new_TensorFunc(fn, partFunc))
    __swig_destroy__ = _Function.delete_TensorFunc
TensorFunc_swigregister = _Function.TensorFunc_swigregister
TensorFunc_swigregister(TensorFunc)

class SolA(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    sigma = _swig_property(_Function.SolA_sigma_get, _Function.SolA_sigma_set)
    Z = _swig_property(_Function.SolA_Z_get, _Function.SolA_Z_set)
    n = _swig_property(_Function.SolA_n_get, _Function.SolA_n_set)
    m = _swig_property(_Function.SolA_m_get, _Function.SolA_m_set)

    def __init__(self, sigma: 'double', Z: 'double', n: 'unsigned int', m: 'double'):
        _Function.SolA_swiginit(self, _Function.new_SolA(sigma, Z, n, m))
    __swig_destroy__ = _Function.delete_SolA
SolA.velocity = new_instancemethod(_Function.SolA_velocity, None, SolA)
SolA.pressure = new_instancemethod(_Function.SolA_pressure, None, SolA)
SolA.stress = new_instancemethod(_Function.SolA_stress, None, SolA)
SolA.strainrate = new_instancemethod(_Function.SolA_strainrate, None, SolA)
SolA.viscosity = new_instancemethod(_Function.SolA_viscosity, None, SolA)
SolA.bodyforce = new_instancemethod(_Function.SolA_bodyforce, None, SolA)
SolA_swigregister = _Function.SolA_swigregister
SolA_swigregister(SolA)

class SolB(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    sigma = _swig_property(_Function.SolB_sigma_get, _Function.SolB_sigma_set)
    Z = _swig_property(_Function.SolB_Z_get, _Function.SolB_Z_set)
    n = _swig_property(_Function.SolB_n_get, _Function.SolB_n_set)
    m = _swig_property(_Function.SolB_m_get, _Function.SolB_m_set)

    def __init__(self, sigma: 'double', Z: 'double', n: 'unsigned int', m: 'double'):
        _Function.SolB_swiginit(self, _Function.new_SolB(sigma, Z, n, m))
    __swig_destroy__ = _Function.delete_SolB
SolB.velocity = new_instancemethod(_Function.SolB_velocity, None, SolB)
SolB.pressure = new_instancemethod(_Function.SolB_pressure, None, SolB)
SolB.stress = new_instancemethod(_Function.SolB_stress, None, SolB)
SolB.strainrate = new_instancemethod(_Function.SolB_strainrate, None, SolB)
SolB.viscosity = new_instancemethod(_Function.SolB_viscosity, None, SolB)
SolB.bodyforce = new_instancemethod(_Function.SolB_bodyforce, None, SolB)
SolB_swigregister = _Function.SolB_swigregister
SolB_swigregister(SolB)

class SolC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, sigma: 'double', viscosity: 'double', xc: 'double', nmodes: 'int'):
        _Function.SolC_swiginit(self, _Function.new_SolC(sigma, viscosity, xc, nmodes))
    __swig_destroy__ = _Function.delete_SolC
    sigma = _swig_property(_Function.SolC_sigma_get, _Function.SolC_sigma_set)
    visc = _swig_property(_Function.SolC_visc_get, _Function.SolC_visc_set)
    xc = _swig_property(_Function.SolC_xc_get, _Function.SolC_xc_set)
    nmodes = _swig_property(_Function.SolC_nmodes_get, _Function.SolC_nmodes_set)
SolC.velocity = new_instancemethod(_Function.SolC_velocity, None, SolC)
SolC.pressure = new_instancemethod(_Function.SolC_pressure, None, SolC)
SolC.stress = new_instancemethod(_Function.SolC_stress, None, SolC)
SolC.strainrate = new_instancemethod(_Function.SolC_strainrate, None, SolC)
SolC.viscosity = new_instancemethod(_Function.SolC_viscosity, None, SolC)
SolC.bodyforce = new_instancemethod(_Function.SolC_bodyforce, None, SolC)
SolC_swigregister = _Function.SolC_swigregister
SolC_swigregister(SolC)

class SolCx(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, viscosityA: 'double', viscosityB: 'double', xc: 'double', nz: 'unsigned int'):
        _Function.SolCx_swiginit(self, _Function.new_SolCx(viscosityA, viscosityB, xc, nz))
    __swig_destroy__ = _Function.delete_SolCx
    viscosityA = _swig_property(_Function.SolCx_viscosityA_get, _Function.SolCx_viscosityA_set)
    viscosityB = _swig_property(_Function.SolCx_viscosityB_get, _Function.SolCx_viscosityB_set)
    xc = _swig_property(_Function.SolCx_xc_get, _Function.SolCx_xc_set)
    nz = _swig_property(_Function.SolCx_nz_get, _Function.SolCx_nz_set)
SolCx.velocity = new_instancemethod(_Function.SolCx_velocity, None, SolCx)
SolCx.pressure = new_instancemethod(_Function.SolCx_pressure, None, SolCx)
SolCx.stress = new_instancemethod(_Function.SolCx_stress, None, SolCx)
SolCx.strainrate = new_instancemethod(_Function.SolCx_strainrate, None, SolCx)
SolCx.viscosity = new_instancemethod(_Function.SolCx_viscosity, None, SolCx)
SolCx.bodyforce = new_instancemethod(_Function.SolCx_bodyforce, None, SolCx)
SolCx_swigregister = _Function.SolCx_swigregister
SolCx_swigregister(SolCx)

class SolDA(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, sigma_0: 'double', x_c: 'double', x_w: 'double', eta_A: 'double', eta_B: 'double', z_c: 'double', nmodes: 'int'):
        _Function.SolDA_swiginit(self, _Function.new_SolDA(sigma_0, x_c, x_w, eta_A, eta_B, z_c, nmodes))
    __swig_destroy__ = _Function.delete_SolDA
    sigma_0 = _swig_property(_Function.SolDA_sigma_0_get, _Function.SolDA_sigma_0_set)
    x_c = _swig_property(_Function.SolDA_x_c_get, _Function.SolDA_x_c_set)
    x_w = _swig_property(_Function.SolDA_x_w_get, _Function.SolDA_x_w_set)
    eta_A = _swig_property(_Function.SolDA_eta_A_get, _Function.SolDA_eta_A_set)
    eta_B = _swig_property(_Function.SolDA_eta_B_get, _Function.SolDA_eta_B_set)
    z_c = _swig_property(_Function.SolDA_z_c_get, _Function.SolDA_z_c_set)
    nmodes = _swig_property(_Function.SolDA_nmodes_get, _Function.SolDA_nmodes_set)
    minp = _swig_property(_Function.SolDA_minp_get, _Function.SolDA_minp_set)
    maxp = _swig_property(_Function.SolDA_maxp_get, _Function.SolDA_maxp_set)
SolDA.velocity = new_instancemethod(_Function.SolDA_velocity, None, SolDA)
SolDA.pressure = new_instancemethod(_Function.SolDA_pressure, None, SolDA)
SolDA.stress = new_instancemethod(_Function.SolDA_stress, None, SolDA)
SolDA.strainrate = new_instancemethod(_Function.SolDA_strainrate, None, SolDA)
SolDA.viscosity = new_instancemethod(_Function.SolDA_viscosity, None, SolDA)
SolDA.bodyforce = new_instancemethod(_Function.SolDA_bodyforce, None, SolDA)
SolDA_swigregister = _Function.SolDA_swigregister
SolDA_swigregister(SolDA)

class SolDB2d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _Function.SolDB2d_swiginit(self, _Function.new_SolDB2d())
    __swig_destroy__ = _Function.delete_SolDB2d
SolDB2d.bodyforce = new_instancemethod(_Function.SolDB2d_bodyforce, None, SolDB2d)
SolDB2d.viscosity = new_instancemethod(_Function.SolDB2d_viscosity, None, SolDB2d)
SolDB2d.pressure = new_instancemethod(_Function.SolDB2d_pressure, None, SolDB2d)
SolDB2d.strainrate = new_instancemethod(_Function.SolDB2d_strainrate, None, SolDB2d)
SolDB2d.stress = new_instancemethod(_Function.SolDB2d_stress, None, SolDB2d)
SolDB2d.velocity = new_instancemethod(_Function.SolDB2d_velocity, None, SolDB2d)
SolDB2d_swigregister = _Function.SolDB2d_swigregister
SolDB2d_swigregister(SolDB2d)

class SolDB3d(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, Beta: 'double'):
        _Function.SolDB3d_swiginit(self, _Function.new_SolDB3d(Beta))
    __swig_destroy__ = _Function.delete_SolDB3d
    Beta = _swig_property(_Function.SolDB3d_Beta_get, _Function.SolDB3d_Beta_set)
SolDB3d.bodyforce = new_instancemethod(_Function.SolDB3d_bodyforce, None, SolDB3d)
SolDB3d.viscosity = new_instancemethod(_Function.SolDB3d_viscosity, None, SolDB3d)
SolDB3d.pressure = new_instancemethod(_Function.SolDB3d_pressure, None, SolDB3d)
SolDB3d.strainrate = new_instancemethod(_Function.SolDB3d_strainrate, None, SolDB3d)
SolDB3d.stress = new_instancemethod(_Function.SolDB3d_stress, None, SolDB3d)
SolDB3d.velocity = new_instancemethod(_Function.SolDB3d_velocity, None, SolDB3d)
SolDB3d_swigregister = _Function.SolDB3d_swigregister
SolDB3d_swigregister(SolDB3d)

class SolH(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, sigma_0: 'double', x_c: 'double', y_c: 'double', eta_0: 'double', nmodes: 'int'):
        _Function.SolH_swiginit(self, _Function.new_SolH(sigma_0, x_c, y_c, eta_0, nmodes))
    __swig_destroy__ = _Function.delete_SolH
    sigma_0 = _swig_property(_Function.SolH_sigma_0_get, _Function.SolH_sigma_0_set)
    x_c = _swig_property(_Function.SolH_x_c_get, _Function.SolH_x_c_set)
    y_c = _swig_property(_Function.SolH_y_c_get, _Function.SolH_y_c_set)
    eta_0 = _swig_property(_Function.SolH_eta_0_get, _Function.SolH_eta_0_set)
    nmodes = _swig_property(_Function.SolH_nmodes_get, _Function.SolH_nmodes_set)
SolH.velocity = new_instancemethod(_Function.SolH_velocity, None, SolH)
SolH.pressure = new_instancemethod(_Function.SolH_pressure, None, SolH)
SolH.stress = new_instancemethod(_Function.SolH_stress, None, SolH)
SolH.strainrate = new_instancemethod(_Function.SolH_strainrate, None, SolH)
SolH.viscosity = new_instancemethod(_Function.SolH_viscosity, None, SolH)
SolH.bodyforce = new_instancemethod(_Function.SolH_bodyforce, None, SolH)
SolH_swigregister = _Function.SolH_swigregister
SolH_swigregister(SolH)

class SolHA(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, sigma_0: 'double', x_c: 'double', x_w: 'double', y_c: 'double', y_w: 'double', eta_0: 'double', nmodes: 'int'):
        _Function.SolHA_swiginit(self, _Function.new_SolHA(sigma_0, x_c, x_w, y_c, y_w, eta_0, nmodes))
    __swig_destroy__ = _Function.delete_SolHA
    sigma_0 = _swig_property(_Function.SolHA_sigma_0_get, _Function.SolHA_sigma_0_set)
    x_c = _swig_property(_Function.SolHA_x_c_get, _Function.SolHA_x_c_set)
    x_w = _swig_property(_Function.SolHA_x_w_get, _Function.SolHA_x_w_set)
    y_c = _swig_property(_Function.SolHA_y_c_get, _Function.SolHA_y_c_set)
    y_w = _swig_property(_Function.SolHA_y_w_get, _Function.SolHA_y_w_set)
    eta_0 = _swig_property(_Function.SolHA_eta_0_get, _Function.SolHA_eta_0_set)
    nmodes = _swig_property(_Function.SolHA_nmodes_get, _Function.SolHA_nmodes_set)
    minpx = _swig_property(_Function.SolHA_minpx_get, _Function.SolHA_minpx_set)
    maxpx = _swig_property(_Function.SolHA_maxpx_get, _Function.SolHA_maxpx_set)
    minpy = _swig_property(_Function.SolHA_minpy_get, _Function.SolHA_minpy_set)
    maxpy = _swig_property(_Function.SolHA_maxpy_get, _Function.SolHA_maxpy_set)
SolHA.velocity = new_instancemethod(_Function.SolHA_velocity, None, SolHA)
SolHA.pressure = new_instancemethod(_Function.SolHA_pressure, None, SolHA)
SolHA.stress = new_instancemethod(_Function.SolHA_stress, None, SolHA)
SolHA.strainrate = new_instancemethod(_Function.SolHA_strainrate, None, SolHA)
SolHA.viscosity = new_instancemethod(_Function.SolHA_viscosity, None, SolHA)
SolHA.bodyforce = new_instancemethod(_Function.SolHA_bodyforce, None, SolHA)
SolHA_swigregister = _Function.SolHA_swigregister
SolHA_swigregister(SolHA)

class SolKx(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, sigma: 'double', nx: 'double', nz: 'double', B: 'double'):
        _Function.SolKx_swiginit(self, _Function.new_SolKx(sigma, nx, nz, B))
    __swig_destroy__ = _Function.delete_SolKx
    sigma = _swig_property(_Function.SolKx_sigma_get, _Function.SolKx_sigma_set)
    nx = _swig_property(_Function.SolKx_nx_get, _Function.SolKx_nx_set)
    nz = _swig_property(_Function.SolKx_nz_get, _Function.SolKx_nz_set)
    B = _swig_property(_Function.SolKx_B_get, _Function.SolKx_B_set)
SolKx.velocity = new_instancemethod(_Function.SolKx_velocity, None, SolKx)
SolKx.pressure = new_instancemethod(_Function.SolKx_pressure, None, SolKx)
SolKx.stress = new_instancemethod(_Function.SolKx_stress, None, SolKx)
SolKx.strainrate = new_instancemethod(_Function.SolKx_strainrate, None, SolKx)
SolKx.viscosity = new_instancemethod(_Function.SolKx_viscosity, None, SolKx)
SolKx.bodyforce = new_instancemethod(_Function.SolKx_bodyforce, None, SolKx)
SolKx_swigregister = _Function.SolKx_swigregister
SolKx_swigregister(SolKx)

class SolKz(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, sigma: 'double', nx: 'unsigned int', nz: 'double', B: 'double'):
        _Function.SolKz_swiginit(self, _Function.new_SolKz(sigma, nx, nz, B))
    __swig_destroy__ = _Function.delete_SolKz
    sigma = _swig_property(_Function.SolKz_sigma_get, _Function.SolKz_sigma_set)
    nx = _swig_property(_Function.SolKz_nx_get, _Function.SolKz_nx_set)
    nz = _swig_property(_Function.SolKz_nz_get, _Function.SolKz_nz_set)
    B = _swig_property(_Function.SolKz_B_get, _Function.SolKz_B_set)
SolKz.velocity = new_instancemethod(_Function.SolKz_velocity, None, SolKz)
SolKz.pressure = new_instancemethod(_Function.SolKz_pressure, None, SolKz)
SolKz.stress = new_instancemethod(_Function.SolKz_stress, None, SolKz)
SolKz.strainrate = new_instancemethod(_Function.SolKz_strainrate, None, SolKz)
SolKz.viscosity = new_instancemethod(_Function.SolKz_viscosity, None, SolKz)
SolKz.bodyforce = new_instancemethod(_Function.SolKz_bodyforce, None, SolKz)
SolKz_swigregister = _Function.SolKz_swigregister
SolKz_swigregister(SolKz)

class SolM(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, eta0: 'double', m: 'unsigned int', n: 'unsigned int', r: 'double'):
        _Function.SolM_swiginit(self, _Function.new_SolM(eta0, m, n, r))
    __swig_destroy__ = _Function.delete_SolM
    eta0 = _swig_property(_Function.SolM_eta0_get, _Function.SolM_eta0_set)
    m = _swig_property(_Function.SolM_m_get, _Function.SolM_m_set)
    n = _swig_property(_Function.SolM_n_get, _Function.SolM_n_set)
    r = _swig_property(_Function.SolM_r_get, _Function.SolM_r_set)
    km = _swig_property(_Function.SolM_km_get, _Function.SolM_km_set)
    kn = _swig_property(_Function.SolM_kn_get, _Function.SolM_kn_set)
    kr = _swig_property(_Function.SolM_kr_get, _Function.SolM_kr_set)
SolM.velocity = new_instancemethod(_Function.SolM_velocity, None, SolM)
SolM.pressure = new_instancemethod(_Function.SolM_pressure, None, SolM)
SolM.stress = new_instancemethod(_Function.SolM_stress, None, SolM)
SolM.strainrate = new_instancemethod(_Function.SolM_strainrate, None, SolM)
SolM.viscosity = new_instancemethod(_Function.SolM_viscosity, None, SolM)
SolM.bodyforce = new_instancemethod(_Function.SolM_bodyforce, None, SolM)
SolM_swigregister = _Function.SolM_swigregister
SolM_swigregister(SolM)

class SolNL(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, eta0: 'double', n: 'unsigned int', r: 'double'):
        _Function.SolNL_swiginit(self, _Function.new_SolNL(eta0, n, r))
    __swig_destroy__ = _Function.delete_SolNL
    eta0 = _swig_property(_Function.SolNL_eta0_get, _Function.SolNL_eta0_set)
    n = _swig_property(_Function.SolNL_n_get, _Function.SolNL_n_set)
    r = _swig_property(_Function.SolNL_r_get, _Function.SolNL_r_set)
    kn = _swig_property(_Function.SolNL_kn_get, _Function.SolNL_kn_set)
    alpha = _swig_property(_Function.SolNL_alpha_get, _Function.SolNL_alpha_set)
SolNL.velocity = new_instancemethod(_Function.SolNL_velocity, None, SolNL)
SolNL.pressure = new_instancemethod(_Function.SolNL_pressure, None, SolNL)
SolNL.stress = new_instancemethod(_Function.SolNL_stress, None, SolNL)
SolNL.strainrate = new_instancemethod(_Function.SolNL_strainrate, None, SolNL)
SolNL.viscosity = new_instancemethod(_Function.SolNL_viscosity, None, SolNL)
SolNL.bodyforce = new_instancemethod(_Function.SolNL_bodyforce, None, SolNL)
SolNL_swigregister = _Function.SolNL_swigregister
SolNL_swigregister(SolNL)

class IOIterator(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
IOIterator.get = new_instancemethod(_Function.IOIterator_get, None, IOIterator)
IOIterator.reset = new_instancemethod(_Function.IOIterator_reset, None, IOIterator)
IOIterator.size = new_instancemethod(_Function.IOIterator_size, None, IOIterator)
IOIterator_swigregister = _Function.IOIterator_swigregister
IOIterator_swigregister(IOIterator)

class FunctionIOIter(IOIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fIO: 'FunctionIO'):
        _Function.FunctionIOIter_swiginit(self, _Function.new_FunctionIOIter(fIO))
    __swig_destroy__ = _Function.delete_FunctionIOIter
FunctionIOIter._setNewIO = new_instancemethod(_Function.FunctionIOIter__setNewIO, None, FunctionIOIter)
FunctionIOIter_swigregister = _Function.FunctionIOIter_swigregister
FunctionIOIter_swigregister(FunctionIOIter)

class MeshIndexSet(IOIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, indexSet: 'IndexSet *', mesh: 'void *'):
        _Function.MeshIndexSet_swiginit(self, _Function.new_MeshIndexSet(indexSet, mesh))
    __swig_destroy__ = _Function.delete_MeshIndexSet
MeshIndexSet_swigregister = _Function.MeshIndexSet_swigregister
MeshIndexSet_swigregister(MeshIndexSet)

class NumpyInput(IOIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, arr: 'PyObject *', inputType: 'FunctionIO::IOType'):
        _Function.NumpyInput_swiginit(self, _Function.new_NumpyInput(arr, inputType))
    __swig_destroy__ = _Function.delete_NumpyInput
NumpyInput.grab = new_instancemethod(_Function.NumpyInput_grab, None, NumpyInput)
NumpyInput_swigregister = _Function.NumpyInput_swigregister
NumpyInput_swigregister(NumpyInput)

class SwarmInput(IOIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, positionVariable: 'void *'):
        _Function.SwarmInput_swiginit(self, _Function.new_SwarmInput(positionVariable))
    __swig_destroy__ = _Function.delete_SwarmInput
SwarmInput_swigregister = _Function.SwarmInput_swigregister
SwarmInput_swigregister(SwarmInput)

class IntegrationSwarmInput(IOIterator):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _intSwarm: 'void *'):
        _Function.IntegrationSwarmInput_swiginit(self, _Function.new_IntegrationSwarmInput(_intSwarm))
    __swig_destroy__ = _Function.delete_IntegrationSwarmInput
IntegrationSwarmInput_swigregister = _Function.IntegrationSwarmInput_swigregister
IntegrationSwarmInput_swigregister(IntegrationSwarmInput)

class Query(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, function: 'Function'):
        _Function.Query_swiginit(self, _Function.new_Query(function))
    __swig_destroy__ = _Function.delete_Query
Query.query = new_instancemethod(_Function.Query_query, None, Query)
Query_swigregister = _Function.Query_swigregister
Query_swigregister(Query)

class Polygon(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, _fn: 'Function', IN_ARRAY2: 'double *'):
        _Function.Polygon_swiginit(self, _Function.new_Polygon(_fn, IN_ARRAY2))
    __swig_destroy__ = _Function.delete_Polygon
Polygon_swigregister = _Function.Polygon_swigregister
Polygon_swigregister(Polygon)

class Conditional(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self):
        _Function.Conditional_swiginit(self, _Function.new_Conditional())
    __swig_destroy__ = _Function.delete_Conditional
Conditional.insert = new_instancemethod(_Function.Conditional_insert, None, Conditional)
Conditional_swigregister = _Function.Conditional_swigregister
Conditional_swigregister(Conditional)

class IO_bool(FunctionIO):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vec_size: 'std::size_t', iotype: 'FunctionIO::IOType'):
        _Function.IO_bool_swiginit(self, _Function.new_IO_bool(vec_size, iotype))
    __swig_destroy__ = _Function.delete_IO_bool
IO_bool.clone = new_instancemethod(_Function.IO_bool_clone, None, IO_bool)
IO_bool.cloneType = new_instancemethod(_Function.IO_bool_cloneType, None, IO_bool)
IO_bool.data = new_instancemethod(_Function.IO_bool_data, None, IO_bool)
IO_bool.at = new_instancemethod(_Function.IO_bool_at, None, IO_bool)
IO_bool.value = new_instancemethod(_Function.IO_bool_value, None, IO_bool)
IO_bool.dataRaw = new_instancemethod(_Function.IO_bool_dataRaw, None, IO_bool)
IO_bool_swigregister = _Function.IO_bool_swigregister
IO_bool_swigregister(IO_bool)

class IO_char(FunctionIO):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vec_size: 'std::size_t', iotype: 'FunctionIO::IOType'):
        _Function.IO_char_swiginit(self, _Function.new_IO_char(vec_size, iotype))
    __swig_destroy__ = _Function.delete_IO_char
IO_char.clone = new_instancemethod(_Function.IO_char_clone, None, IO_char)
IO_char.cloneType = new_instancemethod(_Function.IO_char_cloneType, None, IO_char)
IO_char.data = new_instancemethod(_Function.IO_char_data, None, IO_char)
IO_char.at = new_instancemethod(_Function.IO_char_at, None, IO_char)
IO_char.value = new_instancemethod(_Function.IO_char_value, None, IO_char)
IO_char.dataRaw = new_instancemethod(_Function.IO_char_dataRaw, None, IO_char)
IO_char_swigregister = _Function.IO_char_swigregister
IO_char_swigregister(IO_char)

class IO_short(FunctionIO):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vec_size: 'std::size_t', iotype: 'FunctionIO::IOType'):
        _Function.IO_short_swiginit(self, _Function.new_IO_short(vec_size, iotype))
    __swig_destroy__ = _Function.delete_IO_short
IO_short.clone = new_instancemethod(_Function.IO_short_clone, None, IO_short)
IO_short.cloneType = new_instancemethod(_Function.IO_short_cloneType, None, IO_short)
IO_short.data = new_instancemethod(_Function.IO_short_data, None, IO_short)
IO_short.at = new_instancemethod(_Function.IO_short_at, None, IO_short)
IO_short.value = new_instancemethod(_Function.IO_short_value, None, IO_short)
IO_short.dataRaw = new_instancemethod(_Function.IO_short_dataRaw, None, IO_short)
IO_short_swigregister = _Function.IO_short_swigregister
IO_short_swigregister(IO_short)

class IO_unsigned(FunctionIO):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vec_size: 'std::size_t', iotype: 'FunctionIO::IOType'):
        _Function.IO_unsigned_swiginit(self, _Function.new_IO_unsigned(vec_size, iotype))
    __swig_destroy__ = _Function.delete_IO_unsigned
IO_unsigned.clone = new_instancemethod(_Function.IO_unsigned_clone, None, IO_unsigned)
IO_unsigned.cloneType = new_instancemethod(_Function.IO_unsigned_cloneType, None, IO_unsigned)
IO_unsigned.data = new_instancemethod(_Function.IO_unsigned_data, None, IO_unsigned)
IO_unsigned.at = new_instancemethod(_Function.IO_unsigned_at, None, IO_unsigned)
IO_unsigned.value = new_instancemethod(_Function.IO_unsigned_value, None, IO_unsigned)
IO_unsigned.dataRaw = new_instancemethod(_Function.IO_unsigned_dataRaw, None, IO_unsigned)
IO_unsigned_swigregister = _Function.IO_unsigned_swigregister
IO_unsigned_swigregister(IO_unsigned)

class IO_int(FunctionIO):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vec_size: 'std::size_t', iotype: 'FunctionIO::IOType'):
        _Function.IO_int_swiginit(self, _Function.new_IO_int(vec_size, iotype))
    __swig_destroy__ = _Function.delete_IO_int
IO_int.clone = new_instancemethod(_Function.IO_int_clone, None, IO_int)
IO_int.cloneType = new_instancemethod(_Function.IO_int_cloneType, None, IO_int)
IO_int.data = new_instancemethod(_Function.IO_int_data, None, IO_int)
IO_int.at = new_instancemethod(_Function.IO_int_at, None, IO_int)
IO_int.value = new_instancemethod(_Function.IO_int_value, None, IO_int)
IO_int.dataRaw = new_instancemethod(_Function.IO_int_dataRaw, None, IO_int)
IO_int_swigregister = _Function.IO_int_swigregister
IO_int_swigregister(IO_int)

class IO_float(FunctionIO):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vec_size: 'std::size_t', iotype: 'FunctionIO::IOType'):
        _Function.IO_float_swiginit(self, _Function.new_IO_float(vec_size, iotype))
    __swig_destroy__ = _Function.delete_IO_float
IO_float.clone = new_instancemethod(_Function.IO_float_clone, None, IO_float)
IO_float.cloneType = new_instancemethod(_Function.IO_float_cloneType, None, IO_float)
IO_float.data = new_instancemethod(_Function.IO_float_data, None, IO_float)
IO_float.at = new_instancemethod(_Function.IO_float_at, None, IO_float)
IO_float.value = new_instancemethod(_Function.IO_float_value, None, IO_float)
IO_float.dataRaw = new_instancemethod(_Function.IO_float_dataRaw, None, IO_float)
IO_float_swigregister = _Function.IO_float_swigregister
IO_float_swigregister(IO_float)

class IO_double(FunctionIO):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, vec_size: 'std::size_t', iotype: 'FunctionIO::IOType'):
        _Function.IO_double_swiginit(self, _Function.new_IO_double(vec_size, iotype))
    __swig_destroy__ = _Function.delete_IO_double
IO_double.clone = new_instancemethod(_Function.IO_double_clone, None, IO_double)
IO_double.cloneType = new_instancemethod(_Function.IO_double_cloneType, None, IO_double)
IO_double.data = new_instancemethod(_Function.IO_double_data, None, IO_double)
IO_double.at = new_instancemethod(_Function.IO_double_at, None, IO_double)
IO_double.value = new_instancemethod(_Function.IO_double_value, None, IO_double)
IO_double.dataRaw = new_instancemethod(_Function.IO_double_dataRaw, None, IO_double)
IO_double_swigregister = _Function.IO_double_swigregister
IO_double_swigregister(IO_double)

class MathUnary_cos(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_cos_swiginit(self, _Function.new_MathUnary_cos(fn))
    __swig_destroy__ = _Function.delete_MathUnary_cos
MathUnary_cos_swigregister = _Function.MathUnary_cos_swigregister
MathUnary_cos_swigregister(MathUnary_cos)

class MathUnary_sin(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_sin_swiginit(self, _Function.new_MathUnary_sin(fn))
    __swig_destroy__ = _Function.delete_MathUnary_sin
MathUnary_sin_swigregister = _Function.MathUnary_sin_swigregister
MathUnary_sin_swigregister(MathUnary_sin)

class MathUnary_tan(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_tan_swiginit(self, _Function.new_MathUnary_tan(fn))
    __swig_destroy__ = _Function.delete_MathUnary_tan
MathUnary_tan_swigregister = _Function.MathUnary_tan_swigregister
MathUnary_tan_swigregister(MathUnary_tan)

class MathUnary_acos(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_acos_swiginit(self, _Function.new_MathUnary_acos(fn))
    __swig_destroy__ = _Function.delete_MathUnary_acos
MathUnary_acos_swigregister = _Function.MathUnary_acos_swigregister
MathUnary_acos_swigregister(MathUnary_acos)

class MathUnary_asin(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_asin_swiginit(self, _Function.new_MathUnary_asin(fn))
    __swig_destroy__ = _Function.delete_MathUnary_asin
MathUnary_asin_swigregister = _Function.MathUnary_asin_swigregister
MathUnary_asin_swigregister(MathUnary_asin)

class MathUnary_atan(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_atan_swiginit(self, _Function.new_MathUnary_atan(fn))
    __swig_destroy__ = _Function.delete_MathUnary_atan
MathUnary_atan_swigregister = _Function.MathUnary_atan_swigregister
MathUnary_atan_swigregister(MathUnary_atan)

class MathUnary_cosh(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_cosh_swiginit(self, _Function.new_MathUnary_cosh(fn))
    __swig_destroy__ = _Function.delete_MathUnary_cosh
MathUnary_cosh_swigregister = _Function.MathUnary_cosh_swigregister
MathUnary_cosh_swigregister(MathUnary_cosh)

class MathUnary_sinh(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_sinh_swiginit(self, _Function.new_MathUnary_sinh(fn))
    __swig_destroy__ = _Function.delete_MathUnary_sinh
MathUnary_sinh_swigregister = _Function.MathUnary_sinh_swigregister
MathUnary_sinh_swigregister(MathUnary_sinh)

class MathUnary_tanh(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_tanh_swiginit(self, _Function.new_MathUnary_tanh(fn))
    __swig_destroy__ = _Function.delete_MathUnary_tanh
MathUnary_tanh_swigregister = _Function.MathUnary_tanh_swigregister
MathUnary_tanh_swigregister(MathUnary_tanh)

class MathUnary_acosh(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_acosh_swiginit(self, _Function.new_MathUnary_acosh(fn))
    __swig_destroy__ = _Function.delete_MathUnary_acosh
MathUnary_acosh_swigregister = _Function.MathUnary_acosh_swigregister
MathUnary_acosh_swigregister(MathUnary_acosh)

class MathUnary_asinh(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_asinh_swiginit(self, _Function.new_MathUnary_asinh(fn))
    __swig_destroy__ = _Function.delete_MathUnary_asinh
MathUnary_asinh_swigregister = _Function.MathUnary_asinh_swigregister
MathUnary_asinh_swigregister(MathUnary_asinh)

class MathUnary_atanh(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_atanh_swiginit(self, _Function.new_MathUnary_atanh(fn))
    __swig_destroy__ = _Function.delete_MathUnary_atanh
MathUnary_atanh_swigregister = _Function.MathUnary_atanh_swigregister
MathUnary_atanh_swigregister(MathUnary_atanh)

class MathUnary_exp(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_exp_swiginit(self, _Function.new_MathUnary_exp(fn))
    __swig_destroy__ = _Function.delete_MathUnary_exp
MathUnary_exp_swigregister = _Function.MathUnary_exp_swigregister
MathUnary_exp_swigregister(MathUnary_exp)

class MathUnary_log(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_log_swiginit(self, _Function.new_MathUnary_log(fn))
    __swig_destroy__ = _Function.delete_MathUnary_log
MathUnary_log_swigregister = _Function.MathUnary_log_swigregister
MathUnary_log_swigregister(MathUnary_log)

class MathUnary_log2(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_log2_swiginit(self, _Function.new_MathUnary_log2(fn))
    __swig_destroy__ = _Function.delete_MathUnary_log2
MathUnary_log2_swigregister = _Function.MathUnary_log2_swigregister
MathUnary_log2_swigregister(MathUnary_log2)

class MathUnary_log10(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_log10_swiginit(self, _Function.new_MathUnary_log10(fn))
    __swig_destroy__ = _Function.delete_MathUnary_log10
MathUnary_log10_swigregister = _Function.MathUnary_log10_swigregister
MathUnary_log10_swigregister(MathUnary_log10)

class MathUnary_sqrt(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_sqrt_swiginit(self, _Function.new_MathUnary_sqrt(fn))
    __swig_destroy__ = _Function.delete_MathUnary_sqrt
MathUnary_sqrt_swigregister = _Function.MathUnary_sqrt_swigregister
MathUnary_sqrt_swigregister(MathUnary_sqrt)

class MathUnary_erf(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_erf_swiginit(self, _Function.new_MathUnary_erf(fn))
    __swig_destroy__ = _Function.delete_MathUnary_erf
MathUnary_erf_swigregister = _Function.MathUnary_erf_swigregister
MathUnary_erf_swigregister(MathUnary_erf)

class MathUnary_erfc(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_erfc_swiginit(self, _Function.new_MathUnary_erfc(fn))
    __swig_destroy__ = _Function.delete_MathUnary_erfc
MathUnary_erfc_swigregister = _Function.MathUnary_erfc_swigregister
MathUnary_erfc_swigregister(MathUnary_erfc)

class MathUnary_abs(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn: 'Function'):
        _Function.MathUnary_abs_swiginit(self, _Function.new_MathUnary_abs(fn))
    __swig_destroy__ = _Function.delete_MathUnary_abs
MathUnary_abs_swigregister = _Function.MathUnary_abs_swigregister
MathUnary_abs_swigregister(MathUnary_abs)

class SolACRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolA', dimin: 'unsigned int'):
        _Function.SolACRTP_swiginit(self, _Function.new_SolACRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolACRTP_velocityFn_get, _Function.SolACRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolACRTP_pressureFn_get, _Function.SolACRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolACRTP_stressFn_get, _Function.SolACRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolACRTP_strainRateFn_get, _Function.SolACRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolACRTP_viscosityFn_get, _Function.SolACRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolACRTP_bodyForceFn_get, _Function.SolACRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolACRTP_dim_get, _Function.SolACRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolACRTP
SolACRTP_swigregister = _Function.SolACRTP_swigregister
SolACRTP_swigregister(SolACRTP)

class SolBCRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolB', dimin: 'unsigned int'):
        _Function.SolBCRTP_swiginit(self, _Function.new_SolBCRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolBCRTP_velocityFn_get, _Function.SolBCRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolBCRTP_pressureFn_get, _Function.SolBCRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolBCRTP_stressFn_get, _Function.SolBCRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolBCRTP_strainRateFn_get, _Function.SolBCRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolBCRTP_viscosityFn_get, _Function.SolBCRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolBCRTP_bodyForceFn_get, _Function.SolBCRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolBCRTP_dim_get, _Function.SolBCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolBCRTP
SolBCRTP_swigregister = _Function.SolBCRTP_swigregister
SolBCRTP_swigregister(SolBCRTP)

class SolCCRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolC', dimin: 'unsigned int'):
        _Function.SolCCRTP_swiginit(self, _Function.new_SolCCRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolCCRTP_velocityFn_get, _Function.SolCCRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolCCRTP_pressureFn_get, _Function.SolCCRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolCCRTP_stressFn_get, _Function.SolCCRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolCCRTP_strainRateFn_get, _Function.SolCCRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolCCRTP_viscosityFn_get, _Function.SolCCRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolCCRTP_bodyForceFn_get, _Function.SolCCRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolCCRTP_dim_get, _Function.SolCCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolCCRTP
SolCCRTP_swigregister = _Function.SolCCRTP_swigregister
SolCCRTP_swigregister(SolCCRTP)

class SolCxCRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolCx', dimin: 'unsigned int'):
        _Function.SolCxCRTP_swiginit(self, _Function.new_SolCxCRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolCxCRTP_velocityFn_get, _Function.SolCxCRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolCxCRTP_pressureFn_get, _Function.SolCxCRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolCxCRTP_stressFn_get, _Function.SolCxCRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolCxCRTP_strainRateFn_get, _Function.SolCxCRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolCxCRTP_viscosityFn_get, _Function.SolCxCRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolCxCRTP_bodyForceFn_get, _Function.SolCxCRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolCxCRTP_dim_get, _Function.SolCxCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolCxCRTP
SolCxCRTP_swigregister = _Function.SolCxCRTP_swigregister
SolCxCRTP_swigregister(SolCxCRTP)

class SolDACRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolDA', dimin: 'unsigned int'):
        _Function.SolDACRTP_swiginit(self, _Function.new_SolDACRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolDACRTP_velocityFn_get, _Function.SolDACRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolDACRTP_pressureFn_get, _Function.SolDACRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolDACRTP_stressFn_get, _Function.SolDACRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolDACRTP_strainRateFn_get, _Function.SolDACRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolDACRTP_viscosityFn_get, _Function.SolDACRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolDACRTP_bodyForceFn_get, _Function.SolDACRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolDACRTP_dim_get, _Function.SolDACRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolDACRTP
SolDACRTP_swigregister = _Function.SolDACRTP_swigregister
SolDACRTP_swigregister(SolDACRTP)

class SolHCRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolH', dimin: 'unsigned int'):
        _Function.SolHCRTP_swiginit(self, _Function.new_SolHCRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolHCRTP_velocityFn_get, _Function.SolHCRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolHCRTP_pressureFn_get, _Function.SolHCRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolHCRTP_stressFn_get, _Function.SolHCRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolHCRTP_strainRateFn_get, _Function.SolHCRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolHCRTP_viscosityFn_get, _Function.SolHCRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolHCRTP_bodyForceFn_get, _Function.SolHCRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolHCRTP_dim_get, _Function.SolHCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolHCRTP
SolHCRTP_swigregister = _Function.SolHCRTP_swigregister
SolHCRTP_swigregister(SolHCRTP)

class SolHACRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolHA', dimin: 'unsigned int'):
        _Function.SolHACRTP_swiginit(self, _Function.new_SolHACRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolHACRTP_velocityFn_get, _Function.SolHACRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolHACRTP_pressureFn_get, _Function.SolHACRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolHACRTP_stressFn_get, _Function.SolHACRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolHACRTP_strainRateFn_get, _Function.SolHACRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolHACRTP_viscosityFn_get, _Function.SolHACRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolHACRTP_bodyForceFn_get, _Function.SolHACRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolHACRTP_dim_get, _Function.SolHACRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolHACRTP
SolHACRTP_swigregister = _Function.SolHACRTP_swigregister
SolHACRTP_swigregister(SolHACRTP)

class SolKxCRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolKx', dimin: 'unsigned int'):
        _Function.SolKxCRTP_swiginit(self, _Function.new_SolKxCRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolKxCRTP_velocityFn_get, _Function.SolKxCRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolKxCRTP_pressureFn_get, _Function.SolKxCRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolKxCRTP_stressFn_get, _Function.SolKxCRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolKxCRTP_strainRateFn_get, _Function.SolKxCRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolKxCRTP_viscosityFn_get, _Function.SolKxCRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolKxCRTP_bodyForceFn_get, _Function.SolKxCRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolKxCRTP_dim_get, _Function.SolKxCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolKxCRTP
SolKxCRTP_swigregister = _Function.SolKxCRTP_swigregister
SolKxCRTP_swigregister(SolKxCRTP)

class SolKzCRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolKz', dimin: 'unsigned int'):
        _Function.SolKzCRTP_swiginit(self, _Function.new_SolKzCRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolKzCRTP_velocityFn_get, _Function.SolKzCRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolKzCRTP_pressureFn_get, _Function.SolKzCRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolKzCRTP_stressFn_get, _Function.SolKzCRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolKzCRTP_strainRateFn_get, _Function.SolKzCRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolKzCRTP_viscosityFn_get, _Function.SolKzCRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolKzCRTP_bodyForceFn_get, _Function.SolKzCRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolKzCRTP_dim_get, _Function.SolKzCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolKzCRTP
SolKzCRTP_swigregister = _Function.SolKzCRTP_swigregister
SolKzCRTP_swigregister(SolKzCRTP)

class SolMCRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolM', dimin: 'unsigned int'):
        _Function.SolMCRTP_swiginit(self, _Function.new_SolMCRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolMCRTP_velocityFn_get, _Function.SolMCRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolMCRTP_pressureFn_get, _Function.SolMCRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolMCRTP_stressFn_get, _Function.SolMCRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolMCRTP_strainRateFn_get, _Function.SolMCRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolMCRTP_viscosityFn_get, _Function.SolMCRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolMCRTP_bodyForceFn_get, _Function.SolMCRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolMCRTP_dim_get, _Function.SolMCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolMCRTP
SolMCRTP_swigregister = _Function.SolMCRTP_swigregister
SolMCRTP_swigregister(SolMCRTP)

class SolNLCRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolNL', dimin: 'unsigned int'):
        _Function.SolNLCRTP_swiginit(self, _Function.new_SolNLCRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolNLCRTP_velocityFn_get, _Function.SolNLCRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolNLCRTP_pressureFn_get, _Function.SolNLCRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolNLCRTP_stressFn_get, _Function.SolNLCRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolNLCRTP_strainRateFn_get, _Function.SolNLCRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolNLCRTP_viscosityFn_get, _Function.SolNLCRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolNLCRTP_bodyForceFn_get, _Function.SolNLCRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolNLCRTP_dim_get, _Function.SolNLCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolNLCRTP
SolNLCRTP_swigregister = _Function.SolNLCRTP_swigregister
SolNLCRTP_swigregister(SolNLCRTP)

class SolDB2dCRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolDB2d', dimin: 'unsigned int'):
        _Function.SolDB2dCRTP_swiginit(self, _Function.new_SolDB2dCRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolDB2dCRTP_velocityFn_get, _Function.SolDB2dCRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolDB2dCRTP_pressureFn_get, _Function.SolDB2dCRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolDB2dCRTP_stressFn_get, _Function.SolDB2dCRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolDB2dCRTP_strainRateFn_get, _Function.SolDB2dCRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolDB2dCRTP_viscosityFn_get, _Function.SolDB2dCRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolDB2dCRTP_bodyForceFn_get, _Function.SolDB2dCRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolDB2dCRTP_dim_get, _Function.SolDB2dCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolDB2dCRTP
SolDB2dCRTP_swigregister = _Function.SolDB2dCRTP_swigregister
SolDB2dCRTP_swigregister(SolDB2dCRTP)

class SolDB3dCRTP(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, selfGuy: 'SolDB3d', dimin: 'unsigned int'):
        _Function.SolDB3dCRTP_swiginit(self, _Function.new_SolDB3dCRTP(selfGuy, dimin))
    velocityFn = _swig_property(_Function.SolDB3dCRTP_velocityFn_get, _Function.SolDB3dCRTP_velocityFn_set)
    pressureFn = _swig_property(_Function.SolDB3dCRTP_pressureFn_get, _Function.SolDB3dCRTP_pressureFn_set)
    stressFn = _swig_property(_Function.SolDB3dCRTP_stressFn_get, _Function.SolDB3dCRTP_stressFn_set)
    strainRateFn = _swig_property(_Function.SolDB3dCRTP_strainRateFn_get, _Function.SolDB3dCRTP_strainRateFn_set)
    viscosityFn = _swig_property(_Function.SolDB3dCRTP_viscosityFn_get, _Function.SolDB3dCRTP_viscosityFn_set)
    bodyForceFn = _swig_property(_Function.SolDB3dCRTP_bodyForceFn_get, _Function.SolDB3dCRTP_bodyForceFn_set)
    dim = _swig_property(_Function.SolDB3dCRTP_dim_get, _Function.SolDB3dCRTP_dim_set)
    __swig_destroy__ = _Function.delete_SolDB3dCRTP
SolDB3dCRTP_swigregister = _Function.SolDB3dCRTP_swigregister
SolDB3dCRTP_swigregister(SolDB3dCRTP)

class Relational_less(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Relational_less_swiginit(self, _Function.new_Relational_less(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_less
Relational_less_swigregister = _Function.Relational_less_swigregister
Relational_less_swigregister(Relational_less)

class Relational_less_equal(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Relational_less_equal_swiginit(self, _Function.new_Relational_less_equal(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_less_equal
Relational_less_equal_swigregister = _Function.Relational_less_equal_swigregister
Relational_less_equal_swigregister(Relational_less_equal)

class Relational_greater(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Relational_greater_swiginit(self, _Function.new_Relational_greater(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_greater
Relational_greater_swigregister = _Function.Relational_greater_swigregister
Relational_greater_swigregister(Relational_greater)

class Relational_greater_equal(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Relational_greater_equal_swiginit(self, _Function.new_Relational_greater_equal(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_greater_equal
Relational_greater_equal_swigregister = _Function.Relational_greater_equal_swigregister
Relational_greater_equal_swigregister(Relational_greater_equal)

class Relational_logical_and(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Relational_logical_and_swiginit(self, _Function.new_Relational_logical_and(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_logical_and
Relational_logical_and_swigregister = _Function.Relational_logical_and_swigregister
Relational_logical_and_swigregister(Relational_logical_and)

class Relational_logical_or(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Relational_logical_or_swiginit(self, _Function.new_Relational_logical_or(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_logical_or
Relational_logical_or_swigregister = _Function.Relational_logical_or_swigregister
Relational_logical_or_swigregister(Relational_logical_or)

class Relational_logical_xor(Function):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, fn1: 'Function', fn2: 'Function'):
        _Function.Relational_logical_xor_swiginit(self, _Function.new_Relational_logical_xor(fn1, fn2))
    __swig_destroy__ = _Function.delete_Relational_logical_xor
Relational_logical_xor_swigregister = _Function.Relational_logical_xor_swigregister
Relational_logical_xor_swigregister(Relational_logical_xor)



