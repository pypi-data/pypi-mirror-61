# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _Solvers.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_Solvers')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_Solvers')
    _Solvers = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_Solvers', [dirname(__file__)])
        except ImportError:
            import _Solvers
            return _Solvers
        if fp is not None:
            try:
                _mod = imp.load_module('_Solvers', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _Solvers = swig_import_helper()
    del swig_import_helper
else:
    import _Solvers
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import underworld.libUnderworld.libUnderworldPy.StGermain
import underworld.libUnderworld.libUnderworldPy.StgDomain
import underworld.libUnderworld.libUnderworldPy.StgFEM
import underworld.libUnderworld.libUnderworldPy.PICellerator
import underworld.libUnderworld.libUnderworldPy.Underworld
import underworld.libUnderworld.libUnderworldPy.Function
class STATS(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pressure_its = _swig_property(_Solvers.STATS_pressure_its_get, _Solvers.STATS_pressure_its_set)
    velocity_backsolve_its = _swig_property(_Solvers.STATS_velocity_backsolve_its_get, _Solvers.STATS_velocity_backsolve_its_set)
    velocity_presolve_its = _swig_property(_Solvers.STATS_velocity_presolve_its_get, _Solvers.STATS_velocity_presolve_its_set)
    velocity_pressuresolve_its = _swig_property(_Solvers.STATS_velocity_pressuresolve_its_get, _Solvers.STATS_velocity_pressuresolve_its_set)
    velocity_total_its = _swig_property(_Solvers.STATS_velocity_total_its_get, _Solvers.STATS_velocity_total_its_set)
    pressure_time = _swig_property(_Solvers.STATS_pressure_time_get, _Solvers.STATS_pressure_time_set)
    velocity_presolve_setup_time = _swig_property(_Solvers.STATS_velocity_presolve_setup_time_get, _Solvers.STATS_velocity_presolve_setup_time_set)
    velocity_pressuresolve_setup_time = _swig_property(_Solvers.STATS_velocity_pressuresolve_setup_time_get, _Solvers.STATS_velocity_pressuresolve_setup_time_set)
    velocity_backsolve_setup_time = _swig_property(_Solvers.STATS_velocity_backsolve_setup_time_get, _Solvers.STATS_velocity_backsolve_setup_time_set)
    velocity_backsolve_time = _swig_property(_Solvers.STATS_velocity_backsolve_time_get, _Solvers.STATS_velocity_backsolve_time_set)
    velocity_presolve_time = _swig_property(_Solvers.STATS_velocity_presolve_time_get, _Solvers.STATS_velocity_presolve_time_set)
    velocity_pressuresolve_time = _swig_property(_Solvers.STATS_velocity_pressuresolve_time_get, _Solvers.STATS_velocity_pressuresolve_time_set)
    velocity_total_time = _swig_property(_Solvers.STATS_velocity_total_time_get, _Solvers.STATS_velocity_total_time_set)
    total_time = _swig_property(_Solvers.STATS_total_time_get, _Solvers.STATS_total_time_set)
    total_flops = _swig_property(_Solvers.STATS_total_flops_get, _Solvers.STATS_total_flops_set)
    pressure_flops = _swig_property(_Solvers.STATS_pressure_flops_get, _Solvers.STATS_pressure_flops_set)
    velocity_backsolve_flops = _swig_property(_Solvers.STATS_velocity_backsolve_flops_get, _Solvers.STATS_velocity_backsolve_flops_set)
    velocity_presolve_flops = _swig_property(_Solvers.STATS_velocity_presolve_flops_get, _Solvers.STATS_velocity_presolve_flops_set)
    vmin = _swig_property(_Solvers.STATS_vmin_get, _Solvers.STATS_vmin_set)
    vmax = _swig_property(_Solvers.STATS_vmax_get, _Solvers.STATS_vmax_set)
    pmin = _swig_property(_Solvers.STATS_pmin_get, _Solvers.STATS_pmin_set)
    pmax = _swig_property(_Solvers.STATS_pmax_get, _Solvers.STATS_pmax_set)
    p_sum = _swig_property(_Solvers.STATS_p_sum_get, _Solvers.STATS_p_sum_set)

    def __init__(self):
        _Solvers.STATS_swiginit(self, _Solvers.new_STATS())
    __swig_destroy__ = _Solvers.delete_STATS
STATS_swigregister = _Solvers.STATS_swigregister
STATS_swigregister(STATS)
cvar = _Solvers.cvar
StokesBlockKSPInterface_Type = cvar.StokesBlockKSPInterface_Type

class StokesBlockKSPInterface(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_Solvers.StokesBlockKSPInterface__sizeOfSelf_get, _Solvers.StokesBlockKSPInterface__sizeOfSelf_set)
    _deleteSelf = _swig_property(_Solvers.StokesBlockKSPInterface__deleteSelf_get, _Solvers.StokesBlockKSPInterface__deleteSelf_set)
    type = _swig_property(_Solvers.StokesBlockKSPInterface_type_get, _Solvers.StokesBlockKSPInterface_type_set)
    nRefs = _swig_property(_Solvers.StokesBlockKSPInterface_nRefs_get, _Solvers.StokesBlockKSPInterface_nRefs_set)
    locked = _swig_property(_Solvers.StokesBlockKSPInterface_locked_get, _Solvers.StokesBlockKSPInterface_locked_set)
    _delete = _swig_property(_Solvers.StokesBlockKSPInterface__delete_get, _Solvers.StokesBlockKSPInterface__delete_set)
    _print = _swig_property(_Solvers.StokesBlockKSPInterface__print_get, _Solvers.StokesBlockKSPInterface__print_set)
    _copy = _swig_property(_Solvers.StokesBlockKSPInterface__copy_get, _Solvers.StokesBlockKSPInterface__copy_set)
    name = _swig_property(_Solvers.StokesBlockKSPInterface_name_get, _Solvers.StokesBlockKSPInterface_name_set)
    nameAllocationType = _swig_property(_Solvers.StokesBlockKSPInterface_nameAllocationType_get, _Solvers.StokesBlockKSPInterface_nameAllocationType_set)
    _defaultConstructor = _swig_property(_Solvers.StokesBlockKSPInterface__defaultConstructor_get, _Solvers.StokesBlockKSPInterface__defaultConstructor_set)
    _construct = _swig_property(_Solvers.StokesBlockKSPInterface__construct_get, _Solvers.StokesBlockKSPInterface__construct_set)
    _build = _swig_property(_Solvers.StokesBlockKSPInterface__build_get, _Solvers.StokesBlockKSPInterface__build_set)
    _initialise = _swig_property(_Solvers.StokesBlockKSPInterface__initialise_get, _Solvers.StokesBlockKSPInterface__initialise_set)
    _execute = _swig_property(_Solvers.StokesBlockKSPInterface__execute_get, _Solvers.StokesBlockKSPInterface__execute_set)
    _destroy = _swig_property(_Solvers.StokesBlockKSPInterface__destroy_get, _Solvers.StokesBlockKSPInterface__destroy_set)
    isConstructed = _swig_property(_Solvers.StokesBlockKSPInterface_isConstructed_get, _Solvers.StokesBlockKSPInterface_isConstructed_set)
    isBuilt = _swig_property(_Solvers.StokesBlockKSPInterface_isBuilt_get, _Solvers.StokesBlockKSPInterface_isBuilt_set)
    isInitialised = _swig_property(_Solvers.StokesBlockKSPInterface_isInitialised_get, _Solvers.StokesBlockKSPInterface_isInitialised_set)
    hasExecuted = _swig_property(_Solvers.StokesBlockKSPInterface_hasExecuted_get, _Solvers.StokesBlockKSPInterface_hasExecuted_set)
    isDestroyed = _swig_property(_Solvers.StokesBlockKSPInterface_isDestroyed_get, _Solvers.StokesBlockKSPInterface_isDestroyed_set)
    constructType = _swig_property(_Solvers.StokesBlockKSPInterface_constructType_get, _Solvers.StokesBlockKSPInterface_constructType_set)
    buildType = _swig_property(_Solvers.StokesBlockKSPInterface_buildType_get, _Solvers.StokesBlockKSPInterface_buildType_set)
    initialiseType = _swig_property(_Solvers.StokesBlockKSPInterface_initialiseType_get, _Solvers.StokesBlockKSPInterface_initialiseType_set)
    executeType = _swig_property(_Solvers.StokesBlockKSPInterface_executeType_get, _Solvers.StokesBlockKSPInterface_executeType_set)
    destroyType = _swig_property(_Solvers.StokesBlockKSPInterface_destroyType_get, _Solvers.StokesBlockKSPInterface_destroyType_set)
    extensionManager = _swig_property(_Solvers.StokesBlockKSPInterface_extensionManager_get, _Solvers.StokesBlockKSPInterface_extensionManager_set)
    _solverSetup = _swig_property(_Solvers.StokesBlockKSPInterface__solverSetup_get, _Solvers.StokesBlockKSPInterface__solverSetup_set)
    _solve = _swig_property(_Solvers.StokesBlockKSPInterface__solve_get, _Solvers.StokesBlockKSPInterface__solve_set)
    _getResidual = _swig_property(_Solvers.StokesBlockKSPInterface__getResidual_get, _Solvers.StokesBlockKSPInterface__getResidual_set)
    _formResidual = _swig_property(_Solvers.StokesBlockKSPInterface__formResidual_get, _Solvers.StokesBlockKSPInterface__formResidual_set)
    _getRhs = _swig_property(_Solvers.StokesBlockKSPInterface__getRhs_get, _Solvers.StokesBlockKSPInterface__getRhs_set)
    _getSolution = _swig_property(_Solvers.StokesBlockKSPInterface__getSolution_get, _Solvers.StokesBlockKSPInterface__getSolution_set)
    debug = _swig_property(_Solvers.StokesBlockKSPInterface_debug_get, _Solvers.StokesBlockKSPInterface_debug_set)
    info = _swig_property(_Solvers.StokesBlockKSPInterface_info_get, _Solvers.StokesBlockKSPInterface_info_set)
    maxIterations = _swig_property(_Solvers.StokesBlockKSPInterface_maxIterations_get, _Solvers.StokesBlockKSPInterface_maxIterations_set)
    hasSolved = _swig_property(_Solvers.StokesBlockKSPInterface_hasSolved_get, _Solvers.StokesBlockKSPInterface_hasSolved_set)
    inneritsinitialtime = _swig_property(_Solvers.StokesBlockKSPInterface_inneritsinitialtime_get, _Solvers.StokesBlockKSPInterface_inneritsinitialtime_set)
    outeritsinitialtime = _swig_property(_Solvers.StokesBlockKSPInterface_outeritsinitialtime_get, _Solvers.StokesBlockKSPInterface_outeritsinitialtime_set)
    nonlinearitsinitialtime = _swig_property(_Solvers.StokesBlockKSPInterface_nonlinearitsinitialtime_get, _Solvers.StokesBlockKSPInterface_nonlinearitsinitialtime_set)
    inneritsendtime = _swig_property(_Solvers.StokesBlockKSPInterface_inneritsendtime_get, _Solvers.StokesBlockKSPInterface_inneritsendtime_set)
    outeritsendtime = _swig_property(_Solvers.StokesBlockKSPInterface_outeritsendtime_get, _Solvers.StokesBlockKSPInterface_outeritsendtime_set)
    nonlinearitsendtime = _swig_property(_Solvers.StokesBlockKSPInterface_nonlinearitsendtime_get, _Solvers.StokesBlockKSPInterface_nonlinearitsendtime_set)
    totalinneritstime = _swig_property(_Solvers.StokesBlockKSPInterface_totalinneritstime_get, _Solvers.StokesBlockKSPInterface_totalinneritstime_set)
    totalouteritstime = _swig_property(_Solvers.StokesBlockKSPInterface_totalouteritstime_get, _Solvers.StokesBlockKSPInterface_totalouteritstime_set)
    totalnonlinearitstime = _swig_property(_Solvers.StokesBlockKSPInterface_totalnonlinearitstime_get, _Solvers.StokesBlockKSPInterface_totalnonlinearitstime_set)
    totalnuminnerits = _swig_property(_Solvers.StokesBlockKSPInterface_totalnuminnerits_get, _Solvers.StokesBlockKSPInterface_totalnuminnerits_set)
    totalnumouterits = _swig_property(_Solvers.StokesBlockKSPInterface_totalnumouterits_get, _Solvers.StokesBlockKSPInterface_totalnumouterits_set)
    totalnumnonlinearits = _swig_property(_Solvers.StokesBlockKSPInterface_totalnumnonlinearits_get, _Solvers.StokesBlockKSPInterface_totalnumnonlinearits_set)
    avgnuminnerits = _swig_property(_Solvers.StokesBlockKSPInterface_avgnuminnerits_get, _Solvers.StokesBlockKSPInterface_avgnuminnerits_set)
    avgnumouterits = _swig_property(_Solvers.StokesBlockKSPInterface_avgnumouterits_get, _Solvers.StokesBlockKSPInterface_avgnumouterits_set)
    avgtimeinnerits = _swig_property(_Solvers.StokesBlockKSPInterface_avgtimeinnerits_get, _Solvers.StokesBlockKSPInterface_avgtimeinnerits_set)
    avgtimeouterits = _swig_property(_Solvers.StokesBlockKSPInterface_avgtimeouterits_get, _Solvers.StokesBlockKSPInterface_avgtimeouterits_set)
    avgtimenonlinearits = _swig_property(_Solvers.StokesBlockKSPInterface_avgtimenonlinearits_get, _Solvers.StokesBlockKSPInterface_avgtimenonlinearits_set)
    currenttimestep = _swig_property(_Solvers.StokesBlockKSPInterface_currenttimestep_get, _Solvers.StokesBlockKSPInterface_currenttimestep_set)
    previoustimestep = _swig_property(_Solvers.StokesBlockKSPInterface_previoustimestep_get, _Solvers.StokesBlockKSPInterface_previoustimestep_set)
    preconditioner = _swig_property(_Solvers.StokesBlockKSPInterface_preconditioner_get, _Solvers.StokesBlockKSPInterface_preconditioner_set)
    k2StiffMat = _swig_property(_Solvers.StokesBlockKSPInterface_k2StiffMat_get, _Solvers.StokesBlockKSPInterface_k2StiffMat_set)
    f2ForceVec = _swig_property(_Solvers.StokesBlockKSPInterface_f2ForceVec_get, _Solvers.StokesBlockKSPInterface_f2ForceVec_set)
    mStiffMat = _swig_property(_Solvers.StokesBlockKSPInterface_mStiffMat_get, _Solvers.StokesBlockKSPInterface_mStiffMat_set)
    jForceVec = _swig_property(_Solvers.StokesBlockKSPInterface_jForceVec_get, _Solvers.StokesBlockKSPInterface_jForceVec_set)
    vmStiffMat = _swig_property(_Solvers.StokesBlockKSPInterface_vmStiffMat_get, _Solvers.StokesBlockKSPInterface_vmStiffMat_set)
    vmForceVec = _swig_property(_Solvers.StokesBlockKSPInterface_vmForceVec_get, _Solvers.StokesBlockKSPInterface_vmForceVec_set)
    penaltyNumber = _swig_property(_Solvers.StokesBlockKSPInterface_penaltyNumber_get, _Solvers.StokesBlockKSPInterface_penaltyNumber_set)
    hFactor = _swig_property(_Solvers.StokesBlockKSPInterface_hFactor_get, _Solvers.StokesBlockKSPInterface_hFactor_set)
    st_sle = _swig_property(_Solvers.StokesBlockKSPInterface_st_sle_get, _Solvers.StokesBlockKSPInterface_st_sle_set)
    mg = _swig_property(_Solvers.StokesBlockKSPInterface_mg_get, _Solvers.StokesBlockKSPInterface_mg_set)
    mg_active = _swig_property(_Solvers.StokesBlockKSPInterface_mg_active_get, _Solvers.StokesBlockKSPInterface_mg_active_set)
    stats = _swig_property(_Solvers.StokesBlockKSPInterface_stats_get, _Solvers.StokesBlockKSPInterface_stats_set)
    DIsSym = _swig_property(_Solvers.StokesBlockKSPInterface_DIsSym_get, _Solvers.StokesBlockKSPInterface_DIsSym_set)
    K2 = _swig_property(_Solvers.StokesBlockKSPInterface_K2_get, _Solvers.StokesBlockKSPInterface_K2_set)
    M = _swig_property(_Solvers.StokesBlockKSPInterface_M_get, _Solvers.StokesBlockKSPInterface_M_set)
    approxS = _swig_property(_Solvers.StokesBlockKSPInterface_approxS_get, _Solvers.StokesBlockKSPInterface_approxS_set)
    S = _swig_property(_Solvers.StokesBlockKSPInterface_S_get, _Solvers.StokesBlockKSPInterface_S_set)
    S1 = _swig_property(_Solvers.StokesBlockKSPInterface_S1_get, _Solvers.StokesBlockKSPInterface_S1_set)
    S2 = _swig_property(_Solvers.StokesBlockKSPInterface_S2_get, _Solvers.StokesBlockKSPInterface_S2_set)
    optionsFile = _swig_property(_Solvers.StokesBlockKSPInterface_optionsFile_get, _Solvers.StokesBlockKSPInterface_optionsFile_set)
    optionsString = _swig_property(_Solvers.StokesBlockKSPInterface_optionsString_get, _Solvers.StokesBlockKSPInterface_optionsString_set)
    fhat_reason = _swig_property(_Solvers.StokesBlockKSPInterface_fhat_reason_get, _Solvers.StokesBlockKSPInterface_fhat_reason_set)
    backsolve_reason = _swig_property(_Solvers.StokesBlockKSPInterface_backsolve_reason_get, _Solvers.StokesBlockKSPInterface_backsolve_reason_set)
    outer_reason = _swig_property(_Solvers.StokesBlockKSPInterface_outer_reason_get, _Solvers.StokesBlockKSPInterface_outer_reason_set)

    def __init__(self):
        _Solvers.StokesBlockKSPInterface_swiginit(self, _Solvers.new_StokesBlockKSPInterface())
    __swig_destroy__ = _Solvers.delete_StokesBlockKSPInterface
StokesBlockKSPInterface_swigregister = _Solvers.StokesBlockKSPInterface_swigregister
StokesBlockKSPInterface_swigregister(StokesBlockKSPInterface)

class KSP_COMMON(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    st_sle = _swig_property(_Solvers.KSP_COMMON_st_sle_get, _Solvers.KSP_COMMON_st_sle_set)
    mg = _swig_property(_Solvers.KSP_COMMON_mg_get, _Solvers.KSP_COMMON_mg_set)
    DIsSym = _swig_property(_Solvers.KSP_COMMON_DIsSym_get, _Solvers.KSP_COMMON_DIsSym_set)
    preconditioner = _swig_property(_Solvers.KSP_COMMON_preconditioner_get, _Solvers.KSP_COMMON_preconditioner_set)
    solver = _swig_property(_Solvers.KSP_COMMON_solver_get, _Solvers.KSP_COMMON_solver_set)

    def __init__(self):
        _Solvers.KSP_COMMON_swiginit(self, _Solvers.new_KSP_COMMON())
    __swig_destroy__ = _Solvers.delete_KSP_COMMON
KSP_COMMON_swigregister = _Solvers.KSP_COMMON_swigregister
KSP_COMMON_swigregister(KSP_COMMON)


def _StokesBlockKSPInterface_DefaultNew(name: 'Name') -> "void *":
    return _Solvers._StokesBlockKSPInterface_DefaultNew(name)
_StokesBlockKSPInterface_DefaultNew = _Solvers._StokesBlockKSPInterface_DefaultNew

def _StokesBlockKSPInterface_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _solverSetup: 'SLE_Solver_SolverSetupFunction *', _solve: 'SLE_Solver_SolveFunction *', _getResidual: 'SLE_Solver_GetResidualFunc *') -> "StokesBlockKSPInterface *":
    return _Solvers._StokesBlockKSPInterface_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _solverSetup, _solve, _getResidual)
_StokesBlockKSPInterface_New = _Solvers._StokesBlockKSPInterface_New

def _StokesBlockKSPInterface_Init(arg1: 'StokesBlockKSPInterface', preconditioner: 'StiffnessMatrix', st_sle: 'Stokes_SLE', mg: 'PETScMGSolver', filename: 'Name', string: 'char *', k2StiffMat: 'StiffnessMatrix', mStiffMat: 'StiffnessMatrix', f2ForceVec: 'ForceVector', jForceVec: 'ForceVector', penaltyNumber: 'double', hFactor: 'double', vmStiffMat: 'StiffnessMatrix', vmForceVec: 'ForceVector') -> "void":
    return _Solvers._StokesBlockKSPInterface_Init(arg1, preconditioner, st_sle, mg, filename, string, k2StiffMat, mStiffMat, f2ForceVec, jForceVec, penaltyNumber, hFactor, vmStiffMat, vmForceVec)
_StokesBlockKSPInterface_Init = _Solvers._StokesBlockKSPInterface_Init

def _StokesBlockKSPInterface_Build(solver: 'void *', stokesSLE: 'void *') -> "void":
    return _Solvers._StokesBlockKSPInterface_Build(solver, stokesSLE)
_StokesBlockKSPInterface_Build = _Solvers._StokesBlockKSPInterface_Build

def _StokesBlockKSPInterface_AssignFromXML(solver: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _Solvers._StokesBlockKSPInterface_AssignFromXML(solver, cf, data)
_StokesBlockKSPInterface_AssignFromXML = _Solvers._StokesBlockKSPInterface_AssignFromXML

def _StokesBlockKSPInterface_Initialise(solver: 'void *', stokesSLE: 'void *') -> "void":
    return _Solvers._StokesBlockKSPInterface_Initialise(solver, stokesSLE)
_StokesBlockKSPInterface_Initialise = _Solvers._StokesBlockKSPInterface_Initialise

def _StokesBlockKSPInterface_SolverSetup(stokesSle: 'void *', stokesSLE: 'void *') -> "void":
    return _Solvers._StokesBlockKSPInterface_SolverSetup(stokesSle, stokesSLE)
_StokesBlockKSPInterface_SolverSetup = _Solvers._StokesBlockKSPInterface_SolverSetup

def _StokesBlockKSPInterface_Solve(solver: 'void *', stokesSLE: 'void *') -> "void":
    return _Solvers._StokesBlockKSPInterface_Solve(solver, stokesSLE)
_StokesBlockKSPInterface_Solve = _Solvers._StokesBlockKSPInterface_Solve

def SBKSP_SetSolver(solver: 'void *', stokesSLE: 'void *') -> "void":
    return _Solvers.SBKSP_SetSolver(solver, stokesSLE)
SBKSP_SetSolver = _Solvers.SBKSP_SetSolver

def SBKSP_SetPenalty(solver: 'void *', penalty: 'double') -> "void":
    return _Solvers.SBKSP_SetPenalty(solver, penalty)
SBKSP_SetPenalty = _Solvers.SBKSP_SetPenalty

def SBKSP_GetPressureIts(solver: 'void *') -> "int":
    return _Solvers.SBKSP_GetPressureIts(solver)
SBKSP_GetPressureIts = _Solvers.SBKSP_GetPressureIts

def SBKSP_GetStokesOperators(stokesSLE: 'Stokes_SLE', K: 'Mat *', G: 'Mat *', D: 'Mat *', C: 'Mat *', approxS: 'Mat *', f: 'Vec *', h: 'Vec *', u: 'Vec *', p: 'Vec *') -> "void":
    return _Solvers.SBKSP_GetStokesOperators(stokesSLE, K, G, D, C, approxS, f, h, u, p)
SBKSP_GetStokesOperators = _Solvers.SBKSP_GetStokesOperators

def bsscr_writeMat(A: 'Mat', name: 'char []', message: 'char []') -> "void":
    return _Solvers.bsscr_writeMat(A, name, message)
bsscr_writeMat = _Solvers.bsscr_writeMat

def bsscr_writeVec(V: 'Vec', name: 'char []', message: 'char []') -> "void":
    return _Solvers.bsscr_writeVec(V, name, message)
bsscr_writeVec = _Solvers.bsscr_writeVec


