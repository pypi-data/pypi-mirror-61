# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _StGermain.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_StGermain')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_StGermain')
    _StGermain = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_StGermain', [dirname(__file__)])
        except ImportError:
            import _StGermain
            return _StGermain
        if fp is not None:
            try:
                _mod = imp.load_module('_StGermain', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _StGermain = swig_import_helper()
    del swig_import_helper
else:
    import _StGermain
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def StgVariable_GetValueAtInt(arg1: '_StgVariable', arg2: 'unsigned int', arg3: 'unsigned int') -> "int":
    return _StGermain.StgVariable_GetValueAtInt(arg1, arg2, arg3)
StgVariable_GetValueAtInt = _StGermain.StgVariable_GetValueAtInt

def StgVariable_GetValueAtLong(arg1: '_StgVariable', arg2: 'unsigned int', arg3: 'unsigned int') -> "long":
    return _StGermain.StgVariable_GetValueAtLong(arg1, arg2, arg3)
StgVariable_GetValueAtLong = _StGermain.StgVariable_GetValueAtLong

def StgVariable_GetValueAtFloat(arg1: '_StgVariable', arg2: 'unsigned int', arg3: 'unsigned int') -> "float":
    return _StGermain.StgVariable_GetValueAtFloat(arg1, arg2, arg3)
StgVariable_GetValueAtFloat = _StGermain.StgVariable_GetValueAtFloat

def StgVariable_GetValueAtDouble(arg1: '_StgVariable', arg2: 'unsigned int', arg3: 'unsigned int') -> "double":
    return _StGermain.StgVariable_GetValueAtDouble(arg1, arg2, arg3)
StgVariable_GetValueAtDouble = _StGermain.StgVariable_GetValueAtDouble
CFalse = _StGermain.CFalse
CTrue = _StGermain.CTrue
Name_Invalid = _StGermain.Name_Invalid
Type_Invalid = _StGermain.Type_Invalid
GLOBAL = _StGermain.GLOBAL
NON_GLOBAL = _StGermain.NON_GLOBAL
KEEP = _StGermain.KEEP
DELETE = _StGermain.DELETE
class STreeNode(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = _swig_property(_StGermain.STreeNode_data_get, _StGermain.STreeNode_data_set)
    left = _swig_property(_StGermain.STreeNode_left_get, _StGermain.STreeNode_left_set)
    right = _swig_property(_StGermain.STreeNode_right_get, _StGermain.STreeNode_right_set)

    def __init__(self):
        _StGermain.STreeNode_swiginit(self, _StGermain.new_STreeNode())
    __swig_destroy__ = _StGermain.delete_STreeNode
STreeNode_swigregister = _StGermain.STreeNode_swigregister
STreeNode_swigregister(STreeNode)

class ISetItem(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    key = _swig_property(_StGermain.ISetItem_key_get, _StGermain.ISetItem_key_set)
    next = _swig_property(_StGermain.ISetItem_next_get, _StGermain.ISetItem_next_set)

    def __init__(self):
        _StGermain.ISetItem_swiginit(self, _StGermain.new_ISetItem())
    __swig_destroy__ = _StGermain.delete_ISetItem
ISetItem_swigregister = _StGermain.ISetItem_swigregister
ISetItem_swigregister(ISetItem)

class IMapItem(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    key = _swig_property(_StGermain.IMapItem_key_get, _StGermain.IMapItem_key_set)
    val = _swig_property(_StGermain.IMapItem_val_get, _StGermain.IMapItem_val_set)
    next = _swig_property(_StGermain.IMapItem_next_get, _StGermain.IMapItem_next_set)

    def __init__(self):
        _StGermain.IMapItem_swiginit(self, _StGermain.new_IMapItem())
    __swig_destroy__ = _StGermain.delete_IMapItem
IMapItem_swigregister = _StGermain.IMapItem_swigregister
IMapItem_swigregister(IMapItem)

BTREE_NODE_RED = _StGermain.BTREE_NODE_RED
BTREE_NODE_BLACK = _StGermain.BTREE_NODE_BLACK
BTREE_ALLOW_DUPLICATES = _StGermain.BTREE_ALLOW_DUPLICATES
BTREE_NO_DUPLICATES = _StGermain.BTREE_NO_DUPLICATES
LINKEDLIST_SORTED = _StGermain.LINKEDLIST_SORTED
LINKEDLIST_UNSORTED = _StGermain.LINKEDLIST_UNSORTED
HASHTABLE_STRING_KEY = _StGermain.HASHTABLE_STRING_KEY
HASHTABLE_INTEGER_KEY = _StGermain.HASHTABLE_INTEGER_KEY
HASHTABLE_POINTER_KEY = _StGermain.HASHTABLE_POINTER_KEY
class RangeSet_Range(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    begin = _swig_property(_StGermain.RangeSet_Range_begin_get, _StGermain.RangeSet_Range_begin_set)
    end = _swig_property(_StGermain.RangeSet_Range_end_get, _StGermain.RangeSet_Range_end_set)
    step = _swig_property(_StGermain.RangeSet_Range_step_get, _StGermain.RangeSet_Range_step_set)

    def __init__(self):
        _StGermain.RangeSet_Range_swiginit(self, _StGermain.new_RangeSet_Range())
    __swig_destroy__ = _StGermain.delete_RangeSet_Range
RangeSet_Range_swigregister = _StGermain.RangeSet_Range_swigregister
RangeSet_Range_swigregister(RangeSet_Range)

class RangeSet_ParseStruct(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _self = _swig_property(_StGermain.RangeSet_ParseStruct__self_get, _StGermain.RangeSet_ParseStruct__self_set)
    operand = _swig_property(_StGermain.RangeSet_ParseStruct_operand_get, _StGermain.RangeSet_ParseStruct_operand_set)
    range = _swig_property(_StGermain.RangeSet_ParseStruct_range_get, _StGermain.RangeSet_ParseStruct_range_set)
    newTree = _swig_property(_StGermain.RangeSet_ParseStruct_newTree_get, _StGermain.RangeSet_ParseStruct_newTree_set)
    nInds = _swig_property(_StGermain.RangeSet_ParseStruct_nInds_get, _StGermain.RangeSet_ParseStruct_nInds_set)
    inds = _swig_property(_StGermain.RangeSet_ParseStruct_inds_get, _StGermain.RangeSet_ParseStruct_inds_set)
    curInd = _swig_property(_StGermain.RangeSet_ParseStruct_curInd_get, _StGermain.RangeSet_ParseStruct_curInd_set)
    bytes = _swig_property(_StGermain.RangeSet_ParseStruct_bytes_get, _StGermain.RangeSet_ParseStruct_bytes_set)

    def __init__(self):
        _StGermain.RangeSet_ParseStruct_swiginit(self, _StGermain.new_RangeSet_ParseStruct())
    __swig_destroy__ = _StGermain.delete_RangeSet_ParseStruct
RangeSet_ParseStruct_swigregister = _StGermain.RangeSet_ParseStruct_swigregister
RangeSet_ParseStruct_swigregister(RangeSet_ParseStruct)

VC_ValueType_Double = _StGermain.VC_ValueType_Double
VC_ValueType_Int = _StGermain.VC_ValueType_Int
VC_ValueType_Short = _StGermain.VC_ValueType_Short
VC_ValueType_Char = _StGermain.VC_ValueType_Char
VC_ValueType_Ptr = _StGermain.VC_ValueType_Ptr
VC_ValueType_DoubleArray = _StGermain.VC_ValueType_DoubleArray
VC_ValueType_CFIndex = _StGermain.VC_ValueType_CFIndex
VC_ValueType_None = _StGermain.VC_ValueType_None
Dictionary_Entry_Value_Type_String = _StGermain.Dictionary_Entry_Value_Type_String
Dictionary_Entry_Value_Type_Double = _StGermain.Dictionary_Entry_Value_Type_Double
Dictionary_Entry_Value_Type_UnsignedInt = _StGermain.Dictionary_Entry_Value_Type_UnsignedInt
Dictionary_Entry_Value_Type_Int = _StGermain.Dictionary_Entry_Value_Type_Int
Dictionary_Entry_Value_Type_UnsignedLong = _StGermain.Dictionary_Entry_Value_Type_UnsignedLong
Dictionary_Entry_Value_Type_Bool = _StGermain.Dictionary_Entry_Value_Type_Bool
Dictionary_Entry_Value_Type_Struct = _StGermain.Dictionary_Entry_Value_Type_Struct
Dictionary_Entry_Value_Type_List = _StGermain.Dictionary_Entry_Value_Type_List
Dictionary_Entry_Value_Type_VoidPtr = _StGermain.Dictionary_Entry_Value_Type_VoidPtr
Dictionary_Entry_Value_Num_Types = _StGermain.Dictionary_Entry_Value_Num_Types
class _Stg_Class(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain._Stg_Class__sizeOfSelf_get, _StGermain._Stg_Class__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain._Stg_Class__deleteSelf_get, _StGermain._Stg_Class__deleteSelf_set)
    type = _swig_property(_StGermain._Stg_Class_type_get, _StGermain._Stg_Class_type_set)
    nRefs = _swig_property(_StGermain._Stg_Class_nRefs_get, _StGermain._Stg_Class_nRefs_set)
    locked = _swig_property(_StGermain._Stg_Class_locked_get, _StGermain._Stg_Class_locked_set)
    _delete = _swig_property(_StGermain._Stg_Class__delete_get, _StGermain._Stg_Class__delete_set)
    _print = _swig_property(_StGermain._Stg_Class__print_get, _StGermain._Stg_Class__print_set)
    _copy = _swig_property(_StGermain._Stg_Class__copy_get, _StGermain._Stg_Class__copy_set)

    def __init__(self):
        _StGermain._Stg_Class_swiginit(self, _StGermain.new__Stg_Class())
    __swig_destroy__ = _StGermain.delete__Stg_Class
_Stg_Class_swigregister = _StGermain._Stg_Class_swigregister
_Stg_Class_swigregister(_Stg_Class)
cvar = _StGermain.cvar
Stg_Class_Type = cvar.Stg_Class_Type


def _Stg_Class_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *') -> "Stg_Class *":
    return _StGermain._Stg_Class_New(_sizeOfSelf, type, _delete, _print, _copy)
_Stg_Class_New = _StGermain._Stg_Class_New

def _Stg_Class_Init(arg1: '_Stg_Class') -> "void":
    return _StGermain._Stg_Class_Init(arg1)
_Stg_Class_Init = _StGermain._Stg_Class_Init

def Stg_Class_Delete(_class: 'void *') -> "void":
    return _StGermain.Stg_Class_Delete(_class)
Stg_Class_Delete = _StGermain.Stg_Class_Delete

def Stg_Class_Print(_class: 'void *', stream: 'Stream *') -> "void":
    return _StGermain.Stg_Class_Print(_class, stream)
Stg_Class_Print = _StGermain.Stg_Class_Print

def Stg_Generic_Copy(copyFunc: 'Stg_Class_CopyFunction *', _class: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _StGermain.Stg_Generic_Copy(copyFunc, _class, dest, deep, nameExt, ptrMap)
Stg_Generic_Copy = _StGermain.Stg_Generic_Copy

def Stg_Class_Copy(_class: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _StGermain.Stg_Class_Copy(_class, dest, deep, nameExt, ptrMap)
Stg_Class_Copy = _StGermain.Stg_Class_Copy

def _Stg_Class_Delete(_class: 'void *') -> "void":
    return _StGermain._Stg_Class_Delete(_class)
_Stg_Class_Delete = _StGermain._Stg_Class_Delete

def _Stg_Class_Print(_class: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._Stg_Class_Print(_class, stream)
_Stg_Class_Print = _StGermain._Stg_Class_Print

def _Stg_Class_Copy(_class: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _StGermain._Stg_Class_Copy(_class, dest, deep, nameExt, ptrMap)
_Stg_Class_Copy = _StGermain._Stg_Class_Copy

def Stg_Class_GetTypeFunc(_class: 'void *') -> "Type":
    return _StGermain.Stg_Class_GetTypeFunc(_class)
Stg_Class_GetTypeFunc = _StGermain.Stg_Class_GetTypeFunc

def Stg_Class_AddRef(_class: 'void *') -> "void":
    return _StGermain.Stg_Class_AddRef(_class)
Stg_Class_AddRef = _StGermain.Stg_Class_AddRef

def Stg_Class_RemoveRef(_class: 'void *') -> "void":
    return _StGermain.Stg_Class_RemoveRef(_class)
Stg_Class_RemoveRef = _StGermain.Stg_Class_RemoveRef

def Stg_Class_Lock(_class: 'void *') -> "void":
    return _StGermain.Stg_Class_Lock(_class)
Stg_Class_Lock = _StGermain.Stg_Class_Lock

def Stg_Class_Unlock(_class: 'void *') -> "void":
    return _StGermain.Stg_Class_Unlock(_class)
Stg_Class_Unlock = _StGermain.Stg_Class_Unlock
class _Stg_Object(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain._Stg_Object__sizeOfSelf_get, _StGermain._Stg_Object__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain._Stg_Object__deleteSelf_get, _StGermain._Stg_Object__deleteSelf_set)
    type = _swig_property(_StGermain._Stg_Object_type_get, _StGermain._Stg_Object_type_set)
    nRefs = _swig_property(_StGermain._Stg_Object_nRefs_get, _StGermain._Stg_Object_nRefs_set)
    locked = _swig_property(_StGermain._Stg_Object_locked_get, _StGermain._Stg_Object_locked_set)
    _delete = _swig_property(_StGermain._Stg_Object__delete_get, _StGermain._Stg_Object__delete_set)
    _print = _swig_property(_StGermain._Stg_Object__print_get, _StGermain._Stg_Object__print_set)
    _copy = _swig_property(_StGermain._Stg_Object__copy_get, _StGermain._Stg_Object__copy_set)
    name = _swig_property(_StGermain._Stg_Object_name_get, _StGermain._Stg_Object_name_set)
    nameAllocationType = _swig_property(_StGermain._Stg_Object_nameAllocationType_get, _StGermain._Stg_Object_nameAllocationType_set)

    def __init__(self):
        _StGermain._Stg_Object_swiginit(self, _StGermain.new__Stg_Object())
    __swig_destroy__ = _StGermain.delete__Stg_Object
_Stg_Object_swigregister = _StGermain._Stg_Object_swigregister
_Stg_Object_swigregister(_Stg_Object)
Stg_Object_Type = cvar.Stg_Object_Type

ZERO = _StGermain.ZERO

def _Stg_Object_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType') -> "Stg_Object *":
    return _StGermain._Stg_Object_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType)
_Stg_Object_New = _StGermain._Stg_Object_New

def _Stg_Object_Init(arg1: '_Stg_Object', name: 'Name', nameAllocationType: 'AllocationType') -> "void":
    return _StGermain._Stg_Object_Init(arg1, name, nameAllocationType)
_Stg_Object_Init = _StGermain._Stg_Object_Init

def _Stg_Object_Delete(object: 'void *') -> "void":
    return _StGermain._Stg_Object_Delete(object)
_Stg_Object_Delete = _StGermain._Stg_Object_Delete

def _Stg_Object_Print(object: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._Stg_Object_Print(object, stream)
_Stg_Object_Print = _StGermain._Stg_Object_Print

def _Stg_Object_Copy(object: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _StGermain._Stg_Object_Copy(object, dest, deep, nameExt, ptrMap)
_Stg_Object_Copy = _StGermain._Stg_Object_Copy

def Stg_Object_SetName(object: 'void *', name: 'Name') -> "void":
    return _StGermain.Stg_Object_SetName(object, name)
Stg_Object_SetName = _StGermain.Stg_Object_SetName

def _Stg_Object_GetNameFunc(object: 'void *') -> "Name":
    return _StGermain._Stg_Object_GetNameFunc(object)
_Stg_Object_GetNameFunc = _StGermain._Stg_Object_GetNameFunc

def Stg_Object_AppendSuffix(object: 'void *', suffix: 'Name') -> "Name":
    return _StGermain.Stg_Object_AppendSuffix(object, suffix)
Stg_Object_AppendSuffix = _StGermain.Stg_Object_AppendSuffix
class NamedObject_Register(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain.NamedObject_Register__sizeOfSelf_get, _StGermain.NamedObject_Register__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain.NamedObject_Register__deleteSelf_get, _StGermain.NamedObject_Register__deleteSelf_set)
    type = _swig_property(_StGermain.NamedObject_Register_type_get, _StGermain.NamedObject_Register_type_set)
    nRefs = _swig_property(_StGermain.NamedObject_Register_nRefs_get, _StGermain.NamedObject_Register_nRefs_set)
    locked = _swig_property(_StGermain.NamedObject_Register_locked_get, _StGermain.NamedObject_Register_locked_set)
    _delete = _swig_property(_StGermain.NamedObject_Register__delete_get, _StGermain.NamedObject_Register__delete_set)
    _print = _swig_property(_StGermain.NamedObject_Register__print_get, _StGermain.NamedObject_Register__print_set)
    _copy = _swig_property(_StGermain.NamedObject_Register__copy_get, _StGermain.NamedObject_Register__copy_set)
    objects = _swig_property(_StGermain.NamedObject_Register_objects_get, _StGermain.NamedObject_Register_objects_set)

    def __init__(self):
        _StGermain.NamedObject_Register_swiginit(self, _StGermain.new_NamedObject_Register())
    __swig_destroy__ = _StGermain.delete_NamedObject_Register
NamedObject_Register_swigregister = _StGermain.NamedObject_Register_swigregister
NamedObject_Register_swigregister(NamedObject_Register)
NamedObject_Register_Type = cvar.NamedObject_Register_Type


def NamedObject_Register_New() -> "NamedObject_Register *":
    return _StGermain.NamedObject_Register_New()
NamedObject_Register_New = _StGermain.NamedObject_Register_New

def _NamedObject_Register_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *') -> "NamedObject_Register *":
    return _StGermain._NamedObject_Register_New(_sizeOfSelf, type, _delete, _print, _copy)
_NamedObject_Register_New = _StGermain._NamedObject_Register_New

def _NamedObject_Register_Init(arg1: 'NamedObject_Register *') -> "void":
    return _StGermain._NamedObject_Register_Init(arg1)
_NamedObject_Register_Init = _StGermain._NamedObject_Register_Init

def _NamedObject_Register_Delete(nameObjectRegister: 'void *') -> "void":
    return _StGermain._NamedObject_Register_Delete(nameObjectRegister)
_NamedObject_Register_Delete = _StGermain._NamedObject_Register_Delete

def _NamedObject_Register_Print(nameObjectRegister: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._NamedObject_Register_Print(nameObjectRegister, stream)
_NamedObject_Register_Print = _StGermain._NamedObject_Register_Print

def _NamedObject_Register_Copy(namedObjectRegister: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _StGermain._NamedObject_Register_Copy(namedObjectRegister, dest, deep, nameExt, ptrMap)
_NamedObject_Register_Copy = _StGermain._NamedObject_Register_Copy

def NamedObject_Register_DeleteAll(reg: 'void *') -> "void":
    return _StGermain.NamedObject_Register_DeleteAll(reg)
NamedObject_Register_DeleteAll = _StGermain.NamedObject_Register_DeleteAll
class Stg_Component(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain.Stg_Component__sizeOfSelf_get, _StGermain.Stg_Component__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain.Stg_Component__deleteSelf_get, _StGermain.Stg_Component__deleteSelf_set)
    type = _swig_property(_StGermain.Stg_Component_type_get, _StGermain.Stg_Component_type_set)
    nRefs = _swig_property(_StGermain.Stg_Component_nRefs_get, _StGermain.Stg_Component_nRefs_set)
    locked = _swig_property(_StGermain.Stg_Component_locked_get, _StGermain.Stg_Component_locked_set)
    _delete = _swig_property(_StGermain.Stg_Component__delete_get, _StGermain.Stg_Component__delete_set)
    _print = _swig_property(_StGermain.Stg_Component__print_get, _StGermain.Stg_Component__print_set)
    _copy = _swig_property(_StGermain.Stg_Component__copy_get, _StGermain.Stg_Component__copy_set)
    name = _swig_property(_StGermain.Stg_Component_name_get, _StGermain.Stg_Component_name_set)
    nameAllocationType = _swig_property(_StGermain.Stg_Component_nameAllocationType_get, _StGermain.Stg_Component_nameAllocationType_set)
    _defaultConstructor = _swig_property(_StGermain.Stg_Component__defaultConstructor_get, _StGermain.Stg_Component__defaultConstructor_set)
    _construct = _swig_property(_StGermain.Stg_Component__construct_get, _StGermain.Stg_Component__construct_set)
    _build = _swig_property(_StGermain.Stg_Component__build_get, _StGermain.Stg_Component__build_set)
    _initialise = _swig_property(_StGermain.Stg_Component__initialise_get, _StGermain.Stg_Component__initialise_set)
    _execute = _swig_property(_StGermain.Stg_Component__execute_get, _StGermain.Stg_Component__execute_set)
    _destroy = _swig_property(_StGermain.Stg_Component__destroy_get, _StGermain.Stg_Component__destroy_set)
    isConstructed = _swig_property(_StGermain.Stg_Component_isConstructed_get, _StGermain.Stg_Component_isConstructed_set)
    isBuilt = _swig_property(_StGermain.Stg_Component_isBuilt_get, _StGermain.Stg_Component_isBuilt_set)
    isInitialised = _swig_property(_StGermain.Stg_Component_isInitialised_get, _StGermain.Stg_Component_isInitialised_set)
    hasExecuted = _swig_property(_StGermain.Stg_Component_hasExecuted_get, _StGermain.Stg_Component_hasExecuted_set)
    isDestroyed = _swig_property(_StGermain.Stg_Component_isDestroyed_get, _StGermain.Stg_Component_isDestroyed_set)
    constructType = _swig_property(_StGermain.Stg_Component_constructType_get, _StGermain.Stg_Component_constructType_set)
    buildType = _swig_property(_StGermain.Stg_Component_buildType_get, _StGermain.Stg_Component_buildType_set)
    initialiseType = _swig_property(_StGermain.Stg_Component_initialiseType_get, _StGermain.Stg_Component_initialiseType_set)
    executeType = _swig_property(_StGermain.Stg_Component_executeType_get, _StGermain.Stg_Component_executeType_set)
    destroyType = _swig_property(_StGermain.Stg_Component_destroyType_get, _StGermain.Stg_Component_destroyType_set)

    def __init__(self):
        _StGermain.Stg_Component_swiginit(self, _StGermain.new_Stg_Component())
    __swig_destroy__ = _StGermain.delete_Stg_Component
Stg_Component_swigregister = _StGermain.Stg_Component_swigregister
Stg_Component_swigregister(Stg_Component)
Stg_Component_Type = cvar.Stg_Component_Type


def _Stg_Component_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *') -> "Stg_Component *":
    return _StGermain._Stg_Component_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy)
_Stg_Component_New = _StGermain._Stg_Component_New

def _Stg_Component_Init(arg1: 'Stg_Component *') -> "void":
    return _StGermain._Stg_Component_Init(arg1)
_Stg_Component_Init = _StGermain._Stg_Component_Init

def _Stg_Component_Delete(component: 'void *') -> "void":
    return _StGermain._Stg_Component_Delete(component)
_Stg_Component_Delete = _StGermain._Stg_Component_Delete

def _Stg_Component_Print(component: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._Stg_Component_Print(component, stream)
_Stg_Component_Print = _StGermain._Stg_Component_Print

def _Stg_Component_Copy(component: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _StGermain._Stg_Component_Copy(component, dest, deep, nameExt, ptrMap)
_Stg_Component_Copy = _StGermain._Stg_Component_Copy

def Stg_Component_AssignFromXML(component: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *', force: 'Bool') -> "void":
    return _StGermain.Stg_Component_AssignFromXML(component, cf, data, force)
Stg_Component_AssignFromXML = _StGermain.Stg_Component_AssignFromXML

def Stg_Component_Build(component: 'void *', data: 'void *', force: 'Bool') -> "void":
    return _StGermain.Stg_Component_Build(component, data, force)
Stg_Component_Build = _StGermain.Stg_Component_Build

def Stg_Component_Initialise(component: 'void *', data: 'void *', force: 'Bool') -> "void":
    return _StGermain.Stg_Component_Initialise(component, data, force)
Stg_Component_Initialise = _StGermain.Stg_Component_Initialise

def Stg_Component_Execute(component: 'void *', data: 'void *', force: 'Bool') -> "void":
    return _StGermain.Stg_Component_Execute(component, data, force)
Stg_Component_Execute = _StGermain.Stg_Component_Execute

def Stg_Component_Destroy(component: 'void *', data: 'void *', force: 'Bool') -> "void":
    return _StGermain.Stg_Component_Destroy(component, data, force)
Stg_Component_Destroy = _StGermain.Stg_Component_Destroy

def Stg_Component_IsConstructed(component: 'void *') -> "Bool":
    return _StGermain.Stg_Component_IsConstructed(component)
Stg_Component_IsConstructed = _StGermain.Stg_Component_IsConstructed

def Stg_Component_IsBuilt(component: 'void *') -> "Bool":
    return _StGermain.Stg_Component_IsBuilt(component)
Stg_Component_IsBuilt = _StGermain.Stg_Component_IsBuilt

def Stg_Component_IsInitialised(component: 'void *') -> "Bool":
    return _StGermain.Stg_Component_IsInitialised(component)
Stg_Component_IsInitialised = _StGermain.Stg_Component_IsInitialised

def Stg_Component_HasExecuted(component: 'void *') -> "Bool":
    return _StGermain.Stg_Component_HasExecuted(component)
Stg_Component_HasExecuted = _StGermain.Stg_Component_HasExecuted

def Stg_Component_IsDestroyed(component: 'void *') -> "Bool":
    return _StGermain.Stg_Component_IsDestroyed(component)
Stg_Component_IsDestroyed = _StGermain.Stg_Component_IsDestroyed

def Stg_Component_SetupStreamFromDictionary(component: 'void *', dictionary: '_Dictionary') -> "void":
    return _StGermain.Stg_Component_SetupStreamFromDictionary(component, dictionary)
Stg_Component_SetupStreamFromDictionary = _StGermain.Stg_Component_SetupStreamFromDictionary
class LiveComponentRegister(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain.LiveComponentRegister__sizeOfSelf_get, _StGermain.LiveComponentRegister__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain.LiveComponentRegister__deleteSelf_get, _StGermain.LiveComponentRegister__deleteSelf_set)
    type = _swig_property(_StGermain.LiveComponentRegister_type_get, _StGermain.LiveComponentRegister_type_set)
    nRefs = _swig_property(_StGermain.LiveComponentRegister_nRefs_get, _StGermain.LiveComponentRegister_nRefs_set)
    locked = _swig_property(_StGermain.LiveComponentRegister_locked_get, _StGermain.LiveComponentRegister_locked_set)
    _delete = _swig_property(_StGermain.LiveComponentRegister__delete_get, _StGermain.LiveComponentRegister__delete_set)
    _print = _swig_property(_StGermain.LiveComponentRegister__print_get, _StGermain.LiveComponentRegister__print_set)
    _copy = _swig_property(_StGermain.LiveComponentRegister__copy_get, _StGermain.LiveComponentRegister__copy_set)
    componentList = _swig_property(_StGermain.LiveComponentRegister_componentList_get, _StGermain.LiveComponentRegister_componentList_set)

    def __init__(self):
        _StGermain.LiveComponentRegister_swiginit(self, _StGermain.new_LiveComponentRegister())
    __swig_destroy__ = _StGermain.delete_LiveComponentRegister
LiveComponentRegister_swigregister = _StGermain.LiveComponentRegister_swigregister
LiveComponentRegister_swigregister(LiveComponentRegister)
LiveComponentRegister_Type = cvar.LiveComponentRegister_Type


def _LiveComponentRegister_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *') -> "LiveComponentRegister *":
    return _StGermain._LiveComponentRegister_New(_sizeOfSelf, type, _delete, _print, _copy)
_LiveComponentRegister_New = _StGermain._LiveComponentRegister_New

def LiveComponentRegister_New() -> "LiveComponentRegister *":
    return _StGermain.LiveComponentRegister_New()
LiveComponentRegister_New = _StGermain.LiveComponentRegister_New

def _LiveComponentRegister_Init(arg1: 'LiveComponentRegister *') -> "void":
    return _StGermain._LiveComponentRegister_Init(arg1)
_LiveComponentRegister_Init = _StGermain._LiveComponentRegister_Init

def LiveComponentRegister_Init(arg1: 'LiveComponentRegister *') -> "void":
    return _StGermain.LiveComponentRegister_Init(arg1)
LiveComponentRegister_Init = _StGermain.LiveComponentRegister_Init

def _LiveComponentRegister_Delete(liveComponentRegister: 'void *') -> "void":
    return _StGermain._LiveComponentRegister_Delete(liveComponentRegister)
_LiveComponentRegister_Delete = _StGermain._LiveComponentRegister_Delete

def LiveComponentRegister_Delete() -> "void":
    return _StGermain.LiveComponentRegister_Delete()
LiveComponentRegister_Delete = _StGermain.LiveComponentRegister_Delete

def _LiveComponentRegister_Print(liveComponentRegister: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._LiveComponentRegister_Print(liveComponentRegister, stream)
_LiveComponentRegister_Print = _StGermain._LiveComponentRegister_Print

def LiveComponentRegister_Add(arg1: 'LiveComponentRegister *', component: 'Stg_Component *') -> "Index":
    return _StGermain.LiveComponentRegister_Add(arg1, component)
LiveComponentRegister_Add = _StGermain.LiveComponentRegister_Add

def LiveComponentRegister_IfRegThenAdd(component: 'Stg_Component *') -> "Index":
    return _StGermain.LiveComponentRegister_IfRegThenAdd(component)
LiveComponentRegister_IfRegThenAdd = _StGermain.LiveComponentRegister_IfRegThenAdd

def LiveComponentRegister_Get(arg1: 'LiveComponentRegister *', name: 'Name') -> "Stg_Component *":
    return _StGermain.LiveComponentRegister_Get(arg1, name)
LiveComponentRegister_Get = _StGermain.LiveComponentRegister_Get

def LiveComponentRegister_At(liveComponentRegister: 'void *', index: 'Index') -> "Stg_Component *":
    return _StGermain.LiveComponentRegister_At(liveComponentRegister, index)
LiveComponentRegister_At = _StGermain.LiveComponentRegister_At

def LiveComponentRegister_RemoveOneComponentsEntry(liveComponentRegister: 'void *', name: 'Name') -> "Index":
    return _StGermain.LiveComponentRegister_RemoveOneComponentsEntry(liveComponentRegister, name)
LiveComponentRegister_RemoveOneComponentsEntry = _StGermain.LiveComponentRegister_RemoveOneComponentsEntry

def LiveComponentRegister_GetCount(arg1: 'LiveComponentRegister *') -> "unsigned int":
    return _StGermain.LiveComponentRegister_GetCount(arg1)
LiveComponentRegister_GetCount = _StGermain.LiveComponentRegister_GetCount

def LiveComponentRegister_BuildAll(liveComponentRegister: 'void *', data: 'void *') -> "void":
    return _StGermain.LiveComponentRegister_BuildAll(liveComponentRegister, data)
LiveComponentRegister_BuildAll = _StGermain.LiveComponentRegister_BuildAll

def LiveComponentRegister_InitialiseAll(liveComponentRegister: 'void *', data: 'void *') -> "void":
    return _StGermain.LiveComponentRegister_InitialiseAll(liveComponentRegister, data)
LiveComponentRegister_InitialiseAll = _StGermain.LiveComponentRegister_InitialiseAll

def LiveComponentRegister_DeleteAll(liveComponentRegister: 'void *') -> "void":
    return _StGermain.LiveComponentRegister_DeleteAll(liveComponentRegister)
LiveComponentRegister_DeleteAll = _StGermain.LiveComponentRegister_DeleteAll

def LiveComponentRegister_GetLiveComponentRegister() -> "LiveComponentRegister *":
    return _StGermain.LiveComponentRegister_GetLiveComponentRegister()
LiveComponentRegister_GetLiveComponentRegister = _StGermain.LiveComponentRegister_GetLiveComponentRegister

def LiveComponentRegister_PrintSimilar(liveComponentRegister: 'void *', name: 'Name', stream: 'Stream *', number: 'unsigned int') -> "void":
    return _StGermain.LiveComponentRegister_PrintSimilar(liveComponentRegister, name, stream, number)
LiveComponentRegister_PrintSimilar = _StGermain.LiveComponentRegister_PrintSimilar

def LiveComponentRegister_DestroyAll(lcReg: 'void *') -> "void":
    return _StGermain.LiveComponentRegister_DestroyAll(lcReg)
LiveComponentRegister_DestroyAll = _StGermain.LiveComponentRegister_DestroyAll
class Stg_ComponentFactory(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain.Stg_ComponentFactory__sizeOfSelf_get, _StGermain.Stg_ComponentFactory__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain.Stg_ComponentFactory__deleteSelf_get, _StGermain.Stg_ComponentFactory__deleteSelf_set)
    type = _swig_property(_StGermain.Stg_ComponentFactory_type_get, _StGermain.Stg_ComponentFactory_type_set)
    nRefs = _swig_property(_StGermain.Stg_ComponentFactory_nRefs_get, _StGermain.Stg_ComponentFactory_nRefs_set)
    locked = _swig_property(_StGermain.Stg_ComponentFactory_locked_get, _StGermain.Stg_ComponentFactory_locked_set)
    _delete = _swig_property(_StGermain.Stg_ComponentFactory__delete_get, _StGermain.Stg_ComponentFactory__delete_set)
    _print = _swig_property(_StGermain.Stg_ComponentFactory__print_get, _StGermain.Stg_ComponentFactory__print_set)
    _copy = _swig_property(_StGermain.Stg_ComponentFactory__copy_get, _StGermain.Stg_ComponentFactory__copy_set)
    getDouble = _swig_property(_StGermain.Stg_ComponentFactory_getDouble_get, _StGermain.Stg_ComponentFactory_getDouble_set)
    getInt = _swig_property(_StGermain.Stg_ComponentFactory_getInt_get, _StGermain.Stg_ComponentFactory_getInt_set)
    getUnsignedInt = _swig_property(_StGermain.Stg_ComponentFactory_getUnsignedInt_get, _StGermain.Stg_ComponentFactory_getUnsignedInt_set)
    getBool = _swig_property(_StGermain.Stg_ComponentFactory_getBool_get, _StGermain.Stg_ComponentFactory_getBool_set)
    getString = _swig_property(_StGermain.Stg_ComponentFactory_getString_get, _StGermain.Stg_ComponentFactory_getString_set)
    getRootDictDouble = _swig_property(_StGermain.Stg_ComponentFactory_getRootDictDouble_get, _StGermain.Stg_ComponentFactory_getRootDictDouble_set)
    getRootDictInt = _swig_property(_StGermain.Stg_ComponentFactory_getRootDictInt_get, _StGermain.Stg_ComponentFactory_getRootDictInt_set)
    getRootDictUnsignedInt = _swig_property(_StGermain.Stg_ComponentFactory_getRootDictUnsignedInt_get, _StGermain.Stg_ComponentFactory_getRootDictUnsignedInt_set)
    getRootDictBool = _swig_property(_StGermain.Stg_ComponentFactory_getRootDictBool_get, _StGermain.Stg_ComponentFactory_getRootDictBool_set)
    getRootDictString = _swig_property(_StGermain.Stg_ComponentFactory_getRootDictString_get, _StGermain.Stg_ComponentFactory_getRootDictString_set)
    constructByName = _swig_property(_StGermain.Stg_ComponentFactory_constructByName_get, _StGermain.Stg_ComponentFactory_constructByName_set)
    constructByKey = _swig_property(_StGermain.Stg_ComponentFactory_constructByKey_get, _StGermain.Stg_ComponentFactory_constructByKey_set)
    constructByNameWithKeyFallback = _swig_property(_StGermain.Stg_ComponentFactory_constructByNameWithKeyFallback_get, _StGermain.Stg_ComponentFactory_constructByNameWithKeyFallback_set)
    constructByList = _swig_property(_StGermain.Stg_ComponentFactory_constructByList_get, _StGermain.Stg_ComponentFactory_constructByList_set)
    rootDict = _swig_property(_StGermain.Stg_ComponentFactory_rootDict_get, _StGermain.Stg_ComponentFactory_rootDict_set)
    componentDict = _swig_property(_StGermain.Stg_ComponentFactory_componentDict_get, _StGermain.Stg_ComponentFactory_componentDict_set)
    LCRegister = _swig_property(_StGermain.Stg_ComponentFactory_LCRegister_get, _StGermain.Stg_ComponentFactory_LCRegister_set)
    infoStream = _swig_property(_StGermain.Stg_ComponentFactory_infoStream_get, _StGermain.Stg_ComponentFactory_infoStream_set)

    def __init__(self):
        _StGermain.Stg_ComponentFactory_swiginit(self, _StGermain.new_Stg_ComponentFactory())
    __swig_destroy__ = _StGermain.delete_Stg_ComponentFactory
Stg_ComponentFactory_swigregister = _StGermain.Stg_ComponentFactory_swigregister
Stg_ComponentFactory_swigregister(Stg_ComponentFactory)
Stg_ComponentFactory_Type = cvar.Stg_ComponentFactory_Type


def _Stg_ComponentFactory_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', getDouble: 'Stg_ComponentFactory_GetDoubleFunc *', getInt: 'Stg_ComponentFactory_GetIntFunc *', getUnsignedInt: 'Stg_ComponentFactory_GetUnsignedIntFunc *', getBool: 'Stg_ComponentFactory_GetBoolFunc *', getString: 'Stg_ComponentFactory_GetStringFunc *', getRootDictDouble: 'Stg_ComponentFactory_GetRootDictDoubleFunc *', getRootDictInt: 'Stg_ComponentFactory_GetRootDictIntFunc *', getRootDictUnsignedInt: 'Stg_ComponentFactory_GetRootDictUnsignedIntFunc *', getRootDictBool: 'Stg_ComponentFactory_GetRootDictBoolFunc *', getRootDictString: 'Stg_ComponentFactory_GetRootDictStringFunc *', constructByName: 'Stg_ComponentFactory_ConstructByNameFunc *', constructByKey: 'Stg_ComponentFactory_ConstructByKeyFunc *', constructByNameWithKeyFallback: 'Stg_ComponentFactory_ConstructByNameWithKeyFallbackFunc *', constructByList: 'Stg_ComponentFactory_ConstructByListFunc *', rootDict: '_Dictionary', componentDict: '_Dictionary') -> "Stg_ComponentFactory *":
    return _StGermain._Stg_ComponentFactory_New(_sizeOfSelf, type, _delete, _print, _copy, getDouble, getInt, getUnsignedInt, getBool, getString, getRootDictDouble, getRootDictInt, getRootDictUnsignedInt, getRootDictBool, getRootDictString, constructByName, constructByKey, constructByNameWithKeyFallback, constructByList, rootDict, componentDict)
_Stg_ComponentFactory_New = _StGermain._Stg_ComponentFactory_New

def Stg_ComponentFactory_New(rootDict: '_Dictionary', componentDict: '_Dictionary') -> "Stg_ComponentFactory *":
    return _StGermain.Stg_ComponentFactory_New(rootDict, componentDict)
Stg_ComponentFactory_New = _StGermain.Stg_ComponentFactory_New

def _Stg_ComponentFactory_Init(arg1: 'Stg_ComponentFactory *') -> "void":
    return _StGermain._Stg_ComponentFactory_Init(arg1)
_Stg_ComponentFactory_Init = _StGermain._Stg_ComponentFactory_Init

def Stg_ComponentFactory_Init(arg1: 'Stg_ComponentFactory *') -> "void":
    return _StGermain.Stg_ComponentFactory_Init(arg1)
Stg_ComponentFactory_Init = _StGermain.Stg_ComponentFactory_Init

def _Stg_ComponentFactory_Delete(Stg_ComponentFactory: 'void *') -> "void":
    return _StGermain._Stg_ComponentFactory_Delete(Stg_ComponentFactory)
_Stg_ComponentFactory_Delete = _StGermain._Stg_ComponentFactory_Delete

def _Stg_ComponentFactory_Print(Stg_ComponentFactory: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._Stg_ComponentFactory_Print(Stg_ComponentFactory, stream)
_Stg_ComponentFactory_Print = _StGermain._Stg_ComponentFactory_Print

def Stg_ComponentFactory_SetComponentDictionary(arg1: 'Stg_ComponentFactory *', dict: '_Dictionary') -> "void":
    return _StGermain.Stg_ComponentFactory_SetComponentDictionary(arg1, dict)
Stg_ComponentFactory_SetComponentDictionary = _StGermain.Stg_ComponentFactory_SetComponentDictionary

def Stg_ComponentFactory_CreateComponents(arg1: 'Stg_ComponentFactory *') -> "void":
    return _StGermain.Stg_ComponentFactory_CreateComponents(arg1)
Stg_ComponentFactory_CreateComponents = _StGermain.Stg_ComponentFactory_CreateComponents

def Stg_ComponentFactory_ConstructComponents(arg1: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _StGermain.Stg_ComponentFactory_ConstructComponents(arg1, data)
Stg_ComponentFactory_ConstructComponents = _StGermain.Stg_ComponentFactory_ConstructComponents

def Stg_ComponentFactory_BuildComponents(arg1: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _StGermain.Stg_ComponentFactory_BuildComponents(arg1, data)
Stg_ComponentFactory_BuildComponents = _StGermain.Stg_ComponentFactory_BuildComponents

def Stg_ComponentFactory_InitialiseComponents(arg1: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _StGermain.Stg_ComponentFactory_InitialiseComponents(arg1, data)
Stg_ComponentFactory_InitialiseComponents = _StGermain.Stg_ComponentFactory_InitialiseComponents

def Stg_ComponentFactory_ExecuteComponents(arg1: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _StGermain.Stg_ComponentFactory_ExecuteComponents(arg1, data)
Stg_ComponentFactory_ExecuteComponents = _StGermain.Stg_ComponentFactory_ExecuteComponents

def Stg_ComponentFactory_DestroyComponents(arg1: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _StGermain.Stg_ComponentFactory_DestroyComponents(arg1, data)
Stg_ComponentFactory_DestroyComponents = _StGermain.Stg_ComponentFactory_DestroyComponents

def _Stg_ComponentFactory_GetDictionaryValue(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', defaultVal: '_Dictionary_Entry_Value') -> "Dictionary_Entry_Value *":
    return _StGermain._Stg_ComponentFactory_GetDictionaryValue(cf, componentName, key, defaultVal)
_Stg_ComponentFactory_GetDictionaryValue = _StGermain._Stg_ComponentFactory_GetDictionaryValue

def _Stg_ComponentFactory_GetNumericalValue(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', defaultVal: '_Dictionary_Entry_Value') -> "Dictionary_Entry_Value *":
    return _StGermain._Stg_ComponentFactory_GetNumericalValue(cf, componentName, key, defaultVal)
_Stg_ComponentFactory_GetNumericalValue = _StGermain._Stg_ComponentFactory_GetNumericalValue

def Stg_ComponentFactory_GetDouble(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', defaultVal: 'double const') -> "double":
    return _StGermain.Stg_ComponentFactory_GetDouble(cf, componentName, key, defaultVal)
Stg_ComponentFactory_GetDouble = _StGermain.Stg_ComponentFactory_GetDouble

def _Stg_ComponentFactory_GetDouble(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', defaultVal: 'double const') -> "double":
    return _StGermain._Stg_ComponentFactory_GetDouble(cf, componentName, key, defaultVal)
_Stg_ComponentFactory_GetDouble = _StGermain._Stg_ComponentFactory_GetDouble

def Stg_ComponentFactory_GetInt(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', defaultVal: 'int const') -> "int":
    return _StGermain.Stg_ComponentFactory_GetInt(cf, componentName, key, defaultVal)
Stg_ComponentFactory_GetInt = _StGermain.Stg_ComponentFactory_GetInt

def _Stg_ComponentFactory_GetInt(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', defaultVal: 'int const') -> "int":
    return _StGermain._Stg_ComponentFactory_GetInt(cf, componentName, key, defaultVal)
_Stg_ComponentFactory_GetInt = _StGermain._Stg_ComponentFactory_GetInt

def Stg_ComponentFactory_GetUnsignedInt(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', defaultVal: 'unsigned int const') -> "unsigned int":
    return _StGermain.Stg_ComponentFactory_GetUnsignedInt(cf, componentName, key, defaultVal)
Stg_ComponentFactory_GetUnsignedInt = _StGermain.Stg_ComponentFactory_GetUnsignedInt

def _Stg_ComponentFactory_GetUnsignedInt(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', defaultVal: 'unsigned int const') -> "unsigned int":
    return _StGermain._Stg_ComponentFactory_GetUnsignedInt(cf, componentName, key, defaultVal)
_Stg_ComponentFactory_GetUnsignedInt = _StGermain._Stg_ComponentFactory_GetUnsignedInt

def Stg_ComponentFactory_GetBool(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', defaultVal: 'Bool const') -> "Bool":
    return _StGermain.Stg_ComponentFactory_GetBool(cf, componentName, key, defaultVal)
Stg_ComponentFactory_GetBool = _StGermain.Stg_ComponentFactory_GetBool

def _Stg_ComponentFactory_GetBool(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', defaultVal: 'Bool const') -> "Bool":
    return _StGermain._Stg_ComponentFactory_GetBool(cf, componentName, key, defaultVal)
_Stg_ComponentFactory_GetBool = _StGermain._Stg_ComponentFactory_GetBool

def Stg_ComponentFactory_GetString(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', defaultVal: 'char const *const') -> "char *":
    return _StGermain.Stg_ComponentFactory_GetString(cf, componentName, key, defaultVal)
Stg_ComponentFactory_GetString = _StGermain.Stg_ComponentFactory_GetString

def _Stg_ComponentFactory_GetString(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', defaultVal: 'char const *const') -> "char *":
    return _StGermain._Stg_ComponentFactory_GetString(cf, componentName, key, defaultVal)
_Stg_ComponentFactory_GetString = _StGermain._Stg_ComponentFactory_GetString

def Stg_ComponentFactory_TryDouble(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', value: 'double *') -> "Bool":
    return _StGermain.Stg_ComponentFactory_TryDouble(cf, componentName, key, value)
Stg_ComponentFactory_TryDouble = _StGermain.Stg_ComponentFactory_TryDouble

def Stg_ComponentFactory_TryInt(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', value: 'int *') -> "Bool":
    return _StGermain.Stg_ComponentFactory_TryInt(cf, componentName, key, value)
Stg_ComponentFactory_TryInt = _StGermain.Stg_ComponentFactory_TryInt

def Stg_ComponentFactory_TryUnsignedInt(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', value: 'unsigned int *') -> "Bool":
    return _StGermain.Stg_ComponentFactory_TryUnsignedInt(cf, componentName, key, value)
Stg_ComponentFactory_TryUnsignedInt = _StGermain.Stg_ComponentFactory_TryUnsignedInt

def Stg_ComponentFactory_TryBool(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', value: 'Bool *') -> "Bool":
    return _StGermain.Stg_ComponentFactory_TryBool(cf, componentName, key, value)
Stg_ComponentFactory_TryBool = _StGermain.Stg_ComponentFactory_TryBool

def Stg_ComponentFactory_GetRequiredDouble(cf: 'void *', componentName: 'Name', key: 'Dictionary_Entry_Key', value: 'double *') -> "void":
    return _StGermain.Stg_ComponentFactory_GetRequiredDouble(cf, componentName, key, value)
Stg_ComponentFactory_GetRequiredDouble = _StGermain.Stg_ComponentFactory_GetRequiredDouble

def Stg_ComponentFactory_GetRootDictDouble(cf: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'double const') -> "double":
    return _StGermain.Stg_ComponentFactory_GetRootDictDouble(cf, key, defaultVal)
Stg_ComponentFactory_GetRootDictDouble = _StGermain.Stg_ComponentFactory_GetRootDictDouble

def _Stg_ComponentFactory_GetRootDictDouble(cf: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'double const') -> "double":
    return _StGermain._Stg_ComponentFactory_GetRootDictDouble(cf, key, defaultVal)
_Stg_ComponentFactory_GetRootDictDouble = _StGermain._Stg_ComponentFactory_GetRootDictDouble

def Stg_ComponentFactory_GetRootDictInt(cf: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'int const') -> "int":
    return _StGermain.Stg_ComponentFactory_GetRootDictInt(cf, key, defaultVal)
Stg_ComponentFactory_GetRootDictInt = _StGermain.Stg_ComponentFactory_GetRootDictInt

def _Stg_ComponentFactory_GetRootDictInt(cf: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'int const') -> "int":
    return _StGermain._Stg_ComponentFactory_GetRootDictInt(cf, key, defaultVal)
_Stg_ComponentFactory_GetRootDictInt = _StGermain._Stg_ComponentFactory_GetRootDictInt

def Stg_ComponentFactory_GetRootDictUnsignedInt(cf: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'unsigned int const') -> "unsigned int":
    return _StGermain.Stg_ComponentFactory_GetRootDictUnsignedInt(cf, key, defaultVal)
Stg_ComponentFactory_GetRootDictUnsignedInt = _StGermain.Stg_ComponentFactory_GetRootDictUnsignedInt

def _Stg_ComponentFactory_GetRootDictUnsignedInt(cf: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'unsigned int const') -> "unsigned int":
    return _StGermain._Stg_ComponentFactory_GetRootDictUnsignedInt(cf, key, defaultVal)
_Stg_ComponentFactory_GetRootDictUnsignedInt = _StGermain._Stg_ComponentFactory_GetRootDictUnsignedInt

def Stg_ComponentFactory_GetRootDictBool(cf: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'Bool const') -> "Bool":
    return _StGermain.Stg_ComponentFactory_GetRootDictBool(cf, key, defaultVal)
Stg_ComponentFactory_GetRootDictBool = _StGermain.Stg_ComponentFactory_GetRootDictBool

def _Stg_ComponentFactory_GetRootDictBool(cf: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'Bool const') -> "Bool":
    return _StGermain._Stg_ComponentFactory_GetRootDictBool(cf, key, defaultVal)
_Stg_ComponentFactory_GetRootDictBool = _StGermain._Stg_ComponentFactory_GetRootDictBool

def Stg_ComponentFactory_GetRootDictString(cf: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'char const *') -> "char *":
    return _StGermain.Stg_ComponentFactory_GetRootDictString(cf, key, defaultVal)
Stg_ComponentFactory_GetRootDictString = _StGermain.Stg_ComponentFactory_GetRootDictString

def _Stg_ComponentFactory_GetRootDictString(cf: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'char const *') -> "char *":
    return _StGermain._Stg_ComponentFactory_GetRootDictString(cf, key, defaultVal)
_Stg_ComponentFactory_GetRootDictString = _StGermain._Stg_ComponentFactory_GetRootDictString

def _Stg_ComponentFactory_ConstructByName(cf: 'void *', componentName: 'Name', type: 'Type', isEssential: 'Bool', d: 'void *') -> "Stg_Component *":
    return _StGermain._Stg_ComponentFactory_ConstructByName(cf, componentName, type, isEssential, d)
_Stg_ComponentFactory_ConstructByName = _StGermain._Stg_ComponentFactory_ConstructByName

def _Stg_ComponentFactory_ConstructByKey(cf: 'void *', parentComponentName: 'Name', componentKey: 'Dictionary_Entry_Key', type: 'Type', isEssential: 'Bool', data: 'void *') -> "Stg_Component *":
    return _StGermain._Stg_ComponentFactory_ConstructByKey(cf, parentComponentName, componentKey, type, isEssential, data)
_Stg_ComponentFactory_ConstructByKey = _StGermain._Stg_ComponentFactory_ConstructByKey

def _Stg_ComponentFactory_PluginConstructByKey(cf: 'void *', codelet: 'void *', componentKey: 'Dictionary_Entry_Key', type: 'Type', isEssential: 'Bool', data: 'void *') -> "Stg_Component *":
    return _StGermain._Stg_ComponentFactory_PluginConstructByKey(cf, codelet, componentKey, type, isEssential, data)
_Stg_ComponentFactory_PluginConstructByKey = _StGermain._Stg_ComponentFactory_PluginConstructByKey

def Stg_ComponentFactory_PluginGetUnsignedInt(cf: 'void *', codelet: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'double') -> "double":
    return _StGermain.Stg_ComponentFactory_PluginGetUnsignedInt(cf, codelet, key, defaultVal)
Stg_ComponentFactory_PluginGetUnsignedInt = _StGermain.Stg_ComponentFactory_PluginGetUnsignedInt

def Stg_ComponentFactory_PluginGetDouble(cf: 'void *', codelet: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'double') -> "double":
    return _StGermain.Stg_ComponentFactory_PluginGetDouble(cf, codelet, key, defaultVal)
Stg_ComponentFactory_PluginGetDouble = _StGermain.Stg_ComponentFactory_PluginGetDouble

def Stg_ComponentFactory_PluginGetInt(cf: 'void *', codelet: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'int') -> "int":
    return _StGermain.Stg_ComponentFactory_PluginGetInt(cf, codelet, key, defaultVal)
Stg_ComponentFactory_PluginGetInt = _StGermain.Stg_ComponentFactory_PluginGetInt

def Stg_ComponentFactory_PluginGetBool(cf: 'void *', codelet: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'Bool') -> "Bool":
    return _StGermain.Stg_ComponentFactory_PluginGetBool(cf, codelet, key, defaultVal)
Stg_ComponentFactory_PluginGetBool = _StGermain.Stg_ComponentFactory_PluginGetBool

def Stg_ComponentFactory_PluginGetString(cf: 'void *', codelet: 'void *', key: 'Dictionary_Entry_Key', defaultVal: 'char const *const') -> "char *":
    return _StGermain.Stg_ComponentFactory_PluginGetString(cf, codelet, key, defaultVal)
Stg_ComponentFactory_PluginGetString = _StGermain.Stg_ComponentFactory_PluginGetString

def _Stg_ComponentFactory_ConstructByNameWithKeyFallback(cf: 'void *', parentComponentName: 'Name', componentTrialName: 'Name', componentTrialKey: 'Dictionary_Entry_Key', type: 'Type', isEssential: 'Bool', data: 'void *') -> "Stg_Component *":
    return _StGermain._Stg_ComponentFactory_ConstructByNameWithKeyFallback(cf, parentComponentName, componentTrialName, componentTrialKey, type, isEssential, data)
_Stg_ComponentFactory_ConstructByNameWithKeyFallback = _StGermain._Stg_ComponentFactory_ConstructByNameWithKeyFallback

def _Stg_ComponentFactory_ConstructByList(cf: 'void *', parentComponentName: 'Name', listName: 'Name', maxComponents: 'unsigned int', type: 'Type', isEssential: 'Bool', componentCount: 'unsigned int *', data: 'void *') -> "Stg_Component **":
    return _StGermain._Stg_ComponentFactory_ConstructByList(cf, parentComponentName, listName, maxComponents, type, isEssential, componentCount, data)
_Stg_ComponentFactory_ConstructByList = _StGermain._Stg_ComponentFactory_ConstructByList
class Stg_ComponentRegisterElement(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain.Stg_ComponentRegisterElement__sizeOfSelf_get, _StGermain.Stg_ComponentRegisterElement__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain.Stg_ComponentRegisterElement__deleteSelf_get, _StGermain.Stg_ComponentRegisterElement__deleteSelf_set)
    type = _swig_property(_StGermain.Stg_ComponentRegisterElement_type_get, _StGermain.Stg_ComponentRegisterElement_type_set)
    nRefs = _swig_property(_StGermain.Stg_ComponentRegisterElement_nRefs_get, _StGermain.Stg_ComponentRegisterElement_nRefs_set)
    locked = _swig_property(_StGermain.Stg_ComponentRegisterElement_locked_get, _StGermain.Stg_ComponentRegisterElement_locked_set)
    _delete = _swig_property(_StGermain.Stg_ComponentRegisterElement__delete_get, _StGermain.Stg_ComponentRegisterElement__delete_set)
    _print = _swig_property(_StGermain.Stg_ComponentRegisterElement__print_get, _StGermain.Stg_ComponentRegisterElement__print_set)
    _copy = _swig_property(_StGermain.Stg_ComponentRegisterElement__copy_get, _StGermain.Stg_ComponentRegisterElement__copy_set)
    name = _swig_property(_StGermain.Stg_ComponentRegisterElement_name_get, _StGermain.Stg_ComponentRegisterElement_name_set)
    nameAllocationType = _swig_property(_StGermain.Stg_ComponentRegisterElement_nameAllocationType_get, _StGermain.Stg_ComponentRegisterElement_nameAllocationType_set)
    componentType = _swig_property(_StGermain.Stg_ComponentRegisterElement_componentType_get, _StGermain.Stg_ComponentRegisterElement_componentType_set)
    defaultConstructor = _swig_property(_StGermain.Stg_ComponentRegisterElement_defaultConstructor_get, _StGermain.Stg_ComponentRegisterElement_defaultConstructor_set)
    version = _swig_property(_StGermain.Stg_ComponentRegisterElement_version_get, _StGermain.Stg_ComponentRegisterElement_version_set)

    def __init__(self):
        _StGermain.Stg_ComponentRegisterElement_swiginit(self, _StGermain.new_Stg_ComponentRegisterElement())
    __swig_destroy__ = _StGermain.delete_Stg_ComponentRegisterElement
Stg_ComponentRegisterElement_swigregister = _StGermain.Stg_ComponentRegisterElement_swigregister
Stg_ComponentRegisterElement_swigregister(Stg_ComponentRegisterElement)
Stg_ComponentRegister_Type = cvar.Stg_ComponentRegister_Type


def Stg_ComponentRegisterElement_New(type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', componentType: 'Type', defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', version: 'Name') -> "Stg_ComponentRegisterElement *":
    return _StGermain.Stg_ComponentRegisterElement_New(type, _delete, _print, componentType, defaultConstructor, version)
Stg_ComponentRegisterElement_New = _StGermain.Stg_ComponentRegisterElement_New

def _Stg_ComponentRegisterElement_Delete(element: 'void *') -> "void":
    return _StGermain._Stg_ComponentRegisterElement_Delete(element)
_Stg_ComponentRegisterElement_Delete = _StGermain._Stg_ComponentRegisterElement_Delete

def _Stg_ComponentRegisterElement_Print(element: 'void *', paramStream: 'Stream *') -> "void":
    return _StGermain._Stg_ComponentRegisterElement_Print(element, paramStream)
_Stg_ComponentRegisterElement_Print = _StGermain._Stg_ComponentRegisterElement_Print
class Stg_ComponentRegister(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain.Stg_ComponentRegister__sizeOfSelf_get, _StGermain.Stg_ComponentRegister__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain.Stg_ComponentRegister__deleteSelf_get, _StGermain.Stg_ComponentRegister__deleteSelf_set)
    type = _swig_property(_StGermain.Stg_ComponentRegister_type_get, _StGermain.Stg_ComponentRegister_type_set)
    nRefs = _swig_property(_StGermain.Stg_ComponentRegister_nRefs_get, _StGermain.Stg_ComponentRegister_nRefs_set)
    locked = _swig_property(_StGermain.Stg_ComponentRegister_locked_get, _StGermain.Stg_ComponentRegister_locked_set)
    _delete = _swig_property(_StGermain.Stg_ComponentRegister__delete_get, _StGermain.Stg_ComponentRegister__delete_set)
    _print = _swig_property(_StGermain.Stg_ComponentRegister__print_get, _StGermain.Stg_ComponentRegister__print_set)
    _copy = _swig_property(_StGermain.Stg_ComponentRegister__copy_get, _StGermain.Stg_ComponentRegister__copy_set)
    constructors = _swig_property(_StGermain.Stg_ComponentRegister_constructors_get, _StGermain.Stg_ComponentRegister_constructors_set)
    debugStream = _swig_property(_StGermain.Stg_ComponentRegister_debugStream_get, _StGermain.Stg_ComponentRegister_debugStream_set)

    def __init__(self):
        _StGermain.Stg_ComponentRegister_swiginit(self, _StGermain.new_Stg_ComponentRegister())
    __swig_destroy__ = _StGermain.delete_Stg_ComponentRegister
Stg_ComponentRegister_swigregister = _StGermain.Stg_ComponentRegister_swigregister
Stg_ComponentRegister_swigregister(Stg_ComponentRegister)
Stg_ComponentRegisterElement_Type = cvar.Stg_ComponentRegisterElement_Type


def _Stg_ComponentRegister_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *') -> "Stg_ComponentRegister *":
    return _StGermain._Stg_ComponentRegister_New(_sizeOfSelf, type, _delete, _print, _copy)
_Stg_ComponentRegister_New = _StGermain._Stg_ComponentRegister_New

def Stg_ComponentRegister_New() -> "Stg_ComponentRegister *":
    return _StGermain.Stg_ComponentRegister_New()
Stg_ComponentRegister_New = _StGermain.Stg_ComponentRegister_New

def _Stg_ComponentRegister_Init(arg1: 'Stg_ComponentRegister *') -> "void":
    return _StGermain._Stg_ComponentRegister_Init(arg1)
_Stg_ComponentRegister_Init = _StGermain._Stg_ComponentRegister_Init

def Stg_ComponentRegister_Init(arg1: 'Stg_ComponentRegister *') -> "void":
    return _StGermain.Stg_ComponentRegister_Init(arg1)
Stg_ComponentRegister_Init = _StGermain.Stg_ComponentRegister_Init

def _Stg_ComponentRegister_Delete(componentRegister: 'void *') -> "void":
    return _StGermain._Stg_ComponentRegister_Delete(componentRegister)
_Stg_ComponentRegister_Delete = _StGermain._Stg_ComponentRegister_Delete

def _Stg_ComponentRegister_Print(componentRegister: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._Stg_ComponentRegister_Print(componentRegister, stream)
_Stg_ComponentRegister_Print = _StGermain._Stg_ComponentRegister_Print

def Stg_ComponentRegister_AddFunc(arg1: 'Stg_ComponentRegister *', componentType: 'Name', version: 'Name', func: 'Stg_Component_DefaultConstructorFunction *') -> "int":
    return _StGermain.Stg_ComponentRegister_AddFunc(arg1, componentType, version, func)
Stg_ComponentRegister_AddFunc = _StGermain.Stg_ComponentRegister_AddFunc

def Stg_ComponentRegister_RemoveEntry(arg1: 'Stg_ComponentRegister *', componentType: 'Name', version: 'Name') -> "Bool":
    return _StGermain.Stg_ComponentRegister_RemoveEntry(arg1, componentType, version)
Stg_ComponentRegister_RemoveEntry = _StGermain.Stg_ComponentRegister_RemoveEntry

def Stg_ComponentRegister_Get(arg1: 'Stg_ComponentRegister *', componentType: 'Name', version: 'Name') -> "Stg_Component_DefaultConstructorFunction *":
    return _StGermain.Stg_ComponentRegister_Get(arg1, componentType, version)
Stg_ComponentRegister_Get = _StGermain.Stg_ComponentRegister_Get

def Stg_ComponentRegister_AssertGet(arg1: 'Stg_ComponentRegister *', componentType: 'Name', version: 'Name') -> "Stg_Component_DefaultConstructorFunction *":
    return _StGermain.Stg_ComponentRegister_AssertGet(arg1, componentType, version)
Stg_ComponentRegister_AssertGet = _StGermain.Stg_ComponentRegister_AssertGet

def Stg_ComponentRegister_Get_ComponentRegister() -> "Stg_ComponentRegister *":
    return _StGermain.Stg_ComponentRegister_Get_ComponentRegister()
Stg_ComponentRegister_Get_ComponentRegister = _StGermain.Stg_ComponentRegister_Get_ComponentRegister

def Stg_ComponentRegister_PrintSimilar(componentRegister: 'void *', name: 'Name', _stream: 'void *', number: 'unsigned int') -> "void":
    return _StGermain.Stg_ComponentRegister_PrintSimilar(componentRegister, name, _stream, number)
Stg_ComponentRegister_PrintSimilar = _StGermain.Stg_ComponentRegister_PrintSimilar

def Stg_ComponentRegister_PrintAllTypes(componentRegister: 'void *', stream: 'void *') -> "void":
    return _StGermain.Stg_ComponentRegister_PrintAllTypes(componentRegister, stream)
Stg_ComponentRegister_PrintAllTypes = _StGermain.Stg_ComponentRegister_PrintAllTypes

def Stg_ComponentRegister_GetCount(componentRegister: 'void *') -> "int":
    return _StGermain.Stg_ComponentRegister_GetCount(componentRegister)
Stg_ComponentRegister_GetCount = _StGermain.Stg_ComponentRegister_GetCount

def Stg_ComponentRegister_GetByIndex(componentRegister: 'void *', index: 'int') -> "Stg_ComponentRegisterElement *":
    return _StGermain.Stg_ComponentRegister_GetByIndex(componentRegister, index)
Stg_ComponentRegister_GetByIndex = _StGermain.Stg_ComponentRegister_GetByIndex

def Stg_ComponentRegisterElement_GetType(element: 'Stg_ComponentRegisterElement *') -> "Type":
    return _StGermain.Stg_ComponentRegisterElement_GetType(element)
Stg_ComponentRegisterElement_GetType = _StGermain.Stg_ComponentRegisterElement_GetType

def Stg_ComponentRegisterElement_GetVersion(element: 'Stg_ComponentRegisterElement *') -> "Name":
    return _StGermain.Stg_ComponentRegisterElement_GetVersion(element)
Stg_ComponentRegisterElement_GetVersion = _StGermain.Stg_ComponentRegisterElement_GetVersion

def Stg_ComponentRegisterElement_GetConstructor(element: 'Stg_ComponentRegisterElement *') -> "Stg_Component_DefaultConstructorFunction *":
    return _StGermain.Stg_ComponentRegisterElement_GetConstructor(element)
Stg_ComponentRegisterElement_GetConstructor = _StGermain.Stg_ComponentRegisterElement_GetConstructor
StgVariable_DataType_Char = _StGermain.StgVariable_DataType_Char
StgVariable_DataType_Short = _StGermain.StgVariable_DataType_Short
StgVariable_DataType_Int = _StGermain.StgVariable_DataType_Int
StgVariable_DataType_Long = _StGermain.StgVariable_DataType_Long
StgVariable_DataType_Float = _StGermain.StgVariable_DataType_Float
StgVariable_DataType_Double = _StGermain.StgVariable_DataType_Double
StgVariable_DataType_Pointer = _StGermain.StgVariable_DataType_Pointer
StgVariable_DataType_Size = _StGermain.StgVariable_DataType_Size
class _StgVariable(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain._StgVariable__sizeOfSelf_get, _StGermain._StgVariable__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain._StgVariable__deleteSelf_get, _StGermain._StgVariable__deleteSelf_set)
    type = _swig_property(_StGermain._StgVariable_type_get, _StGermain._StgVariable_type_set)
    nRefs = _swig_property(_StGermain._StgVariable_nRefs_get, _StGermain._StgVariable_nRefs_set)
    locked = _swig_property(_StGermain._StgVariable_locked_get, _StGermain._StgVariable_locked_set)
    _delete = _swig_property(_StGermain._StgVariable__delete_get, _StGermain._StgVariable__delete_set)
    _print = _swig_property(_StGermain._StgVariable__print_get, _StGermain._StgVariable__print_set)
    _copy = _swig_property(_StGermain._StgVariable__copy_get, _StGermain._StgVariable__copy_set)
    name = _swig_property(_StGermain._StgVariable_name_get, _StGermain._StgVariable_name_set)
    nameAllocationType = _swig_property(_StGermain._StgVariable_nameAllocationType_get, _StGermain._StgVariable_nameAllocationType_set)
    _defaultConstructor = _swig_property(_StGermain._StgVariable__defaultConstructor_get, _StGermain._StgVariable__defaultConstructor_set)
    _construct = _swig_property(_StGermain._StgVariable__construct_get, _StGermain._StgVariable__construct_set)
    _build = _swig_property(_StGermain._StgVariable__build_get, _StGermain._StgVariable__build_set)
    _initialise = _swig_property(_StGermain._StgVariable__initialise_get, _StGermain._StgVariable__initialise_set)
    _execute = _swig_property(_StGermain._StgVariable__execute_get, _StGermain._StgVariable__execute_set)
    _destroy = _swig_property(_StGermain._StgVariable__destroy_get, _StGermain._StgVariable__destroy_set)
    isConstructed = _swig_property(_StGermain._StgVariable_isConstructed_get, _StGermain._StgVariable_isConstructed_set)
    isBuilt = _swig_property(_StGermain._StgVariable_isBuilt_get, _StGermain._StgVariable_isBuilt_set)
    isInitialised = _swig_property(_StGermain._StgVariable_isInitialised_get, _StGermain._StgVariable_isInitialised_set)
    hasExecuted = _swig_property(_StGermain._StgVariable_hasExecuted_get, _StGermain._StgVariable_hasExecuted_set)
    isDestroyed = _swig_property(_StGermain._StgVariable_isDestroyed_get, _StGermain._StgVariable_isDestroyed_set)
    constructType = _swig_property(_StGermain._StgVariable_constructType_get, _StGermain._StgVariable_constructType_set)
    buildType = _swig_property(_StGermain._StgVariable_buildType_get, _StGermain._StgVariable_buildType_set)
    initialiseType = _swig_property(_StGermain._StgVariable_initialiseType_get, _StGermain._StgVariable_initialiseType_set)
    executeType = _swig_property(_StGermain._StgVariable_executeType_get, _StGermain._StgVariable_executeType_set)
    destroyType = _swig_property(_StGermain._StgVariable_destroyType_get, _StGermain._StgVariable_destroyType_set)
    context = _swig_property(_StGermain._StgVariable_context_get, _StGermain._StgVariable_context_set)
    offsetCount = _swig_property(_StGermain._StgVariable_offsetCount_get, _StGermain._StgVariable_offsetCount_set)
    offsets = _swig_property(_StGermain._StgVariable_offsets_get, _StGermain._StgVariable_offsets_set)
    dataTypes = _swig_property(_StGermain._StgVariable_dataTypes_get, _StGermain._StgVariable_dataTypes_set)
    dataTypeCounts = _swig_property(_StGermain._StgVariable_dataTypeCounts_get, _StGermain._StgVariable_dataTypeCounts_set)
    structSizePtr = _swig_property(_StGermain._StgVariable_structSizePtr_get, _StGermain._StgVariable_structSizePtr_set)
    arrayPtrPtr = _swig_property(_StGermain._StgVariable_arrayPtrPtr_get, _StGermain._StgVariable_arrayPtrPtr_set)
    arraySizePtr = _swig_property(_StGermain._StgVariable_arraySizePtr_get, _StGermain._StgVariable_arraySizePtr_set)
    arraySizeFunc = _swig_property(_StGermain._StgVariable_arraySizeFunc_get, _StGermain._StgVariable_arraySizeFunc_set)
    dataSizes = _swig_property(_StGermain._StgVariable_dataSizes_get, _StGermain._StgVariable_dataSizes_set)
    structSize = _swig_property(_StGermain._StgVariable_structSize_get, _StGermain._StgVariable_structSize_set)
    arrayPtr = _swig_property(_StGermain._StgVariable_arrayPtr_get, _StGermain._StgVariable_arrayPtr_set)
    arraySize = _swig_property(_StGermain._StgVariable_arraySize_get, _StGermain._StgVariable_arraySize_set)
    subVariablesCount = _swig_property(_StGermain._StgVariable_subVariablesCount_get, _StGermain._StgVariable_subVariablesCount_set)
    components = _swig_property(_StGermain._StgVariable_components_get, _StGermain._StgVariable_components_set)
    allocateSelf = _swig_property(_StGermain._StgVariable_allocateSelf_get, _StGermain._StgVariable_allocateSelf_set)
    vr = _swig_property(_StGermain._StgVariable_vr_get, _StGermain._StgVariable_vr_set)
    parent = _swig_property(_StGermain._StgVariable_parent_get, _StGermain._StgVariable_parent_set)

    def __init__(self):
        _StGermain._StgVariable_swiginit(self, _StGermain.new__StgVariable())
    __swig_destroy__ = _StGermain.delete__StgVariable
_StgVariable_swigregister = _StGermain._StgVariable_swigregister
_StgVariable_swigregister(_StgVariable)
StgVariable_Type = cvar.StgVariable_Type


def StgVariable_New(name: 'Name', context: 'AbstractContext *', dataCount: 'Index', dataOffsets: 'SizeT *', dataTypes: 'StgVariable_DataType *', dataTypeCounts: 'Index *', dataNames: 'Name *', structSizePtr: 'SizeT *', arraySizePtr: 'Index *', arraySizeFunc: 'StgVariable_ArraySizeFunc *', arrayPtrPtr: 'void **', vr: 'Variable_Register *') -> "StgVariable *":
    return _StGermain.StgVariable_New(name, context, dataCount, dataOffsets, dataTypes, dataTypeCounts, dataNames, structSizePtr, arraySizePtr, arraySizeFunc, arrayPtrPtr, vr)
StgVariable_New = _StGermain.StgVariable_New

def _StgVariable_DefaultNew(name: 'Name') -> "StgVariable *":
    return _StGermain._StgVariable_DefaultNew(name)
_StgVariable_DefaultNew = _StGermain._StgVariable_DefaultNew

def StgVariable_NewScalar(name: 'Name', context: 'AbstractContext *', dataType: 'StgVariable_DataType', arraySizePtr: 'Index *', arraySizeFunc: 'StgVariable_ArraySizeFunc *', arrayPtrPtr: 'void **', vr: 'Variable_Register *') -> "StgVariable *":
    return _StGermain.StgVariable_NewScalar(name, context, dataType, arraySizePtr, arraySizeFunc, arrayPtrPtr, vr)
StgVariable_NewScalar = _StGermain.StgVariable_NewScalar

def StgVariable_NewVector(name: 'Name', context: 'AbstractContext *', dataType: 'StgVariable_DataType', dataTypeCount: 'Index', arraySizePtr: 'Index *', arraySizeFunc: 'StgVariable_ArraySizeFunc *', arrayPtrPtr: 'void **', vr: 'Variable_Register *') -> "StgVariable *":
    return _StGermain.StgVariable_NewVector(name, context, dataType, dataTypeCount, arraySizePtr, arraySizeFunc, arrayPtrPtr, vr)
StgVariable_NewVector = _StGermain.StgVariable_NewVector

def StgVariable_NewVector2(name: 'Name', context: 'AbstractContext *', dataType: 'StgVariable_DataType', dataTypeCount: 'Index', arraySizePtr: 'Index *', arraySizeFunc: 'StgVariable_ArraySizeFunc *', arrayPtrPtr: 'void **', vr: 'Variable_Register *', dataNames: 'char **') -> "StgVariable *":
    return _StGermain.StgVariable_NewVector2(name, context, dataType, dataTypeCount, arraySizePtr, arraySizeFunc, arrayPtrPtr, vr, dataNames)
StgVariable_NewVector2 = _StGermain.StgVariable_NewVector2

def _StgVariable_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', dataCount: 'Index', dataOffsets: 'SizeT *', dataTypes: 'StgVariable_DataType *', dataTypeCounts: 'Index *', dataNames: 'Name *', structSizePtr: 'SizeT *', arraySizePtr: 'Index *', arraySizeFunc: 'StgVariable_ArraySizeFunc *', arrayPtrPtr: 'void **', vr: 'Variable_Register *') -> "StgVariable *":
    return _StGermain._StgVariable_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, dataCount, dataOffsets, dataTypes, dataTypeCounts, dataNames, structSizePtr, arraySizePtr, arraySizeFunc, arrayPtrPtr, vr)
_StgVariable_New = _StGermain._StgVariable_New

def _StgVariable_Init(arg1: '_StgVariable', context: 'AbstractContext *', dataCount: 'Index', dataOffsets: 'SizeT *', dataTypes: 'StgVariable_DataType *', dataTypeCounts: 'Index *', dataNames: 'Name *', structSizePtr: 'SizeT *', arraySizePtr: 'Index *', arraySizeFunc: 'StgVariable_ArraySizeFunc *', arrayPtrPtr: 'void **', allocateSelf: 'Bool', vr: 'Variable_Register *') -> "void":
    return _StGermain._StgVariable_Init(arg1, context, dataCount, dataOffsets, dataTypes, dataTypeCounts, dataNames, structSizePtr, arraySizePtr, arraySizeFunc, arrayPtrPtr, allocateSelf, vr)
_StgVariable_Init = _StGermain._StgVariable_Init

def _StgVariable_Delete(variable: 'void *') -> "void":
    return _StGermain._StgVariable_Delete(variable)
_StgVariable_Delete = _StGermain._StgVariable_Delete

def _StgVariable_Print(variable: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._StgVariable_Print(variable, stream)
_StgVariable_Print = _StGermain._StgVariable_Print

def _StgVariable_Copy(variable: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _StGermain._StgVariable_Copy(variable, dest, deep, nameExt, ptrMap)
_StgVariable_Copy = _StGermain._StgVariable_Copy

def _StgVariable_Build(variable: 'void *', data: 'void *') -> "void":
    return _StGermain._StgVariable_Build(variable, data)
_StgVariable_Build = _StGermain._StgVariable_Build

def _StgVariable_Initialise(variable: 'void *', data: 'void *') -> "void":
    return _StGermain._StgVariable_Initialise(variable, data)
_StgVariable_Initialise = _StGermain._StgVariable_Initialise

def _StgVariable_Execute(variable: 'void *', data: 'void *') -> "void":
    return _StGermain._StgVariable_Execute(variable, data)
_StgVariable_Execute = _StGermain._StgVariable_Execute

def _StgVariable_AssignFromXML(variable: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _StGermain._StgVariable_AssignFromXML(variable, cf, data)
_StgVariable_AssignFromXML = _StGermain._StgVariable_AssignFromXML

def _StgVariable_Destroy(variable: 'void *', data: 'void *') -> "void":
    return _StGermain._StgVariable_Destroy(variable, data)
_StgVariable_Destroy = _StGermain._StgVariable_Destroy

def _StgVariable_GetNewArraySize(arg1: '_StgVariable') -> "Index":
    return _StGermain._StgVariable_GetNewArraySize(arg1)
_StgVariable_GetNewArraySize = _StGermain._StgVariable_GetNewArraySize

def StgVariable_SetValue(variable: 'void *', array_I: 'Index', value: 'void *') -> "void":
    return _StGermain.StgVariable_SetValue(variable, array_I, value)
StgVariable_SetValue = _StGermain.StgVariable_SetValue

def StgVariable_GetValue(variable: 'void *', array_I: 'Index', value: 'void *') -> "void":
    return _StGermain.StgVariable_GetValue(variable, array_I, value)
StgVariable_GetValue = _StGermain.StgVariable_GetValue

def StgVariable_Update(variable: 'void *') -> "void":
    return _StGermain.StgVariable_Update(variable)
StgVariable_Update = _StGermain.StgVariable_Update

def StgVariable_SetValueDoubleAll(variable: 'void *', value: 'double') -> "void":
    return _StGermain.StgVariable_SetValueDoubleAll(variable, value)
StgVariable_SetValueDoubleAll = _StGermain.StgVariable_SetValueDoubleAll

def StgVariable_SaveToFileAsDoubles(variable: 'void *', filename: 'char *') -> "void":
    return _StGermain.StgVariable_SaveToFileAsDoubles(variable, filename)
StgVariable_SaveToFileAsDoubles = _StGermain.StgVariable_SaveToFileAsDoubles

def StgVariable_ReadFromFileAsDoubles(variable: 'void *', filename: 'char *') -> "void":
    return _StGermain.StgVariable_ReadFromFileAsDoubles(variable, filename)
StgVariable_ReadFromFileAsDoubles = _StGermain.StgVariable_ReadFromFileAsDoubles

def StgVariable_ValueCompare(variable: 'void *', _comparison: 'void *') -> "double":
    return _StGermain.StgVariable_ValueCompare(variable, _comparison)
StgVariable_ValueCompare = _StGermain.StgVariable_ValueCompare

def StgVariable_ValueCompareWithinTolerance(variable: 'void *', comparison: 'void *', tolerance: 'double') -> "Bool":
    return _StGermain.StgVariable_ValueCompareWithinTolerance(variable, comparison, tolerance)
StgVariable_ValueCompareWithinTolerance = _StGermain.StgVariable_ValueCompareWithinTolerance

def StgVariable_getAsNumpyArray(variable: 'void *') -> "PyObject *":
    return _StGermain.StgVariable_getAsNumpyArray(variable)
StgVariable_getAsNumpyArray = _StGermain.StgVariable_getAsNumpyArray

def StgVariable_SizeOfDataType(dataType: 'StgVariable_DataType') -> "size_t":
    return _StGermain.StgVariable_SizeOfDataType(dataType)
StgVariable_SizeOfDataType = _StGermain.StgVariable_SizeOfDataType
class VariableCondition_Value_Array(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    size = _swig_property(_StGermain.VariableCondition_Value_Array_size_get, _StGermain.VariableCondition_Value_Array_size_set)
    array = _swig_property(_StGermain.VariableCondition_Value_Array_array_get, _StGermain.VariableCondition_Value_Array_array_set)

    def __init__(self):
        _StGermain.VariableCondition_Value_Array_swiginit(self, _StGermain.new_VariableCondition_Value_Array())
    __swig_destroy__ = _StGermain.delete_VariableCondition_Value_Array
VariableCondition_Value_Array_swigregister = _StGermain.VariableCondition_Value_Array_swigregister
VariableCondition_Value_Array_swigregister(VariableCondition_Value_Array)
VariableCondition_Type = cvar.VariableCondition_Type

class VariableCondition_Value_AsType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    typeDouble = _swig_property(_StGermain.VariableCondition_Value_AsType_typeDouble_get, _StGermain.VariableCondition_Value_AsType_typeDouble_set)
    typeInt = _swig_property(_StGermain.VariableCondition_Value_AsType_typeInt_get, _StGermain.VariableCondition_Value_AsType_typeInt_set)
    typeShort = _swig_property(_StGermain.VariableCondition_Value_AsType_typeShort_get, _StGermain.VariableCondition_Value_AsType_typeShort_set)
    typeChar = _swig_property(_StGermain.VariableCondition_Value_AsType_typeChar_get, _StGermain.VariableCondition_Value_AsType_typeChar_set)
    typePtr = _swig_property(_StGermain.VariableCondition_Value_AsType_typePtr_get, _StGermain.VariableCondition_Value_AsType_typePtr_set)
    typeArray = _swig_property(_StGermain.VariableCondition_Value_AsType_typeArray_get, _StGermain.VariableCondition_Value_AsType_typeArray_set)
    typeCFIndex = _swig_property(_StGermain.VariableCondition_Value_AsType_typeCFIndex_get, _StGermain.VariableCondition_Value_AsType_typeCFIndex_set)

    def __init__(self):
        _StGermain.VariableCondition_Value_AsType_swiginit(self, _StGermain.new_VariableCondition_Value_AsType())
    __swig_destroy__ = _StGermain.delete_VariableCondition_Value_AsType
VariableCondition_Value_AsType_swigregister = _StGermain.VariableCondition_Value_AsType_swigregister
VariableCondition_Value_AsType_swigregister(VariableCondition_Value_AsType)

class _VariableCondition_Value(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    type = _swig_property(_StGermain._VariableCondition_Value_type_get, _StGermain._VariableCondition_Value_type_set)
    atType = _swig_property(_StGermain._VariableCondition_Value_atType_get, _StGermain._VariableCondition_Value_atType_set)

    def __init__(self):
        _StGermain._VariableCondition_Value_swiginit(self, _StGermain.new__VariableCondition_Value())
    __swig_destroy__ = _StGermain.delete__VariableCondition_Value
_VariableCondition_Value_swigregister = _StGermain._VariableCondition_Value_swigregister
_VariableCondition_Value_swigregister(_VariableCondition_Value)

class _VariableCondition_Tuple(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    varIndex = _swig_property(_StGermain._VariableCondition_Tuple_varIndex_get, _StGermain._VariableCondition_Tuple_varIndex_set)
    valIndex = _swig_property(_StGermain._VariableCondition_Tuple_valIndex_get, _StGermain._VariableCondition_Tuple_valIndex_set)

    def __init__(self):
        _StGermain._VariableCondition_Tuple_swiginit(self, _StGermain.new__VariableCondition_Tuple())
    __swig_destroy__ = _StGermain.delete__VariableCondition_Tuple
_VariableCondition_Tuple_swigregister = _StGermain._VariableCondition_Tuple_swigregister
_VariableCondition_Tuple_swigregister(_VariableCondition_Tuple)

class _VariableCondition(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain._VariableCondition__sizeOfSelf_get, _StGermain._VariableCondition__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain._VariableCondition__deleteSelf_get, _StGermain._VariableCondition__deleteSelf_set)
    type = _swig_property(_StGermain._VariableCondition_type_get, _StGermain._VariableCondition_type_set)
    nRefs = _swig_property(_StGermain._VariableCondition_nRefs_get, _StGermain._VariableCondition_nRefs_set)
    locked = _swig_property(_StGermain._VariableCondition_locked_get, _StGermain._VariableCondition_locked_set)
    _delete = _swig_property(_StGermain._VariableCondition__delete_get, _StGermain._VariableCondition__delete_set)
    _print = _swig_property(_StGermain._VariableCondition__print_get, _StGermain._VariableCondition__print_set)
    _copy = _swig_property(_StGermain._VariableCondition__copy_get, _StGermain._VariableCondition__copy_set)
    name = _swig_property(_StGermain._VariableCondition_name_get, _StGermain._VariableCondition_name_set)
    nameAllocationType = _swig_property(_StGermain._VariableCondition_nameAllocationType_get, _StGermain._VariableCondition_nameAllocationType_set)
    _defaultConstructor = _swig_property(_StGermain._VariableCondition__defaultConstructor_get, _StGermain._VariableCondition__defaultConstructor_set)
    _construct = _swig_property(_StGermain._VariableCondition__construct_get, _StGermain._VariableCondition__construct_set)
    _build = _swig_property(_StGermain._VariableCondition__build_get, _StGermain._VariableCondition__build_set)
    _initialise = _swig_property(_StGermain._VariableCondition__initialise_get, _StGermain._VariableCondition__initialise_set)
    _execute = _swig_property(_StGermain._VariableCondition__execute_get, _StGermain._VariableCondition__execute_set)
    _destroy = _swig_property(_StGermain._VariableCondition__destroy_get, _StGermain._VariableCondition__destroy_set)
    isConstructed = _swig_property(_StGermain._VariableCondition_isConstructed_get, _StGermain._VariableCondition_isConstructed_set)
    isBuilt = _swig_property(_StGermain._VariableCondition_isBuilt_get, _StGermain._VariableCondition_isBuilt_set)
    isInitialised = _swig_property(_StGermain._VariableCondition_isInitialised_get, _StGermain._VariableCondition_isInitialised_set)
    hasExecuted = _swig_property(_StGermain._VariableCondition_hasExecuted_get, _StGermain._VariableCondition_hasExecuted_set)
    isDestroyed = _swig_property(_StGermain._VariableCondition_isDestroyed_get, _StGermain._VariableCondition_isDestroyed_set)
    constructType = _swig_property(_StGermain._VariableCondition_constructType_get, _StGermain._VariableCondition_constructType_set)
    buildType = _swig_property(_StGermain._VariableCondition_buildType_get, _StGermain._VariableCondition_buildType_set)
    initialiseType = _swig_property(_StGermain._VariableCondition_initialiseType_get, _StGermain._VariableCondition_initialiseType_set)
    executeType = _swig_property(_StGermain._VariableCondition_executeType_get, _StGermain._VariableCondition_executeType_set)
    destroyType = _swig_property(_StGermain._VariableCondition_destroyType_get, _StGermain._VariableCondition_destroyType_set)
    context = _swig_property(_StGermain._VariableCondition_context_get, _StGermain._VariableCondition_context_set)
    _buildSelf = _swig_property(_StGermain._VariableCondition__buildSelf_get, _StGermain._VariableCondition__buildSelf_set)
    _printConcise = _swig_property(_StGermain._VariableCondition__printConcise_get, _StGermain._VariableCondition__printConcise_set)
    _readDictionary = _swig_property(_StGermain._VariableCondition__readDictionary_get, _StGermain._VariableCondition__readDictionary_set)
    _getSet = _swig_property(_StGermain._VariableCondition__getSet_get, _StGermain._VariableCondition__getSet_set)
    _getVariableCount = _swig_property(_StGermain._VariableCondition__getVariableCount_get, _StGermain._VariableCondition__getVariableCount_set)
    _getVariableIndex = _swig_property(_StGermain._VariableCondition__getVariableIndex_get, _StGermain._VariableCondition__getVariableIndex_set)
    _getValueIndex = _swig_property(_StGermain._VariableCondition__getValueIndex_get, _StGermain._VariableCondition__getValueIndex_set)
    _getValueCount = _swig_property(_StGermain._VariableCondition__getValueCount_get, _StGermain._VariableCondition__getValueCount_set)
    _getValue = _swig_property(_StGermain._VariableCondition__getValue_get, _StGermain._VariableCondition__getValue_set)
    _apply = _swig_property(_StGermain._VariableCondition__apply_get, _StGermain._VariableCondition__apply_set)
    _isCondition = _swig_property(_StGermain._VariableCondition__isCondition_get, _StGermain._VariableCondition__isCondition_set)
    variable_Register = _swig_property(_StGermain._VariableCondition_variable_Register_get, _StGermain._VariableCondition_variable_Register_set)
    conFunc_Register = _swig_property(_StGermain._VariableCondition_conFunc_Register_get, _StGermain._VariableCondition_conFunc_Register_set)
    dictionary = _swig_property(_StGermain._VariableCondition_dictionary_get, _StGermain._VariableCondition_dictionary_set)
    _set = _swig_property(_StGermain._VariableCondition__set_get, _StGermain._VariableCondition__set_set)
    indexCount = _swig_property(_StGermain._VariableCondition_indexCount_get, _StGermain._VariableCondition_indexCount_set)
    indexTbl = _swig_property(_StGermain._VariableCondition_indexTbl_get, _StGermain._VariableCondition_indexTbl_set)
    vcVarCountTbl = _swig_property(_StGermain._VariableCondition_vcVarCountTbl_get, _StGermain._VariableCondition_vcVarCountTbl_set)
    vcTbl = _swig_property(_StGermain._VariableCondition_vcTbl_get, _StGermain._VariableCondition_vcTbl_set)
    valueCount = _swig_property(_StGermain._VariableCondition_valueCount_get, _StGermain._VariableCondition_valueCount_set)
    valueTbl = _swig_property(_StGermain._VariableCondition_valueTbl_get, _StGermain._VariableCondition_valueTbl_set)
    mapping = _swig_property(_StGermain._VariableCondition_mapping_get, _StGermain._VariableCondition_mapping_set)
    cf = _swig_property(_StGermain._VariableCondition_cf_get, _StGermain._VariableCondition_cf_set)

    def __init__(self):
        _StGermain._VariableCondition_swiginit(self, _StGermain.new__VariableCondition())
    __swig_destroy__ = _StGermain.delete__VariableCondition
_VariableCondition_swigregister = _StGermain._VariableCondition_swigregister
_VariableCondition_swigregister(_VariableCondition)


def _VariableCondition_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _buildSelf: 'VariableCondition_BuildSelfFunc *', _printConcise: 'VariableCondition_PrintConciseFunc *', _readDictionary: 'VariableCondition_ReadDictionaryFunc *', _getSet: 'VariableCondition_GetSetFunc *', _getVariableCount: 'VariableCondition_GetVariableCountFunc *', _getVariableIndex: 'VariableCondition_GetVariableIndexFunc *', _getValueIndex: 'VariableCondition_GetValueIndexFunc *', _getValueCount: 'VariableCondition_GetValueCountFunc *', _getValue: 'VariableCondition_GetValueFunc *', _apply: 'VariableCondition_ApplyFunc *', _isCondition: 'VariableCondition_IsConditionFunc *') -> "VariableCondition *":
    return _StGermain._VariableCondition_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _buildSelf, _printConcise, _readDictionary, _getSet, _getVariableCount, _getVariableIndex, _getValueIndex, _getValueCount, _getValue, _apply, _isCondition)
_VariableCondition_New = _StGermain._VariableCondition_New

def _VariableCondition_Init(variableCondition: 'void *', context: 'AbstractContext *', variable_Register: 'Variable_Register *', conFunc_Register: 'ConditionFunction_Register *', dictionary: '_Dictionary') -> "void":
    return _StGermain._VariableCondition_Init(variableCondition, context, variable_Register, conFunc_Register, dictionary)
_VariableCondition_Init = _StGermain._VariableCondition_Init

def _VariableCondition_Delete(variableCondition: 'void *') -> "void":
    return _StGermain._VariableCondition_Delete(variableCondition)
_VariableCondition_Delete = _StGermain._VariableCondition_Delete

def _VariableCondition_Print(variableCondition: 'void *') -> "void":
    return _StGermain._VariableCondition_Print(variableCondition)
_VariableCondition_Print = _StGermain._VariableCondition_Print

def _VariableCondition_Copy(variableCondition: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _StGermain._VariableCondition_Copy(variableCondition, dest, deep, nameExt, ptrMap)
_VariableCondition_Copy = _StGermain._VariableCondition_Copy

def _VariableCondition_Apply(variableCondition: 'void *', context: 'void *') -> "void":
    return _StGermain._VariableCondition_Apply(variableCondition, context)
_VariableCondition_Apply = _StGermain._VariableCondition_Apply

def _VariableCondition_IsCondition(variableCondition: 'void *', localIndex: 'Index', variableIndex: 'Index') -> "Bool":
    return _StGermain._VariableCondition_IsCondition(variableCondition, localIndex, variableIndex)
_VariableCondition_IsCondition = _StGermain._VariableCondition_IsCondition

def _VariableCondition_AssignFromXML(variableCondition: 'void *', cf: 'Stg_ComponentFactory *', d: 'void *') -> "void":
    return _StGermain._VariableCondition_AssignFromXML(variableCondition, cf, d)
_VariableCondition_AssignFromXML = _StGermain._VariableCondition_AssignFromXML

def _VariableCondition_Build(variableCondition: 'void *', data: 'void *') -> "void":
    return _StGermain._VariableCondition_Build(variableCondition, data)
_VariableCondition_Build = _StGermain._VariableCondition_Build

def _VariableCondition_Initialise(variableCondition: 'void *', data: 'void *') -> "void":
    return _StGermain._VariableCondition_Initialise(variableCondition, data)
_VariableCondition_Initialise = _StGermain._VariableCondition_Initialise

def _VariableCondition_Execute(variableCondition: 'void *', data: 'void *') -> "void":
    return _StGermain._VariableCondition_Execute(variableCondition, data)
_VariableCondition_Execute = _StGermain._VariableCondition_Execute

def _VariableCondition_Destroy(variableCondition: 'void *', data: 'void *') -> "void":
    return _StGermain._VariableCondition_Destroy(variableCondition, data)
_VariableCondition_Destroy = _StGermain._VariableCondition_Destroy

def VariableCondition_Apply(variableCondition: 'void *', context: 'void *') -> "void":
    return _StGermain.VariableCondition_Apply(variableCondition, context)
VariableCondition_Apply = _StGermain.VariableCondition_Apply

def VariableCondition_IsCondition(variableCondition: 'void *', localIndex: 'Index', variableIndex: 'Index') -> "Bool":
    return _StGermain.VariableCondition_IsCondition(variableCondition, localIndex, variableIndex)
VariableCondition_IsCondition = _StGermain.VariableCondition_IsCondition

def VariableCondition_ApplyToVariable(variableCondition: 'void *', varIndex: 'VariableCondition_StgVariableIndex', context: 'void *') -> "void":
    return _StGermain.VariableCondition_ApplyToVariable(variableCondition, varIndex, context)
VariableCondition_ApplyToVariable = _StGermain.VariableCondition_ApplyToVariable

def VariableCondition_ApplyToIndex(variableCondition: 'void *', globalIndex: 'Index', context: 'void *') -> "void":
    return _StGermain.VariableCondition_ApplyToIndex(variableCondition, globalIndex, context)
VariableCondition_ApplyToIndex = _StGermain.VariableCondition_ApplyToIndex

def VariableCondition_ApplyToIndexVariable(variableCondition: 'void *', globalIndex: 'Index', varIndex: 'VariableCondition_StgVariableIndex', context: 'void *') -> "void":
    return _StGermain.VariableCondition_ApplyToIndexVariable(variableCondition, globalIndex, varIndex, context)
VariableCondition_ApplyToIndexVariable = _StGermain.VariableCondition_ApplyToIndexVariable

def VariableCondition_GetValueIndex(variableCondition: 'void *', globalIndex: 'Index', varIndex: 'StgVariable_Index') -> "VariableCondition_ValueIndex":
    return _StGermain.VariableCondition_GetValueIndex(variableCondition, globalIndex, varIndex)
VariableCondition_GetValueIndex = _StGermain.VariableCondition_GetValueIndex

def VariableCondition_PrintConcise(variableCondition: 'void *', stream: 'Stream *') -> "void":
    return _StGermain.VariableCondition_PrintConcise(variableCondition, stream)
VariableCondition_PrintConcise = _StGermain.VariableCondition_PrintConcise
class PythonVC(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain.PythonVC__sizeOfSelf_get, _StGermain.PythonVC__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain.PythonVC__deleteSelf_get, _StGermain.PythonVC__deleteSelf_set)
    type = _swig_property(_StGermain.PythonVC_type_get, _StGermain.PythonVC_type_set)
    nRefs = _swig_property(_StGermain.PythonVC_nRefs_get, _StGermain.PythonVC_nRefs_set)
    locked = _swig_property(_StGermain.PythonVC_locked_get, _StGermain.PythonVC_locked_set)
    _delete = _swig_property(_StGermain.PythonVC__delete_get, _StGermain.PythonVC__delete_set)
    _print = _swig_property(_StGermain.PythonVC__print_get, _StGermain.PythonVC__print_set)
    _copy = _swig_property(_StGermain.PythonVC__copy_get, _StGermain.PythonVC__copy_set)
    name = _swig_property(_StGermain.PythonVC_name_get, _StGermain.PythonVC_name_set)
    nameAllocationType = _swig_property(_StGermain.PythonVC_nameAllocationType_get, _StGermain.PythonVC_nameAllocationType_set)
    _defaultConstructor = _swig_property(_StGermain.PythonVC__defaultConstructor_get, _StGermain.PythonVC__defaultConstructor_set)
    _construct = _swig_property(_StGermain.PythonVC__construct_get, _StGermain.PythonVC__construct_set)
    _build = _swig_property(_StGermain.PythonVC__build_get, _StGermain.PythonVC__build_set)
    _initialise = _swig_property(_StGermain.PythonVC__initialise_get, _StGermain.PythonVC__initialise_set)
    _execute = _swig_property(_StGermain.PythonVC__execute_get, _StGermain.PythonVC__execute_set)
    _destroy = _swig_property(_StGermain.PythonVC__destroy_get, _StGermain.PythonVC__destroy_set)
    isConstructed = _swig_property(_StGermain.PythonVC_isConstructed_get, _StGermain.PythonVC_isConstructed_set)
    isBuilt = _swig_property(_StGermain.PythonVC_isBuilt_get, _StGermain.PythonVC_isBuilt_set)
    isInitialised = _swig_property(_StGermain.PythonVC_isInitialised_get, _StGermain.PythonVC_isInitialised_set)
    hasExecuted = _swig_property(_StGermain.PythonVC_hasExecuted_get, _StGermain.PythonVC_hasExecuted_set)
    isDestroyed = _swig_property(_StGermain.PythonVC_isDestroyed_get, _StGermain.PythonVC_isDestroyed_set)
    constructType = _swig_property(_StGermain.PythonVC_constructType_get, _StGermain.PythonVC_constructType_set)
    buildType = _swig_property(_StGermain.PythonVC_buildType_get, _StGermain.PythonVC_buildType_set)
    initialiseType = _swig_property(_StGermain.PythonVC_initialiseType_get, _StGermain.PythonVC_initialiseType_set)
    executeType = _swig_property(_StGermain.PythonVC_executeType_get, _StGermain.PythonVC_executeType_set)
    destroyType = _swig_property(_StGermain.PythonVC_destroyType_get, _StGermain.PythonVC_destroyType_set)
    context = _swig_property(_StGermain.PythonVC_context_get, _StGermain.PythonVC_context_set)
    _buildSelf = _swig_property(_StGermain.PythonVC__buildSelf_get, _StGermain.PythonVC__buildSelf_set)
    _printConcise = _swig_property(_StGermain.PythonVC__printConcise_get, _StGermain.PythonVC__printConcise_set)
    _readDictionary = _swig_property(_StGermain.PythonVC__readDictionary_get, _StGermain.PythonVC__readDictionary_set)
    _getSet = _swig_property(_StGermain.PythonVC__getSet_get, _StGermain.PythonVC__getSet_set)
    _getVariableCount = _swig_property(_StGermain.PythonVC__getVariableCount_get, _StGermain.PythonVC__getVariableCount_set)
    _getVariableIndex = _swig_property(_StGermain.PythonVC__getVariableIndex_get, _StGermain.PythonVC__getVariableIndex_set)
    _getValueIndex = _swig_property(_StGermain.PythonVC__getValueIndex_get, _StGermain.PythonVC__getValueIndex_set)
    _getValueCount = _swig_property(_StGermain.PythonVC__getValueCount_get, _StGermain.PythonVC__getValueCount_set)
    _getValue = _swig_property(_StGermain.PythonVC__getValue_get, _StGermain.PythonVC__getValue_set)
    _apply = _swig_property(_StGermain.PythonVC__apply_get, _StGermain.PythonVC__apply_set)
    _isCondition = _swig_property(_StGermain.PythonVC__isCondition_get, _StGermain.PythonVC__isCondition_set)
    variable_Register = _swig_property(_StGermain.PythonVC_variable_Register_get, _StGermain.PythonVC_variable_Register_set)
    conFunc_Register = _swig_property(_StGermain.PythonVC_conFunc_Register_get, _StGermain.PythonVC_conFunc_Register_set)
    dictionary = _swig_property(_StGermain.PythonVC_dictionary_get, _StGermain.PythonVC_dictionary_set)
    _set = _swig_property(_StGermain.PythonVC__set_get, _StGermain.PythonVC__set_set)
    indexCount = _swig_property(_StGermain.PythonVC_indexCount_get, _StGermain.PythonVC_indexCount_set)
    indexTbl = _swig_property(_StGermain.PythonVC_indexTbl_get, _StGermain.PythonVC_indexTbl_set)
    vcVarCountTbl = _swig_property(_StGermain.PythonVC_vcVarCountTbl_get, _StGermain.PythonVC_vcVarCountTbl_set)
    vcTbl = _swig_property(_StGermain.PythonVC_vcTbl_get, _StGermain.PythonVC_vcTbl_set)
    valueCount = _swig_property(_StGermain.PythonVC_valueCount_get, _StGermain.PythonVC_valueCount_set)
    valueTbl = _swig_property(_StGermain.PythonVC_valueTbl_get, _StGermain.PythonVC_valueTbl_set)
    mapping = _swig_property(_StGermain.PythonVC_mapping_get, _StGermain.PythonVC_mapping_set)
    cf = _swig_property(_StGermain.PythonVC_cf_get, _StGermain.PythonVC_cf_set)
    _indexSets = _swig_property(_StGermain.PythonVC__indexSets_get, _StGermain.PythonVC__indexSets_set)
    _indexSetCount = _swig_property(_StGermain.PythonVC__indexSetCount_get, _StGermain.PythonVC__indexSetCount_set)

    def __init__(self):
        _StGermain.PythonVC_swiginit(self, _StGermain.new_PythonVC())
    __swig_destroy__ = _StGermain.delete_PythonVC
PythonVC_swigregister = _StGermain.PythonVC_swigregister
PythonVC_swigregister(PythonVC)
PythonVC_Type = cvar.PythonVC_Type


def _PythonVC_DefaultNew(name: 'Name') -> "PythonVC *":
    return _StGermain._PythonVC_DefaultNew(name)
_PythonVC_DefaultNew = _StGermain._PythonVC_DefaultNew

def _PythonVC_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _defaultConstructor: 'Stg_Component_DefaultConstructorFunction *', _construct: 'Stg_Component_ConstructFunction *', _build: 'Stg_Component_BuildFunction *', _initialise: 'Stg_Component_InitialiseFunction *', _execute: 'Stg_Component_ExecuteFunction *', _destroy: 'Stg_Component_DestroyFunction *', _buildSelf: 'VariableCondition_BuildSelfFunc *', _printConcise: 'VariableCondition_PrintConciseFunc *', _readDictionary: 'VariableCondition_ReadDictionaryFunc *', _getSet: 'VariableCondition_GetSetFunc *', _getVariableCount: 'VariableCondition_GetVariableCountFunc *', _getVariableIndex: 'VariableCondition_GetVariableIndexFunc *', _getValueIndex: 'VariableCondition_GetValueIndexFunc *', _getValueCount: 'VariableCondition_GetValueCountFunc *', _getValue: 'VariableCondition_GetValueFunc *', _apply: 'VariableCondition_ApplyFunc *', _isCondition: 'VariableCondition_IsConditionFunc *') -> "PythonVC *":
    return _StGermain._PythonVC_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _defaultConstructor, _construct, _build, _initialise, _execute, _destroy, _buildSelf, _printConcise, _readDictionary, _getSet, _getVariableCount, _getVariableIndex, _getValueIndex, _getValueCount, _getValue, _apply, _isCondition)
_PythonVC_New = _StGermain._PythonVC_New

def _PythonVC_Delete(pythonVC: 'void *') -> "void":
    return _StGermain._PythonVC_Delete(pythonVC)
_PythonVC_Delete = _StGermain._PythonVC_Delete

def _PythonVC_Destroy(pythonVC: 'void *', data: 'void *') -> "void":
    return _StGermain._PythonVC_Destroy(pythonVC, data)
_PythonVC_Destroy = _StGermain._PythonVC_Destroy

def _PythonVC_Build(pythonVC: 'void *', data: 'void *') -> "void":
    return _StGermain._PythonVC_Build(pythonVC, data)
_PythonVC_Build = _StGermain._PythonVC_Build

def _PythonVC_Initialise(pythonVC: 'void *', data: 'void *') -> "void":
    return _StGermain._PythonVC_Initialise(pythonVC, data)
_PythonVC_Initialise = _StGermain._PythonVC_Initialise

def _PythonVC_AssignFromXML(pythonVC: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _StGermain._PythonVC_AssignFromXML(pythonVC, cf, data)
_PythonVC_AssignFromXML = _StGermain._PythonVC_AssignFromXML

def _PythonVC_SetupIndexSetArray(pythonVC: 'void *', count: 'unsigned int') -> "void":
    return _StGermain._PythonVC_SetupIndexSetArray(pythonVC, count)
_PythonVC_SetupIndexSetArray = _StGermain._PythonVC_SetupIndexSetArray

def _PythonVC_SetIndexSetAtArrayPosition(pythonVC: 'void *', indexSet: 'IndexSet *', position: 'unsigned int') -> "void":
    return _StGermain._PythonVC_SetIndexSetAtArrayPosition(pythonVC, indexSet, position)
_PythonVC_SetIndexSetAtArrayPosition = _StGermain._PythonVC_SetIndexSetAtArrayPosition

def _PythonVC_Apply(variableCondition: 'void *', context: 'void *') -> "void":
    return _StGermain._PythonVC_Apply(variableCondition, context)
_PythonVC_Apply = _StGermain._PythonVC_Apply

def _PythonVC_IsCondition(variableCondition: 'void *', localIndex: 'Index', variableIndex: 'Index') -> "Bool":
    return _StGermain._PythonVC_IsCondition(variableCondition, localIndex, variableIndex)
_PythonVC_IsCondition = _StGermain._PythonVC_IsCondition
EntryPoint_0_CastType = _StGermain.EntryPoint_0_CastType
EntryPoint_VoidPtr_CastType = _StGermain.EntryPoint_VoidPtr_CastType
EntryPoint_2VoidPtr_CastType = _StGermain.EntryPoint_2VoidPtr_CastType
EntryPoint_3VoidPtr_CastType = _StGermain.EntryPoint_3VoidPtr_CastType
EntryPoint_Minimum_VoidPtr_CastType = _StGermain.EntryPoint_Minimum_VoidPtr_CastType
EntryPoint_Maximum_VoidPtr_CastType = _StGermain.EntryPoint_Maximum_VoidPtr_CastType
EntryPoint_Class_0_CastType = _StGermain.EntryPoint_Class_0_CastType
EntryPoint_Class_VoidPtr_CastType = _StGermain.EntryPoint_Class_VoidPtr_CastType
EntryPoint_Class_Minimum_VoidPtr_CastType = _StGermain.EntryPoint_Class_Minimum_VoidPtr_CastType
EntryPoint_Class_Maximum_VoidPtr_CastType = _StGermain.EntryPoint_Class_Maximum_VoidPtr_CastType
EntryPoint_CastType_MAX = _StGermain.EntryPoint_CastType_MAX
class EntryPoint(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain.EntryPoint__sizeOfSelf_get, _StGermain.EntryPoint__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain.EntryPoint__deleteSelf_get, _StGermain.EntryPoint__deleteSelf_set)
    type = _swig_property(_StGermain.EntryPoint_type_get, _StGermain.EntryPoint_type_set)
    nRefs = _swig_property(_StGermain.EntryPoint_nRefs_get, _StGermain.EntryPoint_nRefs_set)
    locked = _swig_property(_StGermain.EntryPoint_locked_get, _StGermain.EntryPoint_locked_set)
    _delete = _swig_property(_StGermain.EntryPoint__delete_get, _StGermain.EntryPoint__delete_set)
    _print = _swig_property(_StGermain.EntryPoint__print_get, _StGermain.EntryPoint__print_set)
    _copy = _swig_property(_StGermain.EntryPoint__copy_get, _StGermain.EntryPoint__copy_set)
    name = _swig_property(_StGermain.EntryPoint_name_get, _StGermain.EntryPoint_name_set)
    nameAllocationType = _swig_property(_StGermain.EntryPoint_nameAllocationType_get, _StGermain.EntryPoint_nameAllocationType_set)
    _getRun = _swig_property(_StGermain.EntryPoint__getRun_get, _StGermain.EntryPoint__getRun_set)
    castType = _swig_property(_StGermain.EntryPoint_castType_get, _StGermain.EntryPoint_castType_set)
    run = _swig_property(_StGermain.EntryPoint_run_get, _StGermain.EntryPoint_run_set)
    hooks = _swig_property(_StGermain.EntryPoint_hooks_get, _StGermain.EntryPoint_hooks_set)
    alwaysFirstHook = _swig_property(_StGermain.EntryPoint_alwaysFirstHook_get, _StGermain.EntryPoint_alwaysFirstHook_set)
    alwaysLastHook = _swig_property(_StGermain.EntryPoint_alwaysLastHook_get, _StGermain.EntryPoint_alwaysLastHook_set)

    def __init__(self):
        _StGermain.EntryPoint_swiginit(self, _StGermain.new_EntryPoint())
    __swig_destroy__ = _StGermain.delete_EntryPoint
EntryPoint_swigregister = _StGermain.EntryPoint_swigregister
EntryPoint_swigregister(EntryPoint)
EntryPoint_Type = cvar.EntryPoint_Type


def EntryPoint_New(name: 'Name const', castType: 'unsigned int') -> "EntryPoint *":
    return _StGermain.EntryPoint_New(name, castType)
EntryPoint_New = _StGermain.EntryPoint_New

def EntryPoint_Init(entryPoint: 'void *', name: 'Name const', castType: 'unsigned int') -> "void":
    return _StGermain.EntryPoint_Init(entryPoint, name, castType)
EntryPoint_Init = _StGermain.EntryPoint_Init

def _EntryPoint_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', name: 'Name', nameAllocationType: 'AllocationType', _getRun: 'EntryPoint_GetRunFunction *', castType: 'unsigned int') -> "EntryPoint *":
    return _StGermain._EntryPoint_New(_sizeOfSelf, type, _delete, _print, _copy, name, nameAllocationType, _getRun, castType)
_EntryPoint_New = _StGermain._EntryPoint_New

def _EntryPoint_Init(arg1: 'EntryPoint *', castType: 'unsigned int') -> "void":
    return _StGermain._EntryPoint_Init(arg1, castType)
_EntryPoint_Init = _StGermain._EntryPoint_Init

def _EntryPoint_Delete(entryPoint: 'void *') -> "void":
    return _StGermain._EntryPoint_Delete(entryPoint)
_EntryPoint_Delete = _StGermain._EntryPoint_Delete

def _EntryPoint_Print(entryPoint: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._EntryPoint_Print(entryPoint, stream)
_EntryPoint_Print = _StGermain._EntryPoint_Print

def _EntryPoint_Copy(entryPoint: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _StGermain._EntryPoint_Copy(entryPoint, dest, deep, nameExt, ptrMap)
_EntryPoint_Copy = _StGermain._EntryPoint_Copy

def EntryPoint_GetRun(entryPoint: 'void *') -> "Func_Ptr":
    return _StGermain.EntryPoint_GetRun(entryPoint)
EntryPoint_GetRun = _StGermain.EntryPoint_GetRun

def _EntryPoint_GetRun(entryPoint: 'void *') -> "Func_Ptr":
    return _StGermain._EntryPoint_GetRun(entryPoint)
_EntryPoint_GetRun = _StGermain._EntryPoint_GetRun

def _EntryPoint_Run(entryPoint: 'void *') -> "void":
    return _StGermain._EntryPoint_Run(entryPoint)
_EntryPoint_Run = _StGermain._EntryPoint_Run

def _EntryPoint_Run_VoidPtr(entryPoint: 'void *', data0: 'void *') -> "void":
    return _StGermain._EntryPoint_Run_VoidPtr(entryPoint, data0)
_EntryPoint_Run_VoidPtr = _StGermain._EntryPoint_Run_VoidPtr

def _EntryPoint_Run_2VoidPtr(entryPoint: 'void *', data0: 'void *', data1: 'void *') -> "void":
    return _StGermain._EntryPoint_Run_2VoidPtr(entryPoint, data0, data1)
_EntryPoint_Run_2VoidPtr = _StGermain._EntryPoint_Run_2VoidPtr

def _EntryPoint_Run_3VoidPtr(entryPoint: 'void *', data0: 'void *', data1: 'void *', data2: 'void *') -> "void":
    return _StGermain._EntryPoint_Run_3VoidPtr(entryPoint, data0, data1, data2)
_EntryPoint_Run_3VoidPtr = _StGermain._EntryPoint_Run_3VoidPtr

def _EntryPoint_Run_Minimum_VoidPtr(entryPoint: 'void *', data0: 'void *') -> "double":
    return _StGermain._EntryPoint_Run_Minimum_VoidPtr(entryPoint, data0)
_EntryPoint_Run_Minimum_VoidPtr = _StGermain._EntryPoint_Run_Minimum_VoidPtr

def _EntryPoint_Run_Maximum_VoidPtr(entryPoint: 'void *', data0: 'void *') -> "double":
    return _StGermain._EntryPoint_Run_Maximum_VoidPtr(entryPoint, data0)
_EntryPoint_Run_Maximum_VoidPtr = _StGermain._EntryPoint_Run_Maximum_VoidPtr

def _EntryPoint_Run_Class_Minimum_VoidPtr(entryPoint: 'void *', data0: 'void *') -> "double":
    return _StGermain._EntryPoint_Run_Class_Minimum_VoidPtr(entryPoint, data0)
_EntryPoint_Run_Class_Minimum_VoidPtr = _StGermain._EntryPoint_Run_Class_Minimum_VoidPtr

def _EntryPoint_Run_Class_Maximum_VoidPtr(entryPoint: 'void *', data0: 'void *') -> "double":
    return _StGermain._EntryPoint_Run_Class_Maximum_VoidPtr(entryPoint, data0)
_EntryPoint_Run_Class_Maximum_VoidPtr = _StGermain._EntryPoint_Run_Class_Maximum_VoidPtr

def _EntryPoint_Run_Class(entryPoint: 'void *') -> "void":
    return _StGermain._EntryPoint_Run_Class(entryPoint)
_EntryPoint_Run_Class = _StGermain._EntryPoint_Run_Class

def _EntryPoint_Run_Class_VoidPtr(entryPoint: 'void *', data0: 'void *') -> "void":
    return _StGermain._EntryPoint_Run_Class_VoidPtr(entryPoint, data0)
_EntryPoint_Run_Class_VoidPtr = _StGermain._EntryPoint_Run_Class_VoidPtr

def _EntryPoint_PrependHook(entryPoint: 'void *', hook: 'Hook *') -> "void":
    return _StGermain._EntryPoint_PrependHook(entryPoint, hook)
_EntryPoint_PrependHook = _StGermain._EntryPoint_PrependHook

def _EntryPoint_PrependHook_AlwaysFirst(entryPoint: 'void *', hook: 'Hook *') -> "void":
    return _StGermain._EntryPoint_PrependHook_AlwaysFirst(entryPoint, hook)
_EntryPoint_PrependHook_AlwaysFirst = _StGermain._EntryPoint_PrependHook_AlwaysFirst

def _EntryPoint_AppendHook(entryPoint: 'void *', hook: 'Hook *') -> "void":
    return _StGermain._EntryPoint_AppendHook(entryPoint, hook)
_EntryPoint_AppendHook = _StGermain._EntryPoint_AppendHook

def _EntryPoint_AppendHook_AlwaysLast(entryPoint: 'void *', hook: 'Hook *') -> "void":
    return _StGermain._EntryPoint_AppendHook_AlwaysLast(entryPoint, hook)
_EntryPoint_AppendHook_AlwaysLast = _StGermain._EntryPoint_AppendHook_AlwaysLast

def _EntryPoint_InsertHookBefore(entryPoint: 'void *', hookToInsertBefore: 'Name', hook: 'Hook *') -> "void":
    return _StGermain._EntryPoint_InsertHookBefore(entryPoint, hookToInsertBefore, hook)
_EntryPoint_InsertHookBefore = _StGermain._EntryPoint_InsertHookBefore

def _EntryPoint_InsertHookAfter(entryPoint: 'void *', hookToInsertAfter: 'Name', hook: 'Hook *') -> "void":
    return _StGermain._EntryPoint_InsertHookAfter(entryPoint, hookToInsertAfter, hook)
_EntryPoint_InsertHookAfter = _StGermain._EntryPoint_InsertHookAfter

def _EntryPoint_ReplaceAllHook(entryPoint: 'void *', hook: 'Hook *') -> "void":
    return _StGermain._EntryPoint_ReplaceAllHook(entryPoint, hook)
_EntryPoint_ReplaceAllHook = _StGermain._EntryPoint_ReplaceAllHook

def _EntryPoint_ReplaceHook(entryPoint: 'void *', hookToReplace: 'Name', hook: 'Hook *') -> "void":
    return _StGermain._EntryPoint_ReplaceHook(entryPoint, hookToReplace, hook)
_EntryPoint_ReplaceHook = _StGermain._EntryPoint_ReplaceHook

def _EntryPoint_ProfileFunction(ep_name: 'char []', hk_name: 'char []', time: 'double') -> "void":
    return _StGermain._EntryPoint_ProfileFunction(ep_name, hk_name, time)
_EntryPoint_ProfileFunction = _StGermain._EntryPoint_ProfileFunction

def EntryPoint_PrintConcise(entryPoint: 'void *', stream: 'Stream *') -> "void":
    return _StGermain.EntryPoint_PrintConcise(entryPoint, stream)
EntryPoint_PrintConcise = _StGermain.EntryPoint_PrintConcise

def EntryPoint_Prepend(entryPoint: 'void *', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *') -> "void":
    return _StGermain.EntryPoint_Prepend(entryPoint, name, funcPtr, addedBy)
EntryPoint_Prepend = _StGermain.EntryPoint_Prepend

def EntryPoint_Prepend_AlwaysFirst(entryPoint: 'void *', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *') -> "void":
    return _StGermain.EntryPoint_Prepend_AlwaysFirst(entryPoint, name, funcPtr, addedBy)
EntryPoint_Prepend_AlwaysFirst = _StGermain.EntryPoint_Prepend_AlwaysFirst

def EntryPoint_Append(entryPoint: 'void *', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *') -> "void":
    return _StGermain.EntryPoint_Append(entryPoint, name, funcPtr, addedBy)
EntryPoint_Append = _StGermain.EntryPoint_Append

def EntryPoint_Append_AlwaysLast(entryPoint: 'void *', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *') -> "void":
    return _StGermain.EntryPoint_Append_AlwaysLast(entryPoint, name, funcPtr, addedBy)
EntryPoint_Append_AlwaysLast = _StGermain.EntryPoint_Append_AlwaysLast

def EntryPoint_InsertBefore(entryPoint: 'void *', hookToInsertBefore: 'Name', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *') -> "void":
    return _StGermain.EntryPoint_InsertBefore(entryPoint, hookToInsertBefore, name, funcPtr, addedBy)
EntryPoint_InsertBefore = _StGermain.EntryPoint_InsertBefore

def EntryPoint_InsertAfter(entryPoint: 'void *', hookToInsertAfter: 'Name', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *') -> "void":
    return _StGermain.EntryPoint_InsertAfter(entryPoint, hookToInsertAfter, name, funcPtr, addedBy)
EntryPoint_InsertAfter = _StGermain.EntryPoint_InsertAfter

def EntryPoint_Replace(entryPoint: 'void *', hookToReplace: 'Name', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *') -> "void":
    return _StGermain.EntryPoint_Replace(entryPoint, hookToReplace, name, funcPtr, addedBy)
EntryPoint_Replace = _StGermain.EntryPoint_Replace

def EntryPoint_ReplaceAll(entryPoint: 'void *', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *') -> "void":
    return _StGermain.EntryPoint_ReplaceAll(entryPoint, name, funcPtr, addedBy)
EntryPoint_ReplaceAll = _StGermain.EntryPoint_ReplaceAll

def EntryPoint_PrependClassHook(entryPoint: 'void *', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *', reference: 'void *') -> "void":
    return _StGermain.EntryPoint_PrependClassHook(entryPoint, name, funcPtr, addedBy, reference)
EntryPoint_PrependClassHook = _StGermain.EntryPoint_PrependClassHook

def EntryPoint_PrependClassHook_AlwaysFirst(entryPoint: 'void *', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *', reference: 'void *') -> "void":
    return _StGermain.EntryPoint_PrependClassHook_AlwaysFirst(entryPoint, name, funcPtr, addedBy, reference)
EntryPoint_PrependClassHook_AlwaysFirst = _StGermain.EntryPoint_PrependClassHook_AlwaysFirst

def EntryPoint_AppendClassHook(entryPoint: 'void *', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *', reference: 'void *') -> "void":
    return _StGermain.EntryPoint_AppendClassHook(entryPoint, name, funcPtr, addedBy, reference)
EntryPoint_AppendClassHook = _StGermain.EntryPoint_AppendClassHook

def EntryPoint_AppendClassHook_AlwaysLast(entryPoint: 'void *', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *', reference: 'void *') -> "void":
    return _StGermain.EntryPoint_AppendClassHook_AlwaysLast(entryPoint, name, funcPtr, addedBy, reference)
EntryPoint_AppendClassHook_AlwaysLast = _StGermain.EntryPoint_AppendClassHook_AlwaysLast

def EntryPoint_InsertClassHookBefore(entryPoint: 'void *', hookToInsertBefore: 'Name', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *', reference: 'void *') -> "void":
    return _StGermain.EntryPoint_InsertClassHookBefore(entryPoint, hookToInsertBefore, name, funcPtr, addedBy, reference)
EntryPoint_InsertClassHookBefore = _StGermain.EntryPoint_InsertClassHookBefore

def EntryPoint_InsertClassHookAfter(entryPoint: 'void *', hookToInsertAfter: 'Name', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *', reference: 'void *') -> "void":
    return _StGermain.EntryPoint_InsertClassHookAfter(entryPoint, hookToInsertAfter, name, funcPtr, addedBy, reference)
EntryPoint_InsertClassHookAfter = _StGermain.EntryPoint_InsertClassHookAfter

def EntryPoint_ReplaceClassHook(entryPoint: 'void *', hookToReplace: 'Name', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *', reference: 'void *') -> "void":
    return _StGermain.EntryPoint_ReplaceClassHook(entryPoint, hookToReplace, name, funcPtr, addedBy, reference)
EntryPoint_ReplaceClassHook = _StGermain.EntryPoint_ReplaceClassHook

def EntryPoint_ReplaceAllClassHook(entryPoint: 'void *', name: 'Name', funcPtr: 'Func_Ptr', addedBy: 'char *', reference: 'void *') -> "void":
    return _StGermain.EntryPoint_ReplaceAllClassHook(entryPoint, name, funcPtr, addedBy, reference)
EntryPoint_ReplaceAllClassHook = _StGermain.EntryPoint_ReplaceAllClassHook

def EntryPoint_Remove(entryPoint: 'void *', name: 'Name') -> "void":
    return _StGermain.EntryPoint_Remove(entryPoint, name)
EntryPoint_Remove = _StGermain.EntryPoint_Remove

def EntryPoint_Purge(entryPoint: 'void *') -> "void":
    return _StGermain.EntryPoint_Purge(entryPoint)
EntryPoint_Purge = _StGermain.EntryPoint_Purge

def EntryPoint_WarnIfNoHooks(entryPoint: 'void *', parentFunction: 'char const *') -> "void":
    return _StGermain.EntryPoint_WarnIfNoHooks(entryPoint, parentFunction)
EntryPoint_WarnIfNoHooks = _StGermain.EntryPoint_WarnIfNoHooks

def EntryPoint_ErrorIfNoHooks(entryPoint: 'void *', parentFunction: 'char const *') -> "void":
    return _StGermain.EntryPoint_ErrorIfNoHooks(entryPoint, parentFunction)
EntryPoint_ErrorIfNoHooks = _StGermain.EntryPoint_ErrorIfNoHooks

def GetToolboxManagerInstance() -> "ToolboxesManager *":
    return _StGermain.GetToolboxManagerInstance()
GetToolboxManagerInstance = _StGermain.GetToolboxManagerInstance

def BaseExtensibility_Init(argc: 'int *', argv: 'char **[]') -> "Bool":
    return _StGermain.BaseExtensibility_Init(argc, argv)
BaseExtensibility_Init = _StGermain.BaseExtensibility_Init
class ModulesManager(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain.ModulesManager__sizeOfSelf_get, _StGermain.ModulesManager__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain.ModulesManager__deleteSelf_get, _StGermain.ModulesManager__deleteSelf_set)
    type = _swig_property(_StGermain.ModulesManager_type_get, _StGermain.ModulesManager_type_set)
    nRefs = _swig_property(_StGermain.ModulesManager_nRefs_get, _StGermain.ModulesManager_nRefs_set)
    locked = _swig_property(_StGermain.ModulesManager_locked_get, _StGermain.ModulesManager_locked_set)
    _delete = _swig_property(_StGermain.ModulesManager__delete_get, _StGermain.ModulesManager__delete_set)
    _print = _swig_property(_StGermain.ModulesManager__print_get, _StGermain.ModulesManager__print_set)
    _copy = _swig_property(_StGermain.ModulesManager__copy_get, _StGermain.ModulesManager__copy_set)
    _getModulesList = _swig_property(_StGermain.ModulesManager__getModulesList_get, _StGermain.ModulesManager__getModulesList_set)
    _loadModule = _swig_property(_StGermain.ModulesManager__loadModule_get, _StGermain.ModulesManager__loadModule_set)
    _unloadModule = _swig_property(_StGermain.ModulesManager__unloadModule_get, _StGermain.ModulesManager__unloadModule_set)
    _moduleFactory = _swig_property(_StGermain.ModulesManager__moduleFactory_get, _StGermain.ModulesManager__moduleFactory_set)
    _checkContext = _swig_property(_StGermain.ModulesManager__checkContext_get, _StGermain.ModulesManager__checkContext_set)
    _getModuleName = _swig_property(_StGermain.ModulesManager__getModuleName_get, _StGermain.ModulesManager__getModuleName_set)
    modules = _swig_property(_StGermain.ModulesManager_modules_get, _StGermain.ModulesManager_modules_set)
    codelets = _swig_property(_StGermain.ModulesManager_codelets_get, _StGermain.ModulesManager_codelets_set)

    def __init__(self):
        _StGermain.ModulesManager_swiginit(self, _StGermain.new_ModulesManager())
    __swig_destroy__ = _StGermain.delete_ModulesManager
ModulesManager_swigregister = _StGermain.ModulesManager_swigregister
ModulesManager_swigregister(ModulesManager)
ModulesManager_Type = cvar.ModulesManager_Type


def _ModulesManager_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', _getModulesList: 'ModulesManager_GetModulesListFunction *', _loadModule: 'ModulesManager_LoadModuleFunction *', _unloadModule: 'ModulesManager_UnloadModuleFunction *', _moduleFactory: 'ModulesManager_ModuleFactoryFunction *', _checkContext: 'ModulesManager_CheckContextFunction *', _getModuleName: 'ModulesManager_GetModuleNameFunction *') -> "ModulesManager *":
    return _StGermain._ModulesManager_New(_sizeOfSelf, type, _delete, _print, _copy, _getModulesList, _loadModule, _unloadModule, _moduleFactory, _checkContext, _getModuleName)
_ModulesManager_New = _StGermain._ModulesManager_New

def _ModulesManager_Init(modulesManager: 'void *') -> "void":
    return _StGermain._ModulesManager_Init(modulesManager)
_ModulesManager_Init = _StGermain._ModulesManager_Init

def _ModulesManager_Delete(modulesManager: 'void *') -> "void":
    return _StGermain._ModulesManager_Delete(modulesManager)
_ModulesManager_Delete = _StGermain._ModulesManager_Delete

def _ModulesManager_Print(modulesManager: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._ModulesManager_Print(modulesManager, stream)
_ModulesManager_Print = _StGermain._ModulesManager_Print

def ModulesManager_GetModulesList(modulesManager: 'void *', dictionary: 'void *') -> "Dictionary_Entry_Value *":
    return _StGermain.ModulesManager_GetModulesList(modulesManager, dictionary)
ModulesManager_GetModulesList = _StGermain.ModulesManager_GetModulesList

def ModulesManager_CheckContext(modulesManager: 'void *', modulesVal: '_Dictionary_Entry_Value', entry_I: 'unsigned int', contextName: 'Name') -> "Bool":
    return _StGermain.ModulesManager_CheckContext(modulesManager, modulesVal, entry_I, contextName)
ModulesManager_CheckContext = _StGermain.ModulesManager_CheckContext

def ModulesManager_GetModuleName(modulesManager: 'void *', moduleVal: '_Dictionary_Entry_Value', entry_I: 'unsigned int') -> "Name":
    return _StGermain.ModulesManager_GetModuleName(modulesManager, moduleVal, entry_I)
ModulesManager_GetModuleName = _StGermain.ModulesManager_GetModuleName

def ModulesManager_Load(modulesManager: 'void *', dictionary: 'void *', contextName: 'Name') -> "void":
    return _StGermain.ModulesManager_Load(modulesManager, dictionary, contextName)
ModulesManager_Load = _StGermain.ModulesManager_Load

def ModulesManager_LoadModule(modulesManager: 'void *', moduleName: 'Name') -> "Bool":
    return _StGermain.ModulesManager_LoadModule(modulesManager, moduleName)
ModulesManager_LoadModule = _StGermain.ModulesManager_LoadModule

def ModulesManager_UnloadModule(modulesManager: 'void *', moduleName: 'Name') -> "Bool":
    return _StGermain.ModulesManager_UnloadModule(modulesManager, moduleName)
ModulesManager_UnloadModule = _StGermain.ModulesManager_UnloadModule

def ModulesManager_Unload(modulesManager: 'void *') -> "void":
    return _StGermain.ModulesManager_Unload(modulesManager)
ModulesManager_Unload = _StGermain.ModulesManager_Unload

def ModulesManager_AddDirectory(name: 'Name', directory: 'char *') -> "void":
    return _StGermain.ModulesManager_AddDirectory(name, directory)
ModulesManager_AddDirectory = _StGermain.ModulesManager_AddDirectory

def ModulesManager_Submit(modulesManager: 'void *', codeletName: 'Name', version: 'Name', defaultNew: 'Stg_Component_DefaultConstructorFunction *') -> "Index":
    return _StGermain.ModulesManager_Submit(modulesManager, codeletName, version, defaultNew)
ModulesManager_Submit = _StGermain.ModulesManager_Submit

def ModulesManager_CreateModule(modulesManager: 'void *', name: 'Name', directories: '_Stg_ObjectList') -> "Module *":
    return _StGermain.ModulesManager_CreateModule(modulesManager, name, directories)
ModulesManager_CreateModule = _StGermain.ModulesManager_CreateModule

def ModulesManager_ConstructModules(modulesManager: 'void *', cf: 'Stg_ComponentFactory *', data: 'void *') -> "void":
    return _StGermain.ModulesManager_ConstructModules(modulesManager, cf, data)
ModulesManager_ConstructModules = _StGermain.ModulesManager_ConstructModules

def ModulesManager_ConstructModule(modulesManager: 'void *', moduleName: 'Name', cf: 'Stg_ComponentFactory *', data: 'void *') -> "Bool":
    return _StGermain.ModulesManager_ConstructModule(modulesManager, moduleName, cf, data)
ModulesManager_ConstructModule = _StGermain.ModulesManager_ConstructModule
class IndexSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain.IndexSet__sizeOfSelf_get, _StGermain.IndexSet__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain.IndexSet__deleteSelf_get, _StGermain.IndexSet__deleteSelf_set)
    type = _swig_property(_StGermain.IndexSet_type_get, _StGermain.IndexSet_type_set)
    nRefs = _swig_property(_StGermain.IndexSet_nRefs_get, _StGermain.IndexSet_nRefs_set)
    locked = _swig_property(_StGermain.IndexSet_locked_get, _StGermain.IndexSet_locked_set)
    _delete = _swig_property(_StGermain.IndexSet__delete_get, _StGermain.IndexSet__delete_set)
    _print = _swig_property(_StGermain.IndexSet__print_get, _StGermain.IndexSet__print_set)
    _copy = _swig_property(_StGermain.IndexSet__copy_get, _StGermain.IndexSet__copy_set)
    _duplicate = _swig_property(_StGermain.IndexSet__duplicate_get, _StGermain.IndexSet__duplicate_set)
    error = _swig_property(_StGermain.IndexSet_error_get, _StGermain.IndexSet_error_set)
    size = _swig_property(_StGermain.IndexSet_size_get, _StGermain.IndexSet_size_set)
    _containerSize = _swig_property(_StGermain.IndexSet__containerSize_get, _StGermain.IndexSet__containerSize_set)
    _container = _swig_property(_StGermain.IndexSet__container_get, _StGermain.IndexSet__container_set)
    membersCount = _swig_property(_StGermain.IndexSet_membersCount_get, _StGermain.IndexSet_membersCount_set)

    def __init__(self):
        _StGermain.IndexSet_swiginit(self, _StGermain.new_IndexSet())
    __swig_destroy__ = _StGermain.delete_IndexSet
IndexSet.AddOrRemoveWithNumpyInt = new_instancemethod(_StGermain.IndexSet_AddOrRemoveWithNumpyInt, None, IndexSet)
IndexSet.AddOrRemoveWithNumpyLong = new_instancemethod(_StGermain.IndexSet_AddOrRemoveWithNumpyLong, None, IndexSet)
IndexSet.AddOrRemoveWithNumpyUInt = new_instancemethod(_StGermain.IndexSet_AddOrRemoveWithNumpyUInt, None, IndexSet)
IndexSet.AddOrRemoveWithNumpyULong = new_instancemethod(_StGermain.IndexSet_AddOrRemoveWithNumpyULong, None, IndexSet)
IndexSet.GetAsNumpyArray = new_instancemethod(_StGermain.IndexSet_GetAsNumpyArray, None, IndexSet)
IndexSet_swigregister = _StGermain.IndexSet_swigregister
IndexSet_swigregister(IndexSet)
IndexSet_Type = cvar.IndexSet_Type


def IndexSet_New(size: 'IndexSet_Index') -> "IndexSet *":
    return _StGermain.IndexSet_New(size)
IndexSet_New = _StGermain.IndexSet_New

def IndexSet_Init(arg1: 'IndexSet *', size: 'IndexSet_Index') -> "void":
    return _StGermain.IndexSet_Init(arg1, size)
IndexSet_Init = _StGermain.IndexSet_Init

def _IndexSet_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', _duplicate: 'IndexSet_DuplicateFunction *', size: 'IndexSet_Index') -> "IndexSet *":
    return _StGermain._IndexSet_New(_sizeOfSelf, type, _delete, _print, _copy, _duplicate, size)
_IndexSet_New = _StGermain._IndexSet_New

def _IndexSet_Init(arg1: 'IndexSet *', size: 'IndexSet_Index') -> "void":
    return _StGermain._IndexSet_Init(arg1, size)
_IndexSet_Init = _StGermain._IndexSet_Init

def _IndexSet_Delete(indexIndexSet: 'void *') -> "void":
    return _StGermain._IndexSet_Delete(indexIndexSet)
_IndexSet_Delete = _StGermain._IndexSet_Delete

def _IndexSet_Print(indexIndexSet: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._IndexSet_Print(indexIndexSet, stream)
_IndexSet_Print = _StGermain._IndexSet_Print

def _IndexSet_Copy(indexSet: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _StGermain._IndexSet_Copy(indexSet, dest, deep, nameExt, ptrMap)
_IndexSet_Copy = _StGermain._IndexSet_Copy

def IndexSet_Add(indexSet: 'void *', index: 'Index') -> "void":
    return _StGermain.IndexSet_Add(indexSet, index)
IndexSet_Add = _StGermain.IndexSet_Add

def IndexSet_Remove(indexSet: 'void *', index: 'Index') -> "void":
    return _StGermain.IndexSet_Remove(indexSet, index)
IndexSet_Remove = _StGermain.IndexSet_Remove

def IndexSet_IsMember(indexSet: 'void *', index: 'Index') -> "Bool":
    return _StGermain.IndexSet_IsMember(indexSet, index)
IndexSet_IsMember = _StGermain.IndexSet_IsMember

def IndexSet_UpdateMembersCount(indexSet: 'void *') -> "IndexSet_Index":
    return _StGermain.IndexSet_UpdateMembersCount(indexSet)
IndexSet_UpdateMembersCount = _StGermain.IndexSet_UpdateMembersCount

def IndexSet_GetIndexOfNthMember(indexSet: 'void *', nthMember: 'Index const') -> "IndexSet_Index":
    return _StGermain.IndexSet_GetIndexOfNthMember(indexSet, nthMember)
IndexSet_GetIndexOfNthMember = _StGermain.IndexSet_GetIndexOfNthMember

def IndexSet_GetMembers2(indexSet: 'void *', array: 'Index *const') -> "void":
    return _StGermain.IndexSet_GetMembers2(indexSet, array)
IndexSet_GetMembers2 = _StGermain.IndexSet_GetMembers2

def IndexSet_GetMembers(indexSet: 'void *', countPtr: 'IndexSet_Index *', arrayPtr: 'Index **') -> "void":
    return _StGermain.IndexSet_GetMembers(indexSet, countPtr, arrayPtr)
IndexSet_GetMembers = _StGermain.IndexSet_GetMembers

def IndexSet_GetVacancies(indexSet: 'void *', countPtr: 'IndexSet_Index *', arrayPtr: 'Index **') -> "void":
    return _StGermain.IndexSet_GetVacancies(indexSet, countPtr, arrayPtr)
IndexSet_GetVacancies = _StGermain.IndexSet_GetVacancies

def IndexSet_Invert(indexSet: 'void *') -> "void":
    return _StGermain.IndexSet_Invert(indexSet)
IndexSet_Invert = _StGermain.IndexSet_Invert

def IndexSet_Merge_OR(indexSet: 'void *', merger: 'void *') -> "void":
    return _StGermain.IndexSet_Merge_OR(indexSet, merger)
IndexSet_Merge_OR = _StGermain.IndexSet_Merge_OR

def IndexSet_Merge_AND(indexSet: 'void *', merger: 'void *') -> "void":
    return _StGermain.IndexSet_Merge_AND(indexSet, merger)
IndexSet_Merge_AND = _StGermain.IndexSet_Merge_AND

def IndexSet_AddAll(indexSet: 'void *') -> "void":
    return _StGermain.IndexSet_AddAll(indexSet)
IndexSet_AddAll = _StGermain.IndexSet_AddAll

def IndexSet_RemoveAll(indexSet: 'void *') -> "void":
    return _StGermain.IndexSet_RemoveAll(indexSet)
IndexSet_RemoveAll = _StGermain.IndexSet_RemoveAll

def IndexSet_Duplicate(indexSet: 'void *') -> "IndexSet *":
    return _StGermain.IndexSet_Duplicate(indexSet)
IndexSet_Duplicate = _StGermain.IndexSet_Duplicate

def _IndexSet_Duplicate(indexSet: 'void *', newIndexSet: 'void *') -> "void":
    return _StGermain._IndexSet_Duplicate(indexSet, newIndexSet)
_IndexSet_Duplicate = _StGermain._IndexSet_Duplicate
class _IO_Handler(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain._IO_Handler__sizeOfSelf_get, _StGermain._IO_Handler__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain._IO_Handler__deleteSelf_get, _StGermain._IO_Handler__deleteSelf_set)
    type = _swig_property(_StGermain._IO_Handler_type_get, _StGermain._IO_Handler_type_set)
    nRefs = _swig_property(_StGermain._IO_Handler_nRefs_get, _StGermain._IO_Handler_nRefs_set)
    locked = _swig_property(_StGermain._IO_Handler_locked_get, _StGermain._IO_Handler_locked_set)
    _delete = _swig_property(_StGermain._IO_Handler__delete_get, _StGermain._IO_Handler__delete_set)
    _print = _swig_property(_StGermain._IO_Handler__print_get, _StGermain._IO_Handler__print_set)
    _copy = _swig_property(_StGermain._IO_Handler__copy_get, _StGermain._IO_Handler__copy_set)
    _readAllFromFile = _swig_property(_StGermain._IO_Handler__readAllFromFile_get, _StGermain._IO_Handler__readAllFromFile_set)
    _readAllFromBuffer = _swig_property(_StGermain._IO_Handler__readAllFromBuffer_get, _StGermain._IO_Handler__readAllFromBuffer_set)
    _writeAllToFile = _swig_property(_StGermain._IO_Handler__writeAllToFile_get, _StGermain._IO_Handler__writeAllToFile_set)
    currDictionary = _swig_property(_StGermain._IO_Handler_currDictionary_get, _StGermain._IO_Handler_currDictionary_set)
    currSources = _swig_property(_StGermain._IO_Handler_currSources_get, _StGermain._IO_Handler_currSources_set)
    resource = _swig_property(_StGermain._IO_Handler_resource_get, _StGermain._IO_Handler_resource_set)
    currPath = _swig_property(_StGermain._IO_Handler_currPath_get, _StGermain._IO_Handler_currPath_set)
    schema = _swig_property(_StGermain._IO_Handler_schema_get, _StGermain._IO_Handler_schema_set)
    validate = _swig_property(_StGermain._IO_Handler_validate_get, _StGermain._IO_Handler_validate_set)

    def __init__(self):
        _StGermain._IO_Handler_swiginit(self, _StGermain.new__IO_Handler())
    __swig_destroy__ = _StGermain.delete__IO_Handler
_IO_Handler_swigregister = _StGermain._IO_Handler_swigregister
_IO_Handler_swigregister(_IO_Handler)
IO_Handler_Type = cvar.IO_Handler_Type
IO_Handler_DefaultMergeType = cvar.IO_Handler_DefaultMergeType
IO_Handler_DefaultChildrenMergeType = cvar.IO_Handler_DefaultChildrenMergeType


def _IO_Handler_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', _readAllFromFile: 'IO_Handler_ReadAllFromFileFunction *', _readAllFromBuffer: 'IO_Handler_ReadAllFromBufferFunction *', _writeAllToFile: 'IO_Handler_WriteAllToFileFunction *') -> "IO_Handler *":
    return _StGermain._IO_Handler_New(_sizeOfSelf, type, _delete, _print, _copy, _readAllFromFile, _readAllFromBuffer, _writeAllToFile)
_IO_Handler_New = _StGermain._IO_Handler_New

def _IO_Handler_Init(arg1: '_IO_Handler') -> "void":
    return _StGermain._IO_Handler_Init(arg1)
_IO_Handler_Init = _StGermain._IO_Handler_Init

def _IO_Handler_Delete(io_handler: 'void *') -> "void":
    return _StGermain._IO_Handler_Delete(io_handler)
_IO_Handler_Delete = _StGermain._IO_Handler_Delete

def _IO_Handler_Print(io_handler: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._IO_Handler_Print(io_handler, stream)
_IO_Handler_Print = _StGermain._IO_Handler_Print

def IO_Handler_ReadAllFromFile(io_handler: 'void *', filename: 'char const *', dictionary: '_Dictionary', sources: '_Dictionary') -> "Bool":
    return _StGermain.IO_Handler_ReadAllFromFile(io_handler, filename, dictionary, sources)
IO_Handler_ReadAllFromFile = _StGermain.IO_Handler_ReadAllFromFile

def IO_Handler_ReadAllFromBuffer(io_handler: 'void *', buffer: 'char const *', dictionary: '_Dictionary', tag: 'char const *') -> "Bool":
    return _StGermain.IO_Handler_ReadAllFromBuffer(io_handler, buffer, dictionary, tag)
IO_Handler_ReadAllFromBuffer = _StGermain.IO_Handler_ReadAllFromBuffer

def IO_Handler_WriteAllToFile(io_handler: 'void *', filename: 'char const *', dictionary: '_Dictionary', sources: '_Dictionary') -> "Bool":
    return _StGermain.IO_Handler_WriteAllToFile(io_handler, filename, dictionary, sources)
IO_Handler_WriteAllToFile = _StGermain.IO_Handler_WriteAllToFile

def IO_Handler_DictSetAddValue(io_handler: 'void *', name: 'Dictionary_Entry_Key', newValue: 'char *', newDictValType: 'char', parent: '_Dictionary_Entry_Value', mergeType: 'Dictionary_MergeType') -> "Dictionary_Entry_Value *":
    return _StGermain.IO_Handler_DictSetAddValue(io_handler, name, newValue, newDictValType, parent, mergeType)
IO_Handler_DictSetAddValue = _StGermain.IO_Handler_DictSetAddValue

def IO_Handler_DictSetAddValueWithSource(io_handler: 'void *', name: 'Dictionary_Entry_Key', newValue: 'char *', newDictValType: 'char', newUnits: 'char *', parent: '_Dictionary_Entry_Value', mergeType: 'Dictionary_MergeType', source: 'Dictionary_Entry_Source') -> "Dictionary_Entry_Value *":
    return _StGermain.IO_Handler_DictSetAddValueWithSource(io_handler, name, newValue, newDictValType, newUnits, parent, mergeType, source)
IO_Handler_DictSetAddValueWithSource = _StGermain.IO_Handler_DictSetAddValueWithSource

def IO_Handler_ReadAllFilesFromCommandLine(ioHandler: 'void *', argc: 'int', argv: 'char *[]', dictionary: '_Dictionary', sources: '_Dictionary') -> "Index":
    return _StGermain.IO_Handler_ReadAllFilesFromCommandLine(ioHandler, argc, argv, dictionary, sources)
IO_Handler_ReadAllFilesFromCommandLine = _StGermain.IO_Handler_ReadAllFilesFromCommandLine

def IO_Handler_ReadAllFromCommandLine(ioHandler: 'void *', argc: 'int', argv: 'char *[]', dictionary: '_Dictionary', sources: '_Dictionary') -> "Index":
    return _StGermain.IO_Handler_ReadAllFromCommandLine(ioHandler, argc, argv, dictionary, sources)
IO_Handler_ReadAllFromCommandLine = _StGermain.IO_Handler_ReadAllFromCommandLine
PerList = _StGermain.PerList
AllRawASCII = _StGermain.AllRawASCII
AllRawBinary = _StGermain.AllRawBinary
AllXML = _StGermain.AllXML
class NameSpaceInfo(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    location = _swig_property(_StGermain.NameSpaceInfo_location_get, _StGermain.NameSpaceInfo_location_set)
    version = _swig_property(_StGermain.NameSpaceInfo_version_get, _StGermain.NameSpaceInfo_version_set)
    next = _swig_property(_StGermain.NameSpaceInfo_next_get, _StGermain.NameSpaceInfo_next_set)

    def __init__(self):
        _StGermain.NameSpaceInfo_swiginit(self, _StGermain.new_NameSpaceInfo())
    __swig_destroy__ = _StGermain.delete_NameSpaceInfo
NameSpaceInfo_swigregister = _StGermain.NameSpaceInfo_swigregister
NameSpaceInfo_swigregister(NameSpaceInfo)
XML_IO_Handler_Type = cvar.XML_IO_Handler_Type

class _XML_IO_Handler(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain._XML_IO_Handler__sizeOfSelf_get, _StGermain._XML_IO_Handler__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain._XML_IO_Handler__deleteSelf_get, _StGermain._XML_IO_Handler__deleteSelf_set)
    type = _swig_property(_StGermain._XML_IO_Handler_type_get, _StGermain._XML_IO_Handler_type_set)
    nRefs = _swig_property(_StGermain._XML_IO_Handler_nRefs_get, _StGermain._XML_IO_Handler_nRefs_set)
    locked = _swig_property(_StGermain._XML_IO_Handler_locked_get, _StGermain._XML_IO_Handler_locked_set)
    _delete = _swig_property(_StGermain._XML_IO_Handler__delete_get, _StGermain._XML_IO_Handler__delete_set)
    _print = _swig_property(_StGermain._XML_IO_Handler__print_get, _StGermain._XML_IO_Handler__print_set)
    _copy = _swig_property(_StGermain._XML_IO_Handler__copy_get, _StGermain._XML_IO_Handler__copy_set)
    _readAllFromFile = _swig_property(_StGermain._XML_IO_Handler__readAllFromFile_get, _StGermain._XML_IO_Handler__readAllFromFile_set)
    _readAllFromBuffer = _swig_property(_StGermain._XML_IO_Handler__readAllFromBuffer_get, _StGermain._XML_IO_Handler__readAllFromBuffer_set)
    _writeAllToFile = _swig_property(_StGermain._XML_IO_Handler__writeAllToFile_get, _StGermain._XML_IO_Handler__writeAllToFile_set)
    currDictionary = _swig_property(_StGermain._XML_IO_Handler_currDictionary_get, _StGermain._XML_IO_Handler_currDictionary_set)
    currSources = _swig_property(_StGermain._XML_IO_Handler_currSources_get, _StGermain._XML_IO_Handler_currSources_set)
    resource = _swig_property(_StGermain._XML_IO_Handler_resource_get, _StGermain._XML_IO_Handler_resource_set)
    currPath = _swig_property(_StGermain._XML_IO_Handler_currPath_get, _StGermain._XML_IO_Handler_currPath_set)
    schema = _swig_property(_StGermain._XML_IO_Handler_schema_get, _StGermain._XML_IO_Handler_schema_set)
    validate = _swig_property(_StGermain._XML_IO_Handler_validate_get, _StGermain._XML_IO_Handler_validate_set)
    _writeEntryToFile = _swig_property(_StGermain._XML_IO_Handler__writeEntryToFile_get, _StGermain._XML_IO_Handler__writeEntryToFile_set)
    _setListEncoding = _swig_property(_StGermain._XML_IO_Handler__setListEncoding_get, _StGermain._XML_IO_Handler__setListEncoding_set)
    _setWritingPrecision = _swig_property(_StGermain._XML_IO_Handler__setWritingPrecision_get, _StGermain._XML_IO_Handler__setWritingPrecision_set)
    _setWriteExplicitTypes = _swig_property(_StGermain._XML_IO_Handler__setWriteExplicitTypes_get, _StGermain._XML_IO_Handler__setWriteExplicitTypes_set)
    nameSpacesList = _swig_property(_StGermain._XML_IO_Handler_nameSpacesList_get, _StGermain._XML_IO_Handler_nameSpacesList_set)
    currDoc = _swig_property(_StGermain._XML_IO_Handler_currDoc_get, _StGermain._XML_IO_Handler_currDoc_set)
    currNameSpace = _swig_property(_StGermain._XML_IO_Handler_currNameSpace_get, _StGermain._XML_IO_Handler_currNameSpace_set)
    tokeniserCalls = _swig_property(_StGermain._XML_IO_Handler_tokeniserCalls_get, _StGermain._XML_IO_Handler_tokeniserCalls_set)
    listEncoding = _swig_property(_StGermain._XML_IO_Handler_listEncoding_get, _StGermain._XML_IO_Handler_listEncoding_set)
    typeKeywords = _swig_property(_StGermain._XML_IO_Handler_typeKeywords_get, _StGermain._XML_IO_Handler_typeKeywords_set)
    TYPE_KEYWORDS = _swig_property(_StGermain._XML_IO_Handler_TYPE_KEYWORDS_get, _StGermain._XML_IO_Handler_TYPE_KEYWORDS_set)
    writingPrecision = _swig_property(_StGermain._XML_IO_Handler_writingPrecision_get, _StGermain._XML_IO_Handler_writingPrecision_set)
    writingFieldWidth = _swig_property(_StGermain._XML_IO_Handler_writingFieldWidth_get, _StGermain._XML_IO_Handler_writingFieldWidth_set)
    WRITING_FIELD_EXTRAS = _swig_property(_StGermain._XML_IO_Handler_WRITING_FIELD_EXTRAS_get, _StGermain._XML_IO_Handler_WRITING_FIELD_EXTRAS_set)
    writeExplicitTypes = _swig_property(_StGermain._XML_IO_Handler_writeExplicitTypes_get, _StGermain._XML_IO_Handler_writeExplicitTypes_set)
    writeSources = _swig_property(_StGermain._XML_IO_Handler_writeSources_get, _StGermain._XML_IO_Handler_writeSources_set)
    searchPathsSize = _swig_property(_StGermain._XML_IO_Handler_searchPathsSize_get, _StGermain._XML_IO_Handler_searchPathsSize_set)
    searchPaths = _swig_property(_StGermain._XML_IO_Handler_searchPaths_get, _StGermain._XML_IO_Handler_searchPaths_set)

    def __init__(self):
        _StGermain._XML_IO_Handler_swiginit(self, _StGermain.new__XML_IO_Handler())
    __swig_destroy__ = _StGermain.delete__XML_IO_Handler
_XML_IO_Handler_swigregister = _StGermain._XML_IO_Handler_swigregister
_XML_IO_Handler_swigregister(_XML_IO_Handler)


def XML_IO_Handler_New() -> "XML_IO_Handler *":
    return _StGermain.XML_IO_Handler_New()
XML_IO_Handler_New = _StGermain.XML_IO_Handler_New

def _XML_IO_Handler_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', _readAllFromFile: 'IO_Handler_ReadAllFromFileFunction *', _readAllFromBuffer: 'IO_Handler_ReadAllFromBufferFunction *', _writeAllToFile: 'IO_Handler_WriteAllToFileFunction *', _writeEntryToFile: 'XML_IO_Handler_WriteEntryToFileFunction *', _setListEncoding: 'XML_IO_Handler_SetListEncodingFunction *', _setWritingPrecision: 'XML_IO_Handler_SetWritingPrecisionFunction *', _setWriteExplicitTypes: 'XML_IO_Handler_SetWriteExplicitTypesFunction *') -> "XML_IO_Handler *":
    return _StGermain._XML_IO_Handler_New(_sizeOfSelf, type, _delete, _print, _copy, _readAllFromFile, _readAllFromBuffer, _writeAllToFile, _writeEntryToFile, _setListEncoding, _setWritingPrecision, _setWriteExplicitTypes)
_XML_IO_Handler_New = _StGermain._XML_IO_Handler_New

def XML_IO_Handler_Init(arg1: '_XML_IO_Handler') -> "void":
    return _StGermain.XML_IO_Handler_Init(arg1)
XML_IO_Handler_Init = _StGermain.XML_IO_Handler_Init

def _XML_IO_Handler_Init(arg1: '_XML_IO_Handler') -> "void":
    return _StGermain._XML_IO_Handler_Init(arg1)
_XML_IO_Handler_Init = _StGermain._XML_IO_Handler_Init

def _XML_IO_Handler_Delete(xml_io_handler: 'void *') -> "void":
    return _StGermain._XML_IO_Handler_Delete(xml_io_handler)
_XML_IO_Handler_Delete = _StGermain._XML_IO_Handler_Delete

def _XML_IO_Handler_Print(xml_io_handler: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._XML_IO_Handler_Print(xml_io_handler, stream)
_XML_IO_Handler_Print = _StGermain._XML_IO_Handler_Print

def XML_IO_Handler_SetListEncoding(xml_io_handler: 'void *', listEncoding: 'ListEncoding') -> "void":
    return _StGermain.XML_IO_Handler_SetListEncoding(xml_io_handler, listEncoding)
XML_IO_Handler_SetListEncoding = _StGermain.XML_IO_Handler_SetListEncoding

def _XML_IO_Handler_SetListEncoding(xml_io_handler: 'void *', listEncoding: 'ListEncoding') -> "void":
    return _StGermain._XML_IO_Handler_SetListEncoding(xml_io_handler, listEncoding)
_XML_IO_Handler_SetListEncoding = _StGermain._XML_IO_Handler_SetListEncoding

def XML_IO_Handler_SetWriteExplicitTypes(xml_io_handler: 'void *', writeExplicitTypes: 'Bool') -> "void":
    return _StGermain.XML_IO_Handler_SetWriteExplicitTypes(xml_io_handler, writeExplicitTypes)
XML_IO_Handler_SetWriteExplicitTypes = _StGermain.XML_IO_Handler_SetWriteExplicitTypes

def _XML_IO_Handler_SetWriteExplicitTypes(xml_io_handler: 'void *', writeExplicitTypes: 'Bool') -> "void":
    return _StGermain._XML_IO_Handler_SetWriteExplicitTypes(xml_io_handler, writeExplicitTypes)
_XML_IO_Handler_SetWriteExplicitTypes = _StGermain._XML_IO_Handler_SetWriteExplicitTypes

def XML_IO_Handler_SetWritingPrecision(xml_io_handler: 'void *', dictionaryEntryType: 'int', value: 'int') -> "void":
    return _StGermain.XML_IO_Handler_SetWritingPrecision(xml_io_handler, dictionaryEntryType, value)
XML_IO_Handler_SetWritingPrecision = _StGermain.XML_IO_Handler_SetWritingPrecision

def _XML_IO_Handler_SetWritingPrecision(xml_io_handler: 'void *', dictionaryEntryType: 'int', value: 'int') -> "void":
    return _StGermain._XML_IO_Handler_SetWritingPrecision(xml_io_handler, dictionaryEntryType, value)
_XML_IO_Handler_SetWritingPrecision = _StGermain._XML_IO_Handler_SetWritingPrecision

def _XML_IO_Handler_AddNameSpace(io_handler: 'void *', location: 'char *', version: 'char *') -> "void":
    return _StGermain._XML_IO_Handler_AddNameSpace(io_handler, location, version)
_XML_IO_Handler_AddNameSpace = _StGermain._XML_IO_Handler_AddNameSpace

def _XML_IO_Handler_CheckNameSpace(arg1: '_XML_IO_Handler', curNode: 'xmlNodePtr') -> "Bool":
    return _StGermain._XML_IO_Handler_CheckNameSpace(arg1, curNode)
_XML_IO_Handler_CheckNameSpace = _StGermain._XML_IO_Handler_CheckNameSpace

def _XML_IO_Handler_ReadAllFromFile(xml_io_handler: 'void *', filename: 'char const *', dictionary: '_Dictionary', sources: '_Dictionary') -> "Bool":
    return _StGermain._XML_IO_Handler_ReadAllFromFile(xml_io_handler, filename, dictionary, sources)
_XML_IO_Handler_ReadAllFromFile = _StGermain._XML_IO_Handler_ReadAllFromFile

def _XML_IO_Handler_ReadAllFromFileForceSource(xml_io_handler: 'void *', filename: 'char const *', dictionary: '_Dictionary', sources: '_Dictionary') -> "Bool":
    return _StGermain._XML_IO_Handler_ReadAllFromFileForceSource(xml_io_handler, filename, dictionary, sources)
_XML_IO_Handler_ReadAllFromFileForceSource = _StGermain._XML_IO_Handler_ReadAllFromFileForceSource

def _XML_IO_Handler_ReadAllFromBuffer(xml_io_handler: 'void *', buffer: 'char const *', dictionary: '_Dictionary', tag: 'char const *') -> "Bool":
    return _StGermain._XML_IO_Handler_ReadAllFromBuffer(xml_io_handler, buffer, dictionary, tag)
_XML_IO_Handler_ReadAllFromBuffer = _StGermain._XML_IO_Handler_ReadAllFromBuffer

def _XML_IO_Handler_WriteAllToFile(xml_io_handler: 'void *', filename: 'char const *', dictionary: '_Dictionary', sources: '_Dictionary') -> "Bool":
    return _StGermain._XML_IO_Handler_WriteAllToFile(xml_io_handler, filename, dictionary, sources)
_XML_IO_Handler_WriteAllToFile = _StGermain._XML_IO_Handler_WriteAllToFile

def XML_IO_Handler_WriteEntryToFile(xml_io_handler: 'void *', filename: 'char const *', name: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value', source: 'Dictionary_Entry_Source') -> "Bool":
    return _StGermain.XML_IO_Handler_WriteEntryToFile(xml_io_handler, filename, name, value, source)
XML_IO_Handler_WriteEntryToFile = _StGermain.XML_IO_Handler_WriteEntryToFile

def _XML_IO_Handler_WriteEntryToFile(xml_io_handler: 'void *', filename: 'char const *', name: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value', source: 'Dictionary_Entry_Source') -> "Bool":
    return _StGermain._XML_IO_Handler_WriteEntryToFile(xml_io_handler, filename, name, value, source)
_XML_IO_Handler_WriteEntryToFile = _StGermain._XML_IO_Handler_WriteEntryToFile

def XML_IO_Handler_AddDirectory(name: 'Name', directory: 'char *') -> "void":
    return _StGermain.XML_IO_Handler_AddDirectory(name, directory)
XML_IO_Handler_AddDirectory = _StGermain.XML_IO_Handler_AddDirectory

def XML_IO_Handler_LibXMLErrorHandler(ctx: 'void *', msg: 'char const *') -> "void":
    return _StGermain.XML_IO_Handler_LibXMLErrorHandler(ctx, msg)
XML_IO_Handler_LibXMLErrorHandler = _StGermain.XML_IO_Handler_LibXMLErrorHandler

def _XML_IO_Handler_WriteAllMem(xml_io_handler: 'void *', dictionary: '_Dictionary', sources: '_Dictionary') -> "char *":
    return _StGermain._XML_IO_Handler_WriteAllMem(xml_io_handler, dictionary, sources)
_XML_IO_Handler_WriteAllMem = _StGermain._XML_IO_Handler_WriteAllMem
Dictionary_MergeType_Append = _StGermain.Dictionary_MergeType_Append
Dictionary_MergeType_Merge = _StGermain.Dictionary_MergeType_Merge
Dictionary_MergeType_Replace = _StGermain.Dictionary_MergeType_Replace
class _Dictionary(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain._Dictionary__sizeOfSelf_get, _StGermain._Dictionary__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain._Dictionary__deleteSelf_get, _StGermain._Dictionary__deleteSelf_set)
    type = _swig_property(_StGermain._Dictionary_type_get, _StGermain._Dictionary_type_set)
    nRefs = _swig_property(_StGermain._Dictionary_nRefs_get, _StGermain._Dictionary_nRefs_set)
    locked = _swig_property(_StGermain._Dictionary_locked_get, _StGermain._Dictionary_locked_set)
    _delete = _swig_property(_StGermain._Dictionary__delete_get, _StGermain._Dictionary__delete_set)
    _print = _swig_property(_StGermain._Dictionary__print_get, _StGermain._Dictionary__print_set)
    _copy = _swig_property(_StGermain._Dictionary__copy_get, _StGermain._Dictionary__copy_set)
    add = _swig_property(_StGermain._Dictionary_add_get, _StGermain._Dictionary_add_set)
    addWithSource = _swig_property(_StGermain._Dictionary_addWithSource_get, _StGermain._Dictionary_addWithSource_set)
    set = _swig_property(_StGermain._Dictionary_set_get, _StGermain._Dictionary_set_set)
    setWithSource = _swig_property(_StGermain._Dictionary_setWithSource_get, _StGermain._Dictionary_setWithSource_set)
    get = _swig_property(_StGermain._Dictionary_get_get, _StGermain._Dictionary_get_set)
    getSource = _swig_property(_StGermain._Dictionary_getSource_get, _StGermain._Dictionary_getSource_set)
    size = _swig_property(_StGermain._Dictionary_size_get, _StGermain._Dictionary_size_set)
    delta = _swig_property(_StGermain._Dictionary_delta_get, _StGermain._Dictionary_delta_set)
    count = _swig_property(_StGermain._Dictionary_count_get, _StGermain._Dictionary_count_set)
    entryPtr = _swig_property(_StGermain._Dictionary_entryPtr_get, _StGermain._Dictionary_entryPtr_set)
    debugStream = _swig_property(_StGermain._Dictionary_debugStream_get, _StGermain._Dictionary_debugStream_set)

    def __init__(self):
        _StGermain._Dictionary_swiginit(self, _StGermain.new__Dictionary())
    __swig_destroy__ = _StGermain.delete__Dictionary
_Dictionary_swigregister = _StGermain._Dictionary_swigregister
_Dictionary_swigregister(_Dictionary)
Dictionary_Type = cvar.Dictionary_Type


def Dictionary_New() -> "Dictionary *":
    return _StGermain.Dictionary_New()
Dictionary_New = _StGermain.Dictionary_New

def _Dictionary_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', add: 'Dictionary_AddFunction *', addWithSource: 'Dictionary_AddWithSourceFunction *', set: 'Dictionary_SetFunction *', setWithSource: 'Dictionary_SetWithSourceFunction *', get: 'Dictionary_GetFunction *', getSource: 'Dictionary_GetSourceFunction *') -> "Dictionary *":
    return _StGermain._Dictionary_New(_sizeOfSelf, type, _delete, _print, _copy, add, addWithSource, set, setWithSource, get, getSource)
_Dictionary_New = _StGermain._Dictionary_New

def _Dictionary_Init(dictionary: 'void *') -> "void":
    return _StGermain._Dictionary_Init(dictionary)
_Dictionary_Init = _StGermain._Dictionary_Init

def _Dictionary_Delete(dictionary: 'void *') -> "void":
    return _StGermain._Dictionary_Delete(dictionary)
_Dictionary_Delete = _StGermain._Dictionary_Delete

def _Dictionary_Print(dictionary: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._Dictionary_Print(dictionary, stream)
_Dictionary_Print = _StGermain._Dictionary_Print

def Dictionary_PrintConcise(dictionary: 'void *', stream: 'Stream *') -> "void":
    return _StGermain.Dictionary_PrintConcise(dictionary, stream)
Dictionary_PrintConcise = _StGermain.Dictionary_PrintConcise

def _Dictionary_Copy(indexMap: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _StGermain._Dictionary_Copy(indexMap, dest, deep, nameExt, ptrMap)
_Dictionary_Copy = _StGermain._Dictionary_Copy

def Dictionary_Empty(dictionary: 'void *') -> "void":
    return _StGermain.Dictionary_Empty(dictionary)
Dictionary_Empty = _StGermain.Dictionary_Empty

def Dictionary_Add(dictionary: 'void *', key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value') -> "void":
    return _StGermain.Dictionary_Add(dictionary, key, value)
Dictionary_Add = _StGermain.Dictionary_Add

def Dictionary_AddWithSource(dictionary: 'void *', key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value', units: 'Dictionary_Entry_Units', source: 'Dictionary_Entry_Source') -> "void":
    return _StGermain.Dictionary_AddWithSource(dictionary, key, value, units, source)
Dictionary_AddWithSource = _StGermain.Dictionary_AddWithSource

def Dictionary_AddMerge(dictionary: 'void *', key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value', mergeType: 'Dictionary_MergeType') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_AddMerge(dictionary, key, value, mergeType)
Dictionary_AddMerge = _StGermain.Dictionary_AddMerge

def Dictionary_AddMergeWithSource(dictionary: 'void *', key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value', units: 'Dictionary_Entry_Units', mergeType: 'Dictionary_MergeType', source: 'Dictionary_Entry_Source') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_AddMergeWithSource(dictionary, key, value, units, mergeType, source)
Dictionary_AddMergeWithSource = _StGermain.Dictionary_AddMergeWithSource

def Dictionary_Set(dictionary: 'void *', key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value') -> "Bool":
    return _StGermain.Dictionary_Set(dictionary, key, value)
Dictionary_Set = _StGermain.Dictionary_Set

def Dictionary_SetWithSource(dictionary: 'void *', key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value', source: 'Dictionary_Entry_Source') -> "Bool":
    return _StGermain.Dictionary_SetWithSource(dictionary, key, value, source)
Dictionary_SetWithSource = _StGermain.Dictionary_SetWithSource

def Dictionary_Get(dictionary: 'void *', key: 'Dictionary_Entry_Key') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Get(dictionary, key)
Dictionary_Get = _StGermain.Dictionary_Get

def Dictionary_GetSource(dictionary: 'void *', key: 'Dictionary_Entry_Key') -> "Dictionary_Entry_Source":
    return _StGermain.Dictionary_GetSource(dictionary, key)
Dictionary_GetSource = _StGermain.Dictionary_GetSource

def Dictionary_GetByIndex(dictionary: 'void *', index: 'Dictionary_Index') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_GetByIndex(dictionary, index)
Dictionary_GetByIndex = _StGermain.Dictionary_GetByIndex

def Dictionary_GetDefault(dictionary: 'void *', key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_GetDefault(dictionary, key, value)
Dictionary_GetDefault = _StGermain.Dictionary_GetDefault

def _Dictionary_Add(dictionary: 'void *', key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value') -> "void":
    return _StGermain._Dictionary_Add(dictionary, key, value)
_Dictionary_Add = _StGermain._Dictionary_Add

def _Dictionary_AddWithSource(dictionary: 'void *', key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value', units: 'Dictionary_Entry_Units', source: 'Dictionary_Entry_Source') -> "void":
    return _StGermain._Dictionary_AddWithSource(dictionary, key, value, units, source)
_Dictionary_AddWithSource = _StGermain._Dictionary_AddWithSource

def _Dictionary_Set(dictionary: 'void *', key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value') -> "Bool":
    return _StGermain._Dictionary_Set(dictionary, key, value)
_Dictionary_Set = _StGermain._Dictionary_Set

def _Dictionary_SetWithSource(dictionary: 'void *', key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value', source: 'Dictionary_Entry_Source') -> "Bool":
    return _StGermain._Dictionary_SetWithSource(dictionary, key, value, source)
_Dictionary_SetWithSource = _StGermain._Dictionary_SetWithSource

def _Dictionary_Get(dictionary: 'void *', key: 'Dictionary_Entry_Key') -> "Dictionary_Entry_Value *":
    return _StGermain._Dictionary_Get(dictionary, key)
_Dictionary_Get = _StGermain._Dictionary_Get

def _Dictionary_GetSource(dictionary: 'void *', key: 'Dictionary_Entry_Key') -> "Dictionary_Entry_Source":
    return _StGermain._Dictionary_GetSource(dictionary, key)
_Dictionary_GetSource = _StGermain._Dictionary_GetSource

def _Dictionary_GetByIndex(dictionary: 'void *', index: 'Dictionary_Index') -> "Dictionary_Entry_Value *":
    return _StGermain._Dictionary_GetByIndex(dictionary, index)
_Dictionary_GetByIndex = _StGermain._Dictionary_GetByIndex

def Dictionary_GetEntry(dictionary: 'void *', key: 'Dictionary_Entry_Key') -> "Dictionary_Entry *":
    return _StGermain.Dictionary_GetEntry(dictionary, key)
Dictionary_GetEntry = _StGermain.Dictionary_GetEntry

def Dictionary_GetEntryByIndex(dictionary: 'void *', index: 'Dictionary_Index') -> "Dictionary_Entry *":
    return _StGermain.Dictionary_GetEntryByIndex(dictionary, index)
Dictionary_GetEntryByIndex = _StGermain.Dictionary_GetEntryByIndex

def Dictionary_GetCount(dictionary: 'void *') -> "Index":
    return _StGermain.Dictionary_GetCount(dictionary)
Dictionary_GetCount = _StGermain.Dictionary_GetCount

def Dictionary_ReadAllParamFromCommandLine(dictionary: 'void *', argc: 'int', argv: 'char *[]') -> "void":
    return _StGermain.Dictionary_ReadAllParamFromCommandLine(dictionary, argc, argv)
Dictionary_ReadAllParamFromCommandLine = _StGermain.Dictionary_ReadAllParamFromCommandLine

def Dictionary_CompareAllEntriesFull(dictionary1: 'void *', dictionary2: 'void *', strictTypeCheck: 'Bool') -> "Bool":
    return _StGermain.Dictionary_CompareAllEntriesFull(dictionary1, dictionary2, strictTypeCheck)
Dictionary_CompareAllEntriesFull = _StGermain.Dictionary_CompareAllEntriesFull

def _DictionaryUtils_GetRecursive(dict: '_Dictionary', str: 'char *') -> "Dictionary_Entry_Value *":
    return _StGermain._DictionaryUtils_GetRecursive(dict, str)
_DictionaryUtils_GetRecursive = _StGermain._DictionaryUtils_GetRecursive

def _DictionaryUtils_AliasDereferenceStruct(masterDict: '_Dictionary', valuePtr: '_Dictionary_Entry_Value') -> "void":
    return _StGermain._DictionaryUtils_AliasDereferenceStruct(masterDict, valuePtr)
_DictionaryUtils_AliasDereferenceStruct = _StGermain._DictionaryUtils_AliasDereferenceStruct

def _DictionaryUtils_AliasDereferenceList(masterDict: '_Dictionary', valuePtr: '_Dictionary_Entry_Value') -> "void":
    return _StGermain._DictionaryUtils_AliasDereferenceList(masterDict, valuePtr)
_DictionaryUtils_AliasDereferenceList = _StGermain._DictionaryUtils_AliasDereferenceList

def _DictionaryUtils_AliasDereferenceString(masterDict: '_Dictionary', valuePtr: '_Dictionary_Entry_Value') -> "void":
    return _StGermain._DictionaryUtils_AliasDereferenceString(masterDict, valuePtr)
_DictionaryUtils_AliasDereferenceString = _StGermain._DictionaryUtils_AliasDereferenceString

def _DictionaryUtils_AliasDereferenceEntryValue(masterDict: '_Dictionary', valuePtr: '_Dictionary_Entry_Value') -> "void":
    return _StGermain._DictionaryUtils_AliasDereferenceEntryValue(masterDict, valuePtr)
_DictionaryUtils_AliasDereferenceEntryValue = _StGermain._DictionaryUtils_AliasDereferenceEntryValue

def DictionaryUtils_AliasDereferenceDictionary(masterDict: '_Dictionary') -> "void":
    return _StGermain.DictionaryUtils_AliasDereferenceDictionary(masterDict)
DictionaryUtils_AliasDereferenceDictionary = _StGermain.DictionaryUtils_AliasDereferenceDictionary
class _Dictionary_Entry(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    key = _swig_property(_StGermain._Dictionary_Entry_key_get, _StGermain._Dictionary_Entry_key_set)
    value = _swig_property(_StGermain._Dictionary_Entry_value_get, _StGermain._Dictionary_Entry_value_set)
    units = _swig_property(_StGermain._Dictionary_Entry_units_get, _StGermain._Dictionary_Entry_units_set)
    source = _swig_property(_StGermain._Dictionary_Entry_source_get, _StGermain._Dictionary_Entry_source_set)

    def __init__(self):
        _StGermain._Dictionary_Entry_swiginit(self, _StGermain.new__Dictionary_Entry())
    __swig_destroy__ = _StGermain.delete__Dictionary_Entry
_Dictionary_Entry_swigregister = _StGermain._Dictionary_Entry_swigregister
_Dictionary_Entry_swigregister(_Dictionary_Entry)

NO_SOURCEFILE = _StGermain.NO_SOURCEFILE

def Dictionary_Entry_New(key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value') -> "Dictionary_Entry *":
    return _StGermain.Dictionary_Entry_New(key, value)
Dictionary_Entry_New = _StGermain.Dictionary_Entry_New

def Dictionary_Entry_NewWithSource(key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value', source: 'Dictionary_Entry_Source') -> "Dictionary_Entry *":
    return _StGermain.Dictionary_Entry_NewWithSource(key, value, source)
Dictionary_Entry_NewWithSource = _StGermain.Dictionary_Entry_NewWithSource

def Dictionary_Entry_Init(arg1: '_Dictionary_Entry', key: 'Dictionary_Entry_Key', value: '_Dictionary_Entry_Value') -> "void":
    return _StGermain.Dictionary_Entry_Init(arg1, key, value)
Dictionary_Entry_Init = _StGermain.Dictionary_Entry_Init

def Dictionary_Entry_Delete(arg1: '_Dictionary_Entry') -> "void":
    return _StGermain.Dictionary_Entry_Delete(arg1)
Dictionary_Entry_Delete = _StGermain.Dictionary_Entry_Delete

def Dictionary_Entry_Print(arg1: '_Dictionary_Entry', stream: 'Stream *') -> "void":
    return _StGermain.Dictionary_Entry_Print(arg1, stream)
Dictionary_Entry_Print = _StGermain.Dictionary_Entry_Print

def Dictionary_Entry_Compare(arg1: '_Dictionary_Entry', key: 'Dictionary_Entry_Key') -> "Bool":
    return _StGermain.Dictionary_Entry_Compare(arg1, key)
Dictionary_Entry_Compare = _StGermain.Dictionary_Entry_Compare

def Dictionary_Entry_CompareWithSource(arg1: '_Dictionary_Entry', key: 'Dictionary_Entry_Key', source: 'Dictionary_Entry_Source') -> "Bool":
    return _StGermain.Dictionary_Entry_CompareWithSource(arg1, key, source)
Dictionary_Entry_CompareWithSource = _StGermain.Dictionary_Entry_CompareWithSource

def Dictionary_Entry_Set(arg1: '_Dictionary_Entry', value: '_Dictionary_Entry_Value') -> "void":
    return _StGermain.Dictionary_Entry_Set(arg1, value)
Dictionary_Entry_Set = _StGermain.Dictionary_Entry_Set

def Dictionary_Entry_SetWithSource(arg1: '_Dictionary_Entry', value: '_Dictionary_Entry_Value', source: 'Dictionary_Entry_Source') -> "void":
    return _StGermain.Dictionary_Entry_SetWithSource(arg1, value, source)
Dictionary_Entry_SetWithSource = _StGermain.Dictionary_Entry_SetWithSource

def Dictionary_Entry_SetSource(arg1: '_Dictionary_Entry', source: 'Dictionary_Entry_Source') -> "void":
    return _StGermain.Dictionary_Entry_SetSource(arg1, source)
Dictionary_Entry_SetSource = _StGermain.Dictionary_Entry_SetSource

def Dictionary_Entry_Get(arg1: '_Dictionary_Entry') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Get(arg1)
Dictionary_Entry_Get = _StGermain.Dictionary_Entry_Get

def Dictionary_Entry_GetSource(arg1: '_Dictionary_Entry') -> "Dictionary_Entry_Source":
    return _StGermain.Dictionary_Entry_GetSource(arg1)
Dictionary_Entry_GetSource = _StGermain.Dictionary_Entry_GetSource
Default = _StGermain.Default
RawASCII = _StGermain.RawASCII
RawBinary = _StGermain.RawBinary
class _Dictionary_Entry_Value_List(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    first = _swig_property(_StGermain._Dictionary_Entry_Value_List_first_get, _StGermain._Dictionary_Entry_Value_List_first_set)
    last = _swig_property(_StGermain._Dictionary_Entry_Value_List_last_get, _StGermain._Dictionary_Entry_Value_List_last_set)
    count = _swig_property(_StGermain._Dictionary_Entry_Value_List_count_get, _StGermain._Dictionary_Entry_Value_List_count_set)
    encoding = _swig_property(_StGermain._Dictionary_Entry_Value_List_encoding_get, _StGermain._Dictionary_Entry_Value_List_encoding_set)

    def __init__(self):
        _StGermain._Dictionary_Entry_Value_List_swiginit(self, _StGermain.new__Dictionary_Entry_Value_List())
    __swig_destroy__ = _StGermain.delete__Dictionary_Entry_Value_List
_Dictionary_Entry_Value_List_swigregister = _StGermain._Dictionary_Entry_Value_List_swigregister
_Dictionary_Entry_Value_List_swigregister(_Dictionary_Entry_Value_List)

class Dictionary_Entry_Value_AsType(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    typeString = _swig_property(_StGermain.Dictionary_Entry_Value_AsType_typeString_get, _StGermain.Dictionary_Entry_Value_AsType_typeString_set)
    typeDouble = _swig_property(_StGermain.Dictionary_Entry_Value_AsType_typeDouble_get, _StGermain.Dictionary_Entry_Value_AsType_typeDouble_set)
    typeUnsignedInt = _swig_property(_StGermain.Dictionary_Entry_Value_AsType_typeUnsignedInt_get, _StGermain.Dictionary_Entry_Value_AsType_typeUnsignedInt_set)
    typeInt = _swig_property(_StGermain.Dictionary_Entry_Value_AsType_typeInt_get, _StGermain.Dictionary_Entry_Value_AsType_typeInt_set)
    typeUnsignedLong = _swig_property(_StGermain.Dictionary_Entry_Value_AsType_typeUnsignedLong_get, _StGermain.Dictionary_Entry_Value_AsType_typeUnsignedLong_set)
    typeBool = _swig_property(_StGermain.Dictionary_Entry_Value_AsType_typeBool_get, _StGermain.Dictionary_Entry_Value_AsType_typeBool_set)
    typeStruct = _swig_property(_StGermain.Dictionary_Entry_Value_AsType_typeStruct_get, _StGermain.Dictionary_Entry_Value_AsType_typeStruct_set)
    typeList = _swig_property(_StGermain.Dictionary_Entry_Value_AsType_typeList_get, _StGermain.Dictionary_Entry_Value_AsType_typeList_set)
    typeVoid = _swig_property(_StGermain.Dictionary_Entry_Value_AsType_typeVoid_get, _StGermain.Dictionary_Entry_Value_AsType_typeVoid_set)

    def __init__(self):
        _StGermain.Dictionary_Entry_Value_AsType_swiginit(self, _StGermain.new_Dictionary_Entry_Value_AsType())
    __swig_destroy__ = _StGermain.delete_Dictionary_Entry_Value_AsType
Dictionary_Entry_Value_AsType_swigregister = _StGermain.Dictionary_Entry_Value_AsType_swigregister
Dictionary_Entry_Value_AsType_swigregister(Dictionary_Entry_Value_AsType)

class _Dictionary_Entry_Value(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    atType = _swig_property(_StGermain._Dictionary_Entry_Value_atType_get, _StGermain._Dictionary_Entry_Value_atType_set)
    type = _swig_property(_StGermain._Dictionary_Entry_Value_type_get, _StGermain._Dictionary_Entry_Value_type_set)
    next = _swig_property(_StGermain._Dictionary_Entry_Value_next_get, _StGermain._Dictionary_Entry_Value_next_set)

    def __init__(self):
        _StGermain._Dictionary_Entry_Value_swiginit(self, _StGermain.new__Dictionary_Entry_Value())
    __swig_destroy__ = _StGermain.delete__Dictionary_Entry_Value
_Dictionary_Entry_Value_swigregister = _StGermain._Dictionary_Entry_Value_swigregister
_Dictionary_Entry_Value_swigregister(_Dictionary_Entry_Value)


def Dictionary_Entry_Value_FromUnsignedInt(value: 'unsigned int') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_FromUnsignedInt(value)
Dictionary_Entry_Value_FromUnsignedInt = _StGermain.Dictionary_Entry_Value_FromUnsignedInt

def Dictionary_Entry_Value_InitFromUnsignedInt(arg1: '_Dictionary_Entry_Value', value: 'unsigned int') -> "void":
    return _StGermain.Dictionary_Entry_Value_InitFromUnsignedInt(arg1, value)
Dictionary_Entry_Value_InitFromUnsignedInt = _StGermain.Dictionary_Entry_Value_InitFromUnsignedInt

def Dictionary_Entry_Value_FromInt(value: 'int') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_FromInt(value)
Dictionary_Entry_Value_FromInt = _StGermain.Dictionary_Entry_Value_FromInt

def Dictionary_Entry_Value_InitFromInt(arg1: '_Dictionary_Entry_Value', value: 'int') -> "void":
    return _StGermain.Dictionary_Entry_Value_InitFromInt(arg1, value)
Dictionary_Entry_Value_InitFromInt = _StGermain.Dictionary_Entry_Value_InitFromInt

def Dictionary_Entry_Value_FromDouble(value: 'double') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_FromDouble(value)
Dictionary_Entry_Value_FromDouble = _StGermain.Dictionary_Entry_Value_FromDouble

def Dictionary_Entry_Value_InitFromDouble(arg1: '_Dictionary_Entry_Value', value: 'double') -> "void":
    return _StGermain.Dictionary_Entry_Value_InitFromDouble(arg1, value)
Dictionary_Entry_Value_InitFromDouble = _StGermain.Dictionary_Entry_Value_InitFromDouble

def Dictionary_Entry_Value_FromUnsignedLong(value: 'unsigned long') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_FromUnsignedLong(value)
Dictionary_Entry_Value_FromUnsignedLong = _StGermain.Dictionary_Entry_Value_FromUnsignedLong

def Dictionary_Entry_Value_InitFromUnsignedLong(arg1: '_Dictionary_Entry_Value', value: 'unsigned long') -> "void":
    return _StGermain.Dictionary_Entry_Value_InitFromUnsignedLong(arg1, value)
Dictionary_Entry_Value_InitFromUnsignedLong = _StGermain.Dictionary_Entry_Value_InitFromUnsignedLong

def Dictionary_Entry_Value_FromString(value: 'char const *const') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_FromString(value)
Dictionary_Entry_Value_FromString = _StGermain.Dictionary_Entry_Value_FromString

def Dictionary_Entry_Value_InitFromString(arg1: '_Dictionary_Entry_Value', value: 'char const *const') -> "void":
    return _StGermain.Dictionary_Entry_Value_InitFromString(arg1, value)
Dictionary_Entry_Value_InitFromString = _StGermain.Dictionary_Entry_Value_InitFromString

def Dictionary_Entry_Value_FromStringTo(value: 'char *', type: 'char') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_FromStringTo(value, type)
Dictionary_Entry_Value_FromStringTo = _StGermain.Dictionary_Entry_Value_FromStringTo

def Dictionary_Entry_Value_FromBool(value: 'Bool') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_FromBool(value)
Dictionary_Entry_Value_FromBool = _StGermain.Dictionary_Entry_Value_FromBool

def Dictionary_Entry_Value_InitFromBool(arg1: '_Dictionary_Entry_Value', value: 'Bool') -> "void":
    return _StGermain.Dictionary_Entry_Value_InitFromBool(arg1, value)
Dictionary_Entry_Value_InitFromBool = _StGermain.Dictionary_Entry_Value_InitFromBool

def Dictionary_Entry_Value_NewStruct() -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_NewStruct()
Dictionary_Entry_Value_NewStruct = _StGermain.Dictionary_Entry_Value_NewStruct

def Dictionary_Entry_Value_InitNewStruct(arg1: '_Dictionary_Entry_Value') -> "void":
    return _StGermain.Dictionary_Entry_Value_InitNewStruct(arg1)
Dictionary_Entry_Value_InitNewStruct = _StGermain.Dictionary_Entry_Value_InitNewStruct

def Dictionary_Entry_Value_FromStruct(dictionary: 'void *') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_FromStruct(dictionary)
Dictionary_Entry_Value_FromStruct = _StGermain.Dictionary_Entry_Value_FromStruct

def Dictionary_Entry_Value_InitFromStruct(arg1: '_Dictionary_Entry_Value', dictionary: 'void *') -> "void":
    return _StGermain.Dictionary_Entry_Value_InitFromStruct(arg1, dictionary)
Dictionary_Entry_Value_InitFromStruct = _StGermain.Dictionary_Entry_Value_InitFromStruct

def Dictionary_Entry_Value_NewList() -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_NewList()
Dictionary_Entry_Value_NewList = _StGermain.Dictionary_Entry_Value_NewList

def Dictionary_Entry_Value_InitNewList(arg1: '_Dictionary_Entry_Value') -> "void":
    return _StGermain.Dictionary_Entry_Value_InitNewList(arg1)
Dictionary_Entry_Value_InitNewList = _StGermain.Dictionary_Entry_Value_InitNewList

def Dictionary_Entry_Value_AddMember(arg1: '_Dictionary_Entry_Value', arg2: 'Dictionary_Entry_Key', arg3: '_Dictionary_Entry_Value') -> "void":
    return _StGermain.Dictionary_Entry_Value_AddMember(arg1, arg2, arg3)
Dictionary_Entry_Value_AddMember = _StGermain.Dictionary_Entry_Value_AddMember

def Dictionary_Entry_Value_AddMemberWithSource(arg1: '_Dictionary_Entry_Value', arg2: 'Dictionary_Entry_Key', arg3: '_Dictionary_Entry_Value', arg4: 'Dictionary_Entry_Source') -> "void":
    return _StGermain.Dictionary_Entry_Value_AddMemberWithSource(arg1, arg2, arg3, arg4)
Dictionary_Entry_Value_AddMemberWithSource = _StGermain.Dictionary_Entry_Value_AddMemberWithSource

def Dictionary_Entry_Value_AddElement(arg1: '_Dictionary_Entry_Value', element: '_Dictionary_Entry_Value') -> "void":
    return _StGermain.Dictionary_Entry_Value_AddElement(arg1, element)
Dictionary_Entry_Value_AddElement = _StGermain.Dictionary_Entry_Value_AddElement

def Dictionary_Entry_Value_AddElementWithSource(arg1: '_Dictionary_Entry_Value', element: '_Dictionary_Entry_Value', source: 'Dictionary_Entry_Source') -> "void":
    return _StGermain.Dictionary_Entry_Value_AddElementWithSource(arg1, element, source)
Dictionary_Entry_Value_AddElementWithSource = _StGermain.Dictionary_Entry_Value_AddElementWithSource

def Dictionary_Entry_Value_Delete(arg1: '_Dictionary_Entry_Value') -> "void":
    return _StGermain.Dictionary_Entry_Value_Delete(arg1)
Dictionary_Entry_Value_Delete = _StGermain.Dictionary_Entry_Value_Delete

def Dictionary_Entry_Value_Print(arg1: '_Dictionary_Entry_Value', stream: 'Stream *') -> "void":
    return _StGermain.Dictionary_Entry_Value_Print(arg1, stream)
Dictionary_Entry_Value_Print = _StGermain.Dictionary_Entry_Value_Print

def Dictionary_Entry_Value_SetFrom(arg1: '_Dictionary_Entry_Value', value: 'void *', type: 'char') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetFrom(arg1, value, type)
Dictionary_Entry_Value_SetFrom = _StGermain.Dictionary_Entry_Value_SetFrom

def Dictionary_Entry_Value_SetFromUnsignedInt(arg1: '_Dictionary_Entry_Value', value: 'unsigned int') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetFromUnsignedInt(arg1, value)
Dictionary_Entry_Value_SetFromUnsignedInt = _StGermain.Dictionary_Entry_Value_SetFromUnsignedInt

def Dictionary_Entry_Value_SetFromInt(arg1: '_Dictionary_Entry_Value', value: 'int') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetFromInt(arg1, value)
Dictionary_Entry_Value_SetFromInt = _StGermain.Dictionary_Entry_Value_SetFromInt

def Dictionary_Entry_Value_SetFromDouble(arg1: '_Dictionary_Entry_Value', value: 'double') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetFromDouble(arg1, value)
Dictionary_Entry_Value_SetFromDouble = _StGermain.Dictionary_Entry_Value_SetFromDouble

def Dictionary_Entry_Value_SetFromUnsignedLong(arg1: '_Dictionary_Entry_Value', value: 'unsigned long') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetFromUnsignedLong(arg1, value)
Dictionary_Entry_Value_SetFromUnsignedLong = _StGermain.Dictionary_Entry_Value_SetFromUnsignedLong

def Dictionary_Entry_Value_SetFromString(arg1: '_Dictionary_Entry_Value', value: 'char *') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetFromString(arg1, value)
Dictionary_Entry_Value_SetFromString = _StGermain.Dictionary_Entry_Value_SetFromString

def Dictionary_Entry_Value_SetFromStringKeepCurrentType(arg1: '_Dictionary_Entry_Value', string: 'char *') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetFromStringKeepCurrentType(arg1, string)
Dictionary_Entry_Value_SetFromStringKeepCurrentType = _StGermain.Dictionary_Entry_Value_SetFromStringKeepCurrentType

def Dictionary_Entry_Value_SetFromBool(arg1: '_Dictionary_Entry_Value', value: 'Bool') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetFromBool(arg1, value)
Dictionary_Entry_Value_SetFromBool = _StGermain.Dictionary_Entry_Value_SetFromBool

def Dictionary_Entry_Value_SetNewStruct(arg1: '_Dictionary_Entry_Value') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetNewStruct(arg1)
Dictionary_Entry_Value_SetNewStruct = _StGermain.Dictionary_Entry_Value_SetNewStruct

def Dictionary_Entry_Value_SetFromStruct(arg1: '_Dictionary_Entry_Value', dictionary: 'void *') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetFromStruct(arg1, dictionary)
Dictionary_Entry_Value_SetFromStruct = _StGermain.Dictionary_Entry_Value_SetFromStruct

def Dictionary_Entry_Value_SetNewList(arg1: '_Dictionary_Entry_Value') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetNewList(arg1)
Dictionary_Entry_Value_SetNewList = _StGermain.Dictionary_Entry_Value_SetNewList

def Dictionary_Entry_Value_AsUnsignedInt(arg1: '_Dictionary_Entry_Value') -> "unsigned int":
    return _StGermain.Dictionary_Entry_Value_AsUnsignedInt(arg1)
Dictionary_Entry_Value_AsUnsignedInt = _StGermain.Dictionary_Entry_Value_AsUnsignedInt

def Dictionary_Entry_Value_AsInt(arg1: '_Dictionary_Entry_Value') -> "int":
    return _StGermain.Dictionary_Entry_Value_AsInt(arg1)
Dictionary_Entry_Value_AsInt = _StGermain.Dictionary_Entry_Value_AsInt

def Dictionary_Entry_Value_AsDouble(arg1: '_Dictionary_Entry_Value') -> "double":
    return _StGermain.Dictionary_Entry_Value_AsDouble(arg1)
Dictionary_Entry_Value_AsDouble = _StGermain.Dictionary_Entry_Value_AsDouble

def Dictionary_Entry_Value_AsUnsignedLong(arg1: '_Dictionary_Entry_Value') -> "unsigned long":
    return _StGermain.Dictionary_Entry_Value_AsUnsignedLong(arg1)
Dictionary_Entry_Value_AsUnsignedLong = _StGermain.Dictionary_Entry_Value_AsUnsignedLong

def Dictionary_Entry_Value_AsString(arg1: '_Dictionary_Entry_Value') -> "char *":
    return _StGermain.Dictionary_Entry_Value_AsString(arg1)
Dictionary_Entry_Value_AsString = _StGermain.Dictionary_Entry_Value_AsString

def Dictionary_Entry_Value_AsBool(arg1: '_Dictionary_Entry_Value') -> "Bool":
    return _StGermain.Dictionary_Entry_Value_AsBool(arg1)
Dictionary_Entry_Value_AsBool = _StGermain.Dictionary_Entry_Value_AsBool

def Dictionary_Entry_Value_AsDictionary(arg1: '_Dictionary_Entry_Value') -> "Dictionary *":
    return _StGermain.Dictionary_Entry_Value_AsDictionary(arg1)
Dictionary_Entry_Value_AsDictionary = _StGermain.Dictionary_Entry_Value_AsDictionary

def Dictionary_Entry_Value_GetFirstElement(arg1: '_Dictionary_Entry_Value') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_GetFirstElement(arg1)
Dictionary_Entry_Value_GetFirstElement = _StGermain.Dictionary_Entry_Value_GetFirstElement

def Dictionary_Entry_Value_GetElement(arg1: '_Dictionary_Entry_Value', index: 'Index') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_GetElement(arg1, index)
Dictionary_Entry_Value_GetElement = _StGermain.Dictionary_Entry_Value_GetElement

def Dictionary_Entry_Value_GetCount(arg1: '_Dictionary_Entry_Value') -> "Index":
    return _StGermain.Dictionary_Entry_Value_GetCount(arg1)
Dictionary_Entry_Value_GetCount = _StGermain.Dictionary_Entry_Value_GetCount

def Dictionary_Entry_Value_SetEncoding(arg1: '_Dictionary_Entry_Value', encoding: 'Encoding const') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetEncoding(arg1, encoding)
Dictionary_Entry_Value_SetEncoding = _StGermain.Dictionary_Entry_Value_SetEncoding

def Dictionary_Entry_Value_GetEncoding(arg1: '_Dictionary_Entry_Value') -> "Encoding":
    return _StGermain.Dictionary_Entry_Value_GetEncoding(arg1)
Dictionary_Entry_Value_GetEncoding = _StGermain.Dictionary_Entry_Value_GetEncoding

def Dictionary_Entry_Value_SetMember(arg1: '_Dictionary_Entry_Value', name: 'Dictionary_Entry_Key', member: '_Dictionary_Entry_Value') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetMember(arg1, name, member)
Dictionary_Entry_Value_SetMember = _StGermain.Dictionary_Entry_Value_SetMember

def Dictionary_Entry_Value_SetMemberWithSource(arg1: '_Dictionary_Entry_Value', name: 'Dictionary_Entry_Key', member: '_Dictionary_Entry_Value', source: 'Dictionary_Entry_Source') -> "void":
    return _StGermain.Dictionary_Entry_Value_SetMemberWithSource(arg1, name, member, source)
Dictionary_Entry_Value_SetMemberWithSource = _StGermain.Dictionary_Entry_Value_SetMemberWithSource

def Dictionary_Entry_Value_GetMember(arg1: '_Dictionary_Entry_Value', name: 'Dictionary_Entry_Key') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_GetMember(arg1, name)
Dictionary_Entry_Value_GetMember = _StGermain.Dictionary_Entry_Value_GetMember

def Dictionary_Entry_Value_CompareFull(arg1: '_Dictionary_Entry_Value', dev: '_Dictionary_Entry_Value', strictTypeCheck: 'Bool') -> "Bool":
    return _StGermain.Dictionary_Entry_Value_CompareFull(arg1, dev, strictTypeCheck)
Dictionary_Entry_Value_CompareFull = _StGermain.Dictionary_Entry_Value_CompareFull

def Dictionary_Entry_Value_Copy(arg1: '_Dictionary_Entry_Value', deep: 'Bool') -> "Dictionary_Entry_Value *":
    return _StGermain.Dictionary_Entry_Value_Copy(arg1, deep)
Dictionary_Entry_Value_Copy = _StGermain.Dictionary_Entry_Value_Copy
class _Stg_ObjectList(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    _sizeOfSelf = _swig_property(_StGermain._Stg_ObjectList__sizeOfSelf_get, _StGermain._Stg_ObjectList__sizeOfSelf_set)
    _deleteSelf = _swig_property(_StGermain._Stg_ObjectList__deleteSelf_get, _StGermain._Stg_ObjectList__deleteSelf_set)
    type = _swig_property(_StGermain._Stg_ObjectList_type_get, _StGermain._Stg_ObjectList_type_set)
    nRefs = _swig_property(_StGermain._Stg_ObjectList_nRefs_get, _StGermain._Stg_ObjectList_nRefs_set)
    locked = _swig_property(_StGermain._Stg_ObjectList_locked_get, _StGermain._Stg_ObjectList_locked_set)
    _delete = _swig_property(_StGermain._Stg_ObjectList__delete_get, _StGermain._Stg_ObjectList__delete_set)
    _print = _swig_property(_StGermain._Stg_ObjectList__print_get, _StGermain._Stg_ObjectList__print_set)
    _copy = _swig_property(_StGermain._Stg_ObjectList__copy_get, _StGermain._Stg_ObjectList__copy_set)
    _append = _swig_property(_StGermain._Stg_ObjectList__append_get, _StGermain._Stg_ObjectList__append_set)
    _prepend = _swig_property(_StGermain._Stg_ObjectList__prepend_get, _StGermain._Stg_ObjectList__prepend_set)
    _replaceAll = _swig_property(_StGermain._Stg_ObjectList__replaceAll_get, _StGermain._Stg_ObjectList__replaceAll_set)
    _replace = _swig_property(_StGermain._Stg_ObjectList__replace_get, _StGermain._Stg_ObjectList__replace_set)
    _insertBefore = _swig_property(_StGermain._Stg_ObjectList__insertBefore_get, _StGermain._Stg_ObjectList__insertBefore_set)
    _insertAfter = _swig_property(_StGermain._Stg_ObjectList__insertAfter_get, _StGermain._Stg_ObjectList__insertAfter_set)
    _remove = _swig_property(_StGermain._Stg_ObjectList__remove_get, _StGermain._Stg_ObjectList__remove_set)
    _getIndex = _swig_property(_StGermain._Stg_ObjectList__getIndex_get, _StGermain._Stg_ObjectList__getIndex_set)
    _get = _swig_property(_StGermain._Stg_ObjectList__get_get, _StGermain._Stg_ObjectList__get_set)
    _allocMoreMemory = _swig_property(_StGermain._Stg_ObjectList__allocMoreMemory_get, _StGermain._Stg_ObjectList__allocMoreMemory_set)
    _insertAtIndex = _swig_property(_StGermain._Stg_ObjectList__insertAtIndex_get, _StGermain._Stg_ObjectList__insertAtIndex_set)
    _removeByIndex = _swig_property(_StGermain._Stg_ObjectList__removeByIndex_get, _StGermain._Stg_ObjectList__removeByIndex_set)
    _deleteAllObjects = _swig_property(_StGermain._Stg_ObjectList__deleteAllObjects_get, _StGermain._Stg_ObjectList__deleteAllObjects_set)
    data = _swig_property(_StGermain._Stg_ObjectList_data_get, _StGermain._Stg_ObjectList_data_set)
    count = _swig_property(_StGermain._Stg_ObjectList_count_get, _StGermain._Stg_ObjectList_count_set)
    _size = _swig_property(_StGermain._Stg_ObjectList__size_get, _StGermain._Stg_ObjectList__size_set)
    _delta = _swig_property(_StGermain._Stg_ObjectList__delta_get, _StGermain._Stg_ObjectList__delta_set)
    _noJournalingInCopy = _swig_property(_StGermain._Stg_ObjectList__noJournalingInCopy_get, _StGermain._Stg_ObjectList__noJournalingInCopy_set)

    def __init__(self):
        _StGermain._Stg_ObjectList_swiginit(self, _StGermain.new__Stg_ObjectList())
    __swig_destroy__ = _StGermain.delete__Stg_ObjectList
_Stg_ObjectList_swigregister = _StGermain._Stg_ObjectList_swigregister
_Stg_ObjectList_swigregister(_Stg_ObjectList)
Stg_ObjectList_Type = cvar.Stg_ObjectList_Type
DEFAULT_LIST_INITIAL_SIZE = cvar.DEFAULT_LIST_INITIAL_SIZE
DEFAULT_LIST_DELTA = cvar.DEFAULT_LIST_DELTA


def Stg_ObjectList_New2(initialSize: 'Index', delta: 'Index') -> "Stg_ObjectList *":
    return _StGermain.Stg_ObjectList_New2(initialSize, delta)
Stg_ObjectList_New2 = _StGermain.Stg_ObjectList_New2

def Stg_ObjectList_Init2(arg1: '_Stg_ObjectList', initialSize: 'Index', delta: 'Index') -> "void":
    return _StGermain.Stg_ObjectList_Init2(arg1, initialSize, delta)
Stg_ObjectList_Init2 = _StGermain.Stg_ObjectList_Init2

def _Stg_ObjectList_New(_sizeOfSelf: 'SizeT', type: 'Type', _delete: 'Stg_Class_DeleteFunction *', _print: 'Stg_Class_PrintFunction *', _copy: 'Stg_Class_CopyFunction *', _append: 'Stg_ObjectList_AppendFunction *', _prepend: 'Stg_ObjectList_PrependFunction *', _replaceAll: 'Stg_ObjectList_ReplaceAllFunction *', _replace: 'Stg_ObjectList_ReplaceFunction *', _insertBefore: 'Stg_ObjectList_InsertBeforeFunction *', _insertAfter: 'Stg_ObjectList_InsertAfterFunction *', _remove: 'Stg_ObjectList_RemoveFunction *', _getIndex: 'Stg_ObjectList_GetIndexFunction *', _get: 'Stg_ObjectList_GetFunction *', _allocMoreMemory: 'Stg_ObjectList_AllocMoreMemoryFunction *', _insertAtIndex: 'Stg_ObjectList_InsertAtIndexFunction *', _removeByIndex: 'Stg_ObjectList_RemoveByIndexFunction *', _deleteAllObjects: 'Stg_ObjectList_DeleteAllObjectsFunction *', initialSize: 'Index', delta: 'Index') -> "Stg_ObjectList *":
    return _StGermain._Stg_ObjectList_New(_sizeOfSelf, type, _delete, _print, _copy, _append, _prepend, _replaceAll, _replace, _insertBefore, _insertAfter, _remove, _getIndex, _get, _allocMoreMemory, _insertAtIndex, _removeByIndex, _deleteAllObjects, initialSize, delta)
_Stg_ObjectList_New = _StGermain._Stg_ObjectList_New

def _Stg_ObjectList_Init(arg1: '_Stg_ObjectList', initialSize: 'Index', delta: 'Index') -> "void":
    return _StGermain._Stg_ObjectList_Init(arg1, initialSize, delta)
_Stg_ObjectList_Init = _StGermain._Stg_ObjectList_Init

def _Stg_ObjectList_Delete(namedObjectList: 'void *') -> "void":
    return _StGermain._Stg_ObjectList_Delete(namedObjectList)
_Stg_ObjectList_Delete = _StGermain._Stg_ObjectList_Delete

def _Stg_ObjectList_Print(objectList: 'void *', stream: 'Stream *') -> "void":
    return _StGermain._Stg_ObjectList_Print(objectList, stream)
_Stg_ObjectList_Print = _StGermain._Stg_ObjectList_Print

def _Stg_ObjectList_Copy(namedObjectList: 'void *', dest: 'void *', deep: 'Bool', nameExt: 'Name', ptrMap: 'PtrMap *') -> "void *":
    return _StGermain._Stg_ObjectList_Copy(namedObjectList, dest, deep, nameExt, ptrMap)
_Stg_ObjectList_Copy = _StGermain._Stg_ObjectList_Copy

def Stg_ObjectList_Append(objectList: 'void *', objectPtr: 'void *') -> "Index":
    return _StGermain.Stg_ObjectList_Append(objectList, objectPtr)
Stg_ObjectList_Append = _StGermain.Stg_ObjectList_Append

def Stg_ObjectList_ClassAppend(objectList: 'void *', objectPtr: 'void *', name: 'Name') -> "Index":
    return _StGermain.Stg_ObjectList_ClassAppend(objectList, objectPtr, name)
Stg_ObjectList_ClassAppend = _StGermain.Stg_ObjectList_ClassAppend

def Stg_ObjectList_PointerAppend(objectList: 'void *', objectPtr: 'void *', name: 'Name', ptrDelete: 'Stg_ObjectAdaptor_DeletePointerFunction *', ptrPrint: 'Stg_ObjectAdaptor_PrintPointerFunction *', ptrCopy: 'Stg_ObjectAdaptor_CopyPointerFunction *') -> "Index":
    return _StGermain.Stg_ObjectList_PointerAppend(objectList, objectPtr, name, ptrDelete, ptrPrint, ptrCopy)
Stg_ObjectList_PointerAppend = _StGermain.Stg_ObjectList_PointerAppend

def Stg_ObjectList_GlobalPointerAppend(objectList: 'void *', objectPtr: 'void *', name: 'Name') -> "Index":
    return _StGermain.Stg_ObjectList_GlobalPointerAppend(objectList, objectPtr, name)
Stg_ObjectList_GlobalPointerAppend = _StGermain.Stg_ObjectList_GlobalPointerAppend

def Stg_ObjectList_Prepend(objectList: 'void *', objectPtr: 'void *') -> "Index":
    return _StGermain.Stg_ObjectList_Prepend(objectList, objectPtr)
Stg_ObjectList_Prepend = _StGermain.Stg_ObjectList_Prepend

def Stg_ObjectList_ClassPrepend(objectList: 'void *', objectPtr: 'void *', name: 'Name') -> "Index":
    return _StGermain.Stg_ObjectList_ClassPrepend(objectList, objectPtr, name)
Stg_ObjectList_ClassPrepend = _StGermain.Stg_ObjectList_ClassPrepend

def Stg_ObjectList_PointerPrepend(objectList: 'void *', objectPtr: 'void *', name: 'Name', ptrDelete: 'Stg_ObjectAdaptor_DeletePointerFunction *', ptrPrint: 'Stg_ObjectAdaptor_PrintPointerFunction *', ptrCopy: 'Stg_ObjectAdaptor_CopyPointerFunction *') -> "Index":
    return _StGermain.Stg_ObjectList_PointerPrepend(objectList, objectPtr, name, ptrDelete, ptrPrint, ptrCopy)
Stg_ObjectList_PointerPrepend = _StGermain.Stg_ObjectList_PointerPrepend

def Stg_ObjectList_GlobalPointerPrepend(objectList: 'void *', objectPtr: 'void *', name: 'Name') -> "Index":
    return _StGermain.Stg_ObjectList_GlobalPointerPrepend(objectList, objectPtr, name)
Stg_ObjectList_GlobalPointerPrepend = _StGermain.Stg_ObjectList_GlobalPointerPrepend

def Stg_ObjectList_ReplaceAll(objectList: 'void *', option: 'ReplacementOption', objectPtr: 'void *') -> "Index":
    return _StGermain.Stg_ObjectList_ReplaceAll(objectList, option, objectPtr)
Stg_ObjectList_ReplaceAll = _StGermain.Stg_ObjectList_ReplaceAll

def Stg_ObjectList_ClassReplaceAll(objectList: 'void *', option: 'ReplacementOption', objectPtr: 'void *', name: 'Name') -> "Index":
    return _StGermain.Stg_ObjectList_ClassReplaceAll(objectList, option, objectPtr, name)
Stg_ObjectList_ClassReplaceAll = _StGermain.Stg_ObjectList_ClassReplaceAll

def Stg_ObjectList_PointerReplaceAll(objectList: 'void *', option: 'ReplacementOption', objectPtr: 'void *', name: 'Name', ptrDelete: 'Stg_ObjectAdaptor_DeletePointerFunction *', ptrPrint: 'Stg_ObjectAdaptor_PrintPointerFunction *', ptrCopy: 'Stg_ObjectAdaptor_CopyPointerFunction *') -> "Index":
    return _StGermain.Stg_ObjectList_PointerReplaceAll(objectList, option, objectPtr, name, ptrDelete, ptrPrint, ptrCopy)
Stg_ObjectList_PointerReplaceAll = _StGermain.Stg_ObjectList_PointerReplaceAll

def Stg_ObjectList_GlobalPointerReplaceAll(objectList: 'void *', option: 'ReplacementOption', objectPtr: 'void *', name: 'Name') -> "Index":
    return _StGermain.Stg_ObjectList_GlobalPointerReplaceAll(objectList, option, objectPtr, name)
Stg_ObjectList_GlobalPointerReplaceAll = _StGermain.Stg_ObjectList_GlobalPointerReplaceAll

def Stg_ObjectList_Replace(objectList: 'void *', toReplace: 'Name', option: 'ReplacementOption', objectPtr: 'void *') -> "Index":
    return _StGermain.Stg_ObjectList_Replace(objectList, toReplace, option, objectPtr)
Stg_ObjectList_Replace = _StGermain.Stg_ObjectList_Replace

def Stg_ObjectList_ClassReplace(objectList: 'void *', toReplace: 'Name', option: 'ReplacementOption', objectPtr: 'void *', name: 'Name') -> "Index":
    return _StGermain.Stg_ObjectList_ClassReplace(objectList, toReplace, option, objectPtr, name)
Stg_ObjectList_ClassReplace = _StGermain.Stg_ObjectList_ClassReplace

def Stg_ObjectList_PointerReplace(objectList: 'void *', toReplace: 'Name', option: 'ReplacementOption', objectPtr: 'void *', name: 'Name', ptrDelete: 'Stg_ObjectAdaptor_DeletePointerFunction *', ptrPrint: 'Stg_ObjectAdaptor_PrintPointerFunction *', ptrCopy: 'Stg_ObjectAdaptor_CopyPointerFunction *') -> "Index":
    return _StGermain.Stg_ObjectList_PointerReplace(objectList, toReplace, option, objectPtr, name, ptrDelete, ptrPrint, ptrCopy)
Stg_ObjectList_PointerReplace = _StGermain.Stg_ObjectList_PointerReplace

def Stg_ObjectList_GlobalPointerReplace(objectList: 'void *', toReplace: 'Name', option: 'ReplacementOption', objectPtr: 'void *', name: 'Name') -> "Index":
    return _StGermain.Stg_ObjectList_GlobalPointerReplace(objectList, toReplace, option, objectPtr, name)
Stg_ObjectList_GlobalPointerReplace = _StGermain.Stg_ObjectList_GlobalPointerReplace

def Stg_ObjectList_InsertBefore(objectList: 'void *', reference: 'Name', objectPtr: 'void *') -> "Index":
    return _StGermain.Stg_ObjectList_InsertBefore(objectList, reference, objectPtr)
Stg_ObjectList_InsertBefore = _StGermain.Stg_ObjectList_InsertBefore

def Stg_ObjectList_ClassInsertBefore(objectList: 'void *', reference: 'Name', objectPtr: 'void *', name: 'Name') -> "Index":
    return _StGermain.Stg_ObjectList_ClassInsertBefore(objectList, reference, objectPtr, name)
Stg_ObjectList_ClassInsertBefore = _StGermain.Stg_ObjectList_ClassInsertBefore

def Stg_ObjectList_PointerInsertBefore(objectList: 'void *', reference: 'Name', objectPtr: 'void *', name: 'Name', ptrDelete: 'Stg_ObjectAdaptor_DeletePointerFunction *', ptrPrint: 'Stg_ObjectAdaptor_PrintPointerFunction *', ptrCopy: 'Stg_ObjectAdaptor_CopyPointerFunction *') -> "Index":
    return _StGermain.Stg_ObjectList_PointerInsertBefore(objectList, reference, objectPtr, name, ptrDelete, ptrPrint, ptrCopy)
Stg_ObjectList_PointerInsertBefore = _StGermain.Stg_ObjectList_PointerInsertBefore

def Stg_ObjectList_GlobalPointerInsertBefore(objectList: 'void *', reference: 'Name', objectPtr: 'void *', name: 'Name') -> "Index":
    return _StGermain.Stg_ObjectList_GlobalPointerInsertBefore(objectList, reference, objectPtr, name)
Stg_ObjectList_GlobalPointerInsertBefore = _StGermain.Stg_ObjectList_GlobalPointerInsertBefore

def Stg_ObjectList_InsertAtIndex(objects: 'void *', index: 'Index', objectPtr: 'void *') -> "void":
    return _StGermain.Stg_ObjectList_InsertAtIndex(objects, index, objectPtr)
Stg_ObjectList_InsertAtIndex = _StGermain.Stg_ObjectList_InsertAtIndex

def Stg_ObjectList_InsertAfter(objectList: 'void *', reference: 'Name', objectPtr: 'void *') -> "Index":
    return _StGermain.Stg_ObjectList_InsertAfter(objectList, reference, objectPtr)
Stg_ObjectList_InsertAfter = _StGermain.Stg_ObjectList_InsertAfter

def Stg_ObjectList_ClassInsertAfter(objectList: 'void *', reference: 'Name', objectPtr: 'void *', name: 'Name') -> "Index":
    return _StGermain.Stg_ObjectList_ClassInsertAfter(objectList, reference, objectPtr, name)
Stg_ObjectList_ClassInsertAfter = _StGermain.Stg_ObjectList_ClassInsertAfter

def Stg_ObjectList_PointerInsertAfter(objectList: 'void *', reference: 'Name', objectPtr: 'void *', name: 'Name', ptrDelete: 'Stg_ObjectAdaptor_DeletePointerFunction *', ptrPrint: 'Stg_ObjectAdaptor_PrintPointerFunction *', ptrCopy: 'Stg_ObjectAdaptor_CopyPointerFunction *') -> "Index":
    return _StGermain.Stg_ObjectList_PointerInsertAfter(objectList, reference, objectPtr, name, ptrDelete, ptrPrint, ptrCopy)
Stg_ObjectList_PointerInsertAfter = _StGermain.Stg_ObjectList_PointerInsertAfter

def Stg_ObjectList_GlobalPointerInsertAfter(objectList: 'void *', reference: 'Name', objectPtr: 'void *', name: 'Name') -> "Index":
    return _StGermain.Stg_ObjectList_GlobalPointerInsertAfter(objectList, reference, objectPtr, name)
Stg_ObjectList_GlobalPointerInsertAfter = _StGermain.Stg_ObjectList_GlobalPointerInsertAfter

def Stg_ObjectList_Remove(objectList: 'void *', reference: 'Name', option: 'ReplacementOption') -> "Index":
    return _StGermain.Stg_ObjectList_Remove(objectList, reference, option)
Stg_ObjectList_Remove = _StGermain.Stg_ObjectList_Remove

def Stg_ObjectList_GetIndex(objectList: 'void *', toGet: 'Name const') -> "Index":
    return _StGermain.Stg_ObjectList_GetIndex(objectList, toGet)
Stg_ObjectList_GetIndex = _StGermain.Stg_ObjectList_GetIndex

def Stg_ObjectList_Get(objectList: 'void *', toGet: 'Name const') -> "Stg_Object *":
    return _StGermain.Stg_ObjectList_Get(objectList, toGet)
Stg_ObjectList_Get = _StGermain.Stg_ObjectList_Get

def Stg_ObjectList_DeleteAllObjects(objectList: 'void *') -> "void":
    return _StGermain.Stg_ObjectList_DeleteAllObjects(objectList)
Stg_ObjectList_DeleteAllObjects = _StGermain.Stg_ObjectList_DeleteAllObjects

def Stg_ObjectList_PrintAllEntryNames(objectList: 'void *', _stream: 'void *') -> "void":
    return _StGermain.Stg_ObjectList_PrintAllEntryNames(objectList, _stream)
Stg_ObjectList_PrintAllEntryNames = _StGermain.Stg_ObjectList_PrintAllEntryNames

def Stg_ObjectList_PrintAllObjects(objectList: 'void *', _stream: 'void *') -> "void":
    return _StGermain.Stg_ObjectList_PrintAllObjects(objectList, _stream)
Stg_ObjectList_PrintAllObjects = _StGermain.Stg_ObjectList_PrintAllObjects

def Stg_ObjectList_AtFunc(objectList: 'void *', index: 'Index') -> "Stg_Object *":
    return _StGermain.Stg_ObjectList_AtFunc(objectList, index)
Stg_ObjectList_AtFunc = _StGermain.Stg_ObjectList_AtFunc

def Stg_ObjectList_CountFunc(objectList: 'void *') -> "Index":
    return _StGermain.Stg_ObjectList_CountFunc(objectList)
Stg_ObjectList_CountFunc = _StGermain.Stg_ObjectList_CountFunc

def _Stg_ObjectList_Append(objects: 'void *', objectPtr: 'void *') -> "Index":
    return _StGermain._Stg_ObjectList_Append(objects, objectPtr)
_Stg_ObjectList_Append = _StGermain._Stg_ObjectList_Append

def _Stg_ObjectList_Prepend(objects: 'void *', objectPtr: 'void *') -> "Index":
    return _StGermain._Stg_ObjectList_Prepend(objects, objectPtr)
_Stg_ObjectList_Prepend = _StGermain._Stg_ObjectList_Prepend

def _Stg_ObjectList_ReplaceAll(objects: 'void *', option: 'ReplacementOption', objectPtr: 'void *') -> "Index":
    return _StGermain._Stg_ObjectList_ReplaceAll(objects, option, objectPtr)
_Stg_ObjectList_ReplaceAll = _StGermain._Stg_ObjectList_ReplaceAll

def _Stg_ObjectList_Replace(objects: 'void *', toReplace: 'Name', option: 'ReplacementOption', objectPtr: 'void *') -> "Index":
    return _StGermain._Stg_ObjectList_Replace(objects, toReplace, option, objectPtr)
_Stg_ObjectList_Replace = _StGermain._Stg_ObjectList_Replace

def _Stg_ObjectList_InsertBefore(objects: 'void *', reference: 'Name', objectPtr: 'void *') -> "Index":
    return _StGermain._Stg_ObjectList_InsertBefore(objects, reference, objectPtr)
_Stg_ObjectList_InsertBefore = _StGermain._Stg_ObjectList_InsertBefore

def _Stg_ObjectList_InsertAfter(objects: 'void *', reference: 'Name', objectPtr: 'void *') -> "Index":
    return _StGermain._Stg_ObjectList_InsertAfter(objects, reference, objectPtr)
_Stg_ObjectList_InsertAfter = _StGermain._Stg_ObjectList_InsertAfter

def _Stg_ObjectList_Remove(namedStg_ObjectList: 'void *', reference: 'Name', option: 'ReplacementOption') -> "Index":
    return _StGermain._Stg_ObjectList_Remove(namedStg_ObjectList, reference, option)
_Stg_ObjectList_Remove = _StGermain._Stg_ObjectList_Remove

def _Stg_ObjectList_GetIndex(objects: 'void *', toGet: 'Name') -> "Index":
    return _StGermain._Stg_ObjectList_GetIndex(objects, toGet)
_Stg_ObjectList_GetIndex = _StGermain._Stg_ObjectList_GetIndex

def _Stg_ObjectList_Get(objects: 'void *', toGet: 'Name') -> "Stg_Object *":
    return _StGermain._Stg_ObjectList_Get(objects, toGet)
_Stg_ObjectList_Get = _StGermain._Stg_ObjectList_Get

def _Stg_ObjectList_DeleteAllObjects(namedObjectList: 'void *') -> "void":
    return _StGermain._Stg_ObjectList_DeleteAllObjects(namedObjectList)
_Stg_ObjectList_DeleteAllObjects = _StGermain._Stg_ObjectList_DeleteAllObjects

def _Stg_ObjectList_AllocMoreMemory(namedObjectList: 'void *') -> "void":
    return _StGermain._Stg_ObjectList_AllocMoreMemory(namedObjectList)
_Stg_ObjectList_AllocMoreMemory = _StGermain._Stg_ObjectList_AllocMoreMemory

def _Stg_ObjectList_InsertAtIndex(objects: 'void *', index: 'Index', objectPtr: 'void *') -> "void":
    return _StGermain._Stg_ObjectList_InsertAtIndex(objects, index, objectPtr)
_Stg_ObjectList_InsertAtIndex = _StGermain._Stg_ObjectList_InsertAtIndex

def _Stg_ObjectList_RemoveByIndex(objects: 'void *', index: 'Index', option: 'ReplacementOption') -> "void":
    return _StGermain._Stg_ObjectList_RemoveByIndex(objects, index, option)
_Stg_ObjectList_RemoveByIndex = _StGermain._Stg_ObjectList_RemoveByIndex

def Stg_ObjectList_PrintSimilar(objectList: 'void *', name: 'Name', _stream: 'void *', number: 'unsigned int') -> "void":
    return _StGermain.Stg_ObjectList_PrintSimilar(objectList, name, _stream, number)
Stg_ObjectList_PrintSimilar = _StGermain.Stg_ObjectList_PrintSimilar


