# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.10
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _c_arrays.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_c_arrays')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_c_arrays')
    _c_arrays = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_c_arrays', [dirname(__file__)])
        except ImportError:
            import _c_arrays
            return _c_arrays
        if fp is not None:
            try:
                _mod = imp.load_module('_c_arrays', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _c_arrays = swig_import_helper()
    del swig_import_helper
else:
    import _c_arrays
del _swig_python_version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def cdata(ptr: 'void *', nelements: 'size_t'=1) -> "SWIGCDATA":
    return _c_arrays.cdata(ptr, nelements)
cdata = _c_arrays.cdata

def memmove(data: 'void *', indata: 'void const *') -> "void":
    return _c_arrays.memmove(data, indata)
memmove = _c_arrays.memmove
class DoubleArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        _c_arrays.DoubleArray_swiginit(self, _c_arrays.new_DoubleArray(nelements))
    __swig_destroy__ = _c_arrays.delete_DoubleArray
    frompointer = staticmethod(_c_arrays.DoubleArray_frompointer)
DoubleArray.__getitem__ = new_instancemethod(_c_arrays.DoubleArray___getitem__, None, DoubleArray)
DoubleArray.__setitem__ = new_instancemethod(_c_arrays.DoubleArray___setitem__, None, DoubleArray)
DoubleArray.cast = new_instancemethod(_c_arrays.DoubleArray_cast, None, DoubleArray)
DoubleArray_swigregister = _c_arrays.DoubleArray_swigregister
DoubleArray_swigregister(DoubleArray)

def DoubleArray_frompointer(t: 'double *') -> "DoubleArray *":
    return _c_arrays.DoubleArray_frompointer(t)
DoubleArray_frompointer = _c_arrays.DoubleArray_frompointer

class FloatArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        _c_arrays.FloatArray_swiginit(self, _c_arrays.new_FloatArray(nelements))
    __swig_destroy__ = _c_arrays.delete_FloatArray
    frompointer = staticmethod(_c_arrays.FloatArray_frompointer)
FloatArray.__getitem__ = new_instancemethod(_c_arrays.FloatArray___getitem__, None, FloatArray)
FloatArray.__setitem__ = new_instancemethod(_c_arrays.FloatArray___setitem__, None, FloatArray)
FloatArray.cast = new_instancemethod(_c_arrays.FloatArray_cast, None, FloatArray)
FloatArray_swigregister = _c_arrays.FloatArray_swigregister
FloatArray_swigregister(FloatArray)

def FloatArray_frompointer(t: 'float *') -> "FloatArray *":
    return _c_arrays.FloatArray_frompointer(t)
FloatArray_frompointer = _c_arrays.FloatArray_frompointer

class IntArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        _c_arrays.IntArray_swiginit(self, _c_arrays.new_IntArray(nelements))
    __swig_destroy__ = _c_arrays.delete_IntArray
    frompointer = staticmethod(_c_arrays.IntArray_frompointer)
IntArray.__getitem__ = new_instancemethod(_c_arrays.IntArray___getitem__, None, IntArray)
IntArray.__setitem__ = new_instancemethod(_c_arrays.IntArray___setitem__, None, IntArray)
IntArray.cast = new_instancemethod(_c_arrays.IntArray_cast, None, IntArray)
IntArray_swigregister = _c_arrays.IntArray_swigregister
IntArray_swigregister(IntArray)

def IntArray_frompointer(t: 'int *') -> "IntArray *":
    return _c_arrays.IntArray_frompointer(t)
IntArray_frompointer = _c_arrays.IntArray_frompointer

class UnsignedArray(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr

    def __init__(self, nelements: 'size_t'):
        _c_arrays.UnsignedArray_swiginit(self, _c_arrays.new_UnsignedArray(nelements))
    __swig_destroy__ = _c_arrays.delete_UnsignedArray
    frompointer = staticmethod(_c_arrays.UnsignedArray_frompointer)
UnsignedArray.__getitem__ = new_instancemethod(_c_arrays.UnsignedArray___getitem__, None, UnsignedArray)
UnsignedArray.__setitem__ = new_instancemethod(_c_arrays.UnsignedArray___setitem__, None, UnsignedArray)
UnsignedArray.cast = new_instancemethod(_c_arrays.UnsignedArray_cast, None, UnsignedArray)
UnsignedArray_swigregister = _c_arrays.UnsignedArray_swigregister
UnsignedArray_swigregister(UnsignedArray)

def UnsignedArray_frompointer(t: 'unsigned int *') -> "UnsignedArray *":
    return _c_arrays.UnsignedArray_frompointer(t)
UnsignedArray_frompointer = _c_arrays.UnsignedArray_frompointer



