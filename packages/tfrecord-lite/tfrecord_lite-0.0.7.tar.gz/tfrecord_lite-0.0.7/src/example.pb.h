/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9 at Wed Mar 28 20:46:46 2018. */

#ifndef PB_TENSORFLOW_EXAMPLE_PB_H_INCLUDED
#define PB_TENSORFLOW_EXAMPLE_PB_H_INCLUDED
#include "pb.h"

#include "feature.pb.h"

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _tensorflow_Example {
    tensorflow_Features features;
/* @@protoc_insertion_point(struct:tensorflow_Example) */
} tensorflow_Example;

typedef struct _tensorflow_SequenceExample {
    tensorflow_Features context;
    tensorflow_FeatureLists feature_lists;
/* @@protoc_insertion_point(struct:tensorflow_SequenceExample) */
} tensorflow_SequenceExample;

/* Default values for struct fields */

/* Initializer values for message structs */
#define tensorflow_Example_init_default          {tensorflow_Features_init_default}
#define tensorflow_SequenceExample_init_default  {tensorflow_Features_init_default, tensorflow_FeatureLists_init_default}
#define tensorflow_Example_init_zero             {tensorflow_Features_init_zero}
#define tensorflow_SequenceExample_init_zero     {tensorflow_Features_init_zero, tensorflow_FeatureLists_init_zero}

/* Field tags (for use in manual encoding/decoding) */
#define tensorflow_Example_features_tag          1
#define tensorflow_SequenceExample_context_tag   1
#define tensorflow_SequenceExample_feature_lists_tag 2

/* Struct field encoding specification for nanopb */
extern const pb_field_t tensorflow_Example_fields[2];
extern const pb_field_t tensorflow_SequenceExample_fields[3];

/* Maximum encoded size of messages (where known) */
#define tensorflow_Example_size                  (6 + tensorflow_Features_size)
#define tensorflow_SequenceExample_size          (12 + tensorflow_Features_size + tensorflow_FeatureLists_size)

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define EXAMPLE_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
