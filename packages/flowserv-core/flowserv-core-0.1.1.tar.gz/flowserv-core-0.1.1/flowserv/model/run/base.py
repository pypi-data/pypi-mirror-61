# This file is part of the Reproducible and Reusable Data Analysis Workflow
# Server (flowServ).
#
# Copyright (C) [2019-2020] NYU.
#
# flowServ is free software; you can redistribute it and/or modify it under the
# terms of the MIT License; see LICENSE file for more details.

"""Basic information about workflow runs."""

from flowserv.model.workflow.resource import ResourceSet

import flowserv.model.workflow.state as st


class RunDescriptor(object):
    """The run descriptor contains the basic identifier and state information
    for a workflow run.
    """
    def __init__(
        self, identifier, workflow_id, group_id, state_type_id, created_at
    ):
        """Initialize the object properties.

        Parameters
        ----------
        identifier: string
            Unique run identifier
        workflow_id: string
            Unique workflow identifier
        group_id: string
            Unique identifier of the workflow group
        state: flowserv.model.workflow.state.WorkflowState
            Current workflow run state
        created_at: datetime.datetime
            Timestamp for run creation
        """
        self.identifier = identifier
        self.workflow_id = workflow_id
        self.group_id = group_id
        self.state_type_id = state_type_id
        self.created_at = created_at

    def is_active(self):
        """A run is in active state if it is either pending or running.

        Returns
        --------
        bool
        """
        return self.state_type_id in st.ACTIVE_STATES

    def is_canceled(self):
        """Returns True if the workflow state is of type CANCELED.

        Returns
        -------
        bool
        """
        return self.state_type_id == st.STATE_CANCELED

    def is_error(self):
        """Returns True if the workflow state is of type ERROR.

        Returns
        -------
        bool
        """
        return self.state_type_id == st.STATE_ERROR

    def is_pending(self):
        """Returns True if the workflow state is of type PENDING.

        Returns
        -------
        bool
        """
        return self.state_type_id == st.STATE_PENDING

    def is_running(self):
        """Returns True if the workflow state is of type RUNNING.

        Returns
        -------
        bool
        """
        return self.state_type_id == st.STATE_RUNNING

    def is_success(self):
        """Returns True if the workflow state is of type SUCCESS.

        Returns
        -------
        bool
        """
        return self.state_type_id == st.STATE_SUCCESS


class RunHandle(RunDescriptor):
    """The run handle provides access to the run state, error messages, and any
    resource files that have been generated by successful workflow runs.
    """
    def __init__(
        self, identifier, workflow_id, group_id, state, arguments, rundir
    ):
        """Initialize the object properties.

        Parameters
        ----------
        identifier: string
            Unique run identifier
        workflow_id: string
            Unique workflow identifier
        group_id: string
            Unique identifier of the workflow group
        state: flowserv.model.workflow.state.WorkflowState
            Current workflow run state
        arguments: dict()
            Dictionary of user-provided argument values for the run
        rundir: string
            Path to the directory that contains run-related files
        """
        super(RunHandle, self).__init__(
            identifier=identifier,
            workflow_id=workflow_id,
            group_id=group_id,
            state_type_id=state.type_id,
            created_at=state.created_at
        )
        self.state = state
        self.arguments = arguments
        self.rundir = rundir

    @property
    def messages(self):
        """Shortcut to access the list of error messages that are associated
        with a workflow run that is in canceled or error state.

        Returns
        -------
        flowserv.model.workflow.resource.ResourceSet
        """
        if not self.is_canceled() and not self.is_error():
            return list()
        else:
            return self.state.messages

    @property
    def resources(self):
        """Shortcut to access the set of resources that were generated by a
        successful workflow run.

        Returns
        -------
        flowserv.model.workflow.resource.ResourceSet
        """
        if not self.is_success():
            return ResourceSet()
        else:
            return self.state.resources

    def update_state(self, state):
        """Get a copy of the run handle with an update state.

        Parameters
        ----------
        state: flowserv.model.workflow.state.WorkflowState
            New run state object

        Returns
        -------
        flowserv.model.run.base.RunHandle
        """
        return RunHandle(
            identifier=self.identifier,
            workflow_id=self.workflow_id,
            group_id=self.group_id,
            state=state,
            arguments=self.arguments,
            rundir=self.rundir
        )
