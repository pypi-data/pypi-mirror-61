# This file is part of the Reproducible and Reusable Data Analysis Workflow
# Server (flowServ).
#
# Copyright (C) [2019-2020] NYU.
#
# flowServ is free software; you can redistribute it and/or modify it under the
# terms of the MIT License; see LICENSE file for more details.

"""The reproducible benchmark engine uses a simple file store to maintain files
that are uploaded by users as part of the inputs to workflow runs.

Uploaded files are currently stored on disk. The file store maintains uploaded
files within sub-folders of a base folder. Each file has a unique identifier
that is generated by the system. The file handle is a wrapper around the local
file to provide access to the file.
"""

from datetime import datetime
import mimetypes
import os
import shutil

import flowserv.core.error as err
import flowserv.core.util as util


"""Set the default identifier generator."""
get_id = util.get_unique_identifier


class FileDescriptor(object):
    """Descriptor for an uploaded file. Contains the file identifier, name,
    and the timestamp when a file was created (e.g., uploaded).
    """
    def __init__(self, identifier, name, created_at):
        """Initialize the object properties.

        Parameters
        ----------
        identifier: string
            Unique file identifier
        name: string
            Name of the uploaded file
        created_at: datetime.datetime
            Timestamp of file creation (in UTC timezone)
        """
        self.identifier = identifier if identifier is not None else get_id()
        self.name = name
        self.created_at = created_at

    def created_at_local_time(self):
        """Get string representation of the creation timestamp in the local
        timezone.

        Returns
        -------
        string
        """
        return util.to_localstr(date=self.created_at)


class FileHandle(FileDescriptor):
    """Handle for files that are managed by the file store. Each file has a
    unique identifier and a name. Files are maintaind in folders on the file
    system.
    """
    def __init__(self, filename, identifier=None, name=None, mimetype=None):
        """Initialize the file identifier, the (full) file path, and the file
        name. The file path is mandatory.

        Raises an error if filename does not reference an existing file or
        directory.

        Parameters
        ----------
        filename: string
            (Absolute) Path to file or directory on disk
        identifier: string, optional
            Unique file identifier
        name: string, optional
            Base name of the file
        mimetype: string, optional
            File mime-type (if known)

        Raises
        ------
        flowserv.core.error.UnknownFileError
        """
        try:
            ts = os.path.getmtime(filename)
            super(FileHandle, self).__init__(
                identifier=identifier,
                name=name if name is not None else os.path.basename(filename),
                created_at=datetime.utcfromtimestamp(ts)
            )
        except (IOError, OSError):
            raise err.UnknownFileError(filename)
        self.path = filename
        # Guess the mime-type from the file name if not given
        if mimetype is not None:
            self.mimetype = mimetype
        elif name is not None:
            self.mimetype, _ = mimetypes.guess_type(url=name)
        elif os.path.isfile(self.path):
            self.mimetype, _ = mimetypes.guess_type(url=self.path)
        else:
            self.mimetype = None

    def delete(self):
        """Remove the associated file or directory on disk (if it exists)."""
        if os.path.isfile(self.path):
            os.remove(self.path)
        elif os.path.isdir(self.path):
            shutil.rmtree(self.path)

    @property
    def filename(self):
        """Alternative property to access the file path.

        Returns
        -------
        string
        """
        return self.path

    @property
    def last_modified(self):
        """Last modification timestamp for the file.

        Returns
        -------
        datetime
        """
        datetime.utcfromtimestamp(os.path.getmtime(self.path))

    @property
    def size(self):
        """Get size of file in bytes.

        Returns
        -------
        int
        """
        return os.stat(self.path).st_size


class InputFile(FileHandle):
    """The InputFile represents the value for a template parameter of type
    'file'. This class extends the handle for an uploaded file with an optional
    target path that the user may have provided.
    """
    def __init__(self, f_handle, target_path=None):
        """Initialize the object properties.

        Parameters
        ----------
        f_handle: flowserv.core.files.FileHandle
        target_path: string, optional
        """
        super(InputFile, self).__init__(
            identifier=f_handle.identifier,
            filename=f_handle.path,
            name=f_handle.name,
            mimetype=f_handle.mimetype
        )
        self.target_path = target_path

    def source(self):
        """Shortcut to get the source path for the file.

        Returns
        -------
        string
        """
        return self.path

    def target(self):
        """Shortcut to get the target path for the file.

        Returns
        -------
        string
        """
        if self.target_path is not None:
            return self.target_path
        else:
            return self.name
