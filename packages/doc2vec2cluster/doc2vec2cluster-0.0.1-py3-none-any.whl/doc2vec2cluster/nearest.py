# AUTOGENERATED! DO NOT EDIT! File to edit: doc2vec.ipynb (unless otherwise specified).

__all__ = ['get_text', 'build_model', 'get_embedding', 'get_center', 'nearest_point_df', 'get_nearest']

# Cell
import numpy as np
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.metrics import pairwise_distances_argmin_min, pairwise_distances

# Cell
def get_text(pandas_series):
    text_list = list(pandas_series)
    text = pd.Series(text_list).apply(lambda x: " ".join(jieba.cut(x))).str.split(" ").tolist()
    return text

# Cell
from gensim.test.utils import common_texts
from gensim.models.doc2vec import Doc2Vec, TaggedDocument

def build_model(text, vector_size=5, window=2, min_count=1, workers=4):

    documents = [TaggedDocument(doc, [i]) for i, doc in enumerate(text)]
    model = Doc2Vec(documents, vector_size=vector_size, window=window, min_count=min_count, workers=workers)

    return documents, model

# Cell
def get_embedding(model, text):

    doc_embed = [model.infer_vector(doc) for doc in text]
    doc_embed = np.array(doc_embed)

    return doc_embed

# Cell
def get_center(doc_embed):
    km = KMeans(n_clusters=1).fit(doc_embed)

    return km.cluster_centers_
# only one cluster

# Cell
def nearest_point_df(doc_embed, center):
    model_df = pd.DataFrame(pairwise_distances(doc_embed,center))

    return model_df

# Cell
def get_nearest(df, model_df,nsmallest=10):
    output_df = pd.concat([df, model_df], axis = 1)
    output_df.columns = ['comment', 'distance']
    min_df = output_df['distance'].nsmallest(10).reset_index()
    nearest_df = pd.merge(output_df,min_df, on = ['distance'], how='inner').sort_values(['distance'])
    return nearest_df