# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from harix.rdk.proto.vision import vision_pb2 as vision_dot_vision__pb2


class VisionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Recognize = channel.unary_unary(
        '/skill.vision.Vision/Recognize',
        request_serializer=vision_dot_vision__pb2.ImageRequest.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.ImageResponse.FromString,
        )
    self.StreamingRecognize = channel.stream_unary(
        '/skill.vision.Vision/StreamingRecognize',
        request_serializer=vision_dot_vision__pb2.ImageRequest.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.ImageResponse.FromString,
        )
    self.DetectOcr = channel.unary_unary(
        '/skill.vision.Vision/DetectOcr',
        request_serializer=vision_dot_vision__pb2.SingleImage.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.OcrResponse.FromString,
        )
    self.DetectMoney = channel.unary_unary(
        '/skill.vision.Vision/DetectMoney',
        request_serializer=vision_dot_vision__pb2.SingleImage.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.MoneyResponse.FromString,
        )
    self.DetectCarPlate = channel.unary_unary(
        '/skill.vision.Vision/DetectCarPlate',
        request_serializer=vision_dot_vision__pb2.SingleImage.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.CarPlateResponse.FromString,
        )
    self.DetectObject = channel.unary_unary(
        '/skill.vision.Vision/DetectObject',
        request_serializer=vision_dot_vision__pb2.SingleImage.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.ObjectResponse.FromString,
        )
    self.DetectFace = channel.unary_unary(
        '/skill.vision.Vision/DetectFace',
        request_serializer=vision_dot_vision__pb2.FaceImage.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.FaceResponse.FromString,
        )
    self.DetectFaceAttr = channel.unary_unary(
        '/skill.vision.Vision/DetectFaceAttr',
        request_serializer=vision_dot_vision__pb2.SingleImage.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.FaceAttrResponse.FromString,
        )
    self.DetectCaption = channel.unary_unary(
        '/skill.vision.Vision/DetectCaption',
        request_serializer=vision_dot_vision__pb2.SingleImage.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.CaptionResponse.FromString,
        )
    self.DetectClassify = channel.unary_unary(
        '/skill.vision.Vision/DetectClassify',
        request_serializer=vision_dot_vision__pb2.SingleImage.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.ClassifyResponse.FromString,
        )
    self.DetectFall = channel.unary_unary(
        '/skill.vision.Vision/DetectFall',
        request_serializer=vision_dot_vision__pb2.SingleImage.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.FallResponse.FromString,
        )
    self.DetectCompare = channel.unary_unary(
        '/skill.vision.Vision/DetectCompare',
        request_serializer=vision_dot_vision__pb2.MultiImage.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.CompareResponse.FromString,
        )
    self.DetectVending = channel.unary_unary(
        '/skill.vision.Vision/DetectVending',
        request_serializer=vision_dot_vision__pb2.MultiImage.SerializeToString,
        response_deserializer=vision_dot_vision__pb2.VendingResponse.FromString,
        )


class VisionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def Recognize(self, request, context):
    """sync call for result, use by service-app usually
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def StreamingRecognize(self, request_iterator, context):
    """sync call , use by rcu or other end point
    receive multi-face or other
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DetectOcr(self, request, context):
    """return result directly with do nothing else
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DetectMoney(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DetectCarPlate(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DetectObject(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DetectFace(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DetectFaceAttr(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DetectCaption(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DetectClassify(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DetectFall(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DetectCompare(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def DetectVending(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_VisionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Recognize': grpc.unary_unary_rpc_method_handler(
          servicer.Recognize,
          request_deserializer=vision_dot_vision__pb2.ImageRequest.FromString,
          response_serializer=vision_dot_vision__pb2.ImageResponse.SerializeToString,
      ),
      'StreamingRecognize': grpc.stream_unary_rpc_method_handler(
          servicer.StreamingRecognize,
          request_deserializer=vision_dot_vision__pb2.ImageRequest.FromString,
          response_serializer=vision_dot_vision__pb2.ImageResponse.SerializeToString,
      ),
      'DetectOcr': grpc.unary_unary_rpc_method_handler(
          servicer.DetectOcr,
          request_deserializer=vision_dot_vision__pb2.SingleImage.FromString,
          response_serializer=vision_dot_vision__pb2.OcrResponse.SerializeToString,
      ),
      'DetectMoney': grpc.unary_unary_rpc_method_handler(
          servicer.DetectMoney,
          request_deserializer=vision_dot_vision__pb2.SingleImage.FromString,
          response_serializer=vision_dot_vision__pb2.MoneyResponse.SerializeToString,
      ),
      'DetectCarPlate': grpc.unary_unary_rpc_method_handler(
          servicer.DetectCarPlate,
          request_deserializer=vision_dot_vision__pb2.SingleImage.FromString,
          response_serializer=vision_dot_vision__pb2.CarPlateResponse.SerializeToString,
      ),
      'DetectObject': grpc.unary_unary_rpc_method_handler(
          servicer.DetectObject,
          request_deserializer=vision_dot_vision__pb2.SingleImage.FromString,
          response_serializer=vision_dot_vision__pb2.ObjectResponse.SerializeToString,
      ),
      'DetectFace': grpc.unary_unary_rpc_method_handler(
          servicer.DetectFace,
          request_deserializer=vision_dot_vision__pb2.FaceImage.FromString,
          response_serializer=vision_dot_vision__pb2.FaceResponse.SerializeToString,
      ),
      'DetectFaceAttr': grpc.unary_unary_rpc_method_handler(
          servicer.DetectFaceAttr,
          request_deserializer=vision_dot_vision__pb2.SingleImage.FromString,
          response_serializer=vision_dot_vision__pb2.FaceAttrResponse.SerializeToString,
      ),
      'DetectCaption': grpc.unary_unary_rpc_method_handler(
          servicer.DetectCaption,
          request_deserializer=vision_dot_vision__pb2.SingleImage.FromString,
          response_serializer=vision_dot_vision__pb2.CaptionResponse.SerializeToString,
      ),
      'DetectClassify': grpc.unary_unary_rpc_method_handler(
          servicer.DetectClassify,
          request_deserializer=vision_dot_vision__pb2.SingleImage.FromString,
          response_serializer=vision_dot_vision__pb2.ClassifyResponse.SerializeToString,
      ),
      'DetectFall': grpc.unary_unary_rpc_method_handler(
          servicer.DetectFall,
          request_deserializer=vision_dot_vision__pb2.SingleImage.FromString,
          response_serializer=vision_dot_vision__pb2.FallResponse.SerializeToString,
      ),
      'DetectCompare': grpc.unary_unary_rpc_method_handler(
          servicer.DetectCompare,
          request_deserializer=vision_dot_vision__pb2.MultiImage.FromString,
          response_serializer=vision_dot_vision__pb2.CompareResponse.SerializeToString,
      ),
      'DetectVending': grpc.unary_unary_rpc_method_handler(
          servicer.DetectVending,
          request_deserializer=vision_dot_vision__pb2.MultiImage.FromString,
          response_serializer=vision_dot_vision__pb2.VendingResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'skill.vision.Vision', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
