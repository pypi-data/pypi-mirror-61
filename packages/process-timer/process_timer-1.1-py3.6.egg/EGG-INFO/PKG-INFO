Metadata-Version: 1.1
Name: process-timer
Version: 1.1
Summary: Celery Timeout decorator
Home-page: https://github.com/sprajosh/process-timer
Author: Siddharth Prajosh
Author-email: sprajosh@gmail.com
License: UNKNOWN
Description: Process Timer
        =================
        
        Installation
        ------------
        
        From source code:
        
        ::
        
            python setup.py install
        
        From pypi:
        
        ::
        
            pip install process-timer
        
        Usage
        -----
        
        ::
        
            import time
            from process_timer import timeout
        
            @timeout(5)
            def mytest():
                print("Start")
                for i in range(1,10):
                    time.sleep(1)
                    print("{i} seconds have passed")
        
            if __name__ == '__main__':
                mytest()
        
        Specify an alternate exception to raise on timeout:
        
        ::
        
            import time
            from process_timer import timeout
        
            @timeout(5, timeout_exception=StopIteration)
            def mytest():
                print("Start")
                for i in range(1,10):
                    time.sleep(1)
                    print(f"{i} seconds have passed")
        
            if __name__ == '__main__':
                mytest()
        
        Multithreading
        --------------
        
        By default, timeout-decorator uses signals to limit the execution time
        of the given function. This appoach does not work if your function is
        executed not in a main thread (for example if it's a worker thread of
        the web application). There is alternative timeout strategy for this
        case - by using multiprocessing. To use it, just pass
        ``use_signals=False`` to the timeout decorator function:
        
        ::
        
            import time
            from process_timer import timeout
            import os
        
            @timeout(5, use_signals=False)
            def mytest():
                print("Start")
                for i in range(1,10):
                    os.system('sleep 1')
                    print(f"{i} seconds have passed")
        
            if __name__ == '__main__':
                mytest()
        
        .. warning::
            Make sure that in case of multiprocessing strategy for timeout, your function does not return objects which cannot
            be pickled, otherwise it will fail at marshalling it between master and child processes.
        
        
        Acknowledgement
        ---------------
        
        Derived from
        Derived from https://github.com/pnpnpn/timeout-decorator to make it work in processes are not allowed to spawn it's child processes. Ex: celery tasks
        http://www.saltycrane.com/blog/2010/04/using-python-timeout-decorator-uploading-s3/
        and https://code.google.com/p/verse-quiz/source/browse/trunk/timeout.py
        
        Contribute
        ----------
        
        I would love for you to fork and send me pull request for this project.
        Please contribute.
        
        License
        -------
        
        This software is licensed under the `MIT license <http://en.wikipedia.org/wiki/MIT_License>`_
        
        See `License file <https://github.com/sprajosh/process-timer/blob/master/LICENSE.txt>`_
        
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Natural Language :: English
Classifier: Operating System :: OS Independent
Classifier: Programming Language :: Python
Classifier: Topic :: Software Development :: Libraries :: Python Modules
