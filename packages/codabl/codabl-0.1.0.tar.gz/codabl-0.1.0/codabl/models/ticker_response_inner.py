# coding: utf-8

"""
    Codabl Community API

    The Codabl API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TickerResponseInner(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_updated': 'date',
        'name': 'str',
        'percent_change24h_usd': 'float',
        'price_btc': 'float',
        'price_usd': 'float',
        'symbol': 'str'
    }

    attribute_map = {
        'last_updated': 'lastUpdated',
        'name': 'name',
        'percent_change24h_usd': 'percentChange24hUsd',
        'price_btc': 'priceBtc',
        'price_usd': 'priceUsd',
        'symbol': 'symbol'
    }

    def __init__(self, last_updated=None, name=None, percent_change24h_usd=None, price_btc=None, price_usd=None, symbol=None):  # noqa: E501
        """TickerResponseInner - a model defined in Swagger"""  # noqa: E501

        self._last_updated = None
        self._name = None
        self._percent_change24h_usd = None
        self._price_btc = None
        self._price_usd = None
        self._symbol = None
        self.discriminator = None

        if last_updated is not None:
            self.last_updated = last_updated
        if name is not None:
            self.name = name
        if percent_change24h_usd is not None:
            self.percent_change24h_usd = percent_change24h_usd
        if price_btc is not None:
            self.price_btc = price_btc
        if price_usd is not None:
            self.price_usd = price_usd
        if symbol is not None:
            self.symbol = symbol

    @property
    def last_updated(self):
        """Gets the last_updated of this TickerResponseInner.  # noqa: E501

        Closing price quote of the time frame with two decimal points  # noqa: E501

        :return: The last_updated of this TickerResponseInner.  # noqa: E501
        :rtype: date
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this TickerResponseInner.

        Closing price quote of the time frame with two decimal points  # noqa: E501

        :param last_updated: The last_updated of this TickerResponseInner.  # noqa: E501
        :type: date
        """

        self._last_updated = last_updated

    @property
    def name(self):
        """Gets the name of this TickerResponseInner.  # noqa: E501

        Highest price of the time frame with two decimal points  # noqa: E501

        :return: The name of this TickerResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TickerResponseInner.

        Highest price of the time frame with two decimal points  # noqa: E501

        :param name: The name of this TickerResponseInner.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def percent_change24h_usd(self):
        """Gets the percent_change24h_usd of this TickerResponseInner.  # noqa: E501

        Percetange change in the last 24 hours  # noqa: E501

        :return: The percent_change24h_usd of this TickerResponseInner.  # noqa: E501
        :rtype: float
        """
        return self._percent_change24h_usd

    @percent_change24h_usd.setter
    def percent_change24h_usd(self, percent_change24h_usd):
        """Sets the percent_change24h_usd of this TickerResponseInner.

        Percetange change in the last 24 hours  # noqa: E501

        :param percent_change24h_usd: The percent_change24h_usd of this TickerResponseInner.  # noqa: E501
        :type: float
        """

        self._percent_change24h_usd = percent_change24h_usd

    @property
    def price_btc(self):
        """Gets the price_btc of this TickerResponseInner.  # noqa: E501

        Opening price quote of the time frame with two decimal points  # noqa: E501

        :return: The price_btc of this TickerResponseInner.  # noqa: E501
        :rtype: float
        """
        return self._price_btc

    @price_btc.setter
    def price_btc(self, price_btc):
        """Sets the price_btc of this TickerResponseInner.

        Opening price quote of the time frame with two decimal points  # noqa: E501

        :param price_btc: The price_btc of this TickerResponseInner.  # noqa: E501
        :type: float
        """

        self._price_btc = price_btc

    @property
    def price_usd(self):
        """Gets the price_usd of this TickerResponseInner.  # noqa: E501

        Timestamp of the beggining of the frame  # noqa: E501

        :return: The price_usd of this TickerResponseInner.  # noqa: E501
        :rtype: float
        """
        return self._price_usd

    @price_usd.setter
    def price_usd(self, price_usd):
        """Sets the price_usd of this TickerResponseInner.

        Timestamp of the beggining of the frame  # noqa: E501

        :param price_usd: The price_usd of this TickerResponseInner.  # noqa: E501
        :type: float
        """

        self._price_usd = price_usd

    @property
    def symbol(self):
        """Gets the symbol of this TickerResponseInner.  # noqa: E501

        Volume of currency exchanged in the time frame with two decimal points  # noqa: E501

        :return: The symbol of this TickerResponseInner.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this TickerResponseInner.

        Volume of currency exchanged in the time frame with two decimal points  # noqa: E501

        :param symbol: The symbol of this TickerResponseInner.  # noqa: E501
        :type: str
        """

        self._symbol = symbol

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TickerResponseInner, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TickerResponseInner):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
