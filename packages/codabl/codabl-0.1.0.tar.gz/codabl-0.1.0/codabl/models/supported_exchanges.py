# coding: utf-8

"""
    Codabl Community API

    The Codabl API is a collection of analytics tools and data integrations made for blockchain developers. In particular we offer Natural Language Processing and Anomaly detection algorithms that have been fine tune to understand text data and time series in the domain speficic setting of cryptocurrency and blockchain technology. This technology is intended to be use as building blocks to bigger applications, we offer examples on how to use them for Trading Backtesting and Smart Contract anomaly monitoring.  # noqa: E501

    OpenAPI spec version: 0.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SupportedExchanges(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'best_case_fee': 'float',
        'worst_case_fee': 'float',
        'exchange': 'str'
    }

    attribute_map = {
        'best_case_fee': 'bestCaseFee',
        'worst_case_fee': 'worstCaseFee',
        'exchange': 'exchange'
    }

    def __init__(self, best_case_fee=None, worst_case_fee=None, exchange=None):  # noqa: E501
        """SupportedExchanges - a model defined in Swagger"""  # noqa: E501

        self._best_case_fee = None
        self._worst_case_fee = None
        self._exchange = None
        self.discriminator = None

        if best_case_fee is not None:
            self.best_case_fee = best_case_fee
        if worst_case_fee is not None:
            self.worst_case_fee = worst_case_fee
        if exchange is not None:
            self.exchange = exchange

    @property
    def best_case_fee(self):
        """Gets the best_case_fee of this SupportedExchanges.  # noqa: E501

        Best fee scenario offered by the market  # noqa: E501

        :return: The best_case_fee of this SupportedExchanges.  # noqa: E501
        :rtype: float
        """
        return self._best_case_fee

    @best_case_fee.setter
    def best_case_fee(self, best_case_fee):
        """Sets the best_case_fee of this SupportedExchanges.

        Best fee scenario offered by the market  # noqa: E501

        :param best_case_fee: The best_case_fee of this SupportedExchanges.  # noqa: E501
        :type: float
        """

        self._best_case_fee = best_case_fee

    @property
    def worst_case_fee(self):
        """Gets the worst_case_fee of this SupportedExchanges.  # noqa: E501

        Limit depth to extract from the orderbook  # noqa: E501

        :return: The worst_case_fee of this SupportedExchanges.  # noqa: E501
        :rtype: float
        """
        return self._worst_case_fee

    @worst_case_fee.setter
    def worst_case_fee(self, worst_case_fee):
        """Sets the worst_case_fee of this SupportedExchanges.

        Limit depth to extract from the orderbook  # noqa: E501

        :param worst_case_fee: The worst_case_fee of this SupportedExchanges.  # noqa: E501
        :type: float
        """

        self._worst_case_fee = worst_case_fee

    @property
    def exchange(self):
        """Gets the exchange of this SupportedExchanges.  # noqa: E501

        Name of the data format availables (standard)  # noqa: E501

        :return: The exchange of this SupportedExchanges.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this SupportedExchanges.

        Name of the data format availables (standard)  # noqa: E501

        :param exchange: The exchange of this SupportedExchanges.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SupportedExchanges, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SupportedExchanges):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
