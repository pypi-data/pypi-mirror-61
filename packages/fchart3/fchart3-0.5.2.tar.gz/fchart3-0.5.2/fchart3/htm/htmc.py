# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_htmc', [dirname(__file__)])
        except ImportError:
            import _htmc
            return _htmc
        if fp is not None:
            try:
                _mod = imp.load_module('_htmc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _htmc = swig_import_helper()
    del swig_import_helper
else:
    import _htmc
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0


class PAIR_INFO(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAIR_INFO, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PAIR_INFO, name)
    __repr__ = _swig_repr
    __swig_setmethods__["i1"] = _htmc.PAIR_INFO_i1_set
    __swig_getmethods__["i1"] = _htmc.PAIR_INFO_i1_get
    if _newclass:
        i1 = _swig_property(_htmc.PAIR_INFO_i1_get, _htmc.PAIR_INFO_i1_set)
    __swig_setmethods__["i2"] = _htmc.PAIR_INFO_i2_set
    __swig_getmethods__["i2"] = _htmc.PAIR_INFO_i2_get
    if _newclass:
        i2 = _swig_property(_htmc.PAIR_INFO_i2_get, _htmc.PAIR_INFO_i2_set)
    __swig_setmethods__["d12"] = _htmc.PAIR_INFO_d12_set
    __swig_getmethods__["d12"] = _htmc.PAIR_INFO_d12_get
    if _newclass:
        d12 = _swig_property(_htmc.PAIR_INFO_d12_get, _htmc.PAIR_INFO_d12_set)

    def __init__(self):
        this = _htmc.new_PAIR_INFO()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _htmc.delete_PAIR_INFO
    __del__ = lambda self: None
PAIR_INFO_swigregister = _htmc.PAIR_INFO_swigregister
PAIR_INFO_swigregister(PAIR_INFO)

class PAIR_INFO_ORDERING(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PAIR_INFO_ORDERING, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PAIR_INFO_ORDERING, name)
    __repr__ = _swig_repr

    def __call__(self, pi1, pi2):
        return _htmc.PAIR_INFO_ORDERING___call__(self, pi1, pi2)

    def __init__(self):
        this = _htmc.new_PAIR_INFO_ORDERING()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _htmc.delete_PAIR_INFO_ORDERING
    __del__ = lambda self: None
PAIR_INFO_ORDERING_swigregister = _htmc.PAIR_INFO_ORDERING_swigregister
PAIR_INFO_ORDERING_swigregister(PAIR_INFO_ORDERING)

class HTMC(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HTMC, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HTMC, name)
    __repr__ = _swig_repr

    def __init__(self, depth=10):
        this = _htmc.new_HTMC(depth)
        try:
            self.this.append(this)
        except Exception:
            self.this = this

    def init(self, depth=10):
        return _htmc.HTMC_init(self, depth)
    __swig_destroy__ = _htmc.delete_HTMC
    __del__ = lambda self: None

    def lookup_id(self, ra_array, dec_array, htm_ids_array):
        return _htmc.HTMC_lookup_id(self, ra_array, dec_array, htm_ids_array)

    def intersect(self, ra, dec, radius, inclusive):
        return _htmc.HTMC_intersect(self, ra, dec, radius, inclusive)

    def cbincount(self, rmin, rmax, nbin_object, ra1_array, dec1_array, ra2_array, dec2_array, htmrev2_array, minmax_ids_array, scale_object=None, verbose=0):
        return _htmc.HTMC_cbincount(self, rmin, rmax, nbin_object, ra1_array, dec1_array, ra2_array, dec2_array, htmrev2_array, minmax_ids_array, scale_object, verbose)

    def get_depth(self):
        return _htmc.HTMC_get_depth(self)
HTMC_swigregister = _htmc.HTMC_swigregister
HTMC_swigregister(HTMC)

class Matcher(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Matcher, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Matcher, name)
    __repr__ = _swig_repr

    def __init__(self, depth, ra, dec):
        this = _htmc.new_Matcher(depth, ra, dec)
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _htmc.delete_Matcher
    __del__ = lambda self: None

    def get_depth(self):
        return _htmc.Matcher_get_depth(self)

    def match(self, radius_array, ra_array, dec_array, maxmatch, filename):
        return _htmc.Matcher_match(self, radius_array, ra_array, dec_array, maxmatch, filename)
Matcher_swigregister = _htmc.Matcher_swigregister
Matcher_swigregister(Matcher)

# This file is compatible with both classic and new-style classes.


