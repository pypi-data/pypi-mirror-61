# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mindbody_api.api_client import ApiClient


class AppointmentApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def appointment_add_apppointment(self, request, site_id, version, **kwargs):  # noqa: E501
        """Book a new appointment.  # noqa: E501

        To book an appointment, you must use a location ID, staff ID, client ID, session type ID, and the `StartDateTime` of the appointment. You can get most of this information using `GET BookableItems`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_add_apppointment(request, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAppointmentRequest request: (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: AddAppointmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appointment_add_apppointment_with_http_info(request, site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.appointment_add_apppointment_with_http_info(request, site_id, version, **kwargs)  # noqa: E501
            return data

    def appointment_add_apppointment_with_http_info(self, request, site_id, version, **kwargs):  # noqa: E501
        """Book a new appointment.  # noqa: E501

        To book an appointment, you must use a location ID, staff ID, client ID, session type ID, and the `StartDateTime` of the appointment. You can get most of this information using `GET BookableItems`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_add_apppointment_with_http_info(request, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddAppointmentRequest request: (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: AddAppointmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'site_id', 'version', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appointment_add_apppointment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `appointment_add_apppointment`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `appointment_add_apppointment`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `appointment_add_apppointment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/appointment/addappointment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddAppointmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appointment_get_active_session_times(self, site_id, version, **kwargs):  # noqa: E501
        """Get active session times.  # noqa: E501

        Returns a list of the times that can be booked for a given program schedule type. `ActiveSessionTimes` represent the scheduling increments that can be booked during the active business hours for services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_get_active_session_times(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param datetime request_end_time: Filters results to times that end on or before this time on the current date. Any date provided is ignored..  <br />Default: **23:59:59**
        :param int request_limit: Number of results to include, defaults to 100
        :param int request_offset: Page offset, defaults to 0.
        :param str request_schedule_type: Filters on the provided the schedule type. Either `SessionTypeIds` or `ScheduleType` must be provided.
        :param list[int] request_session_type_ids: Filters on the provided session type IDs. Either `SessionTypeIds` or `ScheduleType` must be provided.
        :param datetime request_start_time: Filters results to times that start on or after this time on the current date. Any date provided is ignored.  <br />Default: **00:00:00**
        :return: GetActiveSessionTimesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appointment_get_active_session_times_with_http_info(site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.appointment_get_active_session_times_with_http_info(site_id, version, **kwargs)  # noqa: E501
            return data

    def appointment_get_active_session_times_with_http_info(self, site_id, version, **kwargs):  # noqa: E501
        """Get active session times.  # noqa: E501

        Returns a list of the times that can be booked for a given program schedule type. `ActiveSessionTimes` represent the scheduling increments that can be booked during the active business hours for services.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_get_active_session_times_with_http_info(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param datetime request_end_time: Filters results to times that end on or before this time on the current date. Any date provided is ignored..  <br />Default: **23:59:59**
        :param int request_limit: Number of results to include, defaults to 100
        :param int request_offset: Page offset, defaults to 0.
        :param str request_schedule_type: Filters on the provided the schedule type. Either `SessionTypeIds` or `ScheduleType` must be provided.
        :param list[int] request_session_type_ids: Filters on the provided session type IDs. Either `SessionTypeIds` or `ScheduleType` must be provided.
        :param datetime request_start_time: Filters results to times that start on or after this time on the current date. Any date provided is ignored.  <br />Default: **00:00:00**
        :return: GetActiveSessionTimesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'version', 'authorization', 'request_end_time', 'request_limit', 'request_offset', 'request_schedule_type', 'request_session_type_ids', 'request_start_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appointment_get_active_session_times" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `appointment_get_active_session_times`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `appointment_get_active_session_times`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_end_time' in params:
            query_params.append(('request.endTime', params['request_end_time']))  # noqa: E501
        if 'request_limit' in params:
            query_params.append(('request.limit', params['request_limit']))  # noqa: E501
        if 'request_offset' in params:
            query_params.append(('request.offset', params['request_offset']))  # noqa: E501
        if 'request_schedule_type' in params:
            query_params.append(('request.scheduleType', params['request_schedule_type']))  # noqa: E501
        if 'request_session_type_ids' in params:
            query_params.append(('request.sessionTypeIds', params['request_session_type_ids']))  # noqa: E501
            collection_formats['request.sessionTypeIds'] = 'multi'  # noqa: E501
        if 'request_start_time' in params:
            query_params.append(('request.startTime', params['request_start_time']))  # noqa: E501

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/appointment/activesessiontimes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetActiveSessionTimesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appointment_get_appointment_options(self, site_id, version, **kwargs):  # noqa: E501
        """Get appointment-related settings.  # noqa: E501

        This endpoint has no query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_get_appointment_options(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: GetAppointmentOptionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appointment_get_appointment_options_with_http_info(site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.appointment_get_appointment_options_with_http_info(site_id, version, **kwargs)  # noqa: E501
            return data

    def appointment_get_appointment_options_with_http_info(self, site_id, version, **kwargs):  # noqa: E501
        """Get appointment-related settings.  # noqa: E501

        This endpoint has no query parameters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_get_appointment_options_with_http_info(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: GetAppointmentOptionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'version', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appointment_get_appointment_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `appointment_get_appointment_options`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `appointment_get_appointment_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/appointment/appointmentoptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetAppointmentOptionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appointment_get_bookable_items(self, request_session_type_ids, site_id, version, **kwargs):  # noqa: E501
        """Get staff appointment availability.  # noqa: E501

        Returns a list of availabilities with the information needed to book appointments. Availabilities include information such as the location and its amenities, staff members, programs, and session types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_get_bookable_items(request_session_type_ids, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] request_session_type_ids: A list of the requested session type IDs. (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param int request_appointment_id: If provided, filters out the appointment with this ID.
        :param datetime request_end_date: The end date of the requested date range.   <br />Default: **StartDate**
        :param bool request_ignore_default_session_length: When `true`, availabilities that are non-default return, for example, a 30-minute availability with a 60-minute default session length.<br />  When `false`, only availabilities that have the default session length return.
        :param int request_limit: Number of results to include, defaults to 100
        :param list[int] request_location_ids: A list of the requested location IDs.
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_staff_ids: A list of the requested staff IDs.
        :param datetime request_start_date: The start date of the requested date range.   <br />Default: **today’s date**
        :return: GetBookableItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appointment_get_bookable_items_with_http_info(request_session_type_ids, site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.appointment_get_bookable_items_with_http_info(request_session_type_ids, site_id, version, **kwargs)  # noqa: E501
            return data

    def appointment_get_bookable_items_with_http_info(self, request_session_type_ids, site_id, version, **kwargs):  # noqa: E501
        """Get staff appointment availability.  # noqa: E501

        Returns a list of availabilities with the information needed to book appointments. Availabilities include information such as the location and its amenities, staff members, programs, and session types.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_get_bookable_items_with_http_info(request_session_type_ids, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] request_session_type_ids: A list of the requested session type IDs. (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param int request_appointment_id: If provided, filters out the appointment with this ID.
        :param datetime request_end_date: The end date of the requested date range.   <br />Default: **StartDate**
        :param bool request_ignore_default_session_length: When `true`, availabilities that are non-default return, for example, a 30-minute availability with a 60-minute default session length.<br />  When `false`, only availabilities that have the default session length return.
        :param int request_limit: Number of results to include, defaults to 100
        :param list[int] request_location_ids: A list of the requested location IDs.
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_staff_ids: A list of the requested staff IDs.
        :param datetime request_start_date: The start date of the requested date range.   <br />Default: **today’s date**
        :return: GetBookableItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_session_type_ids', 'site_id', 'version', 'authorization', 'request_appointment_id', 'request_end_date', 'request_ignore_default_session_length', 'request_limit', 'request_location_ids', 'request_offset', 'request_staff_ids', 'request_start_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appointment_get_bookable_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_session_type_ids' is set
        if ('request_session_type_ids' not in params or
                params['request_session_type_ids'] is None):
            raise ValueError("Missing the required parameter `request_session_type_ids` when calling `appointment_get_bookable_items`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `appointment_get_bookable_items`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `appointment_get_bookable_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_session_type_ids' in params:
            query_params.append(('request.sessionTypeIds', params['request_session_type_ids']))  # noqa: E501
            collection_formats['request.sessionTypeIds'] = 'multi'  # noqa: E501
        if 'request_appointment_id' in params:
            query_params.append(('request.appointmentId', params['request_appointment_id']))  # noqa: E501
        if 'request_end_date' in params:
            query_params.append(('request.endDate', params['request_end_date']))  # noqa: E501
        if 'request_ignore_default_session_length' in params:
            query_params.append(('request.ignoreDefaultSessionLength', params['request_ignore_default_session_length']))  # noqa: E501
        if 'request_limit' in params:
            query_params.append(('request.limit', params['request_limit']))  # noqa: E501
        if 'request_location_ids' in params:
            query_params.append(('request.locationIds', params['request_location_ids']))  # noqa: E501
            collection_formats['request.locationIds'] = 'multi'  # noqa: E501
        if 'request_offset' in params:
            query_params.append(('request.offset', params['request_offset']))  # noqa: E501
        if 'request_staff_ids' in params:
            query_params.append(('request.staffIds', params['request_staff_ids']))  # noqa: E501
            collection_formats['request.staffIds'] = 'multi'  # noqa: E501
        if 'request_start_date' in params:
            query_params.append(('request.startDate', params['request_start_date']))  # noqa: E501

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/appointment/bookableitems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetBookableItemsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appointment_get_schedule_items(self, site_id, version, **kwargs):  # noqa: E501
        """Get appointment schedule.  # noqa: E501

        Returns a list of schedule items, including appointments, availabilities, and unavailabilities. Unavailabilities are the times at which appointments cannot be booked, for example, on holidays or after hours when the business is closed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_get_schedule_items(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param datetime request_end_date: The end date of the requested date range.   <br />Default: **today’s date**
        :param bool request_ignore_prep_finish_times: When `true`, appointment preparation and finish unavailabilities are not returned.   <br />Default: **false**
        :param int request_limit: Number of results to include, defaults to 100
        :param list[int] request_location_ids: A list of requested location IDs.
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_staff_ids: A list of requested staff IDs.
        :param datetime request_start_date: The start date of the requested date range.   <br />Default: **today’s date**
        :return: GetScheduleItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appointment_get_schedule_items_with_http_info(site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.appointment_get_schedule_items_with_http_info(site_id, version, **kwargs)  # noqa: E501
            return data

    def appointment_get_schedule_items_with_http_info(self, site_id, version, **kwargs):  # noqa: E501
        """Get appointment schedule.  # noqa: E501

        Returns a list of schedule items, including appointments, availabilities, and unavailabilities. Unavailabilities are the times at which appointments cannot be booked, for example, on holidays or after hours when the business is closed.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_get_schedule_items_with_http_info(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param datetime request_end_date: The end date of the requested date range.   <br />Default: **today’s date**
        :param bool request_ignore_prep_finish_times: When `true`, appointment preparation and finish unavailabilities are not returned.   <br />Default: **false**
        :param int request_limit: Number of results to include, defaults to 100
        :param list[int] request_location_ids: A list of requested location IDs.
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_staff_ids: A list of requested staff IDs.
        :param datetime request_start_date: The start date of the requested date range.   <br />Default: **today’s date**
        :return: GetScheduleItemsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'version', 'authorization', 'request_end_date', 'request_ignore_prep_finish_times', 'request_limit', 'request_location_ids', 'request_offset', 'request_staff_ids', 'request_start_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appointment_get_schedule_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `appointment_get_schedule_items`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `appointment_get_schedule_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_end_date' in params:
            query_params.append(('request.endDate', params['request_end_date']))  # noqa: E501
        if 'request_ignore_prep_finish_times' in params:
            query_params.append(('request.ignorePrepFinishTimes', params['request_ignore_prep_finish_times']))  # noqa: E501
        if 'request_limit' in params:
            query_params.append(('request.limit', params['request_limit']))  # noqa: E501
        if 'request_location_ids' in params:
            query_params.append(('request.locationIds', params['request_location_ids']))  # noqa: E501
            collection_formats['request.locationIds'] = 'multi'  # noqa: E501
        if 'request_offset' in params:
            query_params.append(('request.offset', params['request_offset']))  # noqa: E501
        if 'request_staff_ids' in params:
            query_params.append(('request.staffIds', params['request_staff_ids']))  # noqa: E501
            collection_formats['request.staffIds'] = 'multi'  # noqa: E501
        if 'request_start_date' in params:
            query_params.append(('request.startDate', params['request_start_date']))  # noqa: E501

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/appointment/scheduleitems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetScheduleItemsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appointment_get_staff_appointments(self, site_id, version, **kwargs):  # noqa: E501
        """Get appointments grouped by staff member.  # noqa: E501

        Returns a list of appointments by staff member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_get_staff_appointments(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param list[int] request_appointment_ids: A list of the requested appointment IDs.
        :param list[str] request_client_ids: List of client IDs to be returned.
        :param datetime request_end_date: The end date of the requested date range.   <br />Default: **StartDate**
        :param int request_limit: Number of results to include, defaults to 100
        :param list[int] request_location_ids: A list of the requested location IDs.
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_staff_ids: List of staff IDs to be returned. Use a value of zero to return all staff appointments.
        :param datetime request_start_date: The start date of the requested date range. If omitted, the default is used.   <br />Default: **today’s date**
        :return: GetStaffAppointmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appointment_get_staff_appointments_with_http_info(site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.appointment_get_staff_appointments_with_http_info(site_id, version, **kwargs)  # noqa: E501
            return data

    def appointment_get_staff_appointments_with_http_info(self, site_id, version, **kwargs):  # noqa: E501
        """Get appointments grouped by staff member.  # noqa: E501

        Returns a list of appointments by staff member.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_get_staff_appointments_with_http_info(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param list[int] request_appointment_ids: A list of the requested appointment IDs.
        :param list[str] request_client_ids: List of client IDs to be returned.
        :param datetime request_end_date: The end date of the requested date range.   <br />Default: **StartDate**
        :param int request_limit: Number of results to include, defaults to 100
        :param list[int] request_location_ids: A list of the requested location IDs.
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_staff_ids: List of staff IDs to be returned. Use a value of zero to return all staff appointments.
        :param datetime request_start_date: The start date of the requested date range. If omitted, the default is used.   <br />Default: **today’s date**
        :return: GetStaffAppointmentsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'version', 'authorization', 'request_appointment_ids', 'request_client_ids', 'request_end_date', 'request_limit', 'request_location_ids', 'request_offset', 'request_staff_ids', 'request_start_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appointment_get_staff_appointments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `appointment_get_staff_appointments`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `appointment_get_staff_appointments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_appointment_ids' in params:
            query_params.append(('request.appointmentIds', params['request_appointment_ids']))  # noqa: E501
            collection_formats['request.appointmentIds'] = 'multi'  # noqa: E501
        if 'request_client_ids' in params:
            query_params.append(('request.clientIds', params['request_client_ids']))  # noqa: E501
            collection_formats['request.clientIds'] = 'multi'  # noqa: E501
        if 'request_end_date' in params:
            query_params.append(('request.endDate', params['request_end_date']))  # noqa: E501
        if 'request_limit' in params:
            query_params.append(('request.limit', params['request_limit']))  # noqa: E501
        if 'request_location_ids' in params:
            query_params.append(('request.locationIds', params['request_location_ids']))  # noqa: E501
            collection_formats['request.locationIds'] = 'multi'  # noqa: E501
        if 'request_offset' in params:
            query_params.append(('request.offset', params['request_offset']))  # noqa: E501
        if 'request_staff_ids' in params:
            query_params.append(('request.staffIds', params['request_staff_ids']))  # noqa: E501
            collection_formats['request.staffIds'] = 'multi'  # noqa: E501
        if 'request_start_date' in params:
            query_params.append(('request.startDate', params['request_start_date']))  # noqa: E501

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/appointment/staffappointments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetStaffAppointmentsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def appointment_update_apppointment(self, request, site_id, version, **kwargs):  # noqa: E501
        """Update an existing appointment.  # noqa: E501

        To update the information for a specific appointment, you must have a staff user token with the proper permissions. Note that you can only update the appointment’s `StartDateTime`, `EndDateTime`, `StaffId`, `Notes`, and `SessionTypeId`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_update_apppointment(request, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAppointmentRequest request: (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: UpdateAppointmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.appointment_update_apppointment_with_http_info(request, site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.appointment_update_apppointment_with_http_info(request, site_id, version, **kwargs)  # noqa: E501
            return data

    def appointment_update_apppointment_with_http_info(self, request, site_id, version, **kwargs):  # noqa: E501
        """Update an existing appointment.  # noqa: E501

        To update the information for a specific appointment, you must have a staff user token with the proper permissions. Note that you can only update the appointment’s `StartDateTime`, `EndDateTime`, `StaffId`, `Notes`, and `SessionTypeId`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.appointment_update_apppointment_with_http_info(request, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param UpdateAppointmentRequest request: (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: UpdateAppointmentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'site_id', 'version', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method appointment_update_apppointment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `appointment_update_apppointment`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `appointment_update_apppointment`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `appointment_update_apppointment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/appointment/updateappointment', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UpdateAppointmentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
