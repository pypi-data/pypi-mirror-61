# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from mindbody_api.api_client import ApiClient


class ClassApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def class_add_client_to_class(self, request, site_id, version, **kwargs):  # noqa: E501
        """Book a client into a class.  # noqa: E501

        This endpoint adds a client to a class or to a class waiting list. It is helpful to use this endpoint in the following situations:  * Use after calling `GET Clients` and `GET Classes` so that you are sure which client to book in which class.  * If adding a client to a class from a waiting list, use this call after you call `GET WaitlistEntries` and determine the ID of the waiting list from which you are moving the client.  * If adding a client to a class and using a pricing option that the client has already purchased, use this call after you call `GET ClientServices` to determine the ID of the pricing option that the client wants to use.    If you add a client to a class and the client purchases a new pricing option, use `GET Services`, `GET Classes`, and then `POST CheckoutShoppingCart` in place of this call.    This endpoint also supports cross-regional class bookings. If you want to perform a cross-regional class booking, set `CrossRegionalBooking` to `true`. This endpoint does not support adding a user to a waiting list using a cross-regional client pricing option(service). Cross-regional booking workflows do not support client service scheduling restrictions.    When performing a cross-regional class booking, this endpoint loops through the first ten sites that the client is associated with, looks for client pricing options at each of those sites, and then uses the oldest client pricing option found.It is important to note that this endpoint only loops through a maximum of ten associated client sites. If a `ClientID` is associated with more than ten sites in an organization, this endpoint only loops through the first ten.If you know that a client has a client service at another site, you can specify that site using the `CrossRegionalBookingClientServiceSiteId` query parameter.    If you perform a cross-regional booking, two additional fields are included in the `SessionType` object of the response:  * `SiteID`, which specifies where the client service is coming from  * `CrossRegionalBookingPerformed`, a Boolean field that is set to `true`    As a prerequisite to using this endpoint, your `SourceName` must have been granted access to the organization to which the site belongs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_add_client_to_class(request, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClientToClassRequest request: (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: AddClientToClassResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.class_add_client_to_class_with_http_info(request, site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.class_add_client_to_class_with_http_info(request, site_id, version, **kwargs)  # noqa: E501
            return data

    def class_add_client_to_class_with_http_info(self, request, site_id, version, **kwargs):  # noqa: E501
        """Book a client into a class.  # noqa: E501

        This endpoint adds a client to a class or to a class waiting list. It is helpful to use this endpoint in the following situations:  * Use after calling `GET Clients` and `GET Classes` so that you are sure which client to book in which class.  * If adding a client to a class from a waiting list, use this call after you call `GET WaitlistEntries` and determine the ID of the waiting list from which you are moving the client.  * If adding a client to a class and using a pricing option that the client has already purchased, use this call after you call `GET ClientServices` to determine the ID of the pricing option that the client wants to use.    If you add a client to a class and the client purchases a new pricing option, use `GET Services`, `GET Classes`, and then `POST CheckoutShoppingCart` in place of this call.    This endpoint also supports cross-regional class bookings. If you want to perform a cross-regional class booking, set `CrossRegionalBooking` to `true`. This endpoint does not support adding a user to a waiting list using a cross-regional client pricing option(service). Cross-regional booking workflows do not support client service scheduling restrictions.    When performing a cross-regional class booking, this endpoint loops through the first ten sites that the client is associated with, looks for client pricing options at each of those sites, and then uses the oldest client pricing option found.It is important to note that this endpoint only loops through a maximum of ten associated client sites. If a `ClientID` is associated with more than ten sites in an organization, this endpoint only loops through the first ten.If you know that a client has a client service at another site, you can specify that site using the `CrossRegionalBookingClientServiceSiteId` query parameter.    If you perform a cross-regional booking, two additional fields are included in the `SessionType` object of the response:  * `SiteID`, which specifies where the client service is coming from  * `CrossRegionalBookingPerformed`, a Boolean field that is set to `true`    As a prerequisite to using this endpoint, your `SourceName` must have been granted access to the organization to which the site belongs.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_add_client_to_class_with_http_info(request, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param AddClientToClassRequest request: (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: AddClientToClassResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'site_id', 'version', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method class_add_client_to_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `class_add_client_to_class`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `class_add_client_to_class`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `class_add_client_to_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/class/addclienttoclass', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AddClientToClassResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def class_get_class_descriptions(self, site_id, version, **kwargs):  # noqa: E501
        """Get class descriptions.  # noqa: E501

        To find class descriptions associated with **scheduled classes**, pass `StaffId`, `StartClassDateTime`, `EndClassDateTime`, or `LocationId` in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_get_class_descriptions(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param int request_class_description_id: Filters to the single result with the given ID.
        :param datetime request_end_class_date_time: Filters the results to class descriptions for scheduled classes that happen before the given date and time.
        :param int request_limit: Number of results to include, defaults to 100
        :param int request_location_id: Filters results to classes descriptions for schedule classes as the given location.
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_program_ids: Filters results to class descriptions belonging to the given programs.
        :param int request_staff_id: Filters results to class descriptions for scheduled classes taught by the given staff member.
        :param datetime request_start_class_date_time: Filters the results to class descriptions for scheduled classes that happen on or after the given date and time.
        :return: GetClassDescriptionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.class_get_class_descriptions_with_http_info(site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.class_get_class_descriptions_with_http_info(site_id, version, **kwargs)  # noqa: E501
            return data

    def class_get_class_descriptions_with_http_info(self, site_id, version, **kwargs):  # noqa: E501
        """Get class descriptions.  # noqa: E501

        To find class descriptions associated with **scheduled classes**, pass `StaffId`, `StartClassDateTime`, `EndClassDateTime`, or `LocationId` in the request.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_get_class_descriptions_with_http_info(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param int request_class_description_id: Filters to the single result with the given ID.
        :param datetime request_end_class_date_time: Filters the results to class descriptions for scheduled classes that happen before the given date and time.
        :param int request_limit: Number of results to include, defaults to 100
        :param int request_location_id: Filters results to classes descriptions for schedule classes as the given location.
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_program_ids: Filters results to class descriptions belonging to the given programs.
        :param int request_staff_id: Filters results to class descriptions for scheduled classes taught by the given staff member.
        :param datetime request_start_class_date_time: Filters the results to class descriptions for scheduled classes that happen on or after the given date and time.
        :return: GetClassDescriptionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'version', 'authorization', 'request_class_description_id', 'request_end_class_date_time', 'request_limit', 'request_location_id', 'request_offset', 'request_program_ids', 'request_staff_id', 'request_start_class_date_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method class_get_class_descriptions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `class_get_class_descriptions`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `class_get_class_descriptions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_class_description_id' in params:
            query_params.append(('request.classDescriptionId', params['request_class_description_id']))  # noqa: E501
        if 'request_end_class_date_time' in params:
            query_params.append(('request.endClassDateTime', params['request_end_class_date_time']))  # noqa: E501
        if 'request_limit' in params:
            query_params.append(('request.limit', params['request_limit']))  # noqa: E501
        if 'request_location_id' in params:
            query_params.append(('request.locationId', params['request_location_id']))  # noqa: E501
        if 'request_offset' in params:
            query_params.append(('request.offset', params['request_offset']))  # noqa: E501
        if 'request_program_ids' in params:
            query_params.append(('request.programIds', params['request_program_ids']))  # noqa: E501
            collection_formats['request.programIds'] = 'multi'  # noqa: E501
        if 'request_staff_id' in params:
            query_params.append(('request.staffId', params['request_staff_id']))  # noqa: E501
        if 'request_start_class_date_time' in params:
            query_params.append(('request.startClassDateTime', params['request_start_class_date_time']))  # noqa: E501

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/class/classdescriptions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetClassDescriptionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def class_get_class_schedules(self, site_id, version, **kwargs):  # noqa: E501
        """Get class schedules.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_get_class_schedules(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param list[int] request_class_schedule_ids: The class schedule IDs.  <br />Default: **all**
        :param datetime request_end_date: The end date of the range. Return any active enrollments that occur on or before this day.  <br />Default: **StartDate**
        :param int request_limit: Number of results to include, defaults to 100
        :param list[int] request_location_ids: The location IDs.   <br />Default: **all**
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_program_ids: The program IDs.   <br />Default: **all**
        :param list[int] request_session_type_ids: The session type IDs.   <br />Default: **all**
        :param list[int] request_staff_ids: The staff IDs.   <br />Default: **all**
        :param datetime request_start_date: The start date of the range. Return any active enrollments that occur on or after this day.  <br />Default: **today’s date**
        :return: GetClassSchedulesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.class_get_class_schedules_with_http_info(site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.class_get_class_schedules_with_http_info(site_id, version, **kwargs)  # noqa: E501
            return data

    def class_get_class_schedules_with_http_info(self, site_id, version, **kwargs):  # noqa: E501
        """Get class schedules.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_get_class_schedules_with_http_info(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param list[int] request_class_schedule_ids: The class schedule IDs.  <br />Default: **all**
        :param datetime request_end_date: The end date of the range. Return any active enrollments that occur on or before this day.  <br />Default: **StartDate**
        :param int request_limit: Number of results to include, defaults to 100
        :param list[int] request_location_ids: The location IDs.   <br />Default: **all**
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_program_ids: The program IDs.   <br />Default: **all**
        :param list[int] request_session_type_ids: The session type IDs.   <br />Default: **all**
        :param list[int] request_staff_ids: The staff IDs.   <br />Default: **all**
        :param datetime request_start_date: The start date of the range. Return any active enrollments that occur on or after this day.  <br />Default: **today’s date**
        :return: GetClassSchedulesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'version', 'authorization', 'request_class_schedule_ids', 'request_end_date', 'request_limit', 'request_location_ids', 'request_offset', 'request_program_ids', 'request_session_type_ids', 'request_staff_ids', 'request_start_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method class_get_class_schedules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `class_get_class_schedules`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `class_get_class_schedules`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_class_schedule_ids' in params:
            query_params.append(('request.classScheduleIds', params['request_class_schedule_ids']))  # noqa: E501
            collection_formats['request.classScheduleIds'] = 'multi'  # noqa: E501
        if 'request_end_date' in params:
            query_params.append(('request.endDate', params['request_end_date']))  # noqa: E501
        if 'request_limit' in params:
            query_params.append(('request.limit', params['request_limit']))  # noqa: E501
        if 'request_location_ids' in params:
            query_params.append(('request.locationIds', params['request_location_ids']))  # noqa: E501
            collection_formats['request.locationIds'] = 'multi'  # noqa: E501
        if 'request_offset' in params:
            query_params.append(('request.offset', params['request_offset']))  # noqa: E501
        if 'request_program_ids' in params:
            query_params.append(('request.programIds', params['request_program_ids']))  # noqa: E501
            collection_formats['request.programIds'] = 'multi'  # noqa: E501
        if 'request_session_type_ids' in params:
            query_params.append(('request.sessionTypeIds', params['request_session_type_ids']))  # noqa: E501
            collection_formats['request.sessionTypeIds'] = 'multi'  # noqa: E501
        if 'request_staff_ids' in params:
            query_params.append(('request.staffIds', params['request_staff_ids']))  # noqa: E501
            collection_formats['request.staffIds'] = 'multi'  # noqa: E501
        if 'request_start_date' in params:
            query_params.append(('request.startDate', params['request_start_date']))  # noqa: E501

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/class/classschedules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetClassSchedulesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def class_get_class_visits(self, site_id, version, **kwargs):  # noqa: E501
        """Get information about clients booked in a class.  # noqa: E501

        Returns a list of visits that contain information for a specified class. On success, this request returns the class object in the response with a list of visits.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_get_class_visits(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param int request_class_id: The class ID.
        :param datetime request_last_modified_date: When included in the request, only records modified on or after the `LastModifiedDate` specified are included in the response.
        :return: GetClassVisitsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.class_get_class_visits_with_http_info(site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.class_get_class_visits_with_http_info(site_id, version, **kwargs)  # noqa: E501
            return data

    def class_get_class_visits_with_http_info(self, site_id, version, **kwargs):  # noqa: E501
        """Get information about clients booked in a class.  # noqa: E501

        Returns a list of visits that contain information for a specified class. On success, this request returns the class object in the response with a list of visits.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_get_class_visits_with_http_info(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param int request_class_id: The class ID.
        :param datetime request_last_modified_date: When included in the request, only records modified on or after the `LastModifiedDate` specified are included in the response.
        :return: GetClassVisitsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'version', 'authorization', 'request_class_id', 'request_last_modified_date']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method class_get_class_visits" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `class_get_class_visits`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `class_get_class_visits`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_class_id' in params:
            query_params.append(('request.classID', params['request_class_id']))  # noqa: E501
        if 'request_last_modified_date' in params:
            query_params.append(('request.lastModifiedDate', params['request_last_modified_date']))  # noqa: E501

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/class/classvisits', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetClassVisitsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def class_get_classes(self, site_id, version, **kwargs):  # noqa: E501
        """Get scheduled classes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_get_classes(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param list[int] request_class_description_ids: The requested class description IDs.
        :param list[int] request_class_ids: The requested class IDs.
        :param str request_client_id: The client ID of the client who is viewing this class list. Based on identity, the client may be able to see additional information, such as membership specials.
        :param datetime request_end_date_time: The requested end date for filtering.  <br />Default: **today’s date**
        :param bool request_hide_canceled_classes: When `true`, canceled classes are removed from the response.<br />  When `false`, canceled classes are included in the response.<br />  Default: **false**
        :param datetime request_last_modified_date: When included in the request, only records modified on or after the `LastModifiedDate` specified are included in the response.
        :param int request_limit: Number of results to include, defaults to 100
        :param list[int] request_location_ids: A list of location IDs on which to base the search.
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_program_ids: A list of program IDs on which to base the search.
        :param bool request_scheduling_window: When `true`, classes outside scheduling window are removed from the response.<br />  When `false`, classes are included in the response, regardless of the scheduling window.<br />  Default: **false**
        :param list[int] request_semester_ids: A list of semester IDs on which to base the search.
        :param list[int] request_session_type_ids: A list of session type IDs on which to base the search.
        :param list[int] request_staff_ids: The requested IDs of the teaching staff members.
        :param datetime request_start_date_time: The requested start date for filtering.   <br />Default: **today’s date**
        :return: GetClassesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.class_get_classes_with_http_info(site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.class_get_classes_with_http_info(site_id, version, **kwargs)  # noqa: E501
            return data

    def class_get_classes_with_http_info(self, site_id, version, **kwargs):  # noqa: E501
        """Get scheduled classes.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_get_classes_with_http_info(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param list[int] request_class_description_ids: The requested class description IDs.
        :param list[int] request_class_ids: The requested class IDs.
        :param str request_client_id: The client ID of the client who is viewing this class list. Based on identity, the client may be able to see additional information, such as membership specials.
        :param datetime request_end_date_time: The requested end date for filtering.  <br />Default: **today’s date**
        :param bool request_hide_canceled_classes: When `true`, canceled classes are removed from the response.<br />  When `false`, canceled classes are included in the response.<br />  Default: **false**
        :param datetime request_last_modified_date: When included in the request, only records modified on or after the `LastModifiedDate` specified are included in the response.
        :param int request_limit: Number of results to include, defaults to 100
        :param list[int] request_location_ids: A list of location IDs on which to base the search.
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_program_ids: A list of program IDs on which to base the search.
        :param bool request_scheduling_window: When `true`, classes outside scheduling window are removed from the response.<br />  When `false`, classes are included in the response, regardless of the scheduling window.<br />  Default: **false**
        :param list[int] request_semester_ids: A list of semester IDs on which to base the search.
        :param list[int] request_session_type_ids: A list of session type IDs on which to base the search.
        :param list[int] request_staff_ids: The requested IDs of the teaching staff members.
        :param datetime request_start_date_time: The requested start date for filtering.   <br />Default: **today’s date**
        :return: GetClassesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'version', 'authorization', 'request_class_description_ids', 'request_class_ids', 'request_client_id', 'request_end_date_time', 'request_hide_canceled_classes', 'request_last_modified_date', 'request_limit', 'request_location_ids', 'request_offset', 'request_program_ids', 'request_scheduling_window', 'request_semester_ids', 'request_session_type_ids', 'request_staff_ids', 'request_start_date_time']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method class_get_classes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `class_get_classes`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `class_get_classes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_class_description_ids' in params:
            query_params.append(('request.classDescriptionIds', params['request_class_description_ids']))  # noqa: E501
            collection_formats['request.classDescriptionIds'] = 'multi'  # noqa: E501
        if 'request_class_ids' in params:
            query_params.append(('request.classIds', params['request_class_ids']))  # noqa: E501
            collection_formats['request.classIds'] = 'multi'  # noqa: E501
        if 'request_client_id' in params:
            query_params.append(('request.clientId', params['request_client_id']))  # noqa: E501
        if 'request_end_date_time' in params:
            query_params.append(('request.endDateTime', params['request_end_date_time']))  # noqa: E501
        if 'request_hide_canceled_classes' in params:
            query_params.append(('request.hideCanceledClasses', params['request_hide_canceled_classes']))  # noqa: E501
        if 'request_last_modified_date' in params:
            query_params.append(('request.lastModifiedDate', params['request_last_modified_date']))  # noqa: E501
        if 'request_limit' in params:
            query_params.append(('request.limit', params['request_limit']))  # noqa: E501
        if 'request_location_ids' in params:
            query_params.append(('request.locationIds', params['request_location_ids']))  # noqa: E501
            collection_formats['request.locationIds'] = 'multi'  # noqa: E501
        if 'request_offset' in params:
            query_params.append(('request.offset', params['request_offset']))  # noqa: E501
        if 'request_program_ids' in params:
            query_params.append(('request.programIds', params['request_program_ids']))  # noqa: E501
            collection_formats['request.programIds'] = 'multi'  # noqa: E501
        if 'request_scheduling_window' in params:
            query_params.append(('request.schedulingWindow', params['request_scheduling_window']))  # noqa: E501
        if 'request_semester_ids' in params:
            query_params.append(('request.semesterIds', params['request_semester_ids']))  # noqa: E501
            collection_formats['request.semesterIds'] = 'multi'  # noqa: E501
        if 'request_session_type_ids' in params:
            query_params.append(('request.sessionTypeIds', params['request_session_type_ids']))  # noqa: E501
            collection_formats['request.sessionTypeIds'] = 'multi'  # noqa: E501
        if 'request_staff_ids' in params:
            query_params.append(('request.staffIds', params['request_staff_ids']))  # noqa: E501
            collection_formats['request.staffIds'] = 'multi'  # noqa: E501
        if 'request_start_date_time' in params:
            query_params.append(('request.startDateTime', params['request_start_date_time']))  # noqa: E501

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/class/classes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetClassesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def class_get_waitlist_entries(self, site_id, version, **kwargs):  # noqa: E501
        """Get waiting list entries.  # noqa: E501

        Returns a list of waiting list entries for a specified class schedule or class. The request requires staff credentials and either a class schedule ID or class ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_get_waitlist_entries(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param list[int] request_class_ids: The requested class IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request. <br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClassIds**
        :param list[int] request_class_schedule_ids: The requested class schedule IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClassScheduleIds**
        :param list[str] request_client_ids: The requested client IDs.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClientIds**
        :param bool request_hide_past_entries: When `true`, indicates that past waiting list entries are hidden from clients.<br />  When `false`, indicates that past entries are not hidden from clients.<br />  Default: **false**
        :param int request_limit: Number of results to include, defaults to 100
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_waitlist_entry_ids: The requested waiting list entry IDs.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all WaitlistEntryIds**
        :return: GetWaitlistEntriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.class_get_waitlist_entries_with_http_info(site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.class_get_waitlist_entries_with_http_info(site_id, version, **kwargs)  # noqa: E501
            return data

    def class_get_waitlist_entries_with_http_info(self, site_id, version, **kwargs):  # noqa: E501
        """Get waiting list entries.  # noqa: E501

        Returns a list of waiting list entries for a specified class schedule or class. The request requires staff credentials and either a class schedule ID or class ID.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_get_waitlist_entries_with_http_info(site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :param list[int] request_class_ids: The requested class IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request. <br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClassIds**
        :param list[int] request_class_schedule_ids: The requested class schedule IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClassScheduleIds**
        :param list[str] request_client_ids: The requested client IDs.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClientIds**
        :param bool request_hide_past_entries: When `true`, indicates that past waiting list entries are hidden from clients.<br />  When `false`, indicates that past entries are not hidden from clients.<br />  Default: **false**
        :param int request_limit: Number of results to include, defaults to 100
        :param int request_offset: Page offset, defaults to 0.
        :param list[int] request_waitlist_entry_ids: The requested waiting list entry IDs.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all WaitlistEntryIds**
        :return: GetWaitlistEntriesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'version', 'authorization', 'request_class_ids', 'request_class_schedule_ids', 'request_client_ids', 'request_hide_past_entries', 'request_limit', 'request_offset', 'request_waitlist_entry_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method class_get_waitlist_entries" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `class_get_waitlist_entries`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `class_get_waitlist_entries`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_class_ids' in params:
            query_params.append(('request.classIds', params['request_class_ids']))  # noqa: E501
            collection_formats['request.classIds'] = 'multi'  # noqa: E501
        if 'request_class_schedule_ids' in params:
            query_params.append(('request.classScheduleIds', params['request_class_schedule_ids']))  # noqa: E501
            collection_formats['request.classScheduleIds'] = 'multi'  # noqa: E501
        if 'request_client_ids' in params:
            query_params.append(('request.clientIds', params['request_client_ids']))  # noqa: E501
            collection_formats['request.clientIds'] = 'multi'  # noqa: E501
        if 'request_hide_past_entries' in params:
            query_params.append(('request.hidePastEntries', params['request_hide_past_entries']))  # noqa: E501
        if 'request_limit' in params:
            query_params.append(('request.limit', params['request_limit']))  # noqa: E501
        if 'request_offset' in params:
            query_params.append(('request.offset', params['request_offset']))  # noqa: E501
        if 'request_waitlist_entry_ids' in params:
            query_params.append(('request.waitlistEntryIds', params['request_waitlist_entry_ids']))  # noqa: E501
            collection_formats['request.waitlistEntryIds'] = 'multi'  # noqa: E501

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/class/waitlistentries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetWaitlistEntriesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def class_remove_client_from_class(self, request, site_id, version, **kwargs):  # noqa: E501
        """Remove a client from a class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_remove_client_from_class(request, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveClientFromClassRequest request: (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: RemoveClientFromClassResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.class_remove_client_from_class_with_http_info(request, site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.class_remove_client_from_class_with_http_info(request, site_id, version, **kwargs)  # noqa: E501
            return data

    def class_remove_client_from_class_with_http_info(self, request, site_id, version, **kwargs):  # noqa: E501
        """Remove a client from a class.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_remove_client_from_class_with_http_info(request, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param RemoveClientFromClassRequest request: (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: RemoveClientFromClassResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'site_id', 'version', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method class_remove_client_from_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `class_remove_client_from_class`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `class_remove_client_from_class`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `class_remove_client_from_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/class/removeclientfromclass', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveClientFromClassResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def class_remove_from_waitlist(self, request_waitlist_entry_ids, site_id, version, **kwargs):  # noqa: E501
        """Remove a client from a waiting list.  # noqa: E501

        This endpoint does not return a response. If a call to this endpoint results in a 200 OK HTTP status code, then the call was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_remove_from_waitlist(request_waitlist_entry_ids, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] request_waitlist_entry_ids: A list of waiting list IDs to remove from waiting lists. (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: RemoveFromWaitlistResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.class_remove_from_waitlist_with_http_info(request_waitlist_entry_ids, site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.class_remove_from_waitlist_with_http_info(request_waitlist_entry_ids, site_id, version, **kwargs)  # noqa: E501
            return data

    def class_remove_from_waitlist_with_http_info(self, request_waitlist_entry_ids, site_id, version, **kwargs):  # noqa: E501
        """Remove a client from a waiting list.  # noqa: E501

        This endpoint does not return a response. If a call to this endpoint results in a 200 OK HTTP status code, then the call was successful.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_remove_from_waitlist_with_http_info(request_waitlist_entry_ids, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] request_waitlist_entry_ids: A list of waiting list IDs to remove from waiting lists. (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: RemoveFromWaitlistResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request_waitlist_entry_ids', 'site_id', 'version', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method class_remove_from_waitlist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request_waitlist_entry_ids' is set
        if ('request_waitlist_entry_ids' not in params or
                params['request_waitlist_entry_ids'] is None):
            raise ValueError("Missing the required parameter `request_waitlist_entry_ids` when calling `class_remove_from_waitlist`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `class_remove_from_waitlist`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `class_remove_from_waitlist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []
        if 'request_waitlist_entry_ids' in params:
            query_params.append(('request.waitlistEntryIds', params['request_waitlist_entry_ids']))  # noqa: E501
            collection_formats['request.waitlistEntryIds'] = 'multi'  # noqa: E501

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/class/removefromwaitlist', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RemoveFromWaitlistResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def class_substitute_class_teacher(self, request, site_id, version, **kwargs):  # noqa: E501
        """Substitute a class teacher.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_substitute_class_teacher(request, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubstituteClassTeacherRequest request: (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: SubstituteClassTeacherResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.class_substitute_class_teacher_with_http_info(request, site_id, version, **kwargs)  # noqa: E501
        else:
            (data) = self.class_substitute_class_teacher_with_http_info(request, site_id, version, **kwargs)  # noqa: E501
            return data

    def class_substitute_class_teacher_with_http_info(self, request, site_id, version, **kwargs):  # noqa: E501
        """Substitute a class teacher.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.class_substitute_class_teacher_with_http_info(request, site_id, version, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SubstituteClassTeacherRequest request: (required)
        :param str site_id: ID of the site from which to pull data. (required)
        :param str version: (required)
        :param str authorization: A staff user authorization token.
        :return: SubstituteClassTeacherResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['request', 'site_id', 'version', 'authorization']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method class_substitute_class_teacher" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'request' is set
        if ('request' not in params or
                params['request'] is None):
            raise ValueError("Missing the required parameter `request` when calling `class_substitute_class_teacher`")  # noqa: E501
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `class_substitute_class_teacher`")  # noqa: E501
        # verify the required parameter 'version' is set
        if ('version' not in params or
                params['version'] is None):
            raise ValueError("Missing the required parameter `version` when calling `class_substitute_class_teacher`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'version' in params:
            path_params['version'] = params['version']  # noqa: E501

        query_params = []

        header_params = {}
        if 'site_id' in params:
            header_params['siteId'] = params['site_id']  # noqa: E501
        if 'authorization' in params:
            header_params['authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'request' in params:
            body_params = params['request']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'multipart/form-data'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded', 'multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/public/v{version}/class/substituteclassteacher', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SubstituteClassTeacherResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
