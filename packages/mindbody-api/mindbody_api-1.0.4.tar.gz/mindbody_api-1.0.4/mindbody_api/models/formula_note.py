# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class FormulaNote(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'client_id': 'str',
        'note': 'str',
        'entry_date_time': 'datetime',
        'appointment_id': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'client_id': 'ClientId',
        'note': 'Note',
        'entry_date_time': 'EntryDateTime',
        'appointment_id': 'AppointmentId'
    }

    def __init__(self, id=None, client_id=None, note=None, entry_date_time=None, appointment_id=None):  # noqa: E501
        """FormulaNote - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._client_id = None
        self._note = None
        self._entry_date_time = None
        self._appointment_id = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if client_id is not None:
            self.client_id = client_id
        if note is not None:
            self.note = note
        if entry_date_time is not None:
            self.entry_date_time = entry_date_time
        if appointment_id is not None:
            self.appointment_id = appointment_id

    @property
    def id(self):
        """Gets the id of this FormulaNote.  # noqa: E501

        ID of the formula note.  # noqa: E501

        :return: The id of this FormulaNote.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FormulaNote.

        ID of the formula note.  # noqa: E501

        :param id: The id of this FormulaNote.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def client_id(self):
        """Gets the client_id of this FormulaNote.  # noqa: E501

        Client ID of the formula note.  # noqa: E501

        :return: The client_id of this FormulaNote.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this FormulaNote.

        Client ID of the formula note.  # noqa: E501

        :param client_id: The client_id of this FormulaNote.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def note(self):
        """Gets the note of this FormulaNote.  # noqa: E501

        The text of the formula note.  # noqa: E501

        :return: The note of this FormulaNote.  # noqa: E501
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this FormulaNote.

        The text of the formula note.  # noqa: E501

        :param note: The note of this FormulaNote.  # noqa: E501
        :type: str
        """

        self._note = note

    @property
    def entry_date_time(self):
        """Gets the entry_date_time of this FormulaNote.  # noqa: E501

        Date and time that the formula note was entered.  # noqa: E501

        :return: The entry_date_time of this FormulaNote.  # noqa: E501
        :rtype: datetime
        """
        return self._entry_date_time

    @entry_date_time.setter
    def entry_date_time(self, entry_date_time):
        """Sets the entry_date_time of this FormulaNote.

        Date and time that the formula note was entered.  # noqa: E501

        :param entry_date_time: The entry_date_time of this FormulaNote.  # noqa: E501
        :type: datetime
        """

        self._entry_date_time = entry_date_time

    @property
    def appointment_id(self):
        """Gets the appointment_id of this FormulaNote.  # noqa: E501

        The appointment ID associated with the formula note.  # noqa: E501

        :return: The appointment_id of this FormulaNote.  # noqa: E501
        :rtype: int
        """
        return self._appointment_id

    @appointment_id.setter
    def appointment_id(self, appointment_id):
        """Sets the appointment_id of this FormulaNote.

        The appointment ID associated with the formula note.  # noqa: E501

        :param appointment_id: The appointment_id of this FormulaNote.  # noqa: E501
        :type: int
        """

        self._appointment_id = appointment_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FormulaNote, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormulaNote):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
