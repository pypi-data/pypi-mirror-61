# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.appointment import Appointment  # noqa: F401,E501
from mindbody_api.models.availability import Availability  # noqa: F401,E501
from mindbody_api.models.unavailability import Unavailability  # noqa: F401,E501


class Staff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'appointment_instructor': 'bool',
        'always_allow_double_booking': 'bool',
        'bio': 'str',
        'city': 'str',
        'country': 'str',
        'email': 'str',
        'first_name': 'str',
        'home_phone': 'str',
        'id': 'int',
        'independent_contractor': 'bool',
        'is_male': 'bool',
        'last_name': 'str',
        'mobile_phone': 'str',
        'name': 'str',
        'postal_code': 'str',
        'class_teacher': 'bool',
        'sort_order': 'int',
        'state': 'str',
        'work_phone': 'str',
        'image_url': 'str',
        'appointments': 'list[Appointment]',
        'unavailabilities': 'list[Unavailability]',
        'availabilities': 'list[Availability]'
    }

    attribute_map = {
        'address': 'Address',
        'appointment_instructor': 'AppointmentInstructor',
        'always_allow_double_booking': 'AlwaysAllowDoubleBooking',
        'bio': 'Bio',
        'city': 'City',
        'country': 'Country',
        'email': 'Email',
        'first_name': 'FirstName',
        'home_phone': 'HomePhone',
        'id': 'Id',
        'independent_contractor': 'IndependentContractor',
        'is_male': 'IsMale',
        'last_name': 'LastName',
        'mobile_phone': 'MobilePhone',
        'name': 'Name',
        'postal_code': 'PostalCode',
        'class_teacher': 'ClassTeacher',
        'sort_order': 'SortOrder',
        'state': 'State',
        'work_phone': 'WorkPhone',
        'image_url': 'ImageUrl',
        'appointments': 'Appointments',
        'unavailabilities': 'Unavailabilities',
        'availabilities': 'Availabilities'
    }

    def __init__(self, address=None, appointment_instructor=None, always_allow_double_booking=None, bio=None, city=None, country=None, email=None, first_name=None, home_phone=None, id=None, independent_contractor=None, is_male=None, last_name=None, mobile_phone=None, name=None, postal_code=None, class_teacher=None, sort_order=None, state=None, work_phone=None, image_url=None, appointments=None, unavailabilities=None, availabilities=None):  # noqa: E501
        """Staff - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._appointment_instructor = None
        self._always_allow_double_booking = None
        self._bio = None
        self._city = None
        self._country = None
        self._email = None
        self._first_name = None
        self._home_phone = None
        self._id = None
        self._independent_contractor = None
        self._is_male = None
        self._last_name = None
        self._mobile_phone = None
        self._name = None
        self._postal_code = None
        self._class_teacher = None
        self._sort_order = None
        self._state = None
        self._work_phone = None
        self._image_url = None
        self._appointments = None
        self._unavailabilities = None
        self._availabilities = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if appointment_instructor is not None:
            self.appointment_instructor = appointment_instructor
        if always_allow_double_booking is not None:
            self.always_allow_double_booking = always_allow_double_booking
        if bio is not None:
            self.bio = bio
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if email is not None:
            self.email = email
        if first_name is not None:
            self.first_name = first_name
        if home_phone is not None:
            self.home_phone = home_phone
        if id is not None:
            self.id = id
        if independent_contractor is not None:
            self.independent_contractor = independent_contractor
        if is_male is not None:
            self.is_male = is_male
        if last_name is not None:
            self.last_name = last_name
        if mobile_phone is not None:
            self.mobile_phone = mobile_phone
        if name is not None:
            self.name = name
        if postal_code is not None:
            self.postal_code = postal_code
        if class_teacher is not None:
            self.class_teacher = class_teacher
        if sort_order is not None:
            self.sort_order = sort_order
        if state is not None:
            self.state = state
        if work_phone is not None:
            self.work_phone = work_phone
        if image_url is not None:
            self.image_url = image_url
        if appointments is not None:
            self.appointments = appointments
        if unavailabilities is not None:
            self.unavailabilities = unavailabilities
        if availabilities is not None:
            self.availabilities = availabilities

    @property
    def address(self):
        """Gets the address of this Staff.  # noqa: E501

        The address of the staff member who is teaching the class.  # noqa: E501

        :return: The address of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this Staff.

        The address of the staff member who is teaching the class.  # noqa: E501

        :param address: The address of this Staff.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def appointment_instructor(self):
        """Gets the appointment_instructor of this Staff.  # noqa: E501

        When `true`, indicates that the staff member offers appointments.<br />  When `false`, indicates that the staff member does not offer appointments.  # noqa: E501

        :return: The appointment_instructor of this Staff.  # noqa: E501
        :rtype: bool
        """
        return self._appointment_instructor

    @appointment_instructor.setter
    def appointment_instructor(self, appointment_instructor):
        """Sets the appointment_instructor of this Staff.

        When `true`, indicates that the staff member offers appointments.<br />  When `false`, indicates that the staff member does not offer appointments.  # noqa: E501

        :param appointment_instructor: The appointment_instructor of this Staff.  # noqa: E501
        :type: bool
        """

        self._appointment_instructor = appointment_instructor

    @property
    def always_allow_double_booking(self):
        """Gets the always_allow_double_booking of this Staff.  # noqa: E501

        When `true`, indicates that the staff member can be scheduled for overlapping services.<br />  When `false`, indicates that the staff can only be scheduled for one service at a time in any given time-frame.  # noqa: E501

        :return: The always_allow_double_booking of this Staff.  # noqa: E501
        :rtype: bool
        """
        return self._always_allow_double_booking

    @always_allow_double_booking.setter
    def always_allow_double_booking(self, always_allow_double_booking):
        """Sets the always_allow_double_booking of this Staff.

        When `true`, indicates that the staff member can be scheduled for overlapping services.<br />  When `false`, indicates that the staff can only be scheduled for one service at a time in any given time-frame.  # noqa: E501

        :param always_allow_double_booking: The always_allow_double_booking of this Staff.  # noqa: E501
        :type: bool
        """

        self._always_allow_double_booking = always_allow_double_booking

    @property
    def bio(self):
        """Gets the bio of this Staff.  # noqa: E501

        The staff member’s biography. This string contains HTML.  # noqa: E501

        :return: The bio of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio):
        """Sets the bio of this Staff.

        The staff member’s biography. This string contains HTML.  # noqa: E501

        :param bio: The bio of this Staff.  # noqa: E501
        :type: str
        """

        self._bio = bio

    @property
    def city(self):
        """Gets the city of this Staff.  # noqa: E501

        The staff member’s city.  # noqa: E501

        :return: The city of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Staff.

        The staff member’s city.  # noqa: E501

        :param city: The city of this Staff.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Staff.  # noqa: E501

        The staff member’s country.  # noqa: E501

        :return: The country of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Staff.

        The staff member’s country.  # noqa: E501

        :param country: The country of this Staff.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def email(self):
        """Gets the email of this Staff.  # noqa: E501

        The staff member’s email address.  # noqa: E501

        :return: The email of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Staff.

        The staff member’s email address.  # noqa: E501

        :param email: The email of this Staff.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this Staff.  # noqa: E501

        The staff member’s first name.  # noqa: E501

        :return: The first_name of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Staff.

        The staff member’s first name.  # noqa: E501

        :param first_name: The first_name of this Staff.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def home_phone(self):
        """Gets the home_phone of this Staff.  # noqa: E501

        The staff member’s home phone number.  # noqa: E501

        :return: The home_phone of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this Staff.

        The staff member’s home phone number.  # noqa: E501

        :param home_phone: The home_phone of this Staff.  # noqa: E501
        :type: str
        """

        self._home_phone = home_phone

    @property
    def id(self):
        """Gets the id of this Staff.  # noqa: E501

        The ID assigned to the staff member.  # noqa: E501

        :return: The id of this Staff.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Staff.

        The ID assigned to the staff member.  # noqa: E501

        :param id: The id of this Staff.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def independent_contractor(self):
        """Gets the independent_contractor of this Staff.  # noqa: E501

        When `true`, indicates that the staff member is an independent contractor.  When `false`, indicates that the staff member is not an independent contractor.  # noqa: E501

        :return: The independent_contractor of this Staff.  # noqa: E501
        :rtype: bool
        """
        return self._independent_contractor

    @independent_contractor.setter
    def independent_contractor(self, independent_contractor):
        """Sets the independent_contractor of this Staff.

        When `true`, indicates that the staff member is an independent contractor.  When `false`, indicates that the staff member is not an independent contractor.  # noqa: E501

        :param independent_contractor: The independent_contractor of this Staff.  # noqa: E501
        :type: bool
        """

        self._independent_contractor = independent_contractor

    @property
    def is_male(self):
        """Gets the is_male of this Staff.  # noqa: E501

        When `true`, indicates that the staff member is male.  When `false`, indicates that the staff member is female.  # noqa: E501

        :return: The is_male of this Staff.  # noqa: E501
        :rtype: bool
        """
        return self._is_male

    @is_male.setter
    def is_male(self, is_male):
        """Sets the is_male of this Staff.

        When `true`, indicates that the staff member is male.  When `false`, indicates that the staff member is female.  # noqa: E501

        :param is_male: The is_male of this Staff.  # noqa: E501
        :type: bool
        """

        self._is_male = is_male

    @property
    def last_name(self):
        """Gets the last_name of this Staff.  # noqa: E501

        The staff member’s last name.  # noqa: E501

        :return: The last_name of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Staff.

        The staff member’s last name.  # noqa: E501

        :param last_name: The last_name of this Staff.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this Staff.  # noqa: E501

        The staff member’s mobile phone number.  # noqa: E501

        :return: The mobile_phone of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this Staff.

        The staff member’s mobile phone number.  # noqa: E501

        :param mobile_phone: The mobile_phone of this Staff.  # noqa: E501
        :type: str
        """

        self._mobile_phone = mobile_phone

    @property
    def name(self):
        """Gets the name of this Staff.  # noqa: E501

        The staff member’s name.  # noqa: E501

        :return: The name of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Staff.

        The staff member’s name.  # noqa: E501

        :param name: The name of this Staff.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def postal_code(self):
        """Gets the postal_code of this Staff.  # noqa: E501

        The staff member’s postal code.  # noqa: E501

        :return: The postal_code of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Staff.

        The staff member’s postal code.  # noqa: E501

        :param postal_code: The postal_code of this Staff.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def class_teacher(self):
        """Gets the class_teacher of this Staff.  # noqa: E501

        When `true`, indicates that the staff member can teach classes.  When `false`, indicates that the staff member cannot teach classes.  # noqa: E501

        :return: The class_teacher of this Staff.  # noqa: E501
        :rtype: bool
        """
        return self._class_teacher

    @class_teacher.setter
    def class_teacher(self, class_teacher):
        """Sets the class_teacher of this Staff.

        When `true`, indicates that the staff member can teach classes.  When `false`, indicates that the staff member cannot teach classes.  # noqa: E501

        :param class_teacher: The class_teacher of this Staff.  # noqa: E501
        :type: bool
        """

        self._class_teacher = class_teacher

    @property
    def sort_order(self):
        """Gets the sort_order of this Staff.  # noqa: E501

        If configured by the business owner, this field determines a staff member’s weight when sorting. Use this field to sort staff members on your interface.  # noqa: E501

        :return: The sort_order of this Staff.  # noqa: E501
        :rtype: int
        """
        return self._sort_order

    @sort_order.setter
    def sort_order(self, sort_order):
        """Sets the sort_order of this Staff.

        If configured by the business owner, this field determines a staff member’s weight when sorting. Use this field to sort staff members on your interface.  # noqa: E501

        :param sort_order: The sort_order of this Staff.  # noqa: E501
        :type: int
        """

        self._sort_order = sort_order

    @property
    def state(self):
        """Gets the state of this Staff.  # noqa: E501

        The staff member’s state.  # noqa: E501

        :return: The state of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Staff.

        The staff member’s state.  # noqa: E501

        :param state: The state of this Staff.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def work_phone(self):
        """Gets the work_phone of this Staff.  # noqa: E501

        The staff member’s work phone number.  # noqa: E501

        :return: The work_phone of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._work_phone

    @work_phone.setter
    def work_phone(self, work_phone):
        """Sets the work_phone of this Staff.

        The staff member’s work phone number.  # noqa: E501

        :param work_phone: The work_phone of this Staff.  # noqa: E501
        :type: str
        """

        self._work_phone = work_phone

    @property
    def image_url(self):
        """Gets the image_url of this Staff.  # noqa: E501

        The URL of the staff member’s image, if one has been uploaded.  # noqa: E501

        :return: The image_url of this Staff.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Staff.

        The URL of the staff member’s image, if one has been uploaded.  # noqa: E501

        :param image_url: The image_url of this Staff.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def appointments(self):
        """Gets the appointments of this Staff.  # noqa: E501

        A list of appointments for the staff.  # noqa: E501

        :return: The appointments of this Staff.  # noqa: E501
        :rtype: list[Appointment]
        """
        return self._appointments

    @appointments.setter
    def appointments(self, appointments):
        """Sets the appointments of this Staff.

        A list of appointments for the staff.  # noqa: E501

        :param appointments: The appointments of this Staff.  # noqa: E501
        :type: list[Appointment]
        """

        self._appointments = appointments

    @property
    def unavailabilities(self):
        """Gets the unavailabilities of this Staff.  # noqa: E501

        A list of unavailabilities for the staff.  # noqa: E501

        :return: The unavailabilities of this Staff.  # noqa: E501
        :rtype: list[Unavailability]
        """
        return self._unavailabilities

    @unavailabilities.setter
    def unavailabilities(self, unavailabilities):
        """Sets the unavailabilities of this Staff.

        A list of unavailabilities for the staff.  # noqa: E501

        :param unavailabilities: The unavailabilities of this Staff.  # noqa: E501
        :type: list[Unavailability]
        """

        self._unavailabilities = unavailabilities

    @property
    def availabilities(self):
        """Gets the availabilities of this Staff.  # noqa: E501

        A list of availabilities for the staff.  # noqa: E501

        :return: The availabilities of this Staff.  # noqa: E501
        :rtype: list[Availability]
        """
        return self._availabilities

    @availabilities.setter
    def availabilities(self, availabilities):
        """Sets the availabilities of this Staff.

        A list of availabilities for the staff.  # noqa: E501

        :param availabilities: The availabilities of this Staff.  # noqa: E501
        :type: list[Availability]
        """

        self._availabilities = availabilities

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Staff, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Staff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
