# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.location import Location  # noqa: F401,E501
from mindbody_api.models.program import Program  # noqa: F401,E501
from mindbody_api.models.staff import Staff  # noqa: F401,E501


class Course(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'notes': 'str',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'location': 'Location',
        'organizer': 'Staff',
        'program': 'Program',
        'image_url': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'notes': 'Notes',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'location': 'Location',
        'organizer': 'Organizer',
        'program': 'Program',
        'image_url': 'ImageUrl'
    }

    def __init__(self, id=None, name=None, description=None, notes=None, start_date=None, end_date=None, location=None, organizer=None, program=None, image_url=None):  # noqa: E501
        """Course - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._notes = None
        self._start_date = None
        self._end_date = None
        self._location = None
        self._organizer = None
        self._program = None
        self._image_url = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if notes is not None:
            self.notes = notes
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if location is not None:
            self.location = location
        if organizer is not None:
            self.organizer = organizer
        if program is not None:
            self.program = program
        if image_url is not None:
            self.image_url = image_url

    @property
    def id(self):
        """Gets the id of this Course.  # noqa: E501

        The course ID.  # noqa: E501

        :return: The id of this Course.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Course.

        The course ID.  # noqa: E501

        :param id: The id of this Course.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Course.  # noqa: E501

        The course name.  # noqa: E501

        :return: The name of this Course.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Course.

        The course name.  # noqa: E501

        :param name: The name of this Course.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Course.  # noqa: E501

        A description of the course.  # noqa: E501

        :return: The description of this Course.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Course.

        A description of the course.  # noqa: E501

        :param description: The description of this Course.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def notes(self):
        """Gets the notes of this Course.  # noqa: E501

        Any notes that have been written about the course.  # noqa: E501

        :return: The notes of this Course.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Course.

        Any notes that have been written about the course.  # noqa: E501

        :param notes: The notes of this Course.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def start_date(self):
        """Gets the start_date of this Course.  # noqa: E501

        Date and time that the course starts.  # noqa: E501

        :return: The start_date of this Course.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Course.

        Date and time that the course starts.  # noqa: E501

        :param start_date: The start_date of this Course.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this Course.  # noqa: E501

        Date and time that the course ends.  # noqa: E501

        :return: The end_date of this Course.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Course.

        Date and time that the course ends.  # noqa: E501

        :param end_date: The end_date of this Course.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def location(self):
        """Gets the location of this Course.  # noqa: E501

        Contains information about the location.  # noqa: E501

        :return: The location of this Course.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this Course.

        Contains information about the location.  # noqa: E501

        :param location: The location of this Course.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def organizer(self):
        """Gets the organizer of this Course.  # noqa: E501

        Contains information about the staff member in charge of organizing the event.  # noqa: E501

        :return: The organizer of this Course.  # noqa: E501
        :rtype: Staff
        """
        return self._organizer

    @organizer.setter
    def organizer(self, organizer):
        """Sets the organizer of this Course.

        Contains information about the staff member in charge of organizing the event.  # noqa: E501

        :param organizer: The organizer of this Course.  # noqa: E501
        :type: Staff
        """

        self._organizer = organizer

    @property
    def program(self):
        """Gets the program of this Course.  # noqa: E501

        Contains information about the service category to which the course belongs.  # noqa: E501

        :return: The program of this Course.  # noqa: E501
        :rtype: Program
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this Course.

        Contains information about the service category to which the course belongs.  # noqa: E501

        :param program: The program of this Course.  # noqa: E501
        :type: Program
        """

        self._program = program

    @property
    def image_url(self):
        """Gets the image_url of this Course.  # noqa: E501

        The URL of the image associated with this course, if one exists.  # noqa: E501

        :return: The image_url of this Course.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Course.

        The URL of the image associated with this course, if one exists.  # noqa: E501

        :param image_url: The image_url of this Course.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Course, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Course):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
