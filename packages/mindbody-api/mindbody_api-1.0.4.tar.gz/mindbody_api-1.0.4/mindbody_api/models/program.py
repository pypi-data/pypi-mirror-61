# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Program(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'schedule_type': 'str',
        'cancel_offset': 'int'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'schedule_type': 'ScheduleType',
        'cancel_offset': 'CancelOffset'
    }

    def __init__(self, id=None, name=None, schedule_type=None, cancel_offset=None):  # noqa: E501
        """Program - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._schedule_type = None
        self._cancel_offset = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if schedule_type is not None:
            self.schedule_type = schedule_type
        if cancel_offset is not None:
            self.cancel_offset = cancel_offset

    @property
    def id(self):
        """Gets the id of this Program.  # noqa: E501

        The service category’s ID.  # noqa: E501

        :return: The id of this Program.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Program.

        The service category’s ID.  # noqa: E501

        :param id: The id of this Program.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Program.  # noqa: E501

        The name of this service category.  # noqa: E501

        :return: The name of this Program.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Program.

        The name of this service category.  # noqa: E501

        :param name: The name of this Program.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def schedule_type(self):
        """Gets the schedule_type of this Program.  # noqa: E501

        The service category’s schedule type.  # noqa: E501

        :return: The schedule_type of this Program.  # noqa: E501
        :rtype: str
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this Program.

        The service category’s schedule type.  # noqa: E501

        :param schedule_type: The schedule_type of this Program.  # noqa: E501
        :type: str
        """
        allowed_values = ["All", "Class", "Enrollment", "Appointment", "Resource", "Media", "Arrival"]  # noqa: E501
        if schedule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule_type` ({0}), must be one of {1}"  # noqa: E501
                .format(schedule_type, allowed_values)
            )

        self._schedule_type = schedule_type

    @property
    def cancel_offset(self):
        """Gets the cancel_offset of this Program.  # noqa: E501

        The offset to use for the service category.  # noqa: E501

        :return: The cancel_offset of this Program.  # noqa: E501
        :rtype: int
        """
        return self._cancel_offset

    @cancel_offset.setter
    def cancel_offset(self, cancel_offset):
        """Sets the cancel_offset of this Program.

        The offset to use for the service category.  # noqa: E501

        :param cancel_offset: The cancel_offset of this Program.  # noqa: E501
        :type: int
        """

        self._cancel_offset = cancel_offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Program, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Program):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
