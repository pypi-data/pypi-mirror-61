# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreditCardInfo(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'credit_card_number': 'str',
        'exp_month': 'str',
        'exp_year': 'str',
        'billing_name': 'str',
        'billing_address': 'str',
        'billing_city': 'str',
        'billing_state': 'str',
        'billing_postal_code': 'str',
        'save_info': 'bool'
    }

    attribute_map = {
        'credit_card_number': 'CreditCardNumber',
        'exp_month': 'ExpMonth',
        'exp_year': 'ExpYear',
        'billing_name': 'BillingName',
        'billing_address': 'BillingAddress',
        'billing_city': 'BillingCity',
        'billing_state': 'BillingState',
        'billing_postal_code': 'BillingPostalCode',
        'save_info': 'SaveInfo'
    }

    def __init__(self, credit_card_number=None, exp_month=None, exp_year=None, billing_name=None, billing_address=None, billing_city=None, billing_state=None, billing_postal_code=None, save_info=None):  # noqa: E501
        """CreditCardInfo - a model defined in Swagger"""  # noqa: E501

        self._credit_card_number = None
        self._exp_month = None
        self._exp_year = None
        self._billing_name = None
        self._billing_address = None
        self._billing_city = None
        self._billing_state = None
        self._billing_postal_code = None
        self._save_info = None
        self.discriminator = None

        if credit_card_number is not None:
            self.credit_card_number = credit_card_number
        if exp_month is not None:
            self.exp_month = exp_month
        if exp_year is not None:
            self.exp_year = exp_year
        if billing_name is not None:
            self.billing_name = billing_name
        if billing_address is not None:
            self.billing_address = billing_address
        if billing_city is not None:
            self.billing_city = billing_city
        if billing_state is not None:
            self.billing_state = billing_state
        if billing_postal_code is not None:
            self.billing_postal_code = billing_postal_code
        if save_info is not None:
            self.save_info = save_info

    @property
    def credit_card_number(self):
        """Gets the credit_card_number of this CreditCardInfo.  # noqa: E501


        :return: The credit_card_number of this CreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._credit_card_number

    @credit_card_number.setter
    def credit_card_number(self, credit_card_number):
        """Sets the credit_card_number of this CreditCardInfo.


        :param credit_card_number: The credit_card_number of this CreditCardInfo.  # noqa: E501
        :type: str
        """

        self._credit_card_number = credit_card_number

    @property
    def exp_month(self):
        """Gets the exp_month of this CreditCardInfo.  # noqa: E501


        :return: The exp_month of this CreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """Sets the exp_month of this CreditCardInfo.


        :param exp_month: The exp_month of this CreditCardInfo.  # noqa: E501
        :type: str
        """

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """Gets the exp_year of this CreditCardInfo.  # noqa: E501


        :return: The exp_year of this CreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """Sets the exp_year of this CreditCardInfo.


        :param exp_year: The exp_year of this CreditCardInfo.  # noqa: E501
        :type: str
        """

        self._exp_year = exp_year

    @property
    def billing_name(self):
        """Gets the billing_name of this CreditCardInfo.  # noqa: E501


        :return: The billing_name of this CreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._billing_name

    @billing_name.setter
    def billing_name(self, billing_name):
        """Sets the billing_name of this CreditCardInfo.


        :param billing_name: The billing_name of this CreditCardInfo.  # noqa: E501
        :type: str
        """

        self._billing_name = billing_name

    @property
    def billing_address(self):
        """Gets the billing_address of this CreditCardInfo.  # noqa: E501


        :return: The billing_address of this CreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._billing_address

    @billing_address.setter
    def billing_address(self, billing_address):
        """Sets the billing_address of this CreditCardInfo.


        :param billing_address: The billing_address of this CreditCardInfo.  # noqa: E501
        :type: str
        """

        self._billing_address = billing_address

    @property
    def billing_city(self):
        """Gets the billing_city of this CreditCardInfo.  # noqa: E501


        :return: The billing_city of this CreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._billing_city

    @billing_city.setter
    def billing_city(self, billing_city):
        """Sets the billing_city of this CreditCardInfo.


        :param billing_city: The billing_city of this CreditCardInfo.  # noqa: E501
        :type: str
        """

        self._billing_city = billing_city

    @property
    def billing_state(self):
        """Gets the billing_state of this CreditCardInfo.  # noqa: E501


        :return: The billing_state of this CreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._billing_state

    @billing_state.setter
    def billing_state(self, billing_state):
        """Sets the billing_state of this CreditCardInfo.


        :param billing_state: The billing_state of this CreditCardInfo.  # noqa: E501
        :type: str
        """

        self._billing_state = billing_state

    @property
    def billing_postal_code(self):
        """Gets the billing_postal_code of this CreditCardInfo.  # noqa: E501


        :return: The billing_postal_code of this CreditCardInfo.  # noqa: E501
        :rtype: str
        """
        return self._billing_postal_code

    @billing_postal_code.setter
    def billing_postal_code(self, billing_postal_code):
        """Sets the billing_postal_code of this CreditCardInfo.


        :param billing_postal_code: The billing_postal_code of this CreditCardInfo.  # noqa: E501
        :type: str
        """

        self._billing_postal_code = billing_postal_code

    @property
    def save_info(self):
        """Gets the save_info of this CreditCardInfo.  # noqa: E501


        :return: The save_info of this CreditCardInfo.  # noqa: E501
        :rtype: bool
        """
        return self._save_info

    @save_info.setter
    def save_info(self, save_info):
        """Sets the save_info of this CreditCardInfo.


        :param save_info: The save_info of this CreditCardInfo.  # noqa: E501
        :type: bool
        """

        self._save_info = save_info

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreditCardInfo, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditCardInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
