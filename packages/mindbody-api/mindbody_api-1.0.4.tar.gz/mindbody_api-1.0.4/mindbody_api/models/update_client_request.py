# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.client import Client  # noqa: F401,E501


class UpdateClientRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client': 'Client',
        'test': 'bool',
        'cross_regional_update': 'bool',
        'new_id': 'str'
    }

    attribute_map = {
        'client': 'Client',
        'test': 'Test',
        'cross_regional_update': 'CrossRegionalUpdate',
        'new_id': 'NewId'
    }

    def __init__(self, client=None, test=None, cross_regional_update=None, new_id=None):  # noqa: E501
        """UpdateClientRequest - a model defined in Swagger"""  # noqa: E501

        self._client = None
        self._test = None
        self._cross_regional_update = None
        self._new_id = None
        self.discriminator = None

        self.client = client
        if test is not None:
            self.test = test
        if cross_regional_update is not None:
            self.cross_regional_update = cross_regional_update
        if new_id is not None:
            self.new_id = new_id

    @property
    def client(self):
        """Gets the client of this UpdateClientRequest.  # noqa: E501

        Contains information about the client to be updated. The client ID is used to look up the existing client to update and any specified values are updated.  # noqa: E501

        :return: The client of this UpdateClientRequest.  # noqa: E501
        :rtype: Client
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this UpdateClientRequest.

        Contains information about the client to be updated. The client ID is used to look up the existing client to update and any specified values are updated.  # noqa: E501

        :param client: The client of this UpdateClientRequest.  # noqa: E501
        :type: Client
        """
        if client is None:
            raise ValueError("Invalid value for `client`, must not be `None`")  # noqa: E501

        self._client = client

    @property
    def test(self):
        """Gets the test of this UpdateClientRequest.  # noqa: E501

        When `true`, indicates that test mode is enabled. The method is validated, but no client data is added or updated.<br />  Default: **false**  # noqa: E501

        :return: The test of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this UpdateClientRequest.

        When `true`, indicates that test mode is enabled. The method is validated, but no client data is added or updated.<br />  Default: **false**  # noqa: E501

        :param test: The test of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._test = test

    @property
    def cross_regional_update(self):
        """Gets the cross_regional_update of this UpdateClientRequest.  # noqa: E501

        When `true`, the updated information is propagated to all of the region’s sites where the client has a profile.<br />  When `false`, only the local client is updated.<br />  Default: **true**  # noqa: E501

        :return: The cross_regional_update of this UpdateClientRequest.  # noqa: E501
        :rtype: bool
        """
        return self._cross_regional_update

    @cross_regional_update.setter
    def cross_regional_update(self, cross_regional_update):
        """Sets the cross_regional_update of this UpdateClientRequest.

        When `true`, the updated information is propagated to all of the region’s sites where the client has a profile.<br />  When `false`, only the local client is updated.<br />  Default: **true**  # noqa: E501

        :param cross_regional_update: The cross_regional_update of this UpdateClientRequest.  # noqa: E501
        :type: bool
        """

        self._cross_regional_update = cross_regional_update

    @property
    def new_id(self):
        """Gets the new_id of this UpdateClientRequest.  # noqa: E501

        The new RSSID to be used for the client. Use `NewId` to assign a specific number to be a client’s ID. If that number is not available, the call returns an error. This RSSID must be unique within the subscriber’s site. If this is a cross-regional update, the RSSID must be unique across the region. If the requested number is already in use, an error is returned.  # noqa: E501

        :return: The new_id of this UpdateClientRequest.  # noqa: E501
        :rtype: str
        """
        return self._new_id

    @new_id.setter
    def new_id(self, new_id):
        """Sets the new_id of this UpdateClientRequest.

        The new RSSID to be used for the client. Use `NewId` to assign a specific number to be a client’s ID. If that number is not available, the call returns an error. This RSSID must be unique within the subscriber’s site. If this is a cross-regional update, the RSSID must be unique across the region. If the requested number is already in use, an error is returned.  # noqa: E501

        :param new_id: The new_id of this UpdateClientRequest.  # noqa: E501
        :type: str
        """

        self._new_id = new_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateClientRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateClientRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
