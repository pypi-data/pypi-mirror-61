# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateAppointmentRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'appointment_id': 'int',
        'end_date_time': 'datetime',
        'execute': 'str',
        'gender_preference': 'str',
        'notes': 'str',
        'provider_id': 'str',
        'resource_ids': 'list[int]',
        'send_email': 'bool',
        'session_type_id': 'int',
        'staff_id': 'int',
        'start_date_time': 'datetime',
        'test': 'bool'
    }

    attribute_map = {
        'appointment_id': 'AppointmentId',
        'end_date_time': 'EndDateTime',
        'execute': 'Execute',
        'gender_preference': 'GenderPreference',
        'notes': 'Notes',
        'provider_id': 'ProviderId',
        'resource_ids': 'ResourceIds',
        'send_email': 'SendEmail',
        'session_type_id': 'SessionTypeId',
        'staff_id': 'StaffId',
        'start_date_time': 'StartDateTime',
        'test': 'Test'
    }

    def __init__(self, appointment_id=None, end_date_time=None, execute=None, gender_preference=None, notes=None, provider_id=None, resource_ids=None, send_email=None, session_type_id=None, staff_id=None, start_date_time=None, test=None):  # noqa: E501
        """UpdateAppointmentRequest - a model defined in Swagger"""  # noqa: E501

        self._appointment_id = None
        self._end_date_time = None
        self._execute = None
        self._gender_preference = None
        self._notes = None
        self._provider_id = None
        self._resource_ids = None
        self._send_email = None
        self._session_type_id = None
        self._staff_id = None
        self._start_date_time = None
        self._test = None
        self.discriminator = None

        self.appointment_id = appointment_id
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if execute is not None:
            self.execute = execute
        if gender_preference is not None:
            self.gender_preference = gender_preference
        if notes is not None:
            self.notes = notes
        if provider_id is not None:
            self.provider_id = provider_id
        if resource_ids is not None:
            self.resource_ids = resource_ids
        if send_email is not None:
            self.send_email = send_email
        if session_type_id is not None:
            self.session_type_id = session_type_id
        if staff_id is not None:
            self.staff_id = staff_id
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if test is not None:
            self.test = test

    @property
    def appointment_id(self):
        """Gets the appointment_id of this UpdateAppointmentRequest.  # noqa: E501

        The appointments unique ID.  # noqa: E501

        :return: The appointment_id of this UpdateAppointmentRequest.  # noqa: E501
        :rtype: int
        """
        return self._appointment_id

    @appointment_id.setter
    def appointment_id(self, appointment_id):
        """Sets the appointment_id of this UpdateAppointmentRequest.

        The appointments unique ID.  # noqa: E501

        :param appointment_id: The appointment_id of this UpdateAppointmentRequest.  # noqa: E501
        :type: int
        """
        if appointment_id is None:
            raise ValueError("Invalid value for `appointment_id`, must not be `None`")  # noqa: E501

        self._appointment_id = appointment_id

    @property
    def end_date_time(self):
        """Gets the end_date_time of this UpdateAppointmentRequest.  # noqa: E501

        The end date and time of the new appointment.   <br />Default: **StartDateTime**, offset by the staff member’s default appointment duration.  # noqa: E501

        :return: The end_date_time of this UpdateAppointmentRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this UpdateAppointmentRequest.

        The end date and time of the new appointment.   <br />Default: **StartDateTime**, offset by the staff member’s default appointment duration.  # noqa: E501

        :param end_date_time: The end_date_time of this UpdateAppointmentRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def execute(self):
        """Gets the execute of this UpdateAppointmentRequest.  # noqa: E501

        The action taken to add this appointment.  # noqa: E501

        :return: The execute of this UpdateAppointmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._execute

    @execute.setter
    def execute(self, execute):
        """Sets the execute of this UpdateAppointmentRequest.

        The action taken to add this appointment.  # noqa: E501

        :param execute: The execute of this UpdateAppointmentRequest.  # noqa: E501
        :type: str
        """

        self._execute = execute

    @property
    def gender_preference(self):
        """Gets the gender_preference of this UpdateAppointmentRequest.  # noqa: E501

        The client’s service provider gender preference.  # noqa: E501

        :return: The gender_preference of this UpdateAppointmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._gender_preference

    @gender_preference.setter
    def gender_preference(self, gender_preference):
        """Sets the gender_preference of this UpdateAppointmentRequest.

        The client’s service provider gender preference.  # noqa: E501

        :param gender_preference: The gender_preference of this UpdateAppointmentRequest.  # noqa: E501
        :type: str
        """

        self._gender_preference = gender_preference

    @property
    def notes(self):
        """Gets the notes of this UpdateAppointmentRequest.  # noqa: E501

        Any general notes about this appointment.  # noqa: E501

        :return: The notes of this UpdateAppointmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this UpdateAppointmentRequest.

        Any general notes about this appointment.  # noqa: E501

        :param notes: The notes of this UpdateAppointmentRequest.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def provider_id(self):
        """Gets the provider_id of this UpdateAppointmentRequest.  # noqa: E501

        If a user has Complementary and Alternative Medicine features enabled, this parameter assigns a provider ID to the appointment.  # noqa: E501

        :return: The provider_id of this UpdateAppointmentRequest.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this UpdateAppointmentRequest.

        If a user has Complementary and Alternative Medicine features enabled, this parameter assigns a provider ID to the appointment.  # noqa: E501

        :param provider_id: The provider_id of this UpdateAppointmentRequest.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def resource_ids(self):
        """Gets the resource_ids of this UpdateAppointmentRequest.  # noqa: E501

        A list of resource IDs to associate with the new appointment.  # noqa: E501

        :return: The resource_ids of this UpdateAppointmentRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._resource_ids

    @resource_ids.setter
    def resource_ids(self, resource_ids):
        """Sets the resource_ids of this UpdateAppointmentRequest.

        A list of resource IDs to associate with the new appointment.  # noqa: E501

        :param resource_ids: The resource_ids of this UpdateAppointmentRequest.  # noqa: E501
        :type: list[int]
        """

        self._resource_ids = resource_ids

    @property
    def send_email(self):
        """Gets the send_email of this UpdateAppointmentRequest.  # noqa: E501

        Whether to send client an email for cancellations. An email is sent only if the client has an email address and automatic emails have been set up.   <br />Default: **false**  # noqa: E501

        :return: The send_email of this UpdateAppointmentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this UpdateAppointmentRequest.

        Whether to send client an email for cancellations. An email is sent only if the client has an email address and automatic emails have been set up.   <br />Default: **false**  # noqa: E501

        :param send_email: The send_email of this UpdateAppointmentRequest.  # noqa: E501
        :type: bool
        """

        self._send_email = send_email

    @property
    def session_type_id(self):
        """Gets the session_type_id of this UpdateAppointmentRequest.  # noqa: E501

        The session type associated with the new appointment.  # noqa: E501

        :return: The session_type_id of this UpdateAppointmentRequest.  # noqa: E501
        :rtype: int
        """
        return self._session_type_id

    @session_type_id.setter
    def session_type_id(self, session_type_id):
        """Sets the session_type_id of this UpdateAppointmentRequest.

        The session type associated with the new appointment.  # noqa: E501

        :param session_type_id: The session_type_id of this UpdateAppointmentRequest.  # noqa: E501
        :type: int
        """

        self._session_type_id = session_type_id

    @property
    def staff_id(self):
        """Gets the staff_id of this UpdateAppointmentRequest.  # noqa: E501

        The ID of the staff member who is adding the new appointment.  # noqa: E501

        :return: The staff_id of this UpdateAppointmentRequest.  # noqa: E501
        :rtype: int
        """
        return self._staff_id

    @staff_id.setter
    def staff_id(self, staff_id):
        """Sets the staff_id of this UpdateAppointmentRequest.

        The ID of the staff member who is adding the new appointment.  # noqa: E501

        :param staff_id: The staff_id of this UpdateAppointmentRequest.  # noqa: E501
        :type: int
        """

        self._staff_id = staff_id

    @property
    def start_date_time(self):
        """Gets the start_date_time of this UpdateAppointmentRequest.  # noqa: E501

        The start date and time of the new appointment.  # noqa: E501

        :return: The start_date_time of this UpdateAppointmentRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this UpdateAppointmentRequest.

        The start date and time of the new appointment.  # noqa: E501

        :param start_date_time: The start_date_time of this UpdateAppointmentRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def test(self):
        """Gets the test of this UpdateAppointmentRequest.  # noqa: E501

        When `true`, indicates that the method is to be validated, but no new appointment data is added.   <br />Default: **false**  # noqa: E501

        :return: The test of this UpdateAppointmentRequest.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this UpdateAppointmentRequest.

        When `true`, indicates that the method is to be validated, but no new appointment data is added.   <br />Default: **false**  # noqa: E501

        :param test: The test of this UpdateAppointmentRequest.  # noqa: E501
        :type: bool
        """

        self._test = test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateAppointmentRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateAppointmentRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
