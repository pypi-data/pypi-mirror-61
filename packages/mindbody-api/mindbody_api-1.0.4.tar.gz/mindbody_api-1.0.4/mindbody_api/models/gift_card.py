# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.gift_card_layout import GiftCardLayout  # noqa: F401,E501


class GiftCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'location_ids': 'list[int]',
        'description': 'str',
        'editable_by_consumer': 'bool',
        'card_value': 'float',
        'sale_price': 'float',
        'sold_online': 'bool',
        'membership_restriction_ids': 'list[int]',
        'gift_card_terms': 'str',
        'contact_info': 'str',
        'display_logo': 'bool',
        'layouts': 'list[GiftCardLayout]'
    }

    attribute_map = {
        'id': 'Id',
        'location_ids': 'LocationIds',
        'description': 'Description',
        'editable_by_consumer': 'EditableByConsumer',
        'card_value': 'CardValue',
        'sale_price': 'SalePrice',
        'sold_online': 'SoldOnline',
        'membership_restriction_ids': 'MembershipRestrictionIds',
        'gift_card_terms': 'GiftCardTerms',
        'contact_info': 'ContactInfo',
        'display_logo': 'DisplayLogo',
        'layouts': 'Layouts'
    }

    def __init__(self, id=None, location_ids=None, description=None, editable_by_consumer=None, card_value=None, sale_price=None, sold_online=None, membership_restriction_ids=None, gift_card_terms=None, contact_info=None, display_logo=None, layouts=None):  # noqa: E501
        """GiftCard - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._location_ids = None
        self._description = None
        self._editable_by_consumer = None
        self._card_value = None
        self._sale_price = None
        self._sold_online = None
        self._membership_restriction_ids = None
        self._gift_card_terms = None
        self._contact_info = None
        self._display_logo = None
        self._layouts = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if location_ids is not None:
            self.location_ids = location_ids
        if description is not None:
            self.description = description
        if editable_by_consumer is not None:
            self.editable_by_consumer = editable_by_consumer
        if card_value is not None:
            self.card_value = card_value
        if sale_price is not None:
            self.sale_price = sale_price
        if sold_online is not None:
            self.sold_online = sold_online
        if membership_restriction_ids is not None:
            self.membership_restriction_ids = membership_restriction_ids
        if gift_card_terms is not None:
            self.gift_card_terms = gift_card_terms
        if contact_info is not None:
            self.contact_info = contact_info
        if display_logo is not None:
            self.display_logo = display_logo
        if layouts is not None:
            self.layouts = layouts

    @property
    def id(self):
        """Gets the id of this GiftCard.  # noqa: E501

        The gift card's `ProductID`.  # noqa: E501

        :return: The id of this GiftCard.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this GiftCard.

        The gift card's `ProductID`.  # noqa: E501

        :param id: The id of this GiftCard.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def location_ids(self):
        """Gets the location_ids of this GiftCard.  # noqa: E501

        The IDs of the locations where the gift card is sold.  # noqa: E501

        :return: The location_ids of this GiftCard.  # noqa: E501
        :rtype: list[int]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this GiftCard.

        The IDs of the locations where the gift card is sold.  # noqa: E501

        :param location_ids: The location_ids of this GiftCard.  # noqa: E501
        :type: list[int]
        """

        self._location_ids = location_ids

    @property
    def description(self):
        """Gets the description of this GiftCard.  # noqa: E501

        A description of the gift card.  # noqa: E501

        :return: The description of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this GiftCard.

        A description of the gift card.  # noqa: E501

        :param description: The description of this GiftCard.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def editable_by_consumer(self):
        """Gets the editable_by_consumer of this GiftCard.  # noqa: E501

        When `true`, indicates that the gift card can be edited by the client.  # noqa: E501

        :return: The editable_by_consumer of this GiftCard.  # noqa: E501
        :rtype: bool
        """
        return self._editable_by_consumer

    @editable_by_consumer.setter
    def editable_by_consumer(self, editable_by_consumer):
        """Sets the editable_by_consumer of this GiftCard.

        When `true`, indicates that the gift card can be edited by the client.  # noqa: E501

        :param editable_by_consumer: The editable_by_consumer of this GiftCard.  # noqa: E501
        :type: bool
        """

        self._editable_by_consumer = editable_by_consumer

    @property
    def card_value(self):
        """Gets the card_value of this GiftCard.  # noqa: E501

        The value of the gift card.  # noqa: E501

        :return: The card_value of this GiftCard.  # noqa: E501
        :rtype: float
        """
        return self._card_value

    @card_value.setter
    def card_value(self, card_value):
        """Sets the card_value of this GiftCard.

        The value of the gift card.  # noqa: E501

        :param card_value: The card_value of this GiftCard.  # noqa: E501
        :type: float
        """

        self._card_value = card_value

    @property
    def sale_price(self):
        """Gets the sale_price of this GiftCard.  # noqa: E501

        The sale price of the gift card, if applicable.  # noqa: E501

        :return: The sale_price of this GiftCard.  # noqa: E501
        :rtype: float
        """
        return self._sale_price

    @sale_price.setter
    def sale_price(self, sale_price):
        """Sets the sale_price of this GiftCard.

        The sale price of the gift card, if applicable.  # noqa: E501

        :param sale_price: The sale_price of this GiftCard.  # noqa: E501
        :type: float
        """

        self._sale_price = sale_price

    @property
    def sold_online(self):
        """Gets the sold_online of this GiftCard.  # noqa: E501

        When `true`, indicates that the gift card is sold online.  # noqa: E501

        :return: The sold_online of this GiftCard.  # noqa: E501
        :rtype: bool
        """
        return self._sold_online

    @sold_online.setter
    def sold_online(self, sold_online):
        """Sets the sold_online of this GiftCard.

        When `true`, indicates that the gift card is sold online.  # noqa: E501

        :param sold_online: The sold_online of this GiftCard.  # noqa: E501
        :type: bool
        """

        self._sold_online = sold_online

    @property
    def membership_restriction_ids(self):
        """Gets the membership_restriction_ids of this GiftCard.  # noqa: E501

        A list of IDs for membership restrictions, if this card is restricted to members with certain types of memberships.  # noqa: E501

        :return: The membership_restriction_ids of this GiftCard.  # noqa: E501
        :rtype: list[int]
        """
        return self._membership_restriction_ids

    @membership_restriction_ids.setter
    def membership_restriction_ids(self, membership_restriction_ids):
        """Sets the membership_restriction_ids of this GiftCard.

        A list of IDs for membership restrictions, if this card is restricted to members with certain types of memberships.  # noqa: E501

        :param membership_restriction_ids: The membership_restriction_ids of this GiftCard.  # noqa: E501
        :type: list[int]
        """

        self._membership_restriction_ids = membership_restriction_ids

    @property
    def gift_card_terms(self):
        """Gets the gift_card_terms of this GiftCard.  # noqa: E501

        The terms of the gift card.  # noqa: E501

        :return: The gift_card_terms of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._gift_card_terms

    @gift_card_terms.setter
    def gift_card_terms(self, gift_card_terms):
        """Sets the gift_card_terms of this GiftCard.

        The terms of the gift card.  # noqa: E501

        :param gift_card_terms: The gift_card_terms of this GiftCard.  # noqa: E501
        :type: str
        """

        self._gift_card_terms = gift_card_terms

    @property
    def contact_info(self):
        """Gets the contact_info of this GiftCard.  # noqa: E501

        Contact information for the gift card.  # noqa: E501

        :return: The contact_info of this GiftCard.  # noqa: E501
        :rtype: str
        """
        return self._contact_info

    @contact_info.setter
    def contact_info(self, contact_info):
        """Sets the contact_info of this GiftCard.

        Contact information for the gift card.  # noqa: E501

        :param contact_info: The contact_info of this GiftCard.  # noqa: E501
        :type: str
        """

        self._contact_info = contact_info

    @property
    def display_logo(self):
        """Gets the display_logo of this GiftCard.  # noqa: E501

        When `true`, indicates that the logo should be displayed on the gift card.  # noqa: E501

        :return: The display_logo of this GiftCard.  # noqa: E501
        :rtype: bool
        """
        return self._display_logo

    @display_logo.setter
    def display_logo(self, display_logo):
        """Sets the display_logo of this GiftCard.

        When `true`, indicates that the logo should be displayed on the gift card.  # noqa: E501

        :param display_logo: The display_logo of this GiftCard.  # noqa: E501
        :type: bool
        """

        self._display_logo = display_logo

    @property
    def layouts(self):
        """Gets the layouts of this GiftCard.  # noqa: E501

        A list of layouts available for the gift card.  # noqa: E501

        :return: The layouts of this GiftCard.  # noqa: E501
        :rtype: list[GiftCardLayout]
        """
        return self._layouts

    @layouts.setter
    def layouts(self, layouts):
        """Sets the layouts of this GiftCard.

        A list of layouts available for the gift card.  # noqa: E501

        :param layouts: The layouts of this GiftCard.  # noqa: E501
        :type: list[GiftCardLayout]
        """

        self._layouts = layouts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GiftCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GiftCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
