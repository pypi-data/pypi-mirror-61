# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetClassesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class_description_ids': 'list[int]',
        'class_ids': 'list[int]',
        'staff_ids': 'list[int]',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'client_id': 'str',
        'program_ids': 'list[int]',
        'session_type_ids': 'list[int]',
        'location_ids': 'list[int]',
        'semester_ids': 'list[int]',
        'hide_canceled_classes': 'bool',
        'scheduling_window': 'bool',
        'last_modified_date': 'datetime',
        'limit': 'int',
        'offset': 'int'
    }

    attribute_map = {
        'class_description_ids': 'ClassDescriptionIds',
        'class_ids': 'ClassIds',
        'staff_ids': 'StaffIds',
        'start_date_time': 'StartDateTime',
        'end_date_time': 'EndDateTime',
        'client_id': 'ClientId',
        'program_ids': 'ProgramIds',
        'session_type_ids': 'SessionTypeIds',
        'location_ids': 'LocationIds',
        'semester_ids': 'SemesterIds',
        'hide_canceled_classes': 'HideCanceledClasses',
        'scheduling_window': 'SchedulingWindow',
        'last_modified_date': 'LastModifiedDate',
        'limit': 'Limit',
        'offset': 'Offset'
    }

    def __init__(self, class_description_ids=None, class_ids=None, staff_ids=None, start_date_time=None, end_date_time=None, client_id=None, program_ids=None, session_type_ids=None, location_ids=None, semester_ids=None, hide_canceled_classes=None, scheduling_window=None, last_modified_date=None, limit=None, offset=None):  # noqa: E501
        """GetClassesRequest - a model defined in Swagger"""  # noqa: E501

        self._class_description_ids = None
        self._class_ids = None
        self._staff_ids = None
        self._start_date_time = None
        self._end_date_time = None
        self._client_id = None
        self._program_ids = None
        self._session_type_ids = None
        self._location_ids = None
        self._semester_ids = None
        self._hide_canceled_classes = None
        self._scheduling_window = None
        self._last_modified_date = None
        self._limit = None
        self._offset = None
        self.discriminator = None

        if class_description_ids is not None:
            self.class_description_ids = class_description_ids
        if class_ids is not None:
            self.class_ids = class_ids
        if staff_ids is not None:
            self.staff_ids = staff_ids
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if client_id is not None:
            self.client_id = client_id
        if program_ids is not None:
            self.program_ids = program_ids
        if session_type_ids is not None:
            self.session_type_ids = session_type_ids
        if location_ids is not None:
            self.location_ids = location_ids
        if semester_ids is not None:
            self.semester_ids = semester_ids
        if hide_canceled_classes is not None:
            self.hide_canceled_classes = hide_canceled_classes
        if scheduling_window is not None:
            self.scheduling_window = scheduling_window
        if last_modified_date is not None:
            self.last_modified_date = last_modified_date
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset

    @property
    def class_description_ids(self):
        """Gets the class_description_ids of this GetClassesRequest.  # noqa: E501

        The requested class description IDs.  # noqa: E501

        :return: The class_description_ids of this GetClassesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._class_description_ids

    @class_description_ids.setter
    def class_description_ids(self, class_description_ids):
        """Sets the class_description_ids of this GetClassesRequest.

        The requested class description IDs.  # noqa: E501

        :param class_description_ids: The class_description_ids of this GetClassesRequest.  # noqa: E501
        :type: list[int]
        """

        self._class_description_ids = class_description_ids

    @property
    def class_ids(self):
        """Gets the class_ids of this GetClassesRequest.  # noqa: E501

        The requested class IDs.  # noqa: E501

        :return: The class_ids of this GetClassesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._class_ids

    @class_ids.setter
    def class_ids(self, class_ids):
        """Sets the class_ids of this GetClassesRequest.

        The requested class IDs.  # noqa: E501

        :param class_ids: The class_ids of this GetClassesRequest.  # noqa: E501
        :type: list[int]
        """

        self._class_ids = class_ids

    @property
    def staff_ids(self):
        """Gets the staff_ids of this GetClassesRequest.  # noqa: E501

        The requested IDs of the teaching staff members.  # noqa: E501

        :return: The staff_ids of this GetClassesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._staff_ids

    @staff_ids.setter
    def staff_ids(self, staff_ids):
        """Sets the staff_ids of this GetClassesRequest.

        The requested IDs of the teaching staff members.  # noqa: E501

        :param staff_ids: The staff_ids of this GetClassesRequest.  # noqa: E501
        :type: list[int]
        """

        self._staff_ids = staff_ids

    @property
    def start_date_time(self):
        """Gets the start_date_time of this GetClassesRequest.  # noqa: E501

        The requested start date for filtering.   <br />Default: **today’s date**  # noqa: E501

        :return: The start_date_time of this GetClassesRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this GetClassesRequest.

        The requested start date for filtering.   <br />Default: **today’s date**  # noqa: E501

        :param start_date_time: The start_date_time of this GetClassesRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this GetClassesRequest.  # noqa: E501

        The requested end date for filtering.  <br />Default: **today’s date**  # noqa: E501

        :return: The end_date_time of this GetClassesRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this GetClassesRequest.

        The requested end date for filtering.  <br />Default: **today’s date**  # noqa: E501

        :param end_date_time: The end_date_time of this GetClassesRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def client_id(self):
        """Gets the client_id of this GetClassesRequest.  # noqa: E501

        The client ID of the client who is viewing this class list. Based on identity, the client may be able to see additional information, such as membership specials.  # noqa: E501

        :return: The client_id of this GetClassesRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this GetClassesRequest.

        The client ID of the client who is viewing this class list. Based on identity, the client may be able to see additional information, such as membership specials.  # noqa: E501

        :param client_id: The client_id of this GetClassesRequest.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def program_ids(self):
        """Gets the program_ids of this GetClassesRequest.  # noqa: E501

        A list of program IDs on which to base the search.  # noqa: E501

        :return: The program_ids of this GetClassesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._program_ids

    @program_ids.setter
    def program_ids(self, program_ids):
        """Sets the program_ids of this GetClassesRequest.

        A list of program IDs on which to base the search.  # noqa: E501

        :param program_ids: The program_ids of this GetClassesRequest.  # noqa: E501
        :type: list[int]
        """

        self._program_ids = program_ids

    @property
    def session_type_ids(self):
        """Gets the session_type_ids of this GetClassesRequest.  # noqa: E501

        A list of session type IDs on which to base the search.  # noqa: E501

        :return: The session_type_ids of this GetClassesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._session_type_ids

    @session_type_ids.setter
    def session_type_ids(self, session_type_ids):
        """Sets the session_type_ids of this GetClassesRequest.

        A list of session type IDs on which to base the search.  # noqa: E501

        :param session_type_ids: The session_type_ids of this GetClassesRequest.  # noqa: E501
        :type: list[int]
        """

        self._session_type_ids = session_type_ids

    @property
    def location_ids(self):
        """Gets the location_ids of this GetClassesRequest.  # noqa: E501

        A list of location IDs on which to base the search.  # noqa: E501

        :return: The location_ids of this GetClassesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this GetClassesRequest.

        A list of location IDs on which to base the search.  # noqa: E501

        :param location_ids: The location_ids of this GetClassesRequest.  # noqa: E501
        :type: list[int]
        """

        self._location_ids = location_ids

    @property
    def semester_ids(self):
        """Gets the semester_ids of this GetClassesRequest.  # noqa: E501

        A list of semester IDs on which to base the search.  # noqa: E501

        :return: The semester_ids of this GetClassesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._semester_ids

    @semester_ids.setter
    def semester_ids(self, semester_ids):
        """Sets the semester_ids of this GetClassesRequest.

        A list of semester IDs on which to base the search.  # noqa: E501

        :param semester_ids: The semester_ids of this GetClassesRequest.  # noqa: E501
        :type: list[int]
        """

        self._semester_ids = semester_ids

    @property
    def hide_canceled_classes(self):
        """Gets the hide_canceled_classes of this GetClassesRequest.  # noqa: E501

        When `true`, canceled classes are removed from the response.<br />  When `false`, canceled classes are included in the response.<br />  Default: **false**  # noqa: E501

        :return: The hide_canceled_classes of this GetClassesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._hide_canceled_classes

    @hide_canceled_classes.setter
    def hide_canceled_classes(self, hide_canceled_classes):
        """Sets the hide_canceled_classes of this GetClassesRequest.

        When `true`, canceled classes are removed from the response.<br />  When `false`, canceled classes are included in the response.<br />  Default: **false**  # noqa: E501

        :param hide_canceled_classes: The hide_canceled_classes of this GetClassesRequest.  # noqa: E501
        :type: bool
        """

        self._hide_canceled_classes = hide_canceled_classes

    @property
    def scheduling_window(self):
        """Gets the scheduling_window of this GetClassesRequest.  # noqa: E501

        When `true`, classes outside scheduling window are removed from the response.<br />  When `false`, classes are included in the response, regardless of the scheduling window.<br />  Default: **false**  # noqa: E501

        :return: The scheduling_window of this GetClassesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._scheduling_window

    @scheduling_window.setter
    def scheduling_window(self, scheduling_window):
        """Sets the scheduling_window of this GetClassesRequest.

        When `true`, classes outside scheduling window are removed from the response.<br />  When `false`, classes are included in the response, regardless of the scheduling window.<br />  Default: **false**  # noqa: E501

        :param scheduling_window: The scheduling_window of this GetClassesRequest.  # noqa: E501
        :type: bool
        """

        self._scheduling_window = scheduling_window

    @property
    def last_modified_date(self):
        """Gets the last_modified_date of this GetClassesRequest.  # noqa: E501

        When included in the request, only records modified on or after the `LastModifiedDate` specified are included in the response.  # noqa: E501

        :return: The last_modified_date of this GetClassesRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date

    @last_modified_date.setter
    def last_modified_date(self, last_modified_date):
        """Sets the last_modified_date of this GetClassesRequest.

        When included in the request, only records modified on or after the `LastModifiedDate` specified are included in the response.  # noqa: E501

        :param last_modified_date: The last_modified_date of this GetClassesRequest.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date = last_modified_date

    @property
    def limit(self):
        """Gets the limit of this GetClassesRequest.  # noqa: E501

        Number of results to include, defaults to 100  # noqa: E501

        :return: The limit of this GetClassesRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetClassesRequest.

        Number of results to include, defaults to 100  # noqa: E501

        :param limit: The limit of this GetClassesRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this GetClassesRequest.  # noqa: E501

        Page offset, defaults to 0.  # noqa: E501

        :return: The offset of this GetClassesRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GetClassesRequest.

        Page offset, defaults to 0.  # noqa: E501

        :param offset: The offset of this GetClassesRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetClassesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetClassesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
