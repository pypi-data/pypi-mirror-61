# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaginationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'requested_limit': 'int',
        'requested_offset': 'int',
        'page_size': 'int',
        'total_results': 'int'
    }

    attribute_map = {
        'requested_limit': 'RequestedLimit',
        'requested_offset': 'RequestedOffset',
        'page_size': 'PageSize',
        'total_results': 'TotalResults'
    }

    def __init__(self, requested_limit=None, requested_offset=None, page_size=None, total_results=None):  # noqa: E501
        """PaginationResponse - a model defined in Swagger"""  # noqa: E501

        self._requested_limit = None
        self._requested_offset = None
        self._page_size = None
        self._total_results = None
        self.discriminator = None

        if requested_limit is not None:
            self.requested_limit = requested_limit
        if requested_offset is not None:
            self.requested_offset = requested_offset
        if page_size is not None:
            self.page_size = page_size
        if total_results is not None:
            self.total_results = total_results

    @property
    def requested_limit(self):
        """Gets the requested_limit of this PaginationResponse.  # noqa: E501

        Limit from pagination request  # noqa: E501

        :return: The requested_limit of this PaginationResponse.  # noqa: E501
        :rtype: int
        """
        return self._requested_limit

    @requested_limit.setter
    def requested_limit(self, requested_limit):
        """Sets the requested_limit of this PaginationResponse.

        Limit from pagination request  # noqa: E501

        :param requested_limit: The requested_limit of this PaginationResponse.  # noqa: E501
        :type: int
        """

        self._requested_limit = requested_limit

    @property
    def requested_offset(self):
        """Gets the requested_offset of this PaginationResponse.  # noqa: E501

        Offset from pagination request  # noqa: E501

        :return: The requested_offset of this PaginationResponse.  # noqa: E501
        :rtype: int
        """
        return self._requested_offset

    @requested_offset.setter
    def requested_offset(self, requested_offset):
        """Sets the requested_offset of this PaginationResponse.

        Offset from pagination request  # noqa: E501

        :param requested_offset: The requested_offset of this PaginationResponse.  # noqa: E501
        :type: int
        """

        self._requested_offset = requested_offset

    @property
    def page_size(self):
        """Gets the page_size of this PaginationResponse.  # noqa: E501

        Number of results returned in this response  # noqa: E501

        :return: The page_size of this PaginationResponse.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this PaginationResponse.

        Number of results returned in this response  # noqa: E501

        :param page_size: The page_size of this PaginationResponse.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    @property
    def total_results(self):
        """Gets the total_results of this PaginationResponse.  # noqa: E501

        Total number of results in dataset  # noqa: E501

        :return: The total_results of this PaginationResponse.  # noqa: E501
        :rtype: int
        """
        return self._total_results

    @total_results.setter
    def total_results(self, total_results):
        """Sets the total_results of this PaginationResponse.

        Total number of results in dataset  # noqa: E501

        :param total_results: The total_results of this PaginationResponse.  # noqa: E501
        :type: int
        """

        self._total_results = total_results

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PaginationResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaginationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
