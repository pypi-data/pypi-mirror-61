# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.add_contact_log_type import AddContactLogType  # noqa: F401,E501


class AddContactLogRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'assigned_to_staff_id': 'int',
        'text': 'str',
        'followup_by_date': 'datetime',
        'contact_method': 'str',
        'contact_name': 'str',
        'comments': 'list[str]',
        'types': 'list[AddContactLogType]',
        'test': 'bool'
    }

    attribute_map = {
        'client_id': 'ClientId',
        'assigned_to_staff_id': 'AssignedToStaffId',
        'text': 'Text',
        'followup_by_date': 'FollowupByDate',
        'contact_method': 'ContactMethod',
        'contact_name': 'ContactName',
        'comments': 'Comments',
        'types': 'Types',
        'test': 'Test'
    }

    def __init__(self, client_id=None, assigned_to_staff_id=None, text=None, followup_by_date=None, contact_method=None, contact_name=None, comments=None, types=None, test=None):  # noqa: E501
        """AddContactLogRequest - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._assigned_to_staff_id = None
        self._text = None
        self._followup_by_date = None
        self._contact_method = None
        self._contact_name = None
        self._comments = None
        self._types = None
        self._test = None
        self.discriminator = None

        self.client_id = client_id
        if assigned_to_staff_id is not None:
            self.assigned_to_staff_id = assigned_to_staff_id
        if text is not None:
            self.text = text
        if followup_by_date is not None:
            self.followup_by_date = followup_by_date
        self.contact_method = contact_method
        if contact_name is not None:
            self.contact_name = contact_name
        if comments is not None:
            self.comments = comments
        if types is not None:
            self.types = types
        if test is not None:
            self.test = test

    @property
    def client_id(self):
        """Gets the client_id of this AddContactLogRequest.  # noqa: E501

        The ID of the client whose contact log is being added.  # noqa: E501

        :return: The client_id of this AddContactLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AddContactLogRequest.

        The ID of the client whose contact log is being added.  # noqa: E501

        :param client_id: The client_id of this AddContactLogRequest.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def assigned_to_staff_id(self):
        """Gets the assigned_to_staff_id of this AddContactLogRequest.  # noqa: E501

        The ID of the staff member to whom the contact log is assigned.  # noqa: E501

        :return: The assigned_to_staff_id of this AddContactLogRequest.  # noqa: E501
        :rtype: int
        """
        return self._assigned_to_staff_id

    @assigned_to_staff_id.setter
    def assigned_to_staff_id(self, assigned_to_staff_id):
        """Sets the assigned_to_staff_id of this AddContactLogRequest.

        The ID of the staff member to whom the contact log is assigned.  # noqa: E501

        :param assigned_to_staff_id: The assigned_to_staff_id of this AddContactLogRequest.  # noqa: E501
        :type: int
        """

        self._assigned_to_staff_id = assigned_to_staff_id

    @property
    def text(self):
        """Gets the text of this AddContactLogRequest.  # noqa: E501

        The body of the contact log.  # noqa: E501

        :return: The text of this AddContactLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this AddContactLogRequest.

        The body of the contact log.  # noqa: E501

        :param text: The text of this AddContactLogRequest.  # noqa: E501
        :type: str
        """

        self._text = text

    @property
    def followup_by_date(self):
        """Gets the followup_by_date of this AddContactLogRequest.  # noqa: E501

        The date by which the assigned staff member should complete this contact log.  # noqa: E501

        :return: The followup_by_date of this AddContactLogRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._followup_by_date

    @followup_by_date.setter
    def followup_by_date(self, followup_by_date):
        """Sets the followup_by_date of this AddContactLogRequest.

        The date by which the assigned staff member should complete this contact log.  # noqa: E501

        :param followup_by_date: The followup_by_date of this AddContactLogRequest.  # noqa: E501
        :type: datetime
        """

        self._followup_by_date = followup_by_date

    @property
    def contact_method(self):
        """Gets the contact_method of this AddContactLogRequest.  # noqa: E501

        How the client wants to be contacted.  # noqa: E501

        :return: The contact_method of this AddContactLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._contact_method

    @contact_method.setter
    def contact_method(self, contact_method):
        """Sets the contact_method of this AddContactLogRequest.

        How the client wants to be contacted.  # noqa: E501

        :param contact_method: The contact_method of this AddContactLogRequest.  # noqa: E501
        :type: str
        """
        if contact_method is None:
            raise ValueError("Invalid value for `contact_method`, must not be `None`")  # noqa: E501

        self._contact_method = contact_method

    @property
    def contact_name(self):
        """Gets the contact_name of this AddContactLogRequest.  # noqa: E501

        The name of the person to be contacted by the assigned staff member.  # noqa: E501

        :return: The contact_name of this AddContactLogRequest.  # noqa: E501
        :rtype: str
        """
        return self._contact_name

    @contact_name.setter
    def contact_name(self, contact_name):
        """Sets the contact_name of this AddContactLogRequest.

        The name of the person to be contacted by the assigned staff member.  # noqa: E501

        :param contact_name: The contact_name of this AddContactLogRequest.  # noqa: E501
        :type: str
        """

        self._contact_name = contact_name

    @property
    def comments(self):
        """Gets the comments of this AddContactLogRequest.  # noqa: E501

        Any comments on the contact log.  # noqa: E501

        :return: The comments of this AddContactLogRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this AddContactLogRequest.

        Any comments on the contact log.  # noqa: E501

        :param comments: The comments of this AddContactLogRequest.  # noqa: E501
        :type: list[str]
        """

        self._comments = comments

    @property
    def types(self):
        """Gets the types of this AddContactLogRequest.  # noqa: E501

        The contact log types used to tag this contact log.  # noqa: E501

        :return: The types of this AddContactLogRequest.  # noqa: E501
        :rtype: list[AddContactLogType]
        """
        return self._types

    @types.setter
    def types(self, types):
        """Sets the types of this AddContactLogRequest.

        The contact log types used to tag this contact log.  # noqa: E501

        :param types: The types of this AddContactLogRequest.  # noqa: E501
        :type: list[AddContactLogType]
        """

        self._types = types

    @property
    def test(self):
        """Gets the test of this AddContactLogRequest.  # noqa: E501

        When `true`, indicates that this is a test request and no data is inserted into the subscriber’s database.<br />  When `false`, the database is updated.  # noqa: E501

        :return: The test of this AddContactLogRequest.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this AddContactLogRequest.

        When `true`, indicates that this is a test request and no data is inserted into the subscriber’s database.<br />  When `false`, the database is updated.  # noqa: E501

        :param test: The test of this AddContactLogRequest.  # noqa: E501
        :type: bool
        """

        self._test = test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddContactLogRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddContactLogRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
