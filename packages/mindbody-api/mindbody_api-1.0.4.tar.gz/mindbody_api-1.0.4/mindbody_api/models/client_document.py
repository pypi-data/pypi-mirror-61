# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientDocument(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_name': 'str',
        'media_type': 'str',
        'buffer': 'str'
    }

    attribute_map = {
        'file_name': 'FileName',
        'media_type': 'MediaType',
        'buffer': 'Buffer'
    }

    def __init__(self, file_name=None, media_type=None, buffer=None):  # noqa: E501
        """ClientDocument - a model defined in Swagger"""  # noqa: E501

        self._file_name = None
        self._media_type = None
        self._buffer = None
        self.discriminator = None

        self.file_name = file_name
        self.media_type = media_type
        self.buffer = buffer

    @property
    def file_name(self):
        """Gets the file_name of this ClientDocument.  # noqa: E501

        The name of the file to be used on the client’s documents page when it is uploaded.  # noqa: E501

        :return: The file_name of this ClientDocument.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this ClientDocument.

        The name of the file to be used on the client’s documents page when it is uploaded.  # noqa: E501

        :param file_name: The file_name of this ClientDocument.  # noqa: E501
        :type: str
        """
        if file_name is None:
            raise ValueError("Invalid value for `file_name`, must not be `None`")  # noqa: E501

        self._file_name = file_name

    @property
    def media_type(self):
        """Gets the media_type of this ClientDocument.  # noqa: E501

        The type of file or file extension. Possible values are:  * pdf  * jpg  * jpeg  * tif  * tiff  * png  * doc  * docx  * bmp  * txt  * rtf  * xlsx  * xls  * gif  * zip  * ppt  * pptx  * mov  # noqa: E501

        :return: The media_type of this ClientDocument.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this ClientDocument.

        The type of file or file extension. Possible values are:  * pdf  * jpg  * jpeg  * tif  * tiff  * png  * doc  * docx  * bmp  * txt  * rtf  * xlsx  * xls  * gif  * zip  * ppt  * pptx  * mov  # noqa: E501

        :param media_type: The media_type of this ClientDocument.  # noqa: E501
        :type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")  # noqa: E501

        self._media_type = media_type

    @property
    def buffer(self):
        """Gets the buffer of this ClientDocument.  # noqa: E501

        A Base64-encoded string representation of the file’s byte array.  # noqa: E501

        :return: The buffer of this ClientDocument.  # noqa: E501
        :rtype: str
        """
        return self._buffer

    @buffer.setter
    def buffer(self, buffer):
        """Sets the buffer of this ClientDocument.

        A Base64-encoded string representation of the file’s byte array.  # noqa: E501

        :param buffer: The buffer of this ClientDocument.  # noqa: E501
        :type: str
        """
        if buffer is None:
            raise ValueError("Invalid value for `buffer`, must not be `None`")  # noqa: E501
        if buffer is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', buffer):  # noqa: E501
            raise ValueError(r"Invalid value for `buffer`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._buffer = buffer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientDocument, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientDocument):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
