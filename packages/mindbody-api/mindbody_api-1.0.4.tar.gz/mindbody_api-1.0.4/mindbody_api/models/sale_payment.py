# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SalePayment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'amount': 'float',
        'method': 'int',
        'type': 'str',
        'notes': 'str'
    }

    attribute_map = {
        'id': 'Id',
        'amount': 'Amount',
        'method': 'Method',
        'type': 'Type',
        'notes': 'Notes'
    }

    def __init__(self, id=None, amount=None, method=None, type=None, notes=None):  # noqa: E501
        """SalePayment - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._amount = None
        self._method = None
        self._type = None
        self._notes = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if amount is not None:
            self.amount = amount
        if method is not None:
            self.method = method
        if type is not None:
            self.type = type
        if notes is not None:
            self.notes = notes

    @property
    def id(self):
        """Gets the id of this SalePayment.  # noqa: E501

        A unique identifier for this payment.  # noqa: E501

        :return: The id of this SalePayment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SalePayment.

        A unique identifier for this payment.  # noqa: E501

        :param id: The id of this SalePayment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def amount(self):
        """Gets the amount of this SalePayment.  # noqa: E501

        The amount of this payment.  # noqa: E501

        :return: The amount of this SalePayment.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SalePayment.

        The amount of this payment.  # noqa: E501

        :param amount: The amount of this SalePayment.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def method(self):
        """Gets the method of this SalePayment.  # noqa: E501

        The method for this payment.  # noqa: E501

        :return: The method of this SalePayment.  # noqa: E501
        :rtype: int
        """
        return self._method

    @method.setter
    def method(self, method):
        """Sets the method of this SalePayment.

        The method for this payment.  # noqa: E501

        :param method: The method of this SalePayment.  # noqa: E501
        :type: int
        """

        self._method = method

    @property
    def type(self):
        """Gets the type of this SalePayment.  # noqa: E501

        The type of payment.  # noqa: E501

        :return: The type of this SalePayment.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SalePayment.

        The type of payment.  # noqa: E501

        :param type: The type of this SalePayment.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def notes(self):
        """Gets the notes of this SalePayment.  # noqa: E501

        Notes about this payment.  # noqa: E501

        :return: The notes of this SalePayment.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this SalePayment.

        Notes about this payment.  # noqa: E501

        :param notes: The notes of this SalePayment.  # noqa: E501
        :type: str
        """

        self._notes = notes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalePayment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalePayment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
