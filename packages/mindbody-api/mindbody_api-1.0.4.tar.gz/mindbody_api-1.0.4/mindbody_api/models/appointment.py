# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.resource import Resource  # noqa: F401,E501


class Appointment(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'gender_preference': 'str',
        'duration': 'int',
        'provider_id': 'str',
        'id': 'int',
        'status': 'str',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'notes': 'str',
        'staff_requested': 'bool',
        'program_id': 'int',
        'session_type_id': 'int',
        'location_id': 'int',
        'staff_id': 'int',
        'client_id': 'str',
        'first_appointment': 'bool',
        'client_service_id': 'int',
        'resources': 'list[Resource]'
    }

    attribute_map = {
        'gender_preference': 'GenderPreference',
        'duration': 'Duration',
        'provider_id': 'ProviderId',
        'id': 'Id',
        'status': 'Status',
        'start_date_time': 'StartDateTime',
        'end_date_time': 'EndDateTime',
        'notes': 'Notes',
        'staff_requested': 'StaffRequested',
        'program_id': 'ProgramId',
        'session_type_id': 'SessionTypeId',
        'location_id': 'LocationId',
        'staff_id': 'StaffId',
        'client_id': 'ClientId',
        'first_appointment': 'FirstAppointment',
        'client_service_id': 'ClientServiceId',
        'resources': 'Resources'
    }

    def __init__(self, gender_preference=None, duration=None, provider_id=None, id=None, status=None, start_date_time=None, end_date_time=None, notes=None, staff_requested=None, program_id=None, session_type_id=None, location_id=None, staff_id=None, client_id=None, first_appointment=None, client_service_id=None, resources=None):  # noqa: E501
        """Appointment - a model defined in Swagger"""  # noqa: E501

        self._gender_preference = None
        self._duration = None
        self._provider_id = None
        self._id = None
        self._status = None
        self._start_date_time = None
        self._end_date_time = None
        self._notes = None
        self._staff_requested = None
        self._program_id = None
        self._session_type_id = None
        self._location_id = None
        self._staff_id = None
        self._client_id = None
        self._first_appointment = None
        self._client_service_id = None
        self._resources = None
        self.discriminator = None

        if gender_preference is not None:
            self.gender_preference = gender_preference
        if duration is not None:
            self.duration = duration
        if provider_id is not None:
            self.provider_id = provider_id
        if id is not None:
            self.id = id
        if status is not None:
            self.status = status
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if notes is not None:
            self.notes = notes
        if staff_requested is not None:
            self.staff_requested = staff_requested
        if program_id is not None:
            self.program_id = program_id
        if session_type_id is not None:
            self.session_type_id = session_type_id
        if location_id is not None:
            self.location_id = location_id
        if staff_id is not None:
            self.staff_id = staff_id
        if client_id is not None:
            self.client_id = client_id
        if first_appointment is not None:
            self.first_appointment = first_appointment
        if client_service_id is not None:
            self.client_service_id = client_service_id
        if resources is not None:
            self.resources = resources

    @property
    def gender_preference(self):
        """Gets the gender_preference of this Appointment.  # noqa: E501

        The preferred gender of the appointment provider.  # noqa: E501

        :return: The gender_preference of this Appointment.  # noqa: E501
        :rtype: str
        """
        return self._gender_preference

    @gender_preference.setter
    def gender_preference(self, gender_preference):
        """Sets the gender_preference of this Appointment.

        The preferred gender of the appointment provider.  # noqa: E501

        :param gender_preference: The gender_preference of this Appointment.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Female", "Male"]  # noqa: E501
        if gender_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `gender_preference` ({0}), must be one of {1}"  # noqa: E501
                .format(gender_preference, allowed_values)
            )

        self._gender_preference = gender_preference

    @property
    def duration(self):
        """Gets the duration of this Appointment.  # noqa: E501

        The duration of the appointment.  # noqa: E501

        :return: The duration of this Appointment.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Appointment.

        The duration of the appointment.  # noqa: E501

        :param duration: The duration of this Appointment.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def provider_id(self):
        """Gets the provider_id of this Appointment.  # noqa: E501

        If a user has Complementary and Alternative Medicine features enabled, this property indicates the provider assigned to the appointment.  # noqa: E501

        :return: The provider_id of this Appointment.  # noqa: E501
        :rtype: str
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """Sets the provider_id of this Appointment.

        If a user has Complementary and Alternative Medicine features enabled, this property indicates the provider assigned to the appointment.  # noqa: E501

        :param provider_id: The provider_id of this Appointment.  # noqa: E501
        :type: str
        """

        self._provider_id = provider_id

    @property
    def id(self):
        """Gets the id of this Appointment.  # noqa: E501

        The unique ID of the appointment.  # noqa: E501

        :return: The id of this Appointment.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Appointment.

        The unique ID of the appointment.  # noqa: E501

        :param id: The id of this Appointment.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def status(self):
        """Gets the status of this Appointment.  # noqa: E501

        The status of this appointment.  # noqa: E501

        :return: The status of this Appointment.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Appointment.

        The status of this appointment.  # noqa: E501

        :param status: The status of this Appointment.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Requested", "Booked", "Completed", "Confirmed", "Arrived", "NoShow", "Cancelled", "LateCancelled"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def start_date_time(self):
        """Gets the start_date_time of this Appointment.  # noqa: E501

        The date and time the appointment is to start.  # noqa: E501

        :return: The start_date_time of this Appointment.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this Appointment.

        The date and time the appointment is to start.  # noqa: E501

        :param start_date_time: The start_date_time of this Appointment.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this Appointment.  # noqa: E501

        The date and time the appointment is to end.  # noqa: E501

        :return: The end_date_time of this Appointment.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this Appointment.

        The date and time the appointment is to end.  # noqa: E501

        :param end_date_time: The end_date_time of this Appointment.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def notes(self):
        """Gets the notes of this Appointment.  # noqa: E501

        Any notes associated with the appointment.  # noqa: E501

        :return: The notes of this Appointment.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Appointment.

        Any notes associated with the appointment.  # noqa: E501

        :param notes: The notes of this Appointment.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def staff_requested(self):
        """Gets the staff_requested of this Appointment.  # noqa: E501

        When `true`, indicates that the staff member was requested specifically by the client.  # noqa: E501

        :return: The staff_requested of this Appointment.  # noqa: E501
        :rtype: bool
        """
        return self._staff_requested

    @staff_requested.setter
    def staff_requested(self, staff_requested):
        """Sets the staff_requested of this Appointment.

        When `true`, indicates that the staff member was requested specifically by the client.  # noqa: E501

        :param staff_requested: The staff_requested of this Appointment.  # noqa: E501
        :type: bool
        """

        self._staff_requested = staff_requested

    @property
    def program_id(self):
        """Gets the program_id of this Appointment.  # noqa: E501

        The ID of the program to which this appointment belongs.  # noqa: E501

        :return: The program_id of this Appointment.  # noqa: E501
        :rtype: int
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this Appointment.

        The ID of the program to which this appointment belongs.  # noqa: E501

        :param program_id: The program_id of this Appointment.  # noqa: E501
        :type: int
        """

        self._program_id = program_id

    @property
    def session_type_id(self):
        """Gets the session_type_id of this Appointment.  # noqa: E501

        The ID of the session type of this appointment.  # noqa: E501

        :return: The session_type_id of this Appointment.  # noqa: E501
        :rtype: int
        """
        return self._session_type_id

    @session_type_id.setter
    def session_type_id(self, session_type_id):
        """Sets the session_type_id of this Appointment.

        The ID of the session type of this appointment.  # noqa: E501

        :param session_type_id: The session_type_id of this Appointment.  # noqa: E501
        :type: int
        """

        self._session_type_id = session_type_id

    @property
    def location_id(self):
        """Gets the location_id of this Appointment.  # noqa: E501

        The ID of the location where this appointment is to take place.  # noqa: E501

        :return: The location_id of this Appointment.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Appointment.

        The ID of the location where this appointment is to take place.  # noqa: E501

        :param location_id: The location_id of this Appointment.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def staff_id(self):
        """Gets the staff_id of this Appointment.  # noqa: E501

        The ID of the staff member providing the service for this appointment.  # noqa: E501

        :return: The staff_id of this Appointment.  # noqa: E501
        :rtype: int
        """
        return self._staff_id

    @staff_id.setter
    def staff_id(self, staff_id):
        """Sets the staff_id of this Appointment.

        The ID of the staff member providing the service for this appointment.  # noqa: E501

        :param staff_id: The staff_id of this Appointment.  # noqa: E501
        :type: int
        """

        self._staff_id = staff_id

    @property
    def client_id(self):
        """Gets the client_id of this Appointment.  # noqa: E501

        The RSSID of the client who is booked for this appointment.  # noqa: E501

        :return: The client_id of this Appointment.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Appointment.

        The RSSID of the client who is booked for this appointment.  # noqa: E501

        :param client_id: The client_id of this Appointment.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def first_appointment(self):
        """Gets the first_appointment of this Appointment.  # noqa: E501

        When `true`, indicates that this is the client’s first appointment at this site.  # noqa: E501

        :return: The first_appointment of this Appointment.  # noqa: E501
        :rtype: bool
        """
        return self._first_appointment

    @first_appointment.setter
    def first_appointment(self, first_appointment):
        """Sets the first_appointment of this Appointment.

        When `true`, indicates that this is the client’s first appointment at this site.  # noqa: E501

        :param first_appointment: The first_appointment of this Appointment.  # noqa: E501
        :type: bool
        """

        self._first_appointment = first_appointment

    @property
    def client_service_id(self):
        """Gets the client_service_id of this Appointment.  # noqa: E501

        The ID of the pass on the client’s account that is to pay for this appointment.  # noqa: E501

        :return: The client_service_id of this Appointment.  # noqa: E501
        :rtype: int
        """
        return self._client_service_id

    @client_service_id.setter
    def client_service_id(self, client_service_id):
        """Sets the client_service_id of this Appointment.

        The ID of the pass on the client’s account that is to pay for this appointment.  # noqa: E501

        :param client_service_id: The client_service_id of this Appointment.  # noqa: E501
        :type: int
        """

        self._client_service_id = client_service_id

    @property
    def resources(self):
        """Gets the resources of this Appointment.  # noqa: E501

        The resources this appointment is to use.  # noqa: E501

        :return: The resources of this Appointment.  # noqa: E501
        :rtype: list[Resource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """Sets the resources of this Appointment.

        The resources this appointment is to use.  # noqa: E501

        :param resources: The resources of this Appointment.  # noqa: E501
        :type: list[Resource]
        """

        self._resources = resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Appointment, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Appointment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
