# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.color import Color  # noqa: F401,E501
from mindbody_api.models.size import Size  # noqa: F401,E501


class Product(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'price': 'float',
        'tax_included': 'float',
        'tax_rate': 'float',
        'id': 'str',
        'group_id': 'int',
        'name': 'str',
        'online_price': 'float',
        'short_description': 'str',
        'long_description': 'str',
        'color': 'Color',
        'size': 'Size'
    }

    attribute_map = {
        'price': 'Price',
        'tax_included': 'TaxIncluded',
        'tax_rate': 'TaxRate',
        'id': 'Id',
        'group_id': 'GroupId',
        'name': 'Name',
        'online_price': 'OnlinePrice',
        'short_description': 'ShortDescription',
        'long_description': 'LongDescription',
        'color': 'Color',
        'size': 'Size'
    }

    def __init__(self, price=None, tax_included=None, tax_rate=None, id=None, group_id=None, name=None, online_price=None, short_description=None, long_description=None, color=None, size=None):  # noqa: E501
        """Product - a model defined in Swagger"""  # noqa: E501

        self._price = None
        self._tax_included = None
        self._tax_rate = None
        self._id = None
        self._group_id = None
        self._name = None
        self._online_price = None
        self._short_description = None
        self._long_description = None
        self._color = None
        self._size = None
        self.discriminator = None

        if price is not None:
            self.price = price
        if tax_included is not None:
            self.tax_included = tax_included
        if tax_rate is not None:
            self.tax_rate = tax_rate
        if id is not None:
            self.id = id
        if group_id is not None:
            self.group_id = group_id
        if name is not None:
            self.name = name
        if online_price is not None:
            self.online_price = online_price
        if short_description is not None:
            self.short_description = short_description
        if long_description is not None:
            self.long_description = long_description
        if color is not None:
            self.color = color
        if size is not None:
            self.size = size

    @property
    def price(self):
        """Gets the price of this Product.  # noqa: E501

        The price of the product.  # noqa: E501

        :return: The price of this Product.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Product.

        The price of the product.  # noqa: E501

        :param price: The price of this Product.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def tax_included(self):
        """Gets the tax_included of this Product.  # noqa: E501

        If tax inclusive-pricing is enabled, this field shows how much tax was added to the price.  # noqa: E501

        :return: The tax_included of this Product.  # noqa: E501
        :rtype: float
        """
        return self._tax_included

    @tax_included.setter
    def tax_included(self, tax_included):
        """Sets the tax_included of this Product.

        If tax inclusive-pricing is enabled, this field shows how much tax was added to the price.  # noqa: E501

        :param tax_included: The tax_included of this Product.  # noqa: E501
        :type: float
        """

        self._tax_included = tax_included

    @property
    def tax_rate(self):
        """Gets the tax_rate of this Product.  # noqa: E501

        The tax rate that was applied to this purchase.  # noqa: E501

        :return: The tax_rate of this Product.  # noqa: E501
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this Product.

        The tax rate that was applied to this purchase.  # noqa: E501

        :param tax_rate: The tax_rate of this Product.  # noqa: E501
        :type: float
        """

        self._tax_rate = tax_rate

    @property
    def id(self):
        """Gets the id of this Product.  # noqa: E501

        The unique ID of the product variant, for example, a particular size and color combination.  # noqa: E501

        :return: The id of this Product.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Product.

        The unique ID of the product variant, for example, a particular size and color combination.  # noqa: E501

        :param id: The id of this Product.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def group_id(self):
        """Gets the group_id of this Product.  # noqa: E501

        The unique ID of the product group.  # noqa: E501

        :return: The group_id of this Product.  # noqa: E501
        :rtype: int
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id):
        """Sets the group_id of this Product.

        The unique ID of the product group.  # noqa: E501

        :param group_id: The group_id of this Product.  # noqa: E501
        :type: int
        """

        self._group_id = group_id

    @property
    def name(self):
        """Gets the name of this Product.  # noqa: E501

        The name of the product.  # noqa: E501

        :return: The name of this Product.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Product.

        The name of the product.  # noqa: E501

        :param name: The name of this Product.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def online_price(self):
        """Gets the online_price of this Product.  # noqa: E501

        The online price of the product.  # noqa: E501

        :return: The online_price of this Product.  # noqa: E501
        :rtype: float
        """
        return self._online_price

    @online_price.setter
    def online_price(self, online_price):
        """Sets the online_price of this Product.

        The online price of the product.  # noqa: E501

        :param online_price: The online_price of this Product.  # noqa: E501
        :type: float
        """

        self._online_price = online_price

    @property
    def short_description(self):
        """Gets the short_description of this Product.  # noqa: E501

        A short description of the product.  # noqa: E501

        :return: The short_description of this Product.  # noqa: E501
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """Sets the short_description of this Product.

        A short description of the product.  # noqa: E501

        :param short_description: The short_description of this Product.  # noqa: E501
        :type: str
        """

        self._short_description = short_description

    @property
    def long_description(self):
        """Gets the long_description of this Product.  # noqa: E501

        A longer description of the product.  # noqa: E501

        :return: The long_description of this Product.  # noqa: E501
        :rtype: str
        """
        return self._long_description

    @long_description.setter
    def long_description(self, long_description):
        """Sets the long_description of this Product.

        A longer description of the product.  # noqa: E501

        :param long_description: The long_description of this Product.  # noqa: E501
        :type: str
        """

        self._long_description = long_description

    @property
    def color(self):
        """Gets the color of this Product.  # noqa: E501

        The color of the product.  # noqa: E501

        :return: The color of this Product.  # noqa: E501
        :rtype: Color
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this Product.

        The color of the product.  # noqa: E501

        :param color: The color of this Product.  # noqa: E501
        :type: Color
        """

        self._color = color

    @property
    def size(self):
        """Gets the size of this Product.  # noqa: E501

        Contains information about the size of the product.  # noqa: E501

        :return: The size of this Product.  # noqa: E501
        :rtype: Size
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this Product.

        Contains information about the size of the product.  # noqa: E501

        :param size: The size of this Product.  # noqa: E501
        :type: Size
        """

        self._size = size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Product, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
