# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.product import Product  # noqa: F401,E501
from mindbody_api.models.service import Service  # noqa: F401,E501


class Package(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'discount_percentage': 'float',
        'sell_online': 'bool',
        'services': 'list[Service]',
        'products': 'list[Product]'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'discount_percentage': 'DiscountPercentage',
        'sell_online': 'SellOnline',
        'services': 'Services',
        'products': 'Products'
    }

    def __init__(self, id=None, name=None, discount_percentage=None, sell_online=None, services=None, products=None):  # noqa: E501
        """Package - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._discount_percentage = None
        self._sell_online = None
        self._services = None
        self._products = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if discount_percentage is not None:
            self.discount_percentage = discount_percentage
        if sell_online is not None:
            self.sell_online = sell_online
        if services is not None:
            self.services = services
        if products is not None:
            self.products = products

    @property
    def id(self):
        """Gets the id of this Package.  # noqa: E501

        The ID of the package.  # noqa: E501

        :return: The id of this Package.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Package.

        The ID of the package.  # noqa: E501

        :param id: The id of this Package.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Package.  # noqa: E501

        The name of the package.  # noqa: E501

        :return: The name of this Package.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Package.

        The name of the package.  # noqa: E501

        :param name: The name of this Package.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def discount_percentage(self):
        """Gets the discount_percentage of this Package.  # noqa: E501

        The discount percentage applied to the package.  # noqa: E501

        :return: The discount_percentage of this Package.  # noqa: E501
        :rtype: float
        """
        return self._discount_percentage

    @discount_percentage.setter
    def discount_percentage(self, discount_percentage):
        """Sets the discount_percentage of this Package.

        The discount percentage applied to the package.  # noqa: E501

        :param discount_percentage: The discount_percentage of this Package.  # noqa: E501
        :type: float
        """

        self._discount_percentage = discount_percentage

    @property
    def sell_online(self):
        """Gets the sell_online of this Package.  # noqa: E501

        When `true`, only products that can be sold online are returned.<br />  When `false`, all products are returned.  # noqa: E501

        :return: The sell_online of this Package.  # noqa: E501
        :rtype: bool
        """
        return self._sell_online

    @sell_online.setter
    def sell_online(self, sell_online):
        """Sets the sell_online of this Package.

        When `true`, only products that can be sold online are returned.<br />  When `false`, all products are returned.  # noqa: E501

        :param sell_online: The sell_online of this Package.  # noqa: E501
        :type: bool
        """

        self._sell_online = sell_online

    @property
    def services(self):
        """Gets the services of this Package.  # noqa: E501

        Information about the services in the packages.  # noqa: E501

        :return: The services of this Package.  # noqa: E501
        :rtype: list[Service]
        """
        return self._services

    @services.setter
    def services(self, services):
        """Sets the services of this Package.

        Information about the services in the packages.  # noqa: E501

        :param services: The services of this Package.  # noqa: E501
        :type: list[Service]
        """

        self._services = services

    @property
    def products(self):
        """Gets the products of this Package.  # noqa: E501

        Information about the products in the packages.  # noqa: E501

        :return: The products of this Package.  # noqa: E501
        :rtype: list[Product]
        """
        return self._products

    @products.setter
    def products(self, products):
        """Sets the products of this Package.

        Information about the products in the packages.  # noqa: E501

        :param products: The products of this Package.  # noqa: E501
        :type: list[Product]
        """

        self._products = products

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Package, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Package):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
