# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.assigned_client_index import AssignedClientIndex  # noqa: F401,E501
from mindbody_api.models.client_credit_card import ClientCreditCard  # noqa: F401,E501
from mindbody_api.models.client_relationship import ClientRelationship  # noqa: F401,E501
from mindbody_api.models.custom_client_field_value import CustomClientFieldValue  # noqa: F401,E501
from mindbody_api.models.liability import Liability  # noqa: F401,E501
from mindbody_api.models.prospect_stage import ProspectStage  # noqa: F401,E501
from mindbody_api.models.sales_rep import SalesRep  # noqa: F401,E501


class Client(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'appointment_gender_preference': 'str',
        'birth_date': 'datetime',
        'country': 'str',
        'creation_date': 'datetime',
        'custom_client_fields': 'list[CustomClientFieldValue]',
        'client_credit_card': 'ClientCreditCard',
        'client_indexes': 'list[AssignedClientIndex]',
        'client_relationships': 'list[ClientRelationship]',
        'first_appointment_date': 'datetime',
        'first_name': 'str',
        'id': 'str',
        'is_company': 'bool',
        'is_prospect': 'bool',
        'last_name': 'str',
        'liability': 'Liability',
        'liability_release': 'bool',
        'membership_icon': 'int',
        'mobile_provider': 'int',
        'notes': 'str',
        'state': 'str',
        'unique_id': 'int',
        'last_modified_date_time': 'datetime',
        'red_alert': 'str',
        'yellow_alert': 'str',
        'middle_name': 'str',
        'prospect_stage': 'ProspectStage',
        'email': 'str',
        'mobile_phone': 'str',
        'home_phone': 'str',
        'work_phone': 'str',
        'account_balance': 'float',
        'address_line1': 'str',
        'address_line2': 'str',
        'city': 'str',
        'postal_code': 'str',
        'work_extension': 'str',
        'referred_by': 'str',
        'photo_url': 'str',
        'emergency_contact_info_name': 'str',
        'emergency_contact_info_email': 'str',
        'emergency_contact_info_phone': 'str',
        'emergency_contact_info_relationship': 'str',
        'gender': 'str',
        'last_formula_notes': 'str',
        'active': 'bool',
        'sales_reps': 'list[SalesRep]',
        'status': 'str',
        'action': 'str',
        'send_account_emails': 'bool',
        'send_account_texts': 'bool',
        'send_promotional_emails': 'bool',
        'send_promotional_texts': 'bool',
        'send_schedule_emails': 'bool',
        'send_schedule_texts': 'bool'
    }

    attribute_map = {
        'appointment_gender_preference': 'AppointmentGenderPreference',
        'birth_date': 'BirthDate',
        'country': 'Country',
        'creation_date': 'CreationDate',
        'custom_client_fields': 'CustomClientFields',
        'client_credit_card': 'ClientCreditCard',
        'client_indexes': 'ClientIndexes',
        'client_relationships': 'ClientRelationships',
        'first_appointment_date': 'FirstAppointmentDate',
        'first_name': 'FirstName',
        'id': 'Id',
        'is_company': 'IsCompany',
        'is_prospect': 'IsProspect',
        'last_name': 'LastName',
        'liability': 'Liability',
        'liability_release': 'LiabilityRelease',
        'membership_icon': 'MembershipIcon',
        'mobile_provider': 'MobileProvider',
        'notes': 'Notes',
        'state': 'State',
        'unique_id': 'UniqueId',
        'last_modified_date_time': 'LastModifiedDateTime',
        'red_alert': 'RedAlert',
        'yellow_alert': 'YellowAlert',
        'middle_name': 'MiddleName',
        'prospect_stage': 'ProspectStage',
        'email': 'Email',
        'mobile_phone': 'MobilePhone',
        'home_phone': 'HomePhone',
        'work_phone': 'WorkPhone',
        'account_balance': 'AccountBalance',
        'address_line1': 'AddressLine1',
        'address_line2': 'AddressLine2',
        'city': 'City',
        'postal_code': 'PostalCode',
        'work_extension': 'WorkExtension',
        'referred_by': 'ReferredBy',
        'photo_url': 'PhotoUrl',
        'emergency_contact_info_name': 'EmergencyContactInfoName',
        'emergency_contact_info_email': 'EmergencyContactInfoEmail',
        'emergency_contact_info_phone': 'EmergencyContactInfoPhone',
        'emergency_contact_info_relationship': 'EmergencyContactInfoRelationship',
        'gender': 'Gender',
        'last_formula_notes': 'LastFormulaNotes',
        'active': 'Active',
        'sales_reps': 'SalesReps',
        'status': 'Status',
        'action': 'Action',
        'send_account_emails': 'SendAccountEmails',
        'send_account_texts': 'SendAccountTexts',
        'send_promotional_emails': 'SendPromotionalEmails',
        'send_promotional_texts': 'SendPromotionalTexts',
        'send_schedule_emails': 'SendScheduleEmails',
        'send_schedule_texts': 'SendScheduleTexts'
    }

    def __init__(self, appointment_gender_preference=None, birth_date=None, country=None, creation_date=None, custom_client_fields=None, client_credit_card=None, client_indexes=None, client_relationships=None, first_appointment_date=None, first_name=None, id=None, is_company=None, is_prospect=None, last_name=None, liability=None, liability_release=None, membership_icon=None, mobile_provider=None, notes=None, state=None, unique_id=None, last_modified_date_time=None, red_alert=None, yellow_alert=None, middle_name=None, prospect_stage=None, email=None, mobile_phone=None, home_phone=None, work_phone=None, account_balance=None, address_line1=None, address_line2=None, city=None, postal_code=None, work_extension=None, referred_by=None, photo_url=None, emergency_contact_info_name=None, emergency_contact_info_email=None, emergency_contact_info_phone=None, emergency_contact_info_relationship=None, gender=None, last_formula_notes=None, active=None, sales_reps=None, status=None, action=None, send_account_emails=None, send_account_texts=None, send_promotional_emails=None, send_promotional_texts=None, send_schedule_emails=None, send_schedule_texts=None):  # noqa: E501
        """Client - a model defined in Swagger"""  # noqa: E501

        self._appointment_gender_preference = None
        self._birth_date = None
        self._country = None
        self._creation_date = None
        self._custom_client_fields = None
        self._client_credit_card = None
        self._client_indexes = None
        self._client_relationships = None
        self._first_appointment_date = None
        self._first_name = None
        self._id = None
        self._is_company = None
        self._is_prospect = None
        self._last_name = None
        self._liability = None
        self._liability_release = None
        self._membership_icon = None
        self._mobile_provider = None
        self._notes = None
        self._state = None
        self._unique_id = None
        self._last_modified_date_time = None
        self._red_alert = None
        self._yellow_alert = None
        self._middle_name = None
        self._prospect_stage = None
        self._email = None
        self._mobile_phone = None
        self._home_phone = None
        self._work_phone = None
        self._account_balance = None
        self._address_line1 = None
        self._address_line2 = None
        self._city = None
        self._postal_code = None
        self._work_extension = None
        self._referred_by = None
        self._photo_url = None
        self._emergency_contact_info_name = None
        self._emergency_contact_info_email = None
        self._emergency_contact_info_phone = None
        self._emergency_contact_info_relationship = None
        self._gender = None
        self._last_formula_notes = None
        self._active = None
        self._sales_reps = None
        self._status = None
        self._action = None
        self._send_account_emails = None
        self._send_account_texts = None
        self._send_promotional_emails = None
        self._send_promotional_texts = None
        self._send_schedule_emails = None
        self._send_schedule_texts = None
        self.discriminator = None

        if appointment_gender_preference is not None:
            self.appointment_gender_preference = appointment_gender_preference
        if birth_date is not None:
            self.birth_date = birth_date
        if country is not None:
            self.country = country
        if creation_date is not None:
            self.creation_date = creation_date
        if custom_client_fields is not None:
            self.custom_client_fields = custom_client_fields
        if client_credit_card is not None:
            self.client_credit_card = client_credit_card
        if client_indexes is not None:
            self.client_indexes = client_indexes
        if client_relationships is not None:
            self.client_relationships = client_relationships
        if first_appointment_date is not None:
            self.first_appointment_date = first_appointment_date
        if first_name is not None:
            self.first_name = first_name
        if id is not None:
            self.id = id
        if is_company is not None:
            self.is_company = is_company
        if is_prospect is not None:
            self.is_prospect = is_prospect
        if last_name is not None:
            self.last_name = last_name
        if liability is not None:
            self.liability = liability
        if liability_release is not None:
            self.liability_release = liability_release
        if membership_icon is not None:
            self.membership_icon = membership_icon
        if mobile_provider is not None:
            self.mobile_provider = mobile_provider
        if notes is not None:
            self.notes = notes
        if state is not None:
            self.state = state
        if unique_id is not None:
            self.unique_id = unique_id
        if last_modified_date_time is not None:
            self.last_modified_date_time = last_modified_date_time
        if red_alert is not None:
            self.red_alert = red_alert
        if yellow_alert is not None:
            self.yellow_alert = yellow_alert
        if middle_name is not None:
            self.middle_name = middle_name
        if prospect_stage is not None:
            self.prospect_stage = prospect_stage
        if email is not None:
            self.email = email
        if mobile_phone is not None:
            self.mobile_phone = mobile_phone
        if home_phone is not None:
            self.home_phone = home_phone
        if work_phone is not None:
            self.work_phone = work_phone
        if account_balance is not None:
            self.account_balance = account_balance
        if address_line1 is not None:
            self.address_line1 = address_line1
        if address_line2 is not None:
            self.address_line2 = address_line2
        if city is not None:
            self.city = city
        if postal_code is not None:
            self.postal_code = postal_code
        if work_extension is not None:
            self.work_extension = work_extension
        if referred_by is not None:
            self.referred_by = referred_by
        if photo_url is not None:
            self.photo_url = photo_url
        if emergency_contact_info_name is not None:
            self.emergency_contact_info_name = emergency_contact_info_name
        if emergency_contact_info_email is not None:
            self.emergency_contact_info_email = emergency_contact_info_email
        if emergency_contact_info_phone is not None:
            self.emergency_contact_info_phone = emergency_contact_info_phone
        if emergency_contact_info_relationship is not None:
            self.emergency_contact_info_relationship = emergency_contact_info_relationship
        if gender is not None:
            self.gender = gender
        if last_formula_notes is not None:
            self.last_formula_notes = last_formula_notes
        if active is not None:
            self.active = active
        if sales_reps is not None:
            self.sales_reps = sales_reps
        if status is not None:
            self.status = status
        if action is not None:
            self.action = action
        if send_account_emails is not None:
            self.send_account_emails = send_account_emails
        if send_account_texts is not None:
            self.send_account_texts = send_account_texts
        if send_promotional_emails is not None:
            self.send_promotional_emails = send_promotional_emails
        if send_promotional_texts is not None:
            self.send_promotional_texts = send_promotional_texts
        if send_schedule_emails is not None:
            self.send_schedule_emails = send_schedule_emails
        if send_schedule_texts is not None:
            self.send_schedule_texts = send_schedule_texts

    @property
    def appointment_gender_preference(self):
        """Gets the appointment_gender_preference of this Client.  # noqa: E501

        The gender of staff member with whom the client prefers to book appointments.  # noqa: E501

        :return: The appointment_gender_preference of this Client.  # noqa: E501
        :rtype: str
        """
        return self._appointment_gender_preference

    @appointment_gender_preference.setter
    def appointment_gender_preference(self, appointment_gender_preference):
        """Sets the appointment_gender_preference of this Client.

        The gender of staff member with whom the client prefers to book appointments.  # noqa: E501

        :param appointment_gender_preference: The appointment_gender_preference of this Client.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Female", "Male"]  # noqa: E501
        if appointment_gender_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `appointment_gender_preference` ({0}), must be one of {1}"  # noqa: E501
                .format(appointment_gender_preference, allowed_values)
            )

        self._appointment_gender_preference = appointment_gender_preference

    @property
    def birth_date(self):
        """Gets the birth_date of this Client.  # noqa: E501

        The client’s date of birth.  # noqa: E501

        :return: The birth_date of this Client.  # noqa: E501
        :rtype: datetime
        """
        return self._birth_date

    @birth_date.setter
    def birth_date(self, birth_date):
        """Sets the birth_date of this Client.

        The client’s date of birth.  # noqa: E501

        :param birth_date: The birth_date of this Client.  # noqa: E501
        :type: datetime
        """

        self._birth_date = birth_date

    @property
    def country(self):
        """Gets the country of this Client.  # noqa: E501

        The client’s country.  # noqa: E501

        :return: The country of this Client.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Client.

        The client’s country.  # noqa: E501

        :param country: The country of this Client.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def creation_date(self):
        """Gets the creation_date of this Client.  # noqa: E501

        The date the client’s profile was created and added to the business, either by the client from the online store, or by a staff member. This value always returns in the format `yyyy-mm-ddThh:mm:ss:ms`.  # noqa: E501

        :return: The creation_date of this Client.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date):
        """Sets the creation_date of this Client.

        The date the client’s profile was created and added to the business, either by the client from the online store, or by a staff member. This value always returns in the format `yyyy-mm-ddThh:mm:ss:ms`.  # noqa: E501

        :param creation_date: The creation_date of this Client.  # noqa: E501
        :type: datetime
        """

        self._creation_date = creation_date

    @property
    def custom_client_fields(self):
        """Gets the custom_client_fields of this Client.  # noqa: E501

        Contains information about the custom client fields assigned to the client.  # noqa: E501

        :return: The custom_client_fields of this Client.  # noqa: E501
        :rtype: list[CustomClientFieldValue]
        """
        return self._custom_client_fields

    @custom_client_fields.setter
    def custom_client_fields(self, custom_client_fields):
        """Sets the custom_client_fields of this Client.

        Contains information about the custom client fields assigned to the client.  # noqa: E501

        :param custom_client_fields: The custom_client_fields of this Client.  # noqa: E501
        :type: list[CustomClientFieldValue]
        """

        self._custom_client_fields = custom_client_fields

    @property
    def client_credit_card(self):
        """Gets the client_credit_card of this Client.  # noqa: E501

        Contains information about the client’s credit card.  # noqa: E501

        :return: The client_credit_card of this Client.  # noqa: E501
        :rtype: ClientCreditCard
        """
        return self._client_credit_card

    @client_credit_card.setter
    def client_credit_card(self, client_credit_card):
        """Sets the client_credit_card of this Client.

        Contains information about the client’s credit card.  # noqa: E501

        :param client_credit_card: The client_credit_card of this Client.  # noqa: E501
        :type: ClientCreditCard
        """

        self._client_credit_card = client_credit_card

    @property
    def client_indexes(self):
        """Gets the client_indexes of this Client.  # noqa: E501

        Contains the IDs of the client’s assigned ClientIndexes and ClientIndexValues.  # noqa: E501

        :return: The client_indexes of this Client.  # noqa: E501
        :rtype: list[AssignedClientIndex]
        """
        return self._client_indexes

    @client_indexes.setter
    def client_indexes(self, client_indexes):
        """Sets the client_indexes of this Client.

        Contains the IDs of the client’s assigned ClientIndexes and ClientIndexValues.  # noqa: E501

        :param client_indexes: The client_indexes of this Client.  # noqa: E501
        :type: list[AssignedClientIndex]
        """

        self._client_indexes = client_indexes

    @property
    def client_relationships(self):
        """Gets the client_relationships of this Client.  # noqa: E501

        Contains information about the relationship between two clients.  # noqa: E501

        :return: The client_relationships of this Client.  # noqa: E501
        :rtype: list[ClientRelationship]
        """
        return self._client_relationships

    @client_relationships.setter
    def client_relationships(self, client_relationships):
        """Sets the client_relationships of this Client.

        Contains information about the relationship between two clients.  # noqa: E501

        :param client_relationships: The client_relationships of this Client.  # noqa: E501
        :type: list[ClientRelationship]
        """

        self._client_relationships = client_relationships

    @property
    def first_appointment_date(self):
        """Gets the first_appointment_date of this Client.  # noqa: E501

        The date of the client’s first booked appointment at the business.  # noqa: E501

        :return: The first_appointment_date of this Client.  # noqa: E501
        :rtype: datetime
        """
        return self._first_appointment_date

    @first_appointment_date.setter
    def first_appointment_date(self, first_appointment_date):
        """Sets the first_appointment_date of this Client.

        The date of the client’s first booked appointment at the business.  # noqa: E501

        :param first_appointment_date: The first_appointment_date of this Client.  # noqa: E501
        :type: datetime
        """

        self._first_appointment_date = first_appointment_date

    @property
    def first_name(self):
        """Gets the first_name of this Client.  # noqa: E501

        The client’s first name.  # noqa: E501

        :return: The first_name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this Client.

        The client’s first name.  # noqa: E501

        :param first_name: The first_name of this Client.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this Client.  # noqa: E501

        The client’s ID, as configured by the business owner. This is the client’s barcode ID if the business owner assigns barcodes to clients. This ID is used throughout the Public API for client-related Public API calls. When used in a POST `UpdateClient` request, the `Id` is used to identify the client for the update.  # noqa: E501

        :return: The id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Client.

        The client’s ID, as configured by the business owner. This is the client’s barcode ID if the business owner assigns barcodes to clients. This ID is used throughout the Public API for client-related Public API calls. When used in a POST `UpdateClient` request, the `Id` is used to identify the client for the update.  # noqa: E501

        :param id: The id of this Client.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def is_company(self):
        """Gets the is_company of this Client.  # noqa: E501

        When `true`, indicates that the client should be marked as a company at the business.<br />  When `false`, indicates the client is an individual and does not represent a company.  # noqa: E501

        :return: The is_company of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._is_company

    @is_company.setter
    def is_company(self, is_company):
        """Sets the is_company of this Client.

        When `true`, indicates that the client should be marked as a company at the business.<br />  When `false`, indicates the client is an individual and does not represent a company.  # noqa: E501

        :param is_company: The is_company of this Client.  # noqa: E501
        :type: bool
        """

        self._is_company = is_company

    @property
    def is_prospect(self):
        """Gets the is_prospect of this Client.  # noqa: E501

        This value is set only if the business owner allows individuals to be prospects.<br />  When `true`, indicates that the client should be marked as a prospect for the business.<br />  When `false`, indicates that the client should not be marked as a prospect for the business.  # noqa: E501

        :return: The is_prospect of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._is_prospect

    @is_prospect.setter
    def is_prospect(self, is_prospect):
        """Sets the is_prospect of this Client.

        This value is set only if the business owner allows individuals to be prospects.<br />  When `true`, indicates that the client should be marked as a prospect for the business.<br />  When `false`, indicates that the client should not be marked as a prospect for the business.  # noqa: E501

        :param is_prospect: The is_prospect of this Client.  # noqa: E501
        :type: bool
        """

        self._is_prospect = is_prospect

    @property
    def last_name(self):
        """Gets the last_name of this Client.  # noqa: E501

        The client’s last name.  # noqa: E501

        :return: The last_name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this Client.

        The client’s last name.  # noqa: E501

        :param last_name: The last_name of this Client.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def liability(self):
        """Gets the liability of this Client.  # noqa: E501

        Contains the client’s liability agreement information for the business.  # noqa: E501

        :return: The liability of this Client.  # noqa: E501
        :rtype: Liability
        """
        return self._liability

    @liability.setter
    def liability(self, liability):
        """Sets the liability of this Client.

        Contains the client’s liability agreement information for the business.  # noqa: E501

        :param liability: The liability of this Client.  # noqa: E501
        :type: Liability
        """

        self._liability = liability

    @property
    def liability_release(self):
        """Gets the liability_release of this Client.  # noqa: E501

        Passing `true` sets the client’s liability information as follows:  * `IsReleased` is set to `true`.  * `AgreementDate` is set to the time zone of the business when the call was processed.  * `ReleasedBy` is set to `null` if the call is made by the client, `0` if the call was made by the business owner, or to a specific staff member’s ID if a staff member made the call.  Passing `false` sets the client’s liability information as follows:  * `IsReleased` is set to `false`.  * `AgreementDate` is set to `null`.  * `ReleasedBy` is set to `null`.  # noqa: E501

        :return: The liability_release of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._liability_release

    @liability_release.setter
    def liability_release(self, liability_release):
        """Sets the liability_release of this Client.

        Passing `true` sets the client’s liability information as follows:  * `IsReleased` is set to `true`.  * `AgreementDate` is set to the time zone of the business when the call was processed.  * `ReleasedBy` is set to `null` if the call is made by the client, `0` if the call was made by the business owner, or to a specific staff member’s ID if a staff member made the call.  Passing `false` sets the client’s liability information as follows:  * `IsReleased` is set to `false`.  * `AgreementDate` is set to `null`.  * `ReleasedBy` is set to `null`.  # noqa: E501

        :param liability_release: The liability_release of this Client.  # noqa: E501
        :type: bool
        """

        self._liability_release = liability_release

    @property
    def membership_icon(self):
        """Gets the membership_icon of this Client.  # noqa: E501

        The ID of the [membership icon](https://support.mindbodyonline.com/s/article/203259703-Membership-Setup-screen?language=en_US) displayed next to the client’s name, if the client has a membership on their account.  # noqa: E501

        :return: The membership_icon of this Client.  # noqa: E501
        :rtype: int
        """
        return self._membership_icon

    @membership_icon.setter
    def membership_icon(self, membership_icon):
        """Sets the membership_icon of this Client.

        The ID of the [membership icon](https://support.mindbodyonline.com/s/article/203259703-Membership-Setup-screen?language=en_US) displayed next to the client’s name, if the client has a membership on their account.  # noqa: E501

        :param membership_icon: The membership_icon of this Client.  # noqa: E501
        :type: int
        """

        self._membership_icon = membership_icon

    @property
    def mobile_provider(self):
        """Gets the mobile_provider of this Client.  # noqa: E501

        The client’s mobile provider.  # noqa: E501

        :return: The mobile_provider of this Client.  # noqa: E501
        :rtype: int
        """
        return self._mobile_provider

    @mobile_provider.setter
    def mobile_provider(self, mobile_provider):
        """Sets the mobile_provider of this Client.

        The client’s mobile provider.  # noqa: E501

        :param mobile_provider: The mobile_provider of this Client.  # noqa: E501
        :type: int
        """

        self._mobile_provider = mobile_provider

    @property
    def notes(self):
        """Gets the notes of this Client.  # noqa: E501

        Any notes entered on the client’s account by staff members. This value should never be shown to clients unless the business owner has a specific reason for showing them.  # noqa: E501

        :return: The notes of this Client.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Client.

        Any notes entered on the client’s account by staff members. This value should never be shown to clients unless the business owner has a specific reason for showing them.  # noqa: E501

        :param notes: The notes of this Client.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def state(self):
        """Gets the state of this Client.  # noqa: E501

        The client’s state.  # noqa: E501

        :return: The state of this Client.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Client.

        The client’s state.  # noqa: E501

        :param state: The state of this Client.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def unique_id(self):
        """Gets the unique_id of this Client.  # noqa: E501

        The client’s system-generated ID at the business. This value cannot be changed by business owners and is always unique across all clients at the business. This ID is not widely used in the Public API, but can be used by your application to uniquely identify clients.  # noqa: E501

        :return: The unique_id of this Client.  # noqa: E501
        :rtype: int
        """
        return self._unique_id

    @unique_id.setter
    def unique_id(self, unique_id):
        """Sets the unique_id of this Client.

        The client’s system-generated ID at the business. This value cannot be changed by business owners and is always unique across all clients at the business. This ID is not widely used in the Public API, but can be used by your application to uniquely identify clients.  # noqa: E501

        :param unique_id: The unique_id of this Client.  # noqa: E501
        :type: int
        """

        self._unique_id = unique_id

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this Client.  # noqa: E501

        The UTC date and time when the client’s information was last modified.  # noqa: E501

        :return: The last_modified_date_time of this Client.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this Client.

        The UTC date and time when the client’s information was last modified.  # noqa: E501

        :param last_modified_date_time: The last_modified_date_time of this Client.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date_time = last_modified_date_time

    @property
    def red_alert(self):
        """Gets the red_alert of this Client.  # noqa: E501

        Contains any red alert information entered by the business owner for the client.  # noqa: E501

        :return: The red_alert of this Client.  # noqa: E501
        :rtype: str
        """
        return self._red_alert

    @red_alert.setter
    def red_alert(self, red_alert):
        """Sets the red_alert of this Client.

        Contains any red alert information entered by the business owner for the client.  # noqa: E501

        :param red_alert: The red_alert of this Client.  # noqa: E501
        :type: str
        """

        self._red_alert = red_alert

    @property
    def yellow_alert(self):
        """Gets the yellow_alert of this Client.  # noqa: E501

        Contains any yellow alert information entered by the business owner for the client.  # noqa: E501

        :return: The yellow_alert of this Client.  # noqa: E501
        :rtype: str
        """
        return self._yellow_alert

    @yellow_alert.setter
    def yellow_alert(self, yellow_alert):
        """Sets the yellow_alert of this Client.

        Contains any yellow alert information entered by the business owner for the client.  # noqa: E501

        :param yellow_alert: The yellow_alert of this Client.  # noqa: E501
        :type: str
        """

        self._yellow_alert = yellow_alert

    @property
    def middle_name(self):
        """Gets the middle_name of this Client.  # noqa: E501

        The client’s middle name.  # noqa: E501

        :return: The middle_name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._middle_name

    @middle_name.setter
    def middle_name(self, middle_name):
        """Sets the middle_name of this Client.

        The client’s middle name.  # noqa: E501

        :param middle_name: The middle_name of this Client.  # noqa: E501
        :type: str
        """

        self._middle_name = middle_name

    @property
    def prospect_stage(self):
        """Gets the prospect_stage of this Client.  # noqa: E501

        Contains information about the client [prospect stage](https://support.mindbodyonline.com/s/article/206176457-Prospect-Stages?language=en_US).  # noqa: E501

        :return: The prospect_stage of this Client.  # noqa: E501
        :rtype: ProspectStage
        """
        return self._prospect_stage

    @prospect_stage.setter
    def prospect_stage(self, prospect_stage):
        """Sets the prospect_stage of this Client.

        Contains information about the client [prospect stage](https://support.mindbodyonline.com/s/article/206176457-Prospect-Stages?language=en_US).  # noqa: E501

        :param prospect_stage: The prospect_stage of this Client.  # noqa: E501
        :type: ProspectStage
        """

        self._prospect_stage = prospect_stage

    @property
    def email(self):
        """Gets the email of this Client.  # noqa: E501

        The client’s email address.  # noqa: E501

        :return: The email of this Client.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Client.

        The client’s email address.  # noqa: E501

        :param email: The email of this Client.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def mobile_phone(self):
        """Gets the mobile_phone of this Client.  # noqa: E501

        The client’s mobile phone number.  # noqa: E501

        :return: The mobile_phone of this Client.  # noqa: E501
        :rtype: str
        """
        return self._mobile_phone

    @mobile_phone.setter
    def mobile_phone(self, mobile_phone):
        """Sets the mobile_phone of this Client.

        The client’s mobile phone number.  # noqa: E501

        :param mobile_phone: The mobile_phone of this Client.  # noqa: E501
        :type: str
        """

        self._mobile_phone = mobile_phone

    @property
    def home_phone(self):
        """Gets the home_phone of this Client.  # noqa: E501

        The client’s home phone number.  # noqa: E501

        :return: The home_phone of this Client.  # noqa: E501
        :rtype: str
        """
        return self._home_phone

    @home_phone.setter
    def home_phone(self, home_phone):
        """Sets the home_phone of this Client.

        The client’s home phone number.  # noqa: E501

        :param home_phone: The home_phone of this Client.  # noqa: E501
        :type: str
        """

        self._home_phone = home_phone

    @property
    def work_phone(self):
        """Gets the work_phone of this Client.  # noqa: E501

        The client’s work phone number.  # noqa: E501

        :return: The work_phone of this Client.  # noqa: E501
        :rtype: str
        """
        return self._work_phone

    @work_phone.setter
    def work_phone(self, work_phone):
        """Sets the work_phone of this Client.

        The client’s work phone number.  # noqa: E501

        :param work_phone: The work_phone of this Client.  # noqa: E501
        :type: str
        """

        self._work_phone = work_phone

    @property
    def account_balance(self):
        """Gets the account_balance of this Client.  # noqa: E501

        The client’s current [account balance](https://mindbody-online-support.force.com/support/s/article/203262013-Adding-account-payments-video-tutorial?language=en_US).  # noqa: E501

        :return: The account_balance of this Client.  # noqa: E501
        :rtype: float
        """
        return self._account_balance

    @account_balance.setter
    def account_balance(self, account_balance):
        """Sets the account_balance of this Client.

        The client’s current [account balance](https://mindbody-online-support.force.com/support/s/article/203262013-Adding-account-payments-video-tutorial?language=en_US).  # noqa: E501

        :param account_balance: The account_balance of this Client.  # noqa: E501
        :type: float
        """

        self._account_balance = account_balance

    @property
    def address_line1(self):
        """Gets the address_line1 of this Client.  # noqa: E501

        The first line of the client’s street address.  # noqa: E501

        :return: The address_line1 of this Client.  # noqa: E501
        :rtype: str
        """
        return self._address_line1

    @address_line1.setter
    def address_line1(self, address_line1):
        """Sets the address_line1 of this Client.

        The first line of the client’s street address.  # noqa: E501

        :param address_line1: The address_line1 of this Client.  # noqa: E501
        :type: str
        """

        self._address_line1 = address_line1

    @property
    def address_line2(self):
        """Gets the address_line2 of this Client.  # noqa: E501

        The second line of the client’s street address, if needed.  # noqa: E501

        :return: The address_line2 of this Client.  # noqa: E501
        :rtype: str
        """
        return self._address_line2

    @address_line2.setter
    def address_line2(self, address_line2):
        """Sets the address_line2 of this Client.

        The second line of the client’s street address, if needed.  # noqa: E501

        :param address_line2: The address_line2 of this Client.  # noqa: E501
        :type: str
        """

        self._address_line2 = address_line2

    @property
    def city(self):
        """Gets the city of this Client.  # noqa: E501

        The client’s city.  # noqa: E501

        :return: The city of this Client.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Client.

        The client’s city.  # noqa: E501

        :param city: The city of this Client.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def postal_code(self):
        """Gets the postal_code of this Client.  # noqa: E501

        The client’s postal code.  # noqa: E501

        :return: The postal_code of this Client.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Client.

        The client’s postal code.  # noqa: E501

        :param postal_code: The postal_code of this Client.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def work_extension(self):
        """Gets the work_extension of this Client.  # noqa: E501

        The client’s work phone extension number.  # noqa: E501

        :return: The work_extension of this Client.  # noqa: E501
        :rtype: str
        """
        return self._work_extension

    @work_extension.setter
    def work_extension(self, work_extension):
        """Sets the work_extension of this Client.

        The client’s work phone extension number.  # noqa: E501

        :param work_extension: The work_extension of this Client.  # noqa: E501
        :type: str
        """

        self._work_extension = work_extension

    @property
    def referred_by(self):
        """Gets the referred_by of this Client.  # noqa: E501

        Specifies how the client was referred to the business. You can get a list of possible strings using the `GetClientReferralTypes` endpoint.  # noqa: E501

        :return: The referred_by of this Client.  # noqa: E501
        :rtype: str
        """
        return self._referred_by

    @referred_by.setter
    def referred_by(self, referred_by):
        """Sets the referred_by of this Client.

        Specifies how the client was referred to the business. You can get a list of possible strings using the `GetClientReferralTypes` endpoint.  # noqa: E501

        :param referred_by: The referred_by of this Client.  # noqa: E501
        :type: str
        """

        self._referred_by = referred_by

    @property
    def photo_url(self):
        """Gets the photo_url of this Client.  # noqa: E501

        The URL of the client’s photo for the client profile.  # noqa: E501

        :return: The photo_url of this Client.  # noqa: E501
        :rtype: str
        """
        return self._photo_url

    @photo_url.setter
    def photo_url(self, photo_url):
        """Sets the photo_url of this Client.

        The URL of the client’s photo for the client profile.  # noqa: E501

        :param photo_url: The photo_url of this Client.  # noqa: E501
        :type: str
        """

        self._photo_url = photo_url

    @property
    def emergency_contact_info_name(self):
        """Gets the emergency_contact_info_name of this Client.  # noqa: E501

        The name of the client’s emergency contact.  # noqa: E501

        :return: The emergency_contact_info_name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact_info_name

    @emergency_contact_info_name.setter
    def emergency_contact_info_name(self, emergency_contact_info_name):
        """Sets the emergency_contact_info_name of this Client.

        The name of the client’s emergency contact.  # noqa: E501

        :param emergency_contact_info_name: The emergency_contact_info_name of this Client.  # noqa: E501
        :type: str
        """

        self._emergency_contact_info_name = emergency_contact_info_name

    @property
    def emergency_contact_info_email(self):
        """Gets the emergency_contact_info_email of this Client.  # noqa: E501

        The email address of the client’s emergency contact.  # noqa: E501

        :return: The emergency_contact_info_email of this Client.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact_info_email

    @emergency_contact_info_email.setter
    def emergency_contact_info_email(self, emergency_contact_info_email):
        """Sets the emergency_contact_info_email of this Client.

        The email address of the client’s emergency contact.  # noqa: E501

        :param emergency_contact_info_email: The emergency_contact_info_email of this Client.  # noqa: E501
        :type: str
        """

        self._emergency_contact_info_email = emergency_contact_info_email

    @property
    def emergency_contact_info_phone(self):
        """Gets the emergency_contact_info_phone of this Client.  # noqa: E501

        The phone number of the client’s emergency contact.  # noqa: E501

        :return: The emergency_contact_info_phone of this Client.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact_info_phone

    @emergency_contact_info_phone.setter
    def emergency_contact_info_phone(self, emergency_contact_info_phone):
        """Sets the emergency_contact_info_phone of this Client.

        The phone number of the client’s emergency contact.  # noqa: E501

        :param emergency_contact_info_phone: The emergency_contact_info_phone of this Client.  # noqa: E501
        :type: str
        """

        self._emergency_contact_info_phone = emergency_contact_info_phone

    @property
    def emergency_contact_info_relationship(self):
        """Gets the emergency_contact_info_relationship of this Client.  # noqa: E501

        The client’s relationship with the emergency contact.  # noqa: E501

        :return: The emergency_contact_info_relationship of this Client.  # noqa: E501
        :rtype: str
        """
        return self._emergency_contact_info_relationship

    @emergency_contact_info_relationship.setter
    def emergency_contact_info_relationship(self, emergency_contact_info_relationship):
        """Sets the emergency_contact_info_relationship of this Client.

        The client’s relationship with the emergency contact.  # noqa: E501

        :param emergency_contact_info_relationship: The emergency_contact_info_relationship of this Client.  # noqa: E501
        :type: str
        """

        self._emergency_contact_info_relationship = emergency_contact_info_relationship

    @property
    def gender(self):
        """Gets the gender of this Client.  # noqa: E501

        The gender of the client.  # noqa: E501

        :return: The gender of this Client.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this Client.

        The gender of the client.  # noqa: E501

        :param gender: The gender of this Client.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def last_formula_notes(self):
        """Gets the last_formula_notes of this Client.  # noqa: E501

        The last [formula note](https://support.mindbodyonline.com/s/article/203259903-Appointments-Formula-notes?language=en_US) entered for the client.  # noqa: E501

        :return: The last_formula_notes of this Client.  # noqa: E501
        :rtype: str
        """
        return self._last_formula_notes

    @last_formula_notes.setter
    def last_formula_notes(self, last_formula_notes):
        """Sets the last_formula_notes of this Client.

        The last [formula note](https://support.mindbodyonline.com/s/article/203259903-Appointments-Formula-notes?language=en_US) entered for the client.  # noqa: E501

        :param last_formula_notes: The last_formula_notes of this Client.  # noqa: E501
        :type: str
        """

        self._last_formula_notes = last_formula_notes

    @property
    def active(self):
        """Gets the active of this Client.  # noqa: E501

        When `true`, indicates that the client’s profile is marked as active on the site.<br />  When `false`, the client’s profile is inactive.  # noqa: E501

        :return: The active of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this Client.

        When `true`, indicates that the client’s profile is marked as active on the site.<br />  When `false`, the client’s profile is inactive.  # noqa: E501

        :param active: The active of this Client.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def sales_reps(self):
        """Gets the sales_reps of this Client.  # noqa: E501

        A list of sales representatives.  # noqa: E501

        :return: The sales_reps of this Client.  # noqa: E501
        :rtype: list[SalesRep]
        """
        return self._sales_reps

    @sales_reps.setter
    def sales_reps(self, sales_reps):
        """Sets the sales_reps of this Client.

        A list of sales representatives.  # noqa: E501

        :param sales_reps: The sales_reps of this Client.  # noqa: E501
        :type: list[SalesRep]
        """

        self._sales_reps = sales_reps

    @property
    def status(self):
        """Gets the status of this Client.  # noqa: E501

        The status of the client in the business. Possible values are:  * Declined  * Non-Member  * Active  * Expired  * Suspended  * Terminated  # noqa: E501

        :return: The status of this Client.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Client.

        The status of the client in the business. Possible values are:  * Declined  * Non-Member  * Active  * Expired  * Suspended  * Terminated  # noqa: E501

        :param status: The status of this Client.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def action(self):
        """Gets the action of this Client.  # noqa: E501

        The action taken.  # noqa: E501

        :return: The action of this Client.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Client.

        The action taken.  # noqa: E501

        :param action: The action of this Client.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Added", "Updated", "Failed", "Removed"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def send_account_emails(self):
        """Gets the send_account_emails of this Client.  # noqa: E501

        When `true`, indicates that the client has opted to receive general account notifications by email. This property is editable.   <br />Default: **false**  # noqa: E501

        :return: The send_account_emails of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._send_account_emails

    @send_account_emails.setter
    def send_account_emails(self, send_account_emails):
        """Sets the send_account_emails of this Client.

        When `true`, indicates that the client has opted to receive general account notifications by email. This property is editable.   <br />Default: **false**  # noqa: E501

        :param send_account_emails: The send_account_emails of this Client.  # noqa: E501
        :type: bool
        """

        self._send_account_emails = send_account_emails

    @property
    def send_account_texts(self):
        """Gets the send_account_texts of this Client.  # noqa: E501

        When `true`, indicates that the client has opted to receive general account notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.  # noqa: E501

        :return: The send_account_texts of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._send_account_texts

    @send_account_texts.setter
    def send_account_texts(self, send_account_texts):
        """Sets the send_account_texts of this Client.

        When `true`, indicates that the client has opted to receive general account notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.  # noqa: E501

        :param send_account_texts: The send_account_texts of this Client.  # noqa: E501
        :type: bool
        """

        self._send_account_texts = send_account_texts

    @property
    def send_promotional_emails(self):
        """Gets the send_promotional_emails of this Client.  # noqa: E501

        When `true`, indicates that the client has opted to receive promotional notifications by email. This property is editable.   <br />Default: **false**  # noqa: E501

        :return: The send_promotional_emails of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._send_promotional_emails

    @send_promotional_emails.setter
    def send_promotional_emails(self, send_promotional_emails):
        """Sets the send_promotional_emails of this Client.

        When `true`, indicates that the client has opted to receive promotional notifications by email. This property is editable.   <br />Default: **false**  # noqa: E501

        :param send_promotional_emails: The send_promotional_emails of this Client.  # noqa: E501
        :type: bool
        """

        self._send_promotional_emails = send_promotional_emails

    @property
    def send_promotional_texts(self):
        """Gets the send_promotional_texts of this Client.  # noqa: E501

        When `true`, indicates that the client has opted to receive promotional notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.  # noqa: E501

        :return: The send_promotional_texts of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._send_promotional_texts

    @send_promotional_texts.setter
    def send_promotional_texts(self, send_promotional_texts):
        """Sets the send_promotional_texts of this Client.

        When `true`, indicates that the client has opted to receive promotional notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.  # noqa: E501

        :param send_promotional_texts: The send_promotional_texts of this Client.  # noqa: E501
        :type: bool
        """

        self._send_promotional_texts = send_promotional_texts

    @property
    def send_schedule_emails(self):
        """Gets the send_schedule_emails of this Client.  # noqa: E501

        When `true`, indicates that the client has opted to receive schedule notifications by email. This property is editable.   <br />Default: **false**  # noqa: E501

        :return: The send_schedule_emails of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._send_schedule_emails

    @send_schedule_emails.setter
    def send_schedule_emails(self, send_schedule_emails):
        """Sets the send_schedule_emails of this Client.

        When `true`, indicates that the client has opted to receive schedule notifications by email. This property is editable.   <br />Default: **false**  # noqa: E501

        :param send_schedule_emails: The send_schedule_emails of this Client.  # noqa: E501
        :type: bool
        """

        self._send_schedule_emails = send_schedule_emails

    @property
    def send_schedule_texts(self):
        """Gets the send_schedule_texts of this Client.  # noqa: E501

        When `true`, indicates that the client has opted to receive schedule notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.  # noqa: E501

        :return: The send_schedule_texts of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._send_schedule_texts

    @send_schedule_texts.setter
    def send_schedule_texts(self, send_schedule_texts):
        """Sets the send_schedule_texts of this Client.

        When `true`, indicates that the client has opted to receive schedule notifications by text message. This parameter cannot be updated by developers. If included in a request, it is ignored.  # noqa: E501

        :param send_schedule_texts: The send_schedule_texts of this Client.  # noqa: E501
        :type: bool
        """

        self._send_schedule_texts = send_schedule_texts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Client, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Client):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
