# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ClientCreditCard(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'address': 'str',
        'card_holder': 'str',
        'card_number': 'str',
        'card_type': 'str',
        'city': 'str',
        'exp_month': 'str',
        'exp_year': 'str',
        'last_four': 'str',
        'postal_code': 'str',
        'state': 'str'
    }

    attribute_map = {
        'address': 'Address',
        'card_holder': 'CardHolder',
        'card_number': 'CardNumber',
        'card_type': 'CardType',
        'city': 'City',
        'exp_month': 'ExpMonth',
        'exp_year': 'ExpYear',
        'last_four': 'LastFour',
        'postal_code': 'PostalCode',
        'state': 'State'
    }

    def __init__(self, address=None, card_holder=None, card_number=None, card_type=None, city=None, exp_month=None, exp_year=None, last_four=None, postal_code=None, state=None):  # noqa: E501
        """ClientCreditCard - a model defined in Swagger"""  # noqa: E501

        self._address = None
        self._card_holder = None
        self._card_number = None
        self._card_type = None
        self._city = None
        self._exp_month = None
        self._exp_year = None
        self._last_four = None
        self._postal_code = None
        self._state = None
        self.discriminator = None

        if address is not None:
            self.address = address
        if card_holder is not None:
            self.card_holder = card_holder
        if card_number is not None:
            self.card_number = card_number
        if card_type is not None:
            self.card_type = card_type
        if city is not None:
            self.city = city
        if exp_month is not None:
            self.exp_month = exp_month
        if exp_year is not None:
            self.exp_year = exp_year
        if last_four is not None:
            self.last_four = last_four
        if postal_code is not None:
            self.postal_code = postal_code
        if state is not None:
            self.state = state

    @property
    def address(self):
        """Gets the address of this ClientCreditCard.  # noqa: E501

        The billing address for the credit card.  # noqa: E501

        :return: The address of this ClientCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this ClientCreditCard.

        The billing address for the credit card.  # noqa: E501

        :param address: The address of this ClientCreditCard.  # noqa: E501
        :type: str
        """

        self._address = address

    @property
    def card_holder(self):
        """Gets the card_holder of this ClientCreditCard.  # noqa: E501

        The name of the card holder.  # noqa: E501

        :return: The card_holder of this ClientCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._card_holder

    @card_holder.setter
    def card_holder(self, card_holder):
        """Sets the card_holder of this ClientCreditCard.

        The name of the card holder.  # noqa: E501

        :param card_holder: The card_holder of this ClientCreditCard.  # noqa: E501
        :type: str
        """

        self._card_holder = card_holder

    @property
    def card_number(self):
        """Gets the card_number of this ClientCreditCard.  # noqa: E501

        The credit card number.  # noqa: E501

        :return: The card_number of this ClientCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._card_number

    @card_number.setter
    def card_number(self, card_number):
        """Sets the card_number of this ClientCreditCard.

        The credit card number.  # noqa: E501

        :param card_number: The card_number of this ClientCreditCard.  # noqa: E501
        :type: str
        """

        self._card_number = card_number

    @property
    def card_type(self):
        """Gets the card_type of this ClientCreditCard.  # noqa: E501

        The type of credit card, for example Visa or MasterCard.  # noqa: E501

        :return: The card_type of this ClientCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._card_type

    @card_type.setter
    def card_type(self, card_type):
        """Sets the card_type of this ClientCreditCard.

        The type of credit card, for example Visa or MasterCard.  # noqa: E501

        :param card_type: The card_type of this ClientCreditCard.  # noqa: E501
        :type: str
        """

        self._card_type = card_type

    @property
    def city(self):
        """Gets the city of this ClientCreditCard.  # noqa: E501

        The city in which the billing address is located.  # noqa: E501

        :return: The city of this ClientCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ClientCreditCard.

        The city in which the billing address is located.  # noqa: E501

        :param city: The city of this ClientCreditCard.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def exp_month(self):
        """Gets the exp_month of this ClientCreditCard.  # noqa: E501

        The month in which the credit card expires.  # noqa: E501

        :return: The exp_month of this ClientCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._exp_month

    @exp_month.setter
    def exp_month(self, exp_month):
        """Sets the exp_month of this ClientCreditCard.

        The month in which the credit card expires.  # noqa: E501

        :param exp_month: The exp_month of this ClientCreditCard.  # noqa: E501
        :type: str
        """

        self._exp_month = exp_month

    @property
    def exp_year(self):
        """Gets the exp_year of this ClientCreditCard.  # noqa: E501

        The year in which the credit card expires.  # noqa: E501

        :return: The exp_year of this ClientCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._exp_year

    @exp_year.setter
    def exp_year(self, exp_year):
        """Sets the exp_year of this ClientCreditCard.

        The year in which the credit card expires.  # noqa: E501

        :param exp_year: The exp_year of this ClientCreditCard.  # noqa: E501
        :type: str
        """

        self._exp_year = exp_year

    @property
    def last_four(self):
        """Gets the last_four of this ClientCreditCard.  # noqa: E501

        The last four digits of the credit card number.  # noqa: E501

        :return: The last_four of this ClientCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._last_four

    @last_four.setter
    def last_four(self, last_four):
        """Sets the last_four of this ClientCreditCard.

        The last four digits of the credit card number.  # noqa: E501

        :param last_four: The last_four of this ClientCreditCard.  # noqa: E501
        :type: str
        """

        self._last_four = last_four

    @property
    def postal_code(self):
        """Gets the postal_code of this ClientCreditCard.  # noqa: E501

        The postal code where the billing address is located.  # noqa: E501

        :return: The postal_code of this ClientCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this ClientCreditCard.

        The postal code where the billing address is located.  # noqa: E501

        :param postal_code: The postal_code of this ClientCreditCard.  # noqa: E501
        :type: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this ClientCreditCard.  # noqa: E501

        The state that the billing address is located in.  # noqa: E501

        :return: The state of this ClientCreditCard.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ClientCreditCard.

        The state that the billing address is located in.  # noqa: E501

        :param state: The state of this ClientCreditCard.  # noqa: E501
        :type: str
        """

        self._state = state

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientCreditCard, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientCreditCard):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
