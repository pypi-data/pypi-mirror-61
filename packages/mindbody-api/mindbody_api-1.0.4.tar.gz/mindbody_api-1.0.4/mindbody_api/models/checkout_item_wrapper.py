# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.checkout_appointment_booking_request import CheckoutAppointmentBookingRequest  # noqa: F401,E501
from mindbody_api.models.checkout_item import CheckoutItem  # noqa: F401,E501


class CheckoutItemWrapper(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'item': 'CheckoutItem',
        'discount_amount': 'float',
        'appointment_booking_requests': 'list[CheckoutAppointmentBookingRequest]',
        'enrollment_ids': 'list[int]',
        'class_ids': 'list[int]',
        'course_ids': 'list[int]',
        'visit_ids': 'list[int]',
        'appointment_ids': 'list[int]',
        'id': 'int',
        'quantity': 'int'
    }

    attribute_map = {
        'item': 'Item',
        'discount_amount': 'DiscountAmount',
        'appointment_booking_requests': 'AppointmentBookingRequests',
        'enrollment_ids': 'EnrollmentIds',
        'class_ids': 'ClassIds',
        'course_ids': 'CourseIds',
        'visit_ids': 'VisitIds',
        'appointment_ids': 'AppointmentIds',
        'id': 'Id',
        'quantity': 'Quantity'
    }

    def __init__(self, item=None, discount_amount=None, appointment_booking_requests=None, enrollment_ids=None, class_ids=None, course_ids=None, visit_ids=None, appointment_ids=None, id=None, quantity=None):  # noqa: E501
        """CheckoutItemWrapper - a model defined in Swagger"""  # noqa: E501

        self._item = None
        self._discount_amount = None
        self._appointment_booking_requests = None
        self._enrollment_ids = None
        self._class_ids = None
        self._course_ids = None
        self._visit_ids = None
        self._appointment_ids = None
        self._id = None
        self._quantity = None
        self.discriminator = None

        if item is not None:
            self.item = item
        if discount_amount is not None:
            self.discount_amount = discount_amount
        if appointment_booking_requests is not None:
            self.appointment_booking_requests = appointment_booking_requests
        if enrollment_ids is not None:
            self.enrollment_ids = enrollment_ids
        if class_ids is not None:
            self.class_ids = class_ids
        if course_ids is not None:
            self.course_ids = course_ids
        if visit_ids is not None:
            self.visit_ids = visit_ids
        if appointment_ids is not None:
            self.appointment_ids = appointment_ids
        if id is not None:
            self.id = id
        if quantity is not None:
            self.quantity = quantity

    @property
    def item(self):
        """Gets the item of this CheckoutItemWrapper.  # noqa: E501

        Information about an item in the cart.  # noqa: E501

        :return: The item of this CheckoutItemWrapper.  # noqa: E501
        :rtype: CheckoutItem
        """
        return self._item

    @item.setter
    def item(self, item):
        """Sets the item of this CheckoutItemWrapper.

        Information about an item in the cart.  # noqa: E501

        :param item: The item of this CheckoutItemWrapper.  # noqa: E501
        :type: CheckoutItem
        """

        self._item = item

    @property
    def discount_amount(self):
        """Gets the discount_amount of this CheckoutItemWrapper.  # noqa: E501

        The amount the item is discounted. This parameter is ignored for packages.  # noqa: E501

        :return: The discount_amount of this CheckoutItemWrapper.  # noqa: E501
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this CheckoutItemWrapper.

        The amount the item is discounted. This parameter is ignored for packages.  # noqa: E501

        :param discount_amount: The discount_amount of this CheckoutItemWrapper.  # noqa: E501
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def appointment_booking_requests(self):
        """Gets the appointment_booking_requests of this CheckoutItemWrapper.  # noqa: E501

        A list of appointments to be booked then paid for by this item. This parameter applies only to pricing option items.  # noqa: E501

        :return: The appointment_booking_requests of this CheckoutItemWrapper.  # noqa: E501
        :rtype: list[CheckoutAppointmentBookingRequest]
        """
        return self._appointment_booking_requests

    @appointment_booking_requests.setter
    def appointment_booking_requests(self, appointment_booking_requests):
        """Sets the appointment_booking_requests of this CheckoutItemWrapper.

        A list of appointments to be booked then paid for by this item. This parameter applies only to pricing option items.  # noqa: E501

        :param appointment_booking_requests: The appointment_booking_requests of this CheckoutItemWrapper.  # noqa: E501
        :type: list[CheckoutAppointmentBookingRequest]
        """

        self._appointment_booking_requests = appointment_booking_requests

    @property
    def enrollment_ids(self):
        """Gets the enrollment_ids of this CheckoutItemWrapper.  # noqa: E501

        A list of enrollment IDs that this item is to pay for. This parameter applies only to pricing option items.  # noqa: E501

        :return: The enrollment_ids of this CheckoutItemWrapper.  # noqa: E501
        :rtype: list[int]
        """
        return self._enrollment_ids

    @enrollment_ids.setter
    def enrollment_ids(self, enrollment_ids):
        """Sets the enrollment_ids of this CheckoutItemWrapper.

        A list of enrollment IDs that this item is to pay for. This parameter applies only to pricing option items.  # noqa: E501

        :param enrollment_ids: The enrollment_ids of this CheckoutItemWrapper.  # noqa: E501
        :type: list[int]
        """

        self._enrollment_ids = enrollment_ids

    @property
    def class_ids(self):
        """Gets the class_ids of this CheckoutItemWrapper.  # noqa: E501

        A list of class IDs that this item is to pay for. This parameter applies only to pricing option items.  # noqa: E501

        :return: The class_ids of this CheckoutItemWrapper.  # noqa: E501
        :rtype: list[int]
        """
        return self._class_ids

    @class_ids.setter
    def class_ids(self, class_ids):
        """Sets the class_ids of this CheckoutItemWrapper.

        A list of class IDs that this item is to pay for. This parameter applies only to pricing option items.  # noqa: E501

        :param class_ids: The class_ids of this CheckoutItemWrapper.  # noqa: E501
        :type: list[int]
        """

        self._class_ids = class_ids

    @property
    def course_ids(self):
        """Gets the course_ids of this CheckoutItemWrapper.  # noqa: E501

        A list of course IDs that this item is to pay for. This parameter applies only to pricing option items.  # noqa: E501

        :return: The course_ids of this CheckoutItemWrapper.  # noqa: E501
        :rtype: list[int]
        """
        return self._course_ids

    @course_ids.setter
    def course_ids(self, course_ids):
        """Sets the course_ids of this CheckoutItemWrapper.

        A list of course IDs that this item is to pay for. This parameter applies only to pricing option items.  # noqa: E501

        :param course_ids: The course_ids of this CheckoutItemWrapper.  # noqa: E501
        :type: list[int]
        """

        self._course_ids = course_ids

    @property
    def visit_ids(self):
        """Gets the visit_ids of this CheckoutItemWrapper.  # noqa: E501

        A list of visit IDs that this item is to pay for. This parameter applies only to pricing option items.  # noqa: E501

        :return: The visit_ids of this CheckoutItemWrapper.  # noqa: E501
        :rtype: list[int]
        """
        return self._visit_ids

    @visit_ids.setter
    def visit_ids(self, visit_ids):
        """Sets the visit_ids of this CheckoutItemWrapper.

        A list of visit IDs that this item is to pay for. This parameter applies only to pricing option items.  # noqa: E501

        :param visit_ids: The visit_ids of this CheckoutItemWrapper.  # noqa: E501
        :type: list[int]
        """

        self._visit_ids = visit_ids

    @property
    def appointment_ids(self):
        """Gets the appointment_ids of this CheckoutItemWrapper.  # noqa: E501

        A list of appointment IDs that this item is to reconcile.  # noqa: E501

        :return: The appointment_ids of this CheckoutItemWrapper.  # noqa: E501
        :rtype: list[int]
        """
        return self._appointment_ids

    @appointment_ids.setter
    def appointment_ids(self, appointment_ids):
        """Sets the appointment_ids of this CheckoutItemWrapper.

        A list of appointment IDs that this item is to reconcile.  # noqa: E501

        :param appointment_ids: The appointment_ids of this CheckoutItemWrapper.  # noqa: E501
        :type: list[int]
        """

        self._appointment_ids = appointment_ids

    @property
    def id(self):
        """Gets the id of this CheckoutItemWrapper.  # noqa: E501

        The itemâ€™s unique ID within the cart.  # noqa: E501

        :return: The id of this CheckoutItemWrapper.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CheckoutItemWrapper.

        The itemâ€™s unique ID within the cart.  # noqa: E501

        :param id: The id of this CheckoutItemWrapper.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def quantity(self):
        """Gets the quantity of this CheckoutItemWrapper.  # noqa: E501

        The number of this item to be purchased.  # noqa: E501

        :return: The quantity of this CheckoutItemWrapper.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this CheckoutItemWrapper.

        The number of this item to be purchased.  # noqa: E501

        :param quantity: The quantity of this CheckoutItemWrapper.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CheckoutItemWrapper, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CheckoutItemWrapper):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
