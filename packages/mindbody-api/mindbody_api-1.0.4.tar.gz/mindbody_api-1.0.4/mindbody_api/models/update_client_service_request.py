# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateClientServiceRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_id': 'int',
        'active_date': 'datetime',
        'expiration_date': 'datetime',
        'test': 'bool'
    }

    attribute_map = {
        'service_id': 'ServiceId',
        'active_date': 'ActiveDate',
        'expiration_date': 'ExpirationDate',
        'test': 'Test'
    }

    def __init__(self, service_id=None, active_date=None, expiration_date=None, test=None):  # noqa: E501
        """UpdateClientServiceRequest - a model defined in Swagger"""  # noqa: E501

        self._service_id = None
        self._active_date = None
        self._expiration_date = None
        self._test = None
        self.discriminator = None

        self.service_id = service_id
        if active_date is not None:
            self.active_date = active_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if test is not None:
            self.test = test

    @property
    def service_id(self):
        """Gets the service_id of this UpdateClientServiceRequest.  # noqa: E501

        The ID of the service to update.  # noqa: E501

        :return: The service_id of this UpdateClientServiceRequest.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this UpdateClientServiceRequest.

        The ID of the service to update.  # noqa: E501

        :param service_id: The service_id of this UpdateClientServiceRequest.  # noqa: E501
        :type: int
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    @property
    def active_date(self):
        """Gets the active_date of this UpdateClientServiceRequest.  # noqa: E501

        The date that the service became active.  # noqa: E501

        :return: The active_date of this UpdateClientServiceRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._active_date

    @active_date.setter
    def active_date(self, active_date):
        """Sets the active_date of this UpdateClientServiceRequest.

        The date that the service became active.  # noqa: E501

        :param active_date: The active_date of this UpdateClientServiceRequest.  # noqa: E501
        :type: datetime
        """

        self._active_date = active_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this UpdateClientServiceRequest.  # noqa: E501

        The date that the service is to expire.  # noqa: E501

        :return: The expiration_date of this UpdateClientServiceRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this UpdateClientServiceRequest.

        The date that the service is to expire.  # noqa: E501

        :param expiration_date: The expiration_date of this UpdateClientServiceRequest.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def test(self):
        """Gets the test of this UpdateClientServiceRequest.  # noqa: E501

        When `true`, indicates that input information is to be validated, but not committed.<br />  When `false` or omitted, the database is affected.<br />  Default: **false**  # noqa: E501

        :return: The test of this UpdateClientServiceRequest.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this UpdateClientServiceRequest.

        When `true`, indicates that input information is to be validated, but not committed.<br />  When `false` or omitted, the database is affected.<br />  Default: **false**  # noqa: E501

        :param test: The test of this UpdateClientServiceRequest.  # noqa: E501
        :type: bool
        """

        self._test = test

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateClientServiceRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateClientServiceRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
