# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TimeCardEvent(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'time_in': 'datetime',
        'time_out': 'datetime',
        'hours': 'float'
    }

    attribute_map = {
        'time_in': 'TimeIn',
        'time_out': 'TimeOut',
        'hours': 'Hours'
    }

    def __init__(self, time_in=None, time_out=None, hours=None):  # noqa: E501
        """TimeCardEvent - a model defined in Swagger"""  # noqa: E501

        self._time_in = None
        self._time_out = None
        self._hours = None
        self.discriminator = None

        if time_in is not None:
            self.time_in = time_in
        if time_out is not None:
            self.time_out = time_out
        if hours is not None:
            self.hours = hours

    @property
    def time_in(self):
        """Gets the time_in of this TimeCardEvent.  # noqa: E501

        The time that the staff member started the job task.  # noqa: E501

        :return: The time_in of this TimeCardEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._time_in

    @time_in.setter
    def time_in(self, time_in):
        """Sets the time_in of this TimeCardEvent.

        The time that the staff member started the job task.  # noqa: E501

        :param time_in: The time_in of this TimeCardEvent.  # noqa: E501
        :type: datetime
        """

        self._time_in = time_in

    @property
    def time_out(self):
        """Gets the time_out of this TimeCardEvent.  # noqa: E501

        The time that the staff member stopped doing the job task.  # noqa: E501

        :return: The time_out of this TimeCardEvent.  # noqa: E501
        :rtype: datetime
        """
        return self._time_out

    @time_out.setter
    def time_out(self, time_out):
        """Sets the time_out of this TimeCardEvent.

        The time that the staff member stopped doing the job task.  # noqa: E501

        :param time_out: The time_out of this TimeCardEvent.  # noqa: E501
        :type: datetime
        """

        self._time_out = time_out

    @property
    def hours(self):
        """Gets the hours of this TimeCardEvent.  # noqa: E501

        The number of hours on this time card.  # noqa: E501

        :return: The hours of this TimeCardEvent.  # noqa: E501
        :rtype: float
        """
        return self._hours

    @hours.setter
    def hours(self, hours):
        """Sets the hours of this TimeCardEvent.

        The number of hours on this time card.  # noqa: E501

        :param hours: The hours of this TimeCardEvent.  # noqa: E501
        :type: float
        """

        self._hours = hours

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeCardEvent, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeCardEvent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
