# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.level import Level  # noqa: F401,E501
from mindbody_api.models.program import Program  # noqa: F401,E501
from mindbody_api.models.session_type import SessionType  # noqa: F401,E501


class ClassDescription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'active': 'bool',
        'description': 'str',
        'id': 'int',
        'image_url': 'str',
        'last_updated': 'datetime',
        'level': 'Level',
        'name': 'str',
        'notes': 'str',
        'prereq': 'str',
        'program': 'Program',
        'session_type': 'SessionType',
        'category': 'str',
        'category_id': 'int',
        'subcategory': 'str',
        'subcategory_id': 'int'
    }

    attribute_map = {
        'active': 'Active',
        'description': 'Description',
        'id': 'Id',
        'image_url': 'ImageURL',
        'last_updated': 'LastUpdated',
        'level': 'Level',
        'name': 'Name',
        'notes': 'Notes',
        'prereq': 'Prereq',
        'program': 'Program',
        'session_type': 'SessionType',
        'category': 'Category',
        'category_id': 'CategoryId',
        'subcategory': 'Subcategory',
        'subcategory_id': 'SubcategoryId'
    }

    def __init__(self, active=None, description=None, id=None, image_url=None, last_updated=None, level=None, name=None, notes=None, prereq=None, program=None, session_type=None, category=None, category_id=None, subcategory=None, subcategory_id=None):  # noqa: E501
        """ClassDescription - a model defined in Swagger"""  # noqa: E501

        self._active = None
        self._description = None
        self._id = None
        self._image_url = None
        self._last_updated = None
        self._level = None
        self._name = None
        self._notes = None
        self._prereq = None
        self._program = None
        self._session_type = None
        self._category = None
        self._category_id = None
        self._subcategory = None
        self._subcategory_id = None
        self.discriminator = None

        if active is not None:
            self.active = active
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if image_url is not None:
            self.image_url = image_url
        if last_updated is not None:
            self.last_updated = last_updated
        if level is not None:
            self.level = level
        if name is not None:
            self.name = name
        if notes is not None:
            self.notes = notes
        if prereq is not None:
            self.prereq = prereq
        if program is not None:
            self.program = program
        if session_type is not None:
            self.session_type = session_type
        if category is not None:
            self.category = category
        if category_id is not None:
            self.category_id = category_id
        if subcategory is not None:
            self.subcategory = subcategory
        if subcategory_id is not None:
            self.subcategory_id = subcategory_id

    @property
    def active(self):
        """Gets the active of this ClassDescription.  # noqa: E501

        When `true`, indicates that the business can assign this class description to new class schedules.<br />  When `false`, indicates that the business cannot assign this class description to new class schedules.  # noqa: E501

        :return: The active of this ClassDescription.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ClassDescription.

        When `true`, indicates that the business can assign this class description to new class schedules.<br />  When `false`, indicates that the business cannot assign this class description to new class schedules.  # noqa: E501

        :param active: The active of this ClassDescription.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def description(self):
        """Gets the description of this ClassDescription.  # noqa: E501

        The long version of the class description.  # noqa: E501

        :return: The description of this ClassDescription.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClassDescription.

        The long version of the class description.  # noqa: E501

        :param description: The description of this ClassDescription.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this ClassDescription.  # noqa: E501

        The class description's ID.  # noqa: E501

        :return: The id of this ClassDescription.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClassDescription.

        The class description's ID.  # noqa: E501

        :param id: The id of this ClassDescription.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def image_url(self):
        """Gets the image_url of this ClassDescription.  # noqa: E501

        The class description's image URL, if any. If it does not exist, nothing is returned.  # noqa: E501

        :return: The image_url of this ClassDescription.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this ClassDescription.

        The class description's image URL, if any. If it does not exist, nothing is returned.  # noqa: E501

        :param image_url: The image_url of this ClassDescription.  # noqa: E501
        :type: str
        """

        self._image_url = image_url

    @property
    def last_updated(self):
        """Gets the last_updated of this ClassDescription.  # noqa: E501

        The date this class description was last modified.  # noqa: E501

        :return: The last_updated of this ClassDescription.  # noqa: E501
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ClassDescription.

        The date this class description was last modified.  # noqa: E501

        :param last_updated: The last_updated of this ClassDescription.  # noqa: E501
        :type: datetime
        """

        self._last_updated = last_updated

    @property
    def level(self):
        """Gets the level of this ClassDescription.  # noqa: E501

        The level information about this class.  # noqa: E501

        :return: The level of this ClassDescription.  # noqa: E501
        :rtype: Level
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this ClassDescription.

        The level information about this class.  # noqa: E501

        :param level: The level of this ClassDescription.  # noqa: E501
        :type: Level
        """

        self._level = level

    @property
    def name(self):
        """Gets the name of this ClassDescription.  # noqa: E501

        The name of this class description.  # noqa: E501

        :return: The name of this ClassDescription.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ClassDescription.

        The name of this class description.  # noqa: E501

        :param name: The name of this ClassDescription.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def notes(self):
        """Gets the notes of this ClassDescription.  # noqa: E501

        Any notes about the class description.  # noqa: E501

        :return: The notes of this ClassDescription.  # noqa: E501
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ClassDescription.

        Any notes about the class description.  # noqa: E501

        :param notes: The notes of this ClassDescription.  # noqa: E501
        :type: str
        """

        self._notes = notes

    @property
    def prereq(self):
        """Gets the prereq of this ClassDescription.  # noqa: E501

        Any prerequisites for the class.  # noqa: E501

        :return: The prereq of this ClassDescription.  # noqa: E501
        :rtype: str
        """
        return self._prereq

    @prereq.setter
    def prereq(self, prereq):
        """Sets the prereq of this ClassDescription.

        Any prerequisites for the class.  # noqa: E501

        :param prereq: The prereq of this ClassDescription.  # noqa: E501
        :type: str
        """

        self._prereq = prereq

    @property
    def program(self):
        """Gets the program of this ClassDescription.  # noqa: E501

        Contains information about the class description's program.  # noqa: E501

        :return: The program of this ClassDescription.  # noqa: E501
        :rtype: Program
        """
        return self._program

    @program.setter
    def program(self, program):
        """Sets the program of this ClassDescription.

        Contains information about the class description's program.  # noqa: E501

        :param program: The program of this ClassDescription.  # noqa: E501
        :type: Program
        """

        self._program = program

    @property
    def session_type(self):
        """Gets the session_type of this ClassDescription.  # noqa: E501

        Contains information about the class description's session type.  # noqa: E501

        :return: The session_type of this ClassDescription.  # noqa: E501
        :rtype: SessionType
        """
        return self._session_type

    @session_type.setter
    def session_type(self, session_type):
        """Sets the session_type of this ClassDescription.

        Contains information about the class description's session type.  # noqa: E501

        :param session_type: The session_type of this ClassDescription.  # noqa: E501
        :type: SessionType
        """

        self._session_type = session_type

    @property
    def category(self):
        """Gets the category of this ClassDescription.  # noqa: E501

        The category of this class description.  # noqa: E501

        :return: The category of this ClassDescription.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this ClassDescription.

        The category of this class description.  # noqa: E501

        :param category: The category of this ClassDescription.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def category_id(self):
        """Gets the category_id of this ClassDescription.  # noqa: E501

        The category ID of this class description.  # noqa: E501

        :return: The category_id of this ClassDescription.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this ClassDescription.

        The category ID of this class description.  # noqa: E501

        :param category_id: The category_id of this ClassDescription.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def subcategory(self):
        """Gets the subcategory of this ClassDescription.  # noqa: E501

        The subcategory of this class description.  # noqa: E501

        :return: The subcategory of this ClassDescription.  # noqa: E501
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this ClassDescription.

        The subcategory of this class description.  # noqa: E501

        :param subcategory: The subcategory of this ClassDescription.  # noqa: E501
        :type: str
        """

        self._subcategory = subcategory

    @property
    def subcategory_id(self):
        """Gets the subcategory_id of this ClassDescription.  # noqa: E501

        The subcategory ID of this class description.  # noqa: E501

        :return: The subcategory_id of this ClassDescription.  # noqa: E501
        :rtype: int
        """
        return self._subcategory_id

    @subcategory_id.setter
    def subcategory_id(self, subcategory_id):
        """Sets the subcategory_id of this ClassDescription.

        The subcategory ID of this class description.  # noqa: E501

        :param subcategory_id: The subcategory_id of this ClassDescription.  # noqa: E501
        :type: int
        """

        self._subcategory_id = subcategory_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClassDescription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassDescription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
