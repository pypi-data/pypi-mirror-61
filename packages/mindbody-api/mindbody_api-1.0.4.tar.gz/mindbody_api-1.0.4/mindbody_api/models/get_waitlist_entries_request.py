# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetWaitlistEntriesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class_ids': 'list[int]',
        'class_schedule_ids': 'list[int]',
        'client_ids': 'list[str]',
        'hide_past_entries': 'bool',
        'waitlist_entry_ids': 'list[int]',
        'limit': 'int',
        'offset': 'int'
    }

    attribute_map = {
        'class_ids': 'ClassIds',
        'class_schedule_ids': 'ClassScheduleIds',
        'client_ids': 'ClientIds',
        'hide_past_entries': 'HidePastEntries',
        'waitlist_entry_ids': 'WaitlistEntryIds',
        'limit': 'Limit',
        'offset': 'Offset'
    }

    def __init__(self, class_ids=None, class_schedule_ids=None, client_ids=None, hide_past_entries=None, waitlist_entry_ids=None, limit=None, offset=None):  # noqa: E501
        """GetWaitlistEntriesRequest - a model defined in Swagger"""  # noqa: E501

        self._class_ids = None
        self._class_schedule_ids = None
        self._client_ids = None
        self._hide_past_entries = None
        self._waitlist_entry_ids = None
        self._limit = None
        self._offset = None
        self.discriminator = None

        if class_ids is not None:
            self.class_ids = class_ids
        if class_schedule_ids is not None:
            self.class_schedule_ids = class_schedule_ids
        if client_ids is not None:
            self.client_ids = client_ids
        if hide_past_entries is not None:
            self.hide_past_entries = hide_past_entries
        if waitlist_entry_ids is not None:
            self.waitlist_entry_ids = waitlist_entry_ids
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset

    @property
    def class_ids(self):
        """Gets the class_ids of this GetWaitlistEntriesRequest.  # noqa: E501

        The requested class IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request. <br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClassIds**  # noqa: E501

        :return: The class_ids of this GetWaitlistEntriesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._class_ids

    @class_ids.setter
    def class_ids(self, class_ids):
        """Sets the class_ids of this GetWaitlistEntriesRequest.

        The requested class IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request. <br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClassIds**  # noqa: E501

        :param class_ids: The class_ids of this GetWaitlistEntriesRequest.  # noqa: E501
        :type: list[int]
        """

        self._class_ids = class_ids

    @property
    def class_schedule_ids(self):
        """Gets the class_schedule_ids of this GetWaitlistEntriesRequest.  # noqa: E501

        The requested class schedule IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClassScheduleIds**  # noqa: E501

        :return: The class_schedule_ids of this GetWaitlistEntriesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._class_schedule_ids

    @class_schedule_ids.setter
    def class_schedule_ids(self, class_schedule_ids):
        """Sets the class_schedule_ids of this GetWaitlistEntriesRequest.

        The requested class schedule IDs. If a class ID is present, the request automatically disregards any class schedule IDs in the request.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClassScheduleIds**  # noqa: E501

        :param class_schedule_ids: The class_schedule_ids of this GetWaitlistEntriesRequest.  # noqa: E501
        :type: list[int]
        """

        self._class_schedule_ids = class_schedule_ids

    @property
    def client_ids(self):
        """Gets the client_ids of this GetWaitlistEntriesRequest.  # noqa: E501

        The requested client IDs.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClientIds**  # noqa: E501

        :return: The client_ids of this GetWaitlistEntriesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._client_ids

    @client_ids.setter
    def client_ids(self, client_ids):
        """Sets the client_ids of this GetWaitlistEntriesRequest.

        The requested client IDs.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all ClientIds**  # noqa: E501

        :param client_ids: The client_ids of this GetWaitlistEntriesRequest.  # noqa: E501
        :type: list[str]
        """

        self._client_ids = client_ids

    @property
    def hide_past_entries(self):
        """Gets the hide_past_entries of this GetWaitlistEntriesRequest.  # noqa: E501

        When `true`, indicates that past waiting list entries are hidden from clients.<br />  When `false`, indicates that past entries are not hidden from clients.<br />  Default: **false**  # noqa: E501

        :return: The hide_past_entries of this GetWaitlistEntriesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._hide_past_entries

    @hide_past_entries.setter
    def hide_past_entries(self, hide_past_entries):
        """Sets the hide_past_entries of this GetWaitlistEntriesRequest.

        When `true`, indicates that past waiting list entries are hidden from clients.<br />  When `false`, indicates that past entries are not hidden from clients.<br />  Default: **false**  # noqa: E501

        :param hide_past_entries: The hide_past_entries of this GetWaitlistEntriesRequest.  # noqa: E501
        :type: bool
        """

        self._hide_past_entries = hide_past_entries

    @property
    def waitlist_entry_ids(self):
        """Gets the waitlist_entry_ids of this GetWaitlistEntriesRequest.  # noqa: E501

        The requested waiting list entry IDs.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all WaitlistEntryIds**  # noqa: E501

        :return: The waitlist_entry_ids of this GetWaitlistEntriesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._waitlist_entry_ids

    @waitlist_entry_ids.setter
    def waitlist_entry_ids(self, waitlist_entry_ids):
        """Sets the waitlist_entry_ids of this GetWaitlistEntriesRequest.

        The requested waiting list entry IDs.<br />  Either `ClassScheduleIds`, `ClientIds`, `WaitlistEntryIds`, or `ClassIds` is required; the others become optional.<br />  Default: **all WaitlistEntryIds**  # noqa: E501

        :param waitlist_entry_ids: The waitlist_entry_ids of this GetWaitlistEntriesRequest.  # noqa: E501
        :type: list[int]
        """

        self._waitlist_entry_ids = waitlist_entry_ids

    @property
    def limit(self):
        """Gets the limit of this GetWaitlistEntriesRequest.  # noqa: E501

        Number of results to include, defaults to 100  # noqa: E501

        :return: The limit of this GetWaitlistEntriesRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetWaitlistEntriesRequest.

        Number of results to include, defaults to 100  # noqa: E501

        :param limit: The limit of this GetWaitlistEntriesRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this GetWaitlistEntriesRequest.  # noqa: E501

        Page offset, defaults to 0.  # noqa: E501

        :return: The offset of this GetWaitlistEntriesRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GetWaitlistEntriesRequest.

        Page offset, defaults to 0.  # noqa: E501

        :param offset: The offset of this GetWaitlistEntriesRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetWaitlistEntriesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetWaitlistEntriesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
