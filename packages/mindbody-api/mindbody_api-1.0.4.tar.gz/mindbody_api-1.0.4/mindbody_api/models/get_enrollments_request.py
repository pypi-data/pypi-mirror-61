# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetEnrollmentsRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class_schedule_ids': 'list[int]',
        'end_date': 'datetime',
        'location_ids': 'list[int]',
        'program_ids': 'list[int]',
        'session_type_ids': 'list[int]',
        'staff_ids': 'list[int]',
        'start_date': 'datetime',
        'limit': 'int',
        'offset': 'int'
    }

    attribute_map = {
        'class_schedule_ids': 'ClassScheduleIds',
        'end_date': 'EndDate',
        'location_ids': 'LocationIds',
        'program_ids': 'ProgramIds',
        'session_type_ids': 'SessionTypeIds',
        'staff_ids': 'StaffIds',
        'start_date': 'StartDate',
        'limit': 'Limit',
        'offset': 'Offset'
    }

    def __init__(self, class_schedule_ids=None, end_date=None, location_ids=None, program_ids=None, session_type_ids=None, staff_ids=None, start_date=None, limit=None, offset=None):  # noqa: E501
        """GetEnrollmentsRequest - a model defined in Swagger"""  # noqa: E501

        self._class_schedule_ids = None
        self._end_date = None
        self._location_ids = None
        self._program_ids = None
        self._session_type_ids = None
        self._staff_ids = None
        self._start_date = None
        self._limit = None
        self._offset = None
        self.discriminator = None

        if class_schedule_ids is not None:
            self.class_schedule_ids = class_schedule_ids
        if end_date is not None:
            self.end_date = end_date
        if location_ids is not None:
            self.location_ids = location_ids
        if program_ids is not None:
            self.program_ids = program_ids
        if session_type_ids is not None:
            self.session_type_ids = session_type_ids
        if staff_ids is not None:
            self.staff_ids = staff_ids
        if start_date is not None:
            self.start_date = start_date
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset

    @property
    def class_schedule_ids(self):
        """Gets the class_schedule_ids of this GetEnrollmentsRequest.  # noqa: E501

        A list of the requested class schedule IDs. If omitted, all class schedule IDs return.  # noqa: E501

        :return: The class_schedule_ids of this GetEnrollmentsRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._class_schedule_ids

    @class_schedule_ids.setter
    def class_schedule_ids(self, class_schedule_ids):
        """Sets the class_schedule_ids of this GetEnrollmentsRequest.

        A list of the requested class schedule IDs. If omitted, all class schedule IDs return.  # noqa: E501

        :param class_schedule_ids: The class_schedule_ids of this GetEnrollmentsRequest.  # noqa: E501
        :type: list[int]
        """

        self._class_schedule_ids = class_schedule_ids

    @property
    def end_date(self):
        """Gets the end_date of this GetEnrollmentsRequest.  # noqa: E501

        The end of the date range. The response returns any active enrollments that occur on or before this day.<br />  Default: **StartDate**  # noqa: E501

        :return: The end_date of this GetEnrollmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this GetEnrollmentsRequest.

        The end of the date range. The response returns any active enrollments that occur on or before this day.<br />  Default: **StartDate**  # noqa: E501

        :param end_date: The end_date of this GetEnrollmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def location_ids(self):
        """Gets the location_ids of this GetEnrollmentsRequest.  # noqa: E501

        List of the IDs for the requested locations. If omitted, all location IDs return.  # noqa: E501

        :return: The location_ids of this GetEnrollmentsRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this GetEnrollmentsRequest.

        List of the IDs for the requested locations. If omitted, all location IDs return.  # noqa: E501

        :param location_ids: The location_ids of this GetEnrollmentsRequest.  # noqa: E501
        :type: list[int]
        """

        self._location_ids = location_ids

    @property
    def program_ids(self):
        """Gets the program_ids of this GetEnrollmentsRequest.  # noqa: E501

        List of the IDs for the requested programs. If omitted, all program IDs return.  # noqa: E501

        :return: The program_ids of this GetEnrollmentsRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._program_ids

    @program_ids.setter
    def program_ids(self, program_ids):
        """Sets the program_ids of this GetEnrollmentsRequest.

        List of the IDs for the requested programs. If omitted, all program IDs return.  # noqa: E501

        :param program_ids: The program_ids of this GetEnrollmentsRequest.  # noqa: E501
        :type: list[int]
        """

        self._program_ids = program_ids

    @property
    def session_type_ids(self):
        """Gets the session_type_ids of this GetEnrollmentsRequest.  # noqa: E501

        List of the IDs for the requested session types. If omitted, all session types IDs return.  # noqa: E501

        :return: The session_type_ids of this GetEnrollmentsRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._session_type_ids

    @session_type_ids.setter
    def session_type_ids(self, session_type_ids):
        """Sets the session_type_ids of this GetEnrollmentsRequest.

        List of the IDs for the requested session types. If omitted, all session types IDs return.  # noqa: E501

        :param session_type_ids: The session_type_ids of this GetEnrollmentsRequest.  # noqa: E501
        :type: list[int]
        """

        self._session_type_ids = session_type_ids

    @property
    def staff_ids(self):
        """Gets the staff_ids of this GetEnrollmentsRequest.  # noqa: E501

        List of the IDs for the requested staff IDs. If omitted, all staff IDs return.  # noqa: E501

        :return: The staff_ids of this GetEnrollmentsRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._staff_ids

    @staff_ids.setter
    def staff_ids(self, staff_ids):
        """Sets the staff_ids of this GetEnrollmentsRequest.

        List of the IDs for the requested staff IDs. If omitted, all staff IDs return.  # noqa: E501

        :param staff_ids: The staff_ids of this GetEnrollmentsRequest.  # noqa: E501
        :type: list[int]
        """

        self._staff_ids = staff_ids

    @property
    def start_date(self):
        """Gets the start_date of this GetEnrollmentsRequest.  # noqa: E501

        The start of the date range. The response returns any active enrollments that occur on or after this day.<br />  Default: **today’s date**  # noqa: E501

        :return: The start_date of this GetEnrollmentsRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GetEnrollmentsRequest.

        The start of the date range. The response returns any active enrollments that occur on or after this day.<br />  Default: **today’s date**  # noqa: E501

        :param start_date: The start_date of this GetEnrollmentsRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def limit(self):
        """Gets the limit of this GetEnrollmentsRequest.  # noqa: E501

        Number of results to include, defaults to 100  # noqa: E501

        :return: The limit of this GetEnrollmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetEnrollmentsRequest.

        Number of results to include, defaults to 100  # noqa: E501

        :param limit: The limit of this GetEnrollmentsRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this GetEnrollmentsRequest.  # noqa: E501

        Page offset, defaults to 0.  # noqa: E501

        :return: The offset of this GetEnrollmentsRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GetEnrollmentsRequest.

        Page offset, defaults to 0.  # noqa: E501

        :param offset: The offset of this GetEnrollmentsRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetEnrollmentsRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetEnrollmentsRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
