# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.credit_card_info import CreditCardInfo  # noqa: F401,E501
from mindbody_api.models.stored_card_info import StoredCardInfo  # noqa: F401,E501


class PurchaseContractRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'test': 'bool',
        'location_id': 'int',
        'client_id': 'str',
        'contract_id': 'int',
        'start_date': 'datetime',
        'first_payment_occurs': 'str',
        'client_signature': 'str',
        'promotion_code': 'str',
        'credit_card_info': 'CreditCardInfo',
        'stored_card_info': 'StoredCardInfo',
        'send_notifications': 'bool'
    }

    attribute_map = {
        'test': 'Test',
        'location_id': 'LocationId',
        'client_id': 'ClientId',
        'contract_id': 'ContractId',
        'start_date': 'StartDate',
        'first_payment_occurs': 'FirstPaymentOccurs',
        'client_signature': 'ClientSignature',
        'promotion_code': 'PromotionCode',
        'credit_card_info': 'CreditCardInfo',
        'stored_card_info': 'StoredCardInfo',
        'send_notifications': 'SendNotifications'
    }

    def __init__(self, test=None, location_id=None, client_id=None, contract_id=None, start_date=None, first_payment_occurs=None, client_signature=None, promotion_code=None, credit_card_info=None, stored_card_info=None, send_notifications=None):  # noqa: E501
        """PurchaseContractRequest - a model defined in Swagger"""  # noqa: E501

        self._test = None
        self._location_id = None
        self._client_id = None
        self._contract_id = None
        self._start_date = None
        self._first_payment_occurs = None
        self._client_signature = None
        self._promotion_code = None
        self._credit_card_info = None
        self._stored_card_info = None
        self._send_notifications = None
        self.discriminator = None

        if test is not None:
            self.test = test
        if location_id is not None:
            self.location_id = location_id
        self.client_id = client_id
        self.contract_id = contract_id
        if start_date is not None:
            self.start_date = start_date
        if first_payment_occurs is not None:
            self.first_payment_occurs = first_payment_occurs
        if client_signature is not None:
            self.client_signature = client_signature
        if promotion_code is not None:
            self.promotion_code = promotion_code
        if credit_card_info is not None:
            self.credit_card_info = credit_card_info
        if stored_card_info is not None:
            self.stored_card_info = stored_card_info
        if send_notifications is not None:
            self.send_notifications = send_notifications

    @property
    def test(self):
        """Gets the test of this PurchaseContractRequest.  # noqa: E501

        When `true`, the Public API validates input information, but does not commit it, so no client data is affected.<br />  When `false` or omitted, the transaction is committed, and client data is affected.<br />  Default: **false**  # noqa: E501

        :return: The test of this PurchaseContractRequest.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this PurchaseContractRequest.

        When `true`, the Public API validates input information, but does not commit it, so no client data is affected.<br />  When `false` or omitted, the transaction is committed, and client data is affected.<br />  Default: **false**  # noqa: E501

        :param test: The test of this PurchaseContractRequest.  # noqa: E501
        :type: bool
        """

        self._test = test

    @property
    def location_id(self):
        """Gets the location_id of this PurchaseContractRequest.  # noqa: E501

        The ID of the location where the client is purchasing the contract; used for AutoPays.  # noqa: E501

        :return: The location_id of this PurchaseContractRequest.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this PurchaseContractRequest.

        The ID of the location where the client is purchasing the contract; used for AutoPays.  # noqa: E501

        :param location_id: The location_id of this PurchaseContractRequest.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def client_id(self):
        """Gets the client_id of this PurchaseContractRequest.  # noqa: E501

        The ID of the client. Note that this is not the same as the client’s unique ID.  # noqa: E501

        :return: The client_id of this PurchaseContractRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this PurchaseContractRequest.

        The ID of the client. Note that this is not the same as the client’s unique ID.  # noqa: E501

        :param client_id: The client_id of this PurchaseContractRequest.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def contract_id(self):
        """Gets the contract_id of this PurchaseContractRequest.  # noqa: E501

        The ID of the contract being purchased.  # noqa: E501

        :return: The contract_id of this PurchaseContractRequest.  # noqa: E501
        :rtype: int
        """
        return self._contract_id

    @contract_id.setter
    def contract_id(self, contract_id):
        """Sets the contract_id of this PurchaseContractRequest.

        The ID of the contract being purchased.  # noqa: E501

        :param contract_id: The contract_id of this PurchaseContractRequest.  # noqa: E501
        :type: int
        """
        if contract_id is None:
            raise ValueError("Invalid value for `contract_id`, must not be `None`")  # noqa: E501

        self._contract_id = contract_id

    @property
    def start_date(self):
        """Gets the start_date of this PurchaseContractRequest.  # noqa: E501

        The date that the contract starts.<br />  Default: **today’s date**  # noqa: E501

        :return: The start_date of this PurchaseContractRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this PurchaseContractRequest.

        The date that the contract starts.<br />  Default: **today’s date**  # noqa: E501

        :param start_date: The start_date of this PurchaseContractRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def first_payment_occurs(self):
        """Gets the first_payment_occurs of this PurchaseContractRequest.  # noqa: E501

        The date on which the first payment is to occur. Possible values:  * Instant  * `StartDate`  # noqa: E501

        :return: The first_payment_occurs of this PurchaseContractRequest.  # noqa: E501
        :rtype: str
        """
        return self._first_payment_occurs

    @first_payment_occurs.setter
    def first_payment_occurs(self, first_payment_occurs):
        """Sets the first_payment_occurs of this PurchaseContractRequest.

        The date on which the first payment is to occur. Possible values:  * Instant  * `StartDate`  # noqa: E501

        :param first_payment_occurs: The first_payment_occurs of this PurchaseContractRequest.  # noqa: E501
        :type: str
        """

        self._first_payment_occurs = first_payment_occurs

    @property
    def client_signature(self):
        """Gets the client_signature of this PurchaseContractRequest.  # noqa: E501

        A representation of the client’s signature. This value can take the form of Base64-encoded byte array. The file type should be PNG. The picture of the client’s signature is uploaded and viewable from the Client Documents page in the Core Business Mode software. The title of the document is:<br />  clientContractSignature-{uniquePurchasedClientContractID}-{contractName}-{contractStartDate}.{fileType}  # noqa: E501

        :return: The client_signature of this PurchaseContractRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_signature

    @client_signature.setter
    def client_signature(self, client_signature):
        """Sets the client_signature of this PurchaseContractRequest.

        A representation of the client’s signature. This value can take the form of Base64-encoded byte array. The file type should be PNG. The picture of the client’s signature is uploaded and viewable from the Client Documents page in the Core Business Mode software. The title of the document is:<br />  clientContractSignature-{uniquePurchasedClientContractID}-{contractName}-{contractStartDate}.{fileType}  # noqa: E501

        :param client_signature: The client_signature of this PurchaseContractRequest.  # noqa: E501
        :type: str
        """
        if client_signature is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', client_signature):  # noqa: E501
            raise ValueError(r"Invalid value for `client_signature`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._client_signature = client_signature

    @property
    def promotion_code(self):
        """Gets the promotion_code of this PurchaseContractRequest.  # noqa: E501

        A promotion code, if one applies. Promotion codes are applied to items that are both marked as pay now in a contract and are discounted by the promotion code. If a pay now item is an autopay item, its autopay price is the price at the time of checkout, so, if a promotion code was applied, all autopays are scheduled using that discounted price.  # noqa: E501

        :return: The promotion_code of this PurchaseContractRequest.  # noqa: E501
        :rtype: str
        """
        return self._promotion_code

    @promotion_code.setter
    def promotion_code(self, promotion_code):
        """Sets the promotion_code of this PurchaseContractRequest.

        A promotion code, if one applies. Promotion codes are applied to items that are both marked as pay now in a contract and are discounted by the promotion code. If a pay now item is an autopay item, its autopay price is the price at the time of checkout, so, if a promotion code was applied, all autopays are scheduled using that discounted price.  # noqa: E501

        :param promotion_code: The promotion_code of this PurchaseContractRequest.  # noqa: E501
        :type: str
        """

        self._promotion_code = promotion_code

    @property
    def credit_card_info(self):
        """Gets the credit_card_info of this PurchaseContractRequest.  # noqa: E501

        Contains credit card payment information.<br />  Either `StoredCardInfo` or `CreditCardInfo` is required; the other becomes optional.  # noqa: E501

        :return: The credit_card_info of this PurchaseContractRequest.  # noqa: E501
        :rtype: CreditCardInfo
        """
        return self._credit_card_info

    @credit_card_info.setter
    def credit_card_info(self, credit_card_info):
        """Sets the credit_card_info of this PurchaseContractRequest.

        Contains credit card payment information.<br />  Either `StoredCardInfo` or `CreditCardInfo` is required; the other becomes optional.  # noqa: E501

        :param credit_card_info: The credit_card_info of this PurchaseContractRequest.  # noqa: E501
        :type: CreditCardInfo
        """

        self._credit_card_info = credit_card_info

    @property
    def stored_card_info(self):
        """Gets the stored_card_info of this PurchaseContractRequest.  # noqa: E501

        Contains information about the stored credit card payment.<br />  Either `CreditCardInfo` or `StoredCardInfo` is required; the other becomes optional.  # noqa: E501

        :return: The stored_card_info of this PurchaseContractRequest.  # noqa: E501
        :rtype: StoredCardInfo
        """
        return self._stored_card_info

    @stored_card_info.setter
    def stored_card_info(self, stored_card_info):
        """Sets the stored_card_info of this PurchaseContractRequest.

        Contains information about the stored credit card payment.<br />  Either `CreditCardInfo` or `StoredCardInfo` is required; the other becomes optional.  # noqa: E501

        :param stored_card_info: The stored_card_info of this PurchaseContractRequest.  # noqa: E501
        :type: StoredCardInfo
        """

        self._stored_card_info = stored_card_info

    @property
    def send_notifications(self):
        """Gets the send_notifications of this PurchaseContractRequest.  # noqa: E501

        When `true`, indicates that email and SMS notifications should be sent to the client after purchase.<br />  Default: **true**  # noqa: E501

        :return: The send_notifications of this PurchaseContractRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_notifications

    @send_notifications.setter
    def send_notifications(self, send_notifications):
        """Sets the send_notifications of this PurchaseContractRequest.

        When `true`, indicates that email and SMS notifications should be sent to the client after purchase.<br />  Default: **true**  # noqa: E501

        :param send_notifications: The send_notifications of this PurchaseContractRequest.  # noqa: E501
        :type: bool
        """

        self._send_notifications = send_notifications

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchaseContractRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchaseContractRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
