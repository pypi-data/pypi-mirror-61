# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.class_description import ClassDescription  # noqa: F401,E501
from mindbody_api.models.client import Client  # noqa: F401,E501
from mindbody_api.models.course import Course  # noqa: F401,E501
from mindbody_api.models.location import Location  # noqa: F401,E501
from mindbody_api.models.model_class import ModelClass  # noqa: F401,E501
from mindbody_api.models.staff import Staff  # noqa: F401,E501


class ClassSchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'classes': 'list[ModelClass]',
        'clients': 'list[Client]',
        'course': 'Course',
        'semester_id': 'int',
        'is_available': 'bool',
        'id': 'int',
        'class_description': 'ClassDescription',
        'day_sunday': 'bool',
        'day_monday': 'bool',
        'day_tuesday': 'bool',
        'day_wednesday': 'bool',
        'day_thursday': 'bool',
        'day_friday': 'bool',
        'day_saturday': 'bool',
        'allow_open_enrollment': 'bool',
        'allow_date_forward_enrollment': 'bool',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'staff': 'Staff',
        'location': 'Location'
    }

    attribute_map = {
        'classes': 'Classes',
        'clients': 'Clients',
        'course': 'Course',
        'semester_id': 'SemesterId',
        'is_available': 'IsAvailable',
        'id': 'Id',
        'class_description': 'ClassDescription',
        'day_sunday': 'DaySunday',
        'day_monday': 'DayMonday',
        'day_tuesday': 'DayTuesday',
        'day_wednesday': 'DayWednesday',
        'day_thursday': 'DayThursday',
        'day_friday': 'DayFriday',
        'day_saturday': 'DaySaturday',
        'allow_open_enrollment': 'AllowOpenEnrollment',
        'allow_date_forward_enrollment': 'AllowDateForwardEnrollment',
        'start_time': 'StartTime',
        'end_time': 'EndTime',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'staff': 'Staff',
        'location': 'Location'
    }

    def __init__(self, classes=None, clients=None, course=None, semester_id=None, is_available=None, id=None, class_description=None, day_sunday=None, day_monday=None, day_tuesday=None, day_wednesday=None, day_thursday=None, day_friday=None, day_saturday=None, allow_open_enrollment=None, allow_date_forward_enrollment=None, start_time=None, end_time=None, start_date=None, end_date=None, staff=None, location=None):  # noqa: E501
        """ClassSchedule - a model defined in Swagger"""  # noqa: E501

        self._classes = None
        self._clients = None
        self._course = None
        self._semester_id = None
        self._is_available = None
        self._id = None
        self._class_description = None
        self._day_sunday = None
        self._day_monday = None
        self._day_tuesday = None
        self._day_wednesday = None
        self._day_thursday = None
        self._day_friday = None
        self._day_saturday = None
        self._allow_open_enrollment = None
        self._allow_date_forward_enrollment = None
        self._start_time = None
        self._end_time = None
        self._start_date = None
        self._end_date = None
        self._staff = None
        self._location = None
        self.discriminator = None

        if classes is not None:
            self.classes = classes
        if clients is not None:
            self.clients = clients
        if course is not None:
            self.course = course
        if semester_id is not None:
            self.semester_id = semester_id
        if is_available is not None:
            self.is_available = is_available
        if id is not None:
            self.id = id
        if class_description is not None:
            self.class_description = class_description
        if day_sunday is not None:
            self.day_sunday = day_sunday
        if day_monday is not None:
            self.day_monday = day_monday
        if day_tuesday is not None:
            self.day_tuesday = day_tuesday
        if day_wednesday is not None:
            self.day_wednesday = day_wednesday
        if day_thursday is not None:
            self.day_thursday = day_thursday
        if day_friday is not None:
            self.day_friday = day_friday
        if day_saturday is not None:
            self.day_saturday = day_saturday
        if allow_open_enrollment is not None:
            self.allow_open_enrollment = allow_open_enrollment
        if allow_date_forward_enrollment is not None:
            self.allow_date_forward_enrollment = allow_date_forward_enrollment
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if staff is not None:
            self.staff = staff
        if location is not None:
            self.location = location

    @property
    def classes(self):
        """Gets the classes of this ClassSchedule.  # noqa: E501

        Contains information about classes.  # noqa: E501

        :return: The classes of this ClassSchedule.  # noqa: E501
        :rtype: list[ModelClass]
        """
        return self._classes

    @classes.setter
    def classes(self, classes):
        """Sets the classes of this ClassSchedule.

        Contains information about classes.  # noqa: E501

        :param classes: The classes of this ClassSchedule.  # noqa: E501
        :type: list[ModelClass]
        """

        self._classes = classes

    @property
    def clients(self):
        """Gets the clients of this ClassSchedule.  # noqa: E501

        Contains information about clients.  # noqa: E501

        :return: The clients of this ClassSchedule.  # noqa: E501
        :rtype: list[Client]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this ClassSchedule.

        Contains information about clients.  # noqa: E501

        :param clients: The clients of this ClassSchedule.  # noqa: E501
        :type: list[Client]
        """

        self._clients = clients

    @property
    def course(self):
        """Gets the course of this ClassSchedule.  # noqa: E501

        Contains information about the course that the enrollment is a part of.  # noqa: E501

        :return: The course of this ClassSchedule.  # noqa: E501
        :rtype: Course
        """
        return self._course

    @course.setter
    def course(self, course):
        """Sets the course of this ClassSchedule.

        Contains information about the course that the enrollment is a part of.  # noqa: E501

        :param course: The course of this ClassSchedule.  # noqa: E501
        :type: Course
        """

        self._course = course

    @property
    def semester_id(self):
        """Gets the semester_id of this ClassSchedule.  # noqa: E501

        The semester ID for the enrollment (if any).  # noqa: E501

        :return: The semester_id of this ClassSchedule.  # noqa: E501
        :rtype: int
        """
        return self._semester_id

    @semester_id.setter
    def semester_id(self, semester_id):
        """Sets the semester_id of this ClassSchedule.

        The semester ID for the enrollment (if any).  # noqa: E501

        :param semester_id: The semester_id of this ClassSchedule.  # noqa: E501
        :type: int
        """

        self._semester_id = semester_id

    @property
    def is_available(self):
        """Gets the is_available of this ClassSchedule.  # noqa: E501

        When `true`, indicates that the enrollment shows in consumer mode, has not started yet, and there is room in each class of the enrollment.<br />  When `false`, indicates that either the enrollment does not show in consumer mode, has already started, or there is no room in some classes of the enrollment.  # noqa: E501

        :return: The is_available of this ClassSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this ClassSchedule.

        When `true`, indicates that the enrollment shows in consumer mode, has not started yet, and there is room in each class of the enrollment.<br />  When `false`, indicates that either the enrollment does not show in consumer mode, has already started, or there is no room in some classes of the enrollment.  # noqa: E501

        :param is_available: The is_available of this ClassSchedule.  # noqa: E501
        :type: bool
        """

        self._is_available = is_available

    @property
    def id(self):
        """Gets the id of this ClassSchedule.  # noqa: E501

        The unique ID of the class schedule.  # noqa: E501

        :return: The id of this ClassSchedule.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ClassSchedule.

        The unique ID of the class schedule.  # noqa: E501

        :param id: The id of this ClassSchedule.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def class_description(self):
        """Gets the class_description of this ClassSchedule.  # noqa: E501

        Contains information about the class.  # noqa: E501

        :return: The class_description of this ClassSchedule.  # noqa: E501
        :rtype: ClassDescription
        """
        return self._class_description

    @class_description.setter
    def class_description(self, class_description):
        """Sets the class_description of this ClassSchedule.

        Contains information about the class.  # noqa: E501

        :param class_description: The class_description of this ClassSchedule.  # noqa: E501
        :type: ClassDescription
        """

        self._class_description = class_description

    @property
    def day_sunday(self):
        """Gets the day_sunday of this ClassSchedule.  # noqa: E501

        When `true`, indicates that this schedule occurs on Sundays.  # noqa: E501

        :return: The day_sunday of this ClassSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._day_sunday

    @day_sunday.setter
    def day_sunday(self, day_sunday):
        """Sets the day_sunday of this ClassSchedule.

        When `true`, indicates that this schedule occurs on Sundays.  # noqa: E501

        :param day_sunday: The day_sunday of this ClassSchedule.  # noqa: E501
        :type: bool
        """

        self._day_sunday = day_sunday

    @property
    def day_monday(self):
        """Gets the day_monday of this ClassSchedule.  # noqa: E501

        When `true`, indicates that this schedule occurs on Mondays.  # noqa: E501

        :return: The day_monday of this ClassSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._day_monday

    @day_monday.setter
    def day_monday(self, day_monday):
        """Sets the day_monday of this ClassSchedule.

        When `true`, indicates that this schedule occurs on Mondays.  # noqa: E501

        :param day_monday: The day_monday of this ClassSchedule.  # noqa: E501
        :type: bool
        """

        self._day_monday = day_monday

    @property
    def day_tuesday(self):
        """Gets the day_tuesday of this ClassSchedule.  # noqa: E501

        When `true`, indicates that this schedule occurs on Tuesdays.  # noqa: E501

        :return: The day_tuesday of this ClassSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._day_tuesday

    @day_tuesday.setter
    def day_tuesday(self, day_tuesday):
        """Sets the day_tuesday of this ClassSchedule.

        When `true`, indicates that this schedule occurs on Tuesdays.  # noqa: E501

        :param day_tuesday: The day_tuesday of this ClassSchedule.  # noqa: E501
        :type: bool
        """

        self._day_tuesday = day_tuesday

    @property
    def day_wednesday(self):
        """Gets the day_wednesday of this ClassSchedule.  # noqa: E501

        When `true`, indicates that this schedule occurs on Wednesdays.  # noqa: E501

        :return: The day_wednesday of this ClassSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._day_wednesday

    @day_wednesday.setter
    def day_wednesday(self, day_wednesday):
        """Sets the day_wednesday of this ClassSchedule.

        When `true`, indicates that this schedule occurs on Wednesdays.  # noqa: E501

        :param day_wednesday: The day_wednesday of this ClassSchedule.  # noqa: E501
        :type: bool
        """

        self._day_wednesday = day_wednesday

    @property
    def day_thursday(self):
        """Gets the day_thursday of this ClassSchedule.  # noqa: E501

        When `true`, indicates that this schedule occurs on Thursdays.  # noqa: E501

        :return: The day_thursday of this ClassSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._day_thursday

    @day_thursday.setter
    def day_thursday(self, day_thursday):
        """Sets the day_thursday of this ClassSchedule.

        When `true`, indicates that this schedule occurs on Thursdays.  # noqa: E501

        :param day_thursday: The day_thursday of this ClassSchedule.  # noqa: E501
        :type: bool
        """

        self._day_thursday = day_thursday

    @property
    def day_friday(self):
        """Gets the day_friday of this ClassSchedule.  # noqa: E501

        When `true`, indicates that this schedule occurs on Fridays.  # noqa: E501

        :return: The day_friday of this ClassSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._day_friday

    @day_friday.setter
    def day_friday(self, day_friday):
        """Sets the day_friday of this ClassSchedule.

        When `true`, indicates that this schedule occurs on Fridays.  # noqa: E501

        :param day_friday: The day_friday of this ClassSchedule.  # noqa: E501
        :type: bool
        """

        self._day_friday = day_friday

    @property
    def day_saturday(self):
        """Gets the day_saturday of this ClassSchedule.  # noqa: E501

        When `true`, indicates that this schedule occurs on Saturdays.  # noqa: E501

        :return: The day_saturday of this ClassSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._day_saturday

    @day_saturday.setter
    def day_saturday(self, day_saturday):
        """Sets the day_saturday of this ClassSchedule.

        When `true`, indicates that this schedule occurs on Saturdays.  # noqa: E501

        :param day_saturday: The day_saturday of this ClassSchedule.  # noqa: E501
        :type: bool
        """

        self._day_saturday = day_saturday

    @property
    def allow_open_enrollment(self):
        """Gets the allow_open_enrollment of this ClassSchedule.  # noqa: E501

        When `true`, indicates that the enrollment allows booking after the enrollment has started.  # noqa: E501

        :return: The allow_open_enrollment of this ClassSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._allow_open_enrollment

    @allow_open_enrollment.setter
    def allow_open_enrollment(self, allow_open_enrollment):
        """Sets the allow_open_enrollment of this ClassSchedule.

        When `true`, indicates that the enrollment allows booking after the enrollment has started.  # noqa: E501

        :param allow_open_enrollment: The allow_open_enrollment of this ClassSchedule.  # noqa: E501
        :type: bool
        """

        self._allow_open_enrollment = allow_open_enrollment

    @property
    def allow_date_forward_enrollment(self):
        """Gets the allow_date_forward_enrollment of this ClassSchedule.  # noqa: E501

        When `true`, indicates that this the enrollment shows in consumer mode, the enrollment has not started yet, and there is room in each class of the enrollment.  # noqa: E501

        :return: The allow_date_forward_enrollment of this ClassSchedule.  # noqa: E501
        :rtype: bool
        """
        return self._allow_date_forward_enrollment

    @allow_date_forward_enrollment.setter
    def allow_date_forward_enrollment(self, allow_date_forward_enrollment):
        """Sets the allow_date_forward_enrollment of this ClassSchedule.

        When `true`, indicates that this the enrollment shows in consumer mode, the enrollment has not started yet, and there is room in each class of the enrollment.  # noqa: E501

        :param allow_date_forward_enrollment: The allow_date_forward_enrollment of this ClassSchedule.  # noqa: E501
        :type: bool
        """

        self._allow_date_forward_enrollment = allow_date_forward_enrollment

    @property
    def start_time(self):
        """Gets the start_time of this ClassSchedule.  # noqa: E501

        The time this class schedule starts.  # noqa: E501

        :return: The start_time of this ClassSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this ClassSchedule.

        The time this class schedule starts.  # noqa: E501

        :param start_time: The start_time of this ClassSchedule.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this ClassSchedule.  # noqa: E501

        The time this class schedule ends.  # noqa: E501

        :return: The end_time of this ClassSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this ClassSchedule.

        The time this class schedule ends.  # noqa: E501

        :param end_time: The end_time of this ClassSchedule.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def start_date(self):
        """Gets the start_date of this ClassSchedule.  # noqa: E501

        The date this class schedule starts.  # noqa: E501

        :return: The start_date of this ClassSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this ClassSchedule.

        The date this class schedule starts.  # noqa: E501

        :param start_date: The start_date of this ClassSchedule.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this ClassSchedule.  # noqa: E501

        The date this class schedule ends.  # noqa: E501

        :return: The end_date of this ClassSchedule.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this ClassSchedule.

        The date this class schedule ends.  # noqa: E501

        :param end_date: The end_date of this ClassSchedule.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def staff(self):
        """Gets the staff of this ClassSchedule.  # noqa: E501

        Contains information about the staff member who is regularly scheduled to teach the class.  # noqa: E501

        :return: The staff of this ClassSchedule.  # noqa: E501
        :rtype: Staff
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this ClassSchedule.

        Contains information about the staff member who is regularly scheduled to teach the class.  # noqa: E501

        :param staff: The staff of this ClassSchedule.  # noqa: E501
        :type: Staff
        """

        self._staff = staff

    @property
    def location(self):
        """Gets the location of this ClassSchedule.  # noqa: E501

        Contains information about the regularly scheduled location of this class.  # noqa: E501

        :return: The location of this ClassSchedule.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ClassSchedule.

        Contains information about the regularly scheduled location of this class.  # noqa: E501

        :param location: The location of this ClassSchedule.  # noqa: E501
        :type: Location
        """

        self._location = location

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClassSchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassSchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
