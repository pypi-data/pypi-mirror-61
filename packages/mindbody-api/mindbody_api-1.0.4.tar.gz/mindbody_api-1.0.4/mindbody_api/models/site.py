# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Site(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'accepts_american_express': 'bool',
        'accepts_discover': 'bool',
        'accepts_master_card': 'bool',
        'accepts_visa': 'bool',
        'allows_dashboard_access': 'bool',
        'contact_email': 'str',
        'description': 'str',
        'id': 'int',
        'logo_url': 'str',
        'name': 'str',
        'page_color1': 'str',
        'page_color2': 'str',
        'page_color3': 'str',
        'page_color4': 'str',
        'pricing_level': 'str',
        'sms_package_enabled': 'bool',
        'tax_inclusive_prices': 'bool',
        'currency_iso_code': 'str',
        'country_code': 'str',
        'time_zone': 'str'
    }

    attribute_map = {
        'accepts_american_express': 'AcceptsAmericanExpress',
        'accepts_discover': 'AcceptsDiscover',
        'accepts_master_card': 'AcceptsMasterCard',
        'accepts_visa': 'AcceptsVisa',
        'allows_dashboard_access': 'AllowsDashboardAccess',
        'contact_email': 'ContactEmail',
        'description': 'Description',
        'id': 'Id',
        'logo_url': 'LogoUrl',
        'name': 'Name',
        'page_color1': 'PageColor1',
        'page_color2': 'PageColor2',
        'page_color3': 'PageColor3',
        'page_color4': 'PageColor4',
        'pricing_level': 'PricingLevel',
        'sms_package_enabled': 'SmsPackageEnabled',
        'tax_inclusive_prices': 'TaxInclusivePrices',
        'currency_iso_code': 'CurrencyIsoCode',
        'country_code': 'CountryCode',
        'time_zone': 'TimeZone'
    }

    def __init__(self, accepts_american_express=None, accepts_discover=None, accepts_master_card=None, accepts_visa=None, allows_dashboard_access=None, contact_email=None, description=None, id=None, logo_url=None, name=None, page_color1=None, page_color2=None, page_color3=None, page_color4=None, pricing_level=None, sms_package_enabled=None, tax_inclusive_prices=None, currency_iso_code=None, country_code=None, time_zone=None):  # noqa: E501
        """Site - a model defined in Swagger"""  # noqa: E501

        self._accepts_american_express = None
        self._accepts_discover = None
        self._accepts_master_card = None
        self._accepts_visa = None
        self._allows_dashboard_access = None
        self._contact_email = None
        self._description = None
        self._id = None
        self._logo_url = None
        self._name = None
        self._page_color1 = None
        self._page_color2 = None
        self._page_color3 = None
        self._page_color4 = None
        self._pricing_level = None
        self._sms_package_enabled = None
        self._tax_inclusive_prices = None
        self._currency_iso_code = None
        self._country_code = None
        self._time_zone = None
        self.discriminator = None

        if accepts_american_express is not None:
            self.accepts_american_express = accepts_american_express
        if accepts_discover is not None:
            self.accepts_discover = accepts_discover
        if accepts_master_card is not None:
            self.accepts_master_card = accepts_master_card
        if accepts_visa is not None:
            self.accepts_visa = accepts_visa
        if allows_dashboard_access is not None:
            self.allows_dashboard_access = allows_dashboard_access
        if contact_email is not None:
            self.contact_email = contact_email
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if logo_url is not None:
            self.logo_url = logo_url
        if name is not None:
            self.name = name
        if page_color1 is not None:
            self.page_color1 = page_color1
        if page_color2 is not None:
            self.page_color2 = page_color2
        if page_color3 is not None:
            self.page_color3 = page_color3
        if page_color4 is not None:
            self.page_color4 = page_color4
        if pricing_level is not None:
            self.pricing_level = pricing_level
        if sms_package_enabled is not None:
            self.sms_package_enabled = sms_package_enabled
        if tax_inclusive_prices is not None:
            self.tax_inclusive_prices = tax_inclusive_prices
        if currency_iso_code is not None:
            self.currency_iso_code = currency_iso_code
        if country_code is not None:
            self.country_code = country_code
        if time_zone is not None:
            self.time_zone = time_zone

    @property
    def accepts_american_express(self):
        """Gets the accepts_american_express of this Site.  # noqa: E501

        When `true`, indicates that this site accepts American Express cards.<br />  When `false`, indicates that this site does not accept American Express credit cards.  # noqa: E501

        :return: The accepts_american_express of this Site.  # noqa: E501
        :rtype: bool
        """
        return self._accepts_american_express

    @accepts_american_express.setter
    def accepts_american_express(self, accepts_american_express):
        """Sets the accepts_american_express of this Site.

        When `true`, indicates that this site accepts American Express cards.<br />  When `false`, indicates that this site does not accept American Express credit cards.  # noqa: E501

        :param accepts_american_express: The accepts_american_express of this Site.  # noqa: E501
        :type: bool
        """

        self._accepts_american_express = accepts_american_express

    @property
    def accepts_discover(self):
        """Gets the accepts_discover of this Site.  # noqa: E501

        When `true`, indicates that this site accepts Discover cards.<br />  When `false`, indicates that this site does not accept Discover credit cards.  # noqa: E501

        :return: The accepts_discover of this Site.  # noqa: E501
        :rtype: bool
        """
        return self._accepts_discover

    @accepts_discover.setter
    def accepts_discover(self, accepts_discover):
        """Sets the accepts_discover of this Site.

        When `true`, indicates that this site accepts Discover cards.<br />  When `false`, indicates that this site does not accept Discover credit cards.  # noqa: E501

        :param accepts_discover: The accepts_discover of this Site.  # noqa: E501
        :type: bool
        """

        self._accepts_discover = accepts_discover

    @property
    def accepts_master_card(self):
        """Gets the accepts_master_card of this Site.  # noqa: E501

        When `true`, indicates that this site accepts MasterCard cards.<br />  When `false`, indicates that this site does not accept MasterCard credit cards.  # noqa: E501

        :return: The accepts_master_card of this Site.  # noqa: E501
        :rtype: bool
        """
        return self._accepts_master_card

    @accepts_master_card.setter
    def accepts_master_card(self, accepts_master_card):
        """Sets the accepts_master_card of this Site.

        When `true`, indicates that this site accepts MasterCard cards.<br />  When `false`, indicates that this site does not accept MasterCard credit cards.  # noqa: E501

        :param accepts_master_card: The accepts_master_card of this Site.  # noqa: E501
        :type: bool
        """

        self._accepts_master_card = accepts_master_card

    @property
    def accepts_visa(self):
        """Gets the accepts_visa of this Site.  # noqa: E501

        When `true`, indicates that this site accepts Visa cards.<br />  When `false`, indicates that this site does not accept Visa credit cards.  # noqa: E501

        :return: The accepts_visa of this Site.  # noqa: E501
        :rtype: bool
        """
        return self._accepts_visa

    @accepts_visa.setter
    def accepts_visa(self, accepts_visa):
        """Sets the accepts_visa of this Site.

        When `true`, indicates that this site accepts Visa cards.<br />  When `false`, indicates that this site does not accept Visa credit cards.  # noqa: E501

        :param accepts_visa: The accepts_visa of this Site.  # noqa: E501
        :type: bool
        """

        self._accepts_visa = accepts_visa

    @property
    def allows_dashboard_access(self):
        """Gets the allows_dashboard_access of this Site.  # noqa: E501

        When `true`, indicates that this site allows access to its dashboard.<br />  When `false`, indicates that this site does not allow access to its dashboard.  # noqa: E501

        :return: The allows_dashboard_access of this Site.  # noqa: E501
        :rtype: bool
        """
        return self._allows_dashboard_access

    @allows_dashboard_access.setter
    def allows_dashboard_access(self, allows_dashboard_access):
        """Sets the allows_dashboard_access of this Site.

        When `true`, indicates that this site allows access to its dashboard.<br />  When `false`, indicates that this site does not allow access to its dashboard.  # noqa: E501

        :param allows_dashboard_access: The allows_dashboard_access of this Site.  # noqa: E501
        :type: bool
        """

        self._allows_dashboard_access = allows_dashboard_access

    @property
    def contact_email(self):
        """Gets the contact_email of this Site.  # noqa: E501

        The site’s email address.  # noqa: E501

        :return: The contact_email of this Site.  # noqa: E501
        :rtype: str
        """
        return self._contact_email

    @contact_email.setter
    def contact_email(self, contact_email):
        """Sets the contact_email of this Site.

        The site’s email address.  # noqa: E501

        :param contact_email: The contact_email of this Site.  # noqa: E501
        :type: str
        """

        self._contact_email = contact_email

    @property
    def description(self):
        """Gets the description of this Site.  # noqa: E501

        A description of the site.  # noqa: E501

        :return: The description of this Site.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Site.

        A description of the site.  # noqa: E501

        :param description: The description of this Site.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this Site.  # noqa: E501

        The site ID.  # noqa: E501

        :return: The id of this Site.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Site.

        The site ID.  # noqa: E501

        :param id: The id of this Site.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def logo_url(self):
        """Gets the logo_url of this Site.  # noqa: E501

        The URL to the site’s logo.  # noqa: E501

        :return: The logo_url of this Site.  # noqa: E501
        :rtype: str
        """
        return self._logo_url

    @logo_url.setter
    def logo_url(self, logo_url):
        """Sets the logo_url of this Site.

        The URL to the site’s logo.  # noqa: E501

        :param logo_url: The logo_url of this Site.  # noqa: E501
        :type: str
        """

        self._logo_url = logo_url

    @property
    def name(self):
        """Gets the name of this Site.  # noqa: E501

        The name of the site.  # noqa: E501

        :return: The name of this Site.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Site.

        The name of the site.  # noqa: E501

        :param name: The name of this Site.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def page_color1(self):
        """Gets the page_color1 of this Site.  # noqa: E501

        A hex code for a color the business owner uses in marketing. This color can be used to set a theme for an integration so that it matches the configured color-scheme for the business.  # noqa: E501

        :return: The page_color1 of this Site.  # noqa: E501
        :rtype: str
        """
        return self._page_color1

    @page_color1.setter
    def page_color1(self, page_color1):
        """Sets the page_color1 of this Site.

        A hex code for a color the business owner uses in marketing. This color can be used to set a theme for an integration so that it matches the configured color-scheme for the business.  # noqa: E501

        :param page_color1: The page_color1 of this Site.  # noqa: E501
        :type: str
        """

        self._page_color1 = page_color1

    @property
    def page_color2(self):
        """Gets the page_color2 of this Site.  # noqa: E501

        The hex code for a second color, to be used in the same manner as `pageColor1`.  # noqa: E501

        :return: The page_color2 of this Site.  # noqa: E501
        :rtype: str
        """
        return self._page_color2

    @page_color2.setter
    def page_color2(self, page_color2):
        """Sets the page_color2 of this Site.

        The hex code for a second color, to be used in the same manner as `pageColor1`.  # noqa: E501

        :param page_color2: The page_color2 of this Site.  # noqa: E501
        :type: str
        """

        self._page_color2 = page_color2

    @property
    def page_color3(self):
        """Gets the page_color3 of this Site.  # noqa: E501

        The hex code for a third color, to be used in the same manner as `pageColor1`.  # noqa: E501

        :return: The page_color3 of this Site.  # noqa: E501
        :rtype: str
        """
        return self._page_color3

    @page_color3.setter
    def page_color3(self, page_color3):
        """Sets the page_color3 of this Site.

        The hex code for a third color, to be used in the same manner as `pageColor1`.  # noqa: E501

        :param page_color3: The page_color3 of this Site.  # noqa: E501
        :type: str
        """

        self._page_color3 = page_color3

    @property
    def page_color4(self):
        """Gets the page_color4 of this Site.  # noqa: E501

        The hex code for a fourth color, to be used in the same manner as `pageColor1`.  # noqa: E501

        :return: The page_color4 of this Site.  # noqa: E501
        :rtype: str
        """
        return self._page_color4

    @page_color4.setter
    def page_color4(self, page_color4):
        """Sets the page_color4 of this Site.

        The hex code for a fourth color, to be used in the same manner as `pageColor1`.  # noqa: E501

        :param page_color4: The page_color4 of this Site.  # noqa: E501
        :type: str
        """

        self._page_color4 = page_color4

    @property
    def pricing_level(self):
        """Gets the pricing_level of this Site.  # noqa: E501

        The MINDBODY pricing level for the business. Possible values are:  Accelerate - The business is on MINDBODY’s Accelerate pricing tier.  Grow - The business is on MINDBODY’s Essential pricing tier.  Legacy - The business is on an older MINDBODY pricing tier that is no longer offered.  Listing - The business is on an older MINDBODY pricing tier that is no longer offered.  Pro - The business is on an older MINDBODY pricing tier that is no longer offered.  Solo - The business is on an older MINDBODY pricing tier that is no longer offered.  Ultimate - The business is on MINDBODY’s Ultimate pricing tier.  # noqa: E501

        :return: The pricing_level of this Site.  # noqa: E501
        :rtype: str
        """
        return self._pricing_level

    @pricing_level.setter
    def pricing_level(self, pricing_level):
        """Sets the pricing_level of this Site.

        The MINDBODY pricing level for the business. Possible values are:  Accelerate - The business is on MINDBODY’s Accelerate pricing tier.  Grow - The business is on MINDBODY’s Essential pricing tier.  Legacy - The business is on an older MINDBODY pricing tier that is no longer offered.  Listing - The business is on an older MINDBODY pricing tier that is no longer offered.  Pro - The business is on an older MINDBODY pricing tier that is no longer offered.  Solo - The business is on an older MINDBODY pricing tier that is no longer offered.  Ultimate - The business is on MINDBODY’s Ultimate pricing tier.  # noqa: E501

        :param pricing_level: The pricing_level of this Site.  # noqa: E501
        :type: str
        """

        self._pricing_level = pricing_level

    @property
    def sms_package_enabled(self):
        """Gets the sms_package_enabled of this Site.  # noqa: E501

        When `true`, indicates that the business uses SMS text messages to communicate with its clients.<br />  When `false`, indicates that the business does not use SMS text messages to communicate with its clients.  # noqa: E501

        :return: The sms_package_enabled of this Site.  # noqa: E501
        :rtype: bool
        """
        return self._sms_package_enabled

    @sms_package_enabled.setter
    def sms_package_enabled(self, sms_package_enabled):
        """Sets the sms_package_enabled of this Site.

        When `true`, indicates that the business uses SMS text messages to communicate with its clients.<br />  When `false`, indicates that the business does not use SMS text messages to communicate with its clients.  # noqa: E501

        :param sms_package_enabled: The sms_package_enabled of this Site.  # noqa: E501
        :type: bool
        """

        self._sms_package_enabled = sms_package_enabled

    @property
    def tax_inclusive_prices(self):
        """Gets the tax_inclusive_prices of this Site.  # noqa: E501

        When `true`, indicates that the total includes tax.<br />  When `false`, indicates that the total does not include tax.  # noqa: E501

        :return: The tax_inclusive_prices of this Site.  # noqa: E501
        :rtype: bool
        """
        return self._tax_inclusive_prices

    @tax_inclusive_prices.setter
    def tax_inclusive_prices(self, tax_inclusive_prices):
        """Sets the tax_inclusive_prices of this Site.

        When `true`, indicates that the total includes tax.<br />  When `false`, indicates that the total does not include tax.  # noqa: E501

        :param tax_inclusive_prices: The tax_inclusive_prices of this Site.  # noqa: E501
        :type: bool
        """

        self._tax_inclusive_prices = tax_inclusive_prices

    @property
    def currency_iso_code(self):
        """Gets the currency_iso_code of this Site.  # noqa: E501

        The currency ISO code for the site.  # noqa: E501

        :return: The currency_iso_code of this Site.  # noqa: E501
        :rtype: str
        """
        return self._currency_iso_code

    @currency_iso_code.setter
    def currency_iso_code(self, currency_iso_code):
        """Sets the currency_iso_code of this Site.

        The currency ISO code for the site.  # noqa: E501

        :param currency_iso_code: The currency_iso_code of this Site.  # noqa: E501
        :type: str
        """

        self._currency_iso_code = currency_iso_code

    @property
    def country_code(self):
        """Gets the country_code of this Site.  # noqa: E501

        The country code for the site.  # noqa: E501

        :return: The country_code of this Site.  # noqa: E501
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Site.

        The country code for the site.  # noqa: E501

        :param country_code: The country_code of this Site.  # noqa: E501
        :type: str
        """

        self._country_code = country_code

    @property
    def time_zone(self):
        """Gets the time_zone of this Site.  # noqa: E501

        The time zone the site is located in.  # noqa: E501

        :return: The time_zone of this Site.  # noqa: E501
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this Site.

        The time zone the site is located in.  # noqa: E501

        :param time_zone: The time_zone of this Site.  # noqa: E501
        :type: str
        """

        self._time_zone = time_zone

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Site, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Site):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
