# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Visit(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'appointment_id': 'int',
        'appointment_gender_preference': 'str',
        'appointment_status': 'str',
        'class_id': 'int',
        'client_id': 'str',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'id': 'int',
        'last_modified_date_time': 'datetime',
        'late_cancelled': 'bool',
        'location_id': 'int',
        'make_up': 'bool',
        'name': 'str',
        'service_id': 'int',
        'signed_in': 'bool',
        'staff_id': 'int',
        'web_signup': 'bool',
        'action': 'str'
    }

    attribute_map = {
        'appointment_id': 'AppointmentId',
        'appointment_gender_preference': 'AppointmentGenderPreference',
        'appointment_status': 'AppointmentStatus',
        'class_id': 'ClassId',
        'client_id': 'ClientId',
        'start_date_time': 'StartDateTime',
        'end_date_time': 'EndDateTime',
        'id': 'Id',
        'last_modified_date_time': 'LastModifiedDateTime',
        'late_cancelled': 'LateCancelled',
        'location_id': 'LocationId',
        'make_up': 'MakeUp',
        'name': 'Name',
        'service_id': 'ServiceId',
        'signed_in': 'SignedIn',
        'staff_id': 'StaffId',
        'web_signup': 'WebSignup',
        'action': 'Action'
    }

    def __init__(self, appointment_id=None, appointment_gender_preference=None, appointment_status=None, class_id=None, client_id=None, start_date_time=None, end_date_time=None, id=None, last_modified_date_time=None, late_cancelled=None, location_id=None, make_up=None, name=None, service_id=None, signed_in=None, staff_id=None, web_signup=None, action=None):  # noqa: E501
        """Visit - a model defined in Swagger"""  # noqa: E501

        self._appointment_id = None
        self._appointment_gender_preference = None
        self._appointment_status = None
        self._class_id = None
        self._client_id = None
        self._start_date_time = None
        self._end_date_time = None
        self._id = None
        self._last_modified_date_time = None
        self._late_cancelled = None
        self._location_id = None
        self._make_up = None
        self._name = None
        self._service_id = None
        self._signed_in = None
        self._staff_id = None
        self._web_signup = None
        self._action = None
        self.discriminator = None

        if appointment_id is not None:
            self.appointment_id = appointment_id
        if appointment_gender_preference is not None:
            self.appointment_gender_preference = appointment_gender_preference
        if appointment_status is not None:
            self.appointment_status = appointment_status
        if class_id is not None:
            self.class_id = class_id
        if client_id is not None:
            self.client_id = client_id
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if id is not None:
            self.id = id
        if last_modified_date_time is not None:
            self.last_modified_date_time = last_modified_date_time
        if late_cancelled is not None:
            self.late_cancelled = late_cancelled
        if location_id is not None:
            self.location_id = location_id
        if make_up is not None:
            self.make_up = make_up
        if name is not None:
            self.name = name
        if service_id is not None:
            self.service_id = service_id
        if signed_in is not None:
            self.signed_in = signed_in
        if staff_id is not None:
            self.staff_id = staff_id
        if web_signup is not None:
            self.web_signup = web_signup
        if action is not None:
            self.action = action

    @property
    def appointment_id(self):
        """Gets the appointment_id of this Visit.  # noqa: E501

        The appointment’s ID.  # noqa: E501

        :return: The appointment_id of this Visit.  # noqa: E501
        :rtype: int
        """
        return self._appointment_id

    @appointment_id.setter
    def appointment_id(self, appointment_id):
        """Sets the appointment_id of this Visit.

        The appointment’s ID.  # noqa: E501

        :param appointment_id: The appointment_id of this Visit.  # noqa: E501
        :type: int
        """

        self._appointment_id = appointment_id

    @property
    def appointment_gender_preference(self):
        """Gets the appointment_gender_preference of this Visit.  # noqa: E501

        The gender of staff member with whom the client prefers to book appointments.  # noqa: E501

        :return: The appointment_gender_preference of this Visit.  # noqa: E501
        :rtype: str
        """
        return self._appointment_gender_preference

    @appointment_gender_preference.setter
    def appointment_gender_preference(self, appointment_gender_preference):
        """Sets the appointment_gender_preference of this Visit.

        The gender of staff member with whom the client prefers to book appointments.  # noqa: E501

        :param appointment_gender_preference: The appointment_gender_preference of this Visit.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Female", "Male"]  # noqa: E501
        if appointment_gender_preference not in allowed_values:
            raise ValueError(
                "Invalid value for `appointment_gender_preference` ({0}), must be one of {1}"  # noqa: E501
                .format(appointment_gender_preference, allowed_values)
            )

        self._appointment_gender_preference = appointment_gender_preference

    @property
    def appointment_status(self):
        """Gets the appointment_status of this Visit.  # noqa: E501

        The status of the appointment.  # noqa: E501

        :return: The appointment_status of this Visit.  # noqa: E501
        :rtype: str
        """
        return self._appointment_status

    @appointment_status.setter
    def appointment_status(self, appointment_status):
        """Sets the appointment_status of this Visit.

        The status of the appointment.  # noqa: E501

        :param appointment_status: The appointment_status of this Visit.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Requested", "Booked", "Completed", "Confirmed", "Arrived", "NoShow", "Cancelled", "LateCancelled"]  # noqa: E501
        if appointment_status not in allowed_values:
            raise ValueError(
                "Invalid value for `appointment_status` ({0}), must be one of {1}"  # noqa: E501
                .format(appointment_status, allowed_values)
            )

        self._appointment_status = appointment_status

    @property
    def class_id(self):
        """Gets the class_id of this Visit.  # noqa: E501

        The class ID that was used to retrieve the visits.  # noqa: E501

        :return: The class_id of this Visit.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this Visit.

        The class ID that was used to retrieve the visits.  # noqa: E501

        :param class_id: The class_id of this Visit.  # noqa: E501
        :type: int
        """

        self._class_id = class_id

    @property
    def client_id(self):
        """Gets the client_id of this Visit.  # noqa: E501

        The ID of the client associated with the visit.  # noqa: E501

        :return: The client_id of this Visit.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Visit.

        The ID of the client associated with the visit.  # noqa: E501

        :param client_id: The client_id of this Visit.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def start_date_time(self):
        """Gets the start_date_time of this Visit.  # noqa: E501

        The time this class is scheduled to start.  # noqa: E501

        :return: The start_date_time of this Visit.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this Visit.

        The time this class is scheduled to start.  # noqa: E501

        :param start_date_time: The start_date_time of this Visit.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this Visit.  # noqa: E501

        The date and time the visit ends. The Public API returns UTC dates and times. For example, a class that occurs on June 25th, 2018 at 2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST is five hours behind UTC. Date time pairs always return in the format YYYY-MM-DDTHH:mm:ssZ.  # noqa: E501

        :return: The end_date_time of this Visit.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this Visit.

        The date and time the visit ends. The Public API returns UTC dates and times. For example, a class that occurs on June 25th, 2018 at 2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST is five hours behind UTC. Date time pairs always return in the format YYYY-MM-DDTHH:mm:ssZ.  # noqa: E501

        :param end_date_time: The end_date_time of this Visit.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def id(self):
        """Gets the id of this Visit.  # noqa: E501

        The ID of the visit.  # noqa: E501

        :return: The id of this Visit.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Visit.

        The ID of the visit.  # noqa: E501

        :param id: The id of this Visit.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this Visit.  # noqa: E501

        When included in the request, only records modified on or after the specified `LastModifiedDate` are included in the response. The Public API returns UTC dates and times. For example, a class that occurs on June 25th, 2018 at 2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST is five hours behind UTC. Date time pairs always return in the format YYYY-MM-DDTHH:mm:ssZ.  # noqa: E501

        :return: The last_modified_date_time of this Visit.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this Visit.

        When included in the request, only records modified on or after the specified `LastModifiedDate` are included in the response. The Public API returns UTC dates and times. For example, a class that occurs on June 25th, 2018 at 2:15PM (EST) appears as “2018-06-25T19:15:00Z” because EST is five hours behind UTC. Date time pairs always return in the format YYYY-MM-DDTHH:mm:ssZ.  # noqa: E501

        :param last_modified_date_time: The last_modified_date_time of this Visit.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date_time = last_modified_date_time

    @property
    def late_cancelled(self):
        """Gets the late_cancelled of this Visit.  # noqa: E501

        When `true`, indicates that the class has been `LateCancelled`.<br />  When `false`, indicates that the class has not been `LateCancelled`.  # noqa: E501

        :return: The late_cancelled of this Visit.  # noqa: E501
        :rtype: bool
        """
        return self._late_cancelled

    @late_cancelled.setter
    def late_cancelled(self, late_cancelled):
        """Sets the late_cancelled of this Visit.

        When `true`, indicates that the class has been `LateCancelled`.<br />  When `false`, indicates that the class has not been `LateCancelled`.  # noqa: E501

        :param late_cancelled: The late_cancelled of this Visit.  # noqa: E501
        :type: bool
        """

        self._late_cancelled = late_cancelled

    @property
    def location_id(self):
        """Gets the location_id of this Visit.  # noqa: E501

        The ID of the location where the visit took place or is to take place.  # noqa: E501

        :return: The location_id of this Visit.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Visit.

        The ID of the location where the visit took place or is to take place.  # noqa: E501

        :param location_id: The location_id of this Visit.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def make_up(self):
        """Gets the make_up of this Visit.  # noqa: E501

        When `true`, the client can make up this session and a session is not deducted from the pricing option that was used to sign the client into the enrollment. When the client has the make-up session, a session is automatically removed from a pricing option that matches the service category of the enrollment and is within the same date range of the missed session.<br />  When `false`, the client cannot make up this session. See [Enrollments: Make-ups](https://support.mindbodyonline.com/s/article/203259433-Enrollments-Make-ups?language=en_US) for more information.  # noqa: E501

        :return: The make_up of this Visit.  # noqa: E501
        :rtype: bool
        """
        return self._make_up

    @make_up.setter
    def make_up(self, make_up):
        """Sets the make_up of this Visit.

        When `true`, the client can make up this session and a session is not deducted from the pricing option that was used to sign the client into the enrollment. When the client has the make-up session, a session is automatically removed from a pricing option that matches the service category of the enrollment and is within the same date range of the missed session.<br />  When `false`, the client cannot make up this session. See [Enrollments: Make-ups](https://support.mindbodyonline.com/s/article/203259433-Enrollments-Make-ups?language=en_US) for more information.  # noqa: E501

        :param make_up: The make_up of this Visit.  # noqa: E501
        :type: bool
        """

        self._make_up = make_up

    @property
    def name(self):
        """Gets the name of this Visit.  # noqa: E501

        The name of the class.  # noqa: E501

        :return: The name of this Visit.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Visit.

        The name of the class.  # noqa: E501

        :param name: The name of this Visit.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def service_id(self):
        """Gets the service_id of this Visit.  # noqa: E501

        The ID of the pricing option used to pay for the class visit.  # noqa: E501

        :return: The service_id of this Visit.  # noqa: E501
        :rtype: int
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this Visit.

        The ID of the pricing option used to pay for the class visit.  # noqa: E501

        :param service_id: The service_id of this Visit.  # noqa: E501
        :type: int
        """

        self._service_id = service_id

    @property
    def signed_in(self):
        """Gets the signed_in of this Visit.  # noqa: E501

        When `true`, indicates that the client has been signed in.<br />  When `false`, indicates that the client has not been signed in.  # noqa: E501

        :return: The signed_in of this Visit.  # noqa: E501
        :rtype: bool
        """
        return self._signed_in

    @signed_in.setter
    def signed_in(self, signed_in):
        """Sets the signed_in of this Visit.

        When `true`, indicates that the client has been signed in.<br />  When `false`, indicates that the client has not been signed in.  # noqa: E501

        :param signed_in: The signed_in of this Visit.  # noqa: E501
        :type: bool
        """

        self._signed_in = signed_in

    @property
    def staff_id(self):
        """Gets the staff_id of this Visit.  # noqa: E501

        The ID of the staff member who is teaching the class.  # noqa: E501

        :return: The staff_id of this Visit.  # noqa: E501
        :rtype: int
        """
        return self._staff_id

    @staff_id.setter
    def staff_id(self, staff_id):
        """Sets the staff_id of this Visit.

        The ID of the staff member who is teaching the class.  # noqa: E501

        :param staff_id: The staff_id of this Visit.  # noqa: E501
        :type: int
        """

        self._staff_id = staff_id

    @property
    def web_signup(self):
        """Gets the web_signup of this Visit.  # noqa: E501

        When `true`, indicates that the client signed up online.<br />  When `false`, indicates that the client was signed up by a staff member.  # noqa: E501

        :return: The web_signup of this Visit.  # noqa: E501
        :rtype: bool
        """
        return self._web_signup

    @web_signup.setter
    def web_signup(self, web_signup):
        """Sets the web_signup of this Visit.

        When `true`, indicates that the client signed up online.<br />  When `false`, indicates that the client was signed up by a staff member.  # noqa: E501

        :param web_signup: The web_signup of this Visit.  # noqa: E501
        :type: bool
        """

        self._web_signup = web_signup

    @property
    def action(self):
        """Gets the action of this Visit.  # noqa: E501

        The action taken.  # noqa: E501

        :return: The action of this Visit.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this Visit.

        The action taken.  # noqa: E501

        :param action: The action of this Visit.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Added", "Updated", "Failed", "Removed"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"  # noqa: E501
                .format(action, allowed_values)
            )

        self._action = action

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Visit, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Visit):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
