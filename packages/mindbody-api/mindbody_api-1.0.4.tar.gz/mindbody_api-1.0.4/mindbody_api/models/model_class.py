# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.booking_window import BookingWindow  # noqa: F401,E501
from mindbody_api.models.class_description import ClassDescription  # noqa: F401,E501
from mindbody_api.models.client import Client  # noqa: F401,E501
from mindbody_api.models.location import Location  # noqa: F401,E501
from mindbody_api.models.resource import Resource  # noqa: F401,E501
from mindbody_api.models.staff import Staff  # noqa: F401,E501
from mindbody_api.models.visit import Visit  # noqa: F401,E501


class ModelClass(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class_schedule_id': 'int',
        'visits': 'list[Visit]',
        'clients': 'list[Client]',
        'location': 'Location',
        'resource': 'Resource',
        'max_capacity': 'int',
        'web_capacity': 'int',
        'total_booked': 'int',
        'total_booked_waitlist': 'int',
        'web_booked': 'int',
        'semester_id': 'int',
        'is_canceled': 'bool',
        'substitute': 'bool',
        'active': 'bool',
        'is_waitlist_available': 'bool',
        'is_enrolled': 'bool',
        'hide_cancel': 'bool',
        'id': 'int',
        'is_available': 'bool',
        'start_date_time': 'datetime',
        'end_date_time': 'datetime',
        'last_modified_date_time': 'datetime',
        'class_description': 'ClassDescription',
        'staff': 'Staff',
        'booking_window': 'BookingWindow',
        'booking_status': 'str'
    }

    attribute_map = {
        'class_schedule_id': 'ClassScheduleId',
        'visits': 'Visits',
        'clients': 'Clients',
        'location': 'Location',
        'resource': 'Resource',
        'max_capacity': 'MaxCapacity',
        'web_capacity': 'WebCapacity',
        'total_booked': 'TotalBooked',
        'total_booked_waitlist': 'TotalBookedWaitlist',
        'web_booked': 'WebBooked',
        'semester_id': 'SemesterId',
        'is_canceled': 'IsCanceled',
        'substitute': 'Substitute',
        'active': 'Active',
        'is_waitlist_available': 'IsWaitlistAvailable',
        'is_enrolled': 'IsEnrolled',
        'hide_cancel': 'HideCancel',
        'id': 'Id',
        'is_available': 'IsAvailable',
        'start_date_time': 'StartDateTime',
        'end_date_time': 'EndDateTime',
        'last_modified_date_time': 'LastModifiedDateTime',
        'class_description': 'ClassDescription',
        'staff': 'Staff',
        'booking_window': 'BookingWindow',
        'booking_status': 'BookingStatus'
    }

    def __init__(self, class_schedule_id=None, visits=None, clients=None, location=None, resource=None, max_capacity=None, web_capacity=None, total_booked=None, total_booked_waitlist=None, web_booked=None, semester_id=None, is_canceled=None, substitute=None, active=None, is_waitlist_available=None, is_enrolled=None, hide_cancel=None, id=None, is_available=None, start_date_time=None, end_date_time=None, last_modified_date_time=None, class_description=None, staff=None, booking_window=None, booking_status=None):  # noqa: E501
        """ModelClass - a model defined in Swagger"""  # noqa: E501

        self._class_schedule_id = None
        self._visits = None
        self._clients = None
        self._location = None
        self._resource = None
        self._max_capacity = None
        self._web_capacity = None
        self._total_booked = None
        self._total_booked_waitlist = None
        self._web_booked = None
        self._semester_id = None
        self._is_canceled = None
        self._substitute = None
        self._active = None
        self._is_waitlist_available = None
        self._is_enrolled = None
        self._hide_cancel = None
        self._id = None
        self._is_available = None
        self._start_date_time = None
        self._end_date_time = None
        self._last_modified_date_time = None
        self._class_description = None
        self._staff = None
        self._booking_window = None
        self._booking_status = None
        self.discriminator = None

        if class_schedule_id is not None:
            self.class_schedule_id = class_schedule_id
        if visits is not None:
            self.visits = visits
        if clients is not None:
            self.clients = clients
        if location is not None:
            self.location = location
        if resource is not None:
            self.resource = resource
        if max_capacity is not None:
            self.max_capacity = max_capacity
        if web_capacity is not None:
            self.web_capacity = web_capacity
        if total_booked is not None:
            self.total_booked = total_booked
        if total_booked_waitlist is not None:
            self.total_booked_waitlist = total_booked_waitlist
        if web_booked is not None:
            self.web_booked = web_booked
        if semester_id is not None:
            self.semester_id = semester_id
        if is_canceled is not None:
            self.is_canceled = is_canceled
        if substitute is not None:
            self.substitute = substitute
        if active is not None:
            self.active = active
        if is_waitlist_available is not None:
            self.is_waitlist_available = is_waitlist_available
        if is_enrolled is not None:
            self.is_enrolled = is_enrolled
        if hide_cancel is not None:
            self.hide_cancel = hide_cancel
        if id is not None:
            self.id = id
        if is_available is not None:
            self.is_available = is_available
        if start_date_time is not None:
            self.start_date_time = start_date_time
        if end_date_time is not None:
            self.end_date_time = end_date_time
        if last_modified_date_time is not None:
            self.last_modified_date_time = last_modified_date_time
        if class_description is not None:
            self.class_description = class_description
        if staff is not None:
            self.staff = staff
        if booking_window is not None:
            self.booking_window = booking_window
        if booking_status is not None:
            self.booking_status = booking_status

    @property
    def class_schedule_id(self):
        """Gets the class_schedule_id of this ModelClass.  # noqa: E501

        The ID used to retrieve the class schedule for the desired class.  # noqa: E501

        :return: The class_schedule_id of this ModelClass.  # noqa: E501
        :rtype: int
        """
        return self._class_schedule_id

    @class_schedule_id.setter
    def class_schedule_id(self, class_schedule_id):
        """Sets the class_schedule_id of this ModelClass.

        The ID used to retrieve the class schedule for the desired class.  # noqa: E501

        :param class_schedule_id: The class_schedule_id of this ModelClass.  # noqa: E501
        :type: int
        """

        self._class_schedule_id = class_schedule_id

    @property
    def visits(self):
        """Gets the visits of this ModelClass.  # noqa: E501

        Contains information about visits.  # noqa: E501

        :return: The visits of this ModelClass.  # noqa: E501
        :rtype: list[Visit]
        """
        return self._visits

    @visits.setter
    def visits(self, visits):
        """Sets the visits of this ModelClass.

        Contains information about visits.  # noqa: E501

        :param visits: The visits of this ModelClass.  # noqa: E501
        :type: list[Visit]
        """

        self._visits = visits

    @property
    def clients(self):
        """Gets the clients of this ModelClass.  # noqa: E501

        Contains information about clients.  # noqa: E501

        :return: The clients of this ModelClass.  # noqa: E501
        :rtype: list[Client]
        """
        return self._clients

    @clients.setter
    def clients(self, clients):
        """Sets the clients of this ModelClass.

        Contains information about clients.  # noqa: E501

        :param clients: The clients of this ModelClass.  # noqa: E501
        :type: list[Client]
        """

        self._clients = clients

    @property
    def location(self):
        """Gets the location of this ModelClass.  # noqa: E501

        Contains information about a location.  # noqa: E501

        :return: The location of this ModelClass.  # noqa: E501
        :rtype: Location
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ModelClass.

        Contains information about a location.  # noqa: E501

        :param location: The location of this ModelClass.  # noqa: E501
        :type: Location
        """

        self._location = location

    @property
    def resource(self):
        """Gets the resource of this ModelClass.  # noqa: E501

        Contains information about a resource, such as a room, assigned to a class.  # noqa: E501

        :return: The resource of this ModelClass.  # noqa: E501
        :rtype: Resource
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this ModelClass.

        Contains information about a resource, such as a room, assigned to a class.  # noqa: E501

        :param resource: The resource of this ModelClass.  # noqa: E501
        :type: Resource
        """

        self._resource = resource

    @property
    def max_capacity(self):
        """Gets the max_capacity of this ModelClass.  # noqa: E501

        The maximum number of clients allowed in the class.  # noqa: E501

        :return: The max_capacity of this ModelClass.  # noqa: E501
        :rtype: int
        """
        return self._max_capacity

    @max_capacity.setter
    def max_capacity(self, max_capacity):
        """Sets the max_capacity of this ModelClass.

        The maximum number of clients allowed in the class.  # noqa: E501

        :param max_capacity: The max_capacity of this ModelClass.  # noqa: E501
        :type: int
        """

        self._max_capacity = max_capacity

    @property
    def web_capacity(self):
        """Gets the web_capacity of this ModelClass.  # noqa: E501

        The maximum number of clients allowed to sign up online for the class.  # noqa: E501

        :return: The web_capacity of this ModelClass.  # noqa: E501
        :rtype: int
        """
        return self._web_capacity

    @web_capacity.setter
    def web_capacity(self, web_capacity):
        """Sets the web_capacity of this ModelClass.

        The maximum number of clients allowed to sign up online for the class.  # noqa: E501

        :param web_capacity: The web_capacity of this ModelClass.  # noqa: E501
        :type: int
        """

        self._web_capacity = web_capacity

    @property
    def total_booked(self):
        """Gets the total_booked of this ModelClass.  # noqa: E501

        The total number of clients booked in the class.  # noqa: E501

        :return: The total_booked of this ModelClass.  # noqa: E501
        :rtype: int
        """
        return self._total_booked

    @total_booked.setter
    def total_booked(self, total_booked):
        """Sets the total_booked of this ModelClass.

        The total number of clients booked in the class.  # noqa: E501

        :param total_booked: The total_booked of this ModelClass.  # noqa: E501
        :type: int
        """

        self._total_booked = total_booked

    @property
    def total_booked_waitlist(self):
        """Gets the total_booked_waitlist of this ModelClass.  # noqa: E501

        The total number of booked clients on the waiting list for the class.  # noqa: E501

        :return: The total_booked_waitlist of this ModelClass.  # noqa: E501
        :rtype: int
        """
        return self._total_booked_waitlist

    @total_booked_waitlist.setter
    def total_booked_waitlist(self, total_booked_waitlist):
        """Sets the total_booked_waitlist of this ModelClass.

        The total number of booked clients on the waiting list for the class.  # noqa: E501

        :param total_booked_waitlist: The total_booked_waitlist of this ModelClass.  # noqa: E501
        :type: int
        """

        self._total_booked_waitlist = total_booked_waitlist

    @property
    def web_booked(self):
        """Gets the web_booked of this ModelClass.  # noqa: E501

        The total number of clients who signed up online for the class.  # noqa: E501

        :return: The web_booked of this ModelClass.  # noqa: E501
        :rtype: int
        """
        return self._web_booked

    @web_booked.setter
    def web_booked(self, web_booked):
        """Sets the web_booked of this ModelClass.

        The total number of clients who signed up online for the class.  # noqa: E501

        :param web_booked: The web_booked of this ModelClass.  # noqa: E501
        :type: int
        """

        self._web_booked = web_booked

    @property
    def semester_id(self):
        """Gets the semester_id of this ModelClass.  # noqa: E501

        The ID of the semester that the class is a part of, if any.  # noqa: E501

        :return: The semester_id of this ModelClass.  # noqa: E501
        :rtype: int
        """
        return self._semester_id

    @semester_id.setter
    def semester_id(self, semester_id):
        """Sets the semester_id of this ModelClass.

        The ID of the semester that the class is a part of, if any.  # noqa: E501

        :param semester_id: The semester_id of this ModelClass.  # noqa: E501
        :type: int
        """

        self._semester_id = semester_id

    @property
    def is_canceled(self):
        """Gets the is_canceled of this ModelClass.  # noqa: E501

        When `true`, indicates that the class has been cancelled.<br />  When `false`, indicates that the class has not been cancelled.  # noqa: E501

        :return: The is_canceled of this ModelClass.  # noqa: E501
        :rtype: bool
        """
        return self._is_canceled

    @is_canceled.setter
    def is_canceled(self, is_canceled):
        """Sets the is_canceled of this ModelClass.

        When `true`, indicates that the class has been cancelled.<br />  When `false`, indicates that the class has not been cancelled.  # noqa: E501

        :param is_canceled: The is_canceled of this ModelClass.  # noqa: E501
        :type: bool
        """

        self._is_canceled = is_canceled

    @property
    def substitute(self):
        """Gets the substitute of this ModelClass.  # noqa: E501

        When `true`, indicates that the class is being taught by a substitute teacher.<br />  When `false`, indicates that the class is being taught by its regular teacher.  # noqa: E501

        :return: The substitute of this ModelClass.  # noqa: E501
        :rtype: bool
        """
        return self._substitute

    @substitute.setter
    def substitute(self, substitute):
        """Sets the substitute of this ModelClass.

        When `true`, indicates that the class is being taught by a substitute teacher.<br />  When `false`, indicates that the class is being taught by its regular teacher.  # noqa: E501

        :param substitute: The substitute of this ModelClass.  # noqa: E501
        :type: bool
        """

        self._substitute = substitute

    @property
    def active(self):
        """Gets the active of this ModelClass.  # noqa: E501

        When `true`, indicates that the class is shown to clients when in consumer mode.<br />  When `false`, indicates that the class is not shown to clients when in consumer mode.  # noqa: E501

        :return: The active of this ModelClass.  # noqa: E501
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this ModelClass.

        When `true`, indicates that the class is shown to clients when in consumer mode.<br />  When `false`, indicates that the class is not shown to clients when in consumer mode.  # noqa: E501

        :param active: The active of this ModelClass.  # noqa: E501
        :type: bool
        """

        self._active = active

    @property
    def is_waitlist_available(self):
        """Gets the is_waitlist_available of this ModelClass.  # noqa: E501

        When `true`, indicates that the clients can be placed on a waiting list for the class.<br />  When `false`, indicates that the clients cannot be placed on a waiting list for the class.  # noqa: E501

        :return: The is_waitlist_available of this ModelClass.  # noqa: E501
        :rtype: bool
        """
        return self._is_waitlist_available

    @is_waitlist_available.setter
    def is_waitlist_available(self, is_waitlist_available):
        """Sets the is_waitlist_available of this ModelClass.

        When `true`, indicates that the clients can be placed on a waiting list for the class.<br />  When `false`, indicates that the clients cannot be placed on a waiting list for the class.  # noqa: E501

        :param is_waitlist_available: The is_waitlist_available of this ModelClass.  # noqa: E501
        :type: bool
        """

        self._is_waitlist_available = is_waitlist_available

    @property
    def is_enrolled(self):
        """Gets the is_enrolled of this ModelClass.  # noqa: E501

        When `true`, indicates that the client with the given `ClientId` is enrolled in this class.<br />  When `false`, indicates that the client with the given `ClientId` is not enrolled in this class.  # noqa: E501

        :return: The is_enrolled of this ModelClass.  # noqa: E501
        :rtype: bool
        """
        return self._is_enrolled

    @is_enrolled.setter
    def is_enrolled(self, is_enrolled):
        """Sets the is_enrolled of this ModelClass.

        When `true`, indicates that the client with the given `ClientId` is enrolled in this class.<br />  When `false`, indicates that the client with the given `ClientId` is not enrolled in this class.  # noqa: E501

        :param is_enrolled: The is_enrolled of this ModelClass.  # noqa: E501
        :type: bool
        """

        self._is_enrolled = is_enrolled

    @property
    def hide_cancel(self):
        """Gets the hide_cancel of this ModelClass.  # noqa: E501

        When `true`, indicates that this class is hidden when cancelled.<br />  When `false`, indicates that this class is not hidden when cancelled.  # noqa: E501

        :return: The hide_cancel of this ModelClass.  # noqa: E501
        :rtype: bool
        """
        return self._hide_cancel

    @hide_cancel.setter
    def hide_cancel(self, hide_cancel):
        """Sets the hide_cancel of this ModelClass.

        When `true`, indicates that this class is hidden when cancelled.<br />  When `false`, indicates that this class is not hidden when cancelled.  # noqa: E501

        :param hide_cancel: The hide_cancel of this ModelClass.  # noqa: E501
        :type: bool
        """

        self._hide_cancel = hide_cancel

    @property
    def id(self):
        """Gets the id of this ModelClass.  # noqa: E501

        The unique identifier for the class.  # noqa: E501

        :return: The id of this ModelClass.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ModelClass.

        The unique identifier for the class.  # noqa: E501

        :param id: The id of this ModelClass.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def is_available(self):
        """Gets the is_available of this ModelClass.  # noqa: E501

        When `true`, indicates that the client with the given client ID can book this class.<br />  When `false`, indicates that the client with the given client ID cannot book this class.  # noqa: E501

        :return: The is_available of this ModelClass.  # noqa: E501
        :rtype: bool
        """
        return self._is_available

    @is_available.setter
    def is_available(self, is_available):
        """Sets the is_available of this ModelClass.

        When `true`, indicates that the client with the given client ID can book this class.<br />  When `false`, indicates that the client with the given client ID cannot book this class.  # noqa: E501

        :param is_available: The is_available of this ModelClass.  # noqa: E501
        :type: bool
        """

        self._is_available = is_available

    @property
    def start_date_time(self):
        """Gets the start_date_time of this ModelClass.  # noqa: E501

        The time this class is scheduled to start.  # noqa: E501

        :return: The start_date_time of this ModelClass.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date_time

    @start_date_time.setter
    def start_date_time(self, start_date_time):
        """Sets the start_date_time of this ModelClass.

        The time this class is scheduled to start.  # noqa: E501

        :param start_date_time: The start_date_time of this ModelClass.  # noqa: E501
        :type: datetime
        """

        self._start_date_time = start_date_time

    @property
    def end_date_time(self):
        """Gets the end_date_time of this ModelClass.  # noqa: E501

        The time this class is scheduled to end.  # noqa: E501

        :return: The end_date_time of this ModelClass.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date_time

    @end_date_time.setter
    def end_date_time(self, end_date_time):
        """Sets the end_date_time of this ModelClass.

        The time this class is scheduled to end.  # noqa: E501

        :param end_date_time: The end_date_time of this ModelClass.  # noqa: E501
        :type: datetime
        """

        self._end_date_time = end_date_time

    @property
    def last_modified_date_time(self):
        """Gets the last_modified_date_time of this ModelClass.  # noqa: E501

        The last time this class was modified.  # noqa: E501

        :return: The last_modified_date_time of this ModelClass.  # noqa: E501
        :rtype: datetime
        """
        return self._last_modified_date_time

    @last_modified_date_time.setter
    def last_modified_date_time(self, last_modified_date_time):
        """Sets the last_modified_date_time of this ModelClass.

        The last time this class was modified.  # noqa: E501

        :param last_modified_date_time: The last_modified_date_time of this ModelClass.  # noqa: E501
        :type: datetime
        """

        self._last_modified_date_time = last_modified_date_time

    @property
    def class_description(self):
        """Gets the class_description of this ModelClass.  # noqa: E501

        Contains information that defines the class.  # noqa: E501

        :return: The class_description of this ModelClass.  # noqa: E501
        :rtype: ClassDescription
        """
        return self._class_description

    @class_description.setter
    def class_description(self, class_description):
        """Sets the class_description of this ModelClass.

        Contains information that defines the class.  # noqa: E501

        :param class_description: The class_description of this ModelClass.  # noqa: E501
        :type: ClassDescription
        """

        self._class_description = class_description

    @property
    def staff(self):
        """Gets the staff of this ModelClass.  # noqa: E501

        Contains information about the staff member.  # noqa: E501

        :return: The staff of this ModelClass.  # noqa: E501
        :rtype: Staff
        """
        return self._staff

    @staff.setter
    def staff(self, staff):
        """Sets the staff of this ModelClass.

        Contains information about the staff member.  # noqa: E501

        :param staff: The staff of this ModelClass.  # noqa: E501
        :type: Staff
        """

        self._staff = staff

    @property
    def booking_window(self):
        """Gets the booking_window of this ModelClass.  # noqa: E501

        Contains information about the window for booking.  # noqa: E501

        :return: The booking_window of this ModelClass.  # noqa: E501
        :rtype: BookingWindow
        """
        return self._booking_window

    @booking_window.setter
    def booking_window(self, booking_window):
        """Sets the booking_window of this ModelClass.

        Contains information about the window for booking.  # noqa: E501

        :param booking_window: The booking_window of this ModelClass.  # noqa: E501
        :type: BookingWindow
        """

        self._booking_window = booking_window

    @property
    def booking_status(self):
        """Gets the booking_status of this ModelClass.  # noqa: E501

        Contains the booking’s payment status.  # noqa: E501

        :return: The booking_status of this ModelClass.  # noqa: E501
        :rtype: str
        """
        return self._booking_status

    @booking_status.setter
    def booking_status(self, booking_status):
        """Sets the booking_status of this ModelClass.

        Contains the booking’s payment status.  # noqa: E501

        :param booking_status: The booking_status of this ModelClass.  # noqa: E501
        :type: str
        """
        allowed_values = ["PaymentRequired", "BookAndPayLater", "Free"]  # noqa: E501
        if booking_status not in allowed_values:
            raise ValueError(
                "Invalid value for `booking_status` ({0}), must be one of {1}"  # noqa: E501
                .format(booking_status, allowed_values)
            )

        self._booking_status = booking_status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelClass, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelClass):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
