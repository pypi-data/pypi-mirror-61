# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RemoveClientFromClassRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'class_id': 'int',
        'test': 'bool',
        'send_email': 'bool',
        'late_cancel': 'bool'
    }

    attribute_map = {
        'client_id': 'ClientId',
        'class_id': 'ClassId',
        'test': 'Test',
        'send_email': 'SendEmail',
        'late_cancel': 'LateCancel'
    }

    def __init__(self, client_id=None, class_id=None, test=None, send_email=None, late_cancel=None):  # noqa: E501
        """RemoveClientFromClassRequest - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._class_id = None
        self._test = None
        self._send_email = None
        self._late_cancel = None
        self.discriminator = None

        self.client_id = client_id
        self.class_id = class_id
        if test is not None:
            self.test = test
        if send_email is not None:
            self.send_email = send_email
        if late_cancel is not None:
            self.late_cancel = late_cancel

    @property
    def client_id(self):
        """Gets the client_id of this RemoveClientFromClassRequest.  # noqa: E501

        The RSSID of the client to remove from the specified class.  # noqa: E501

        :return: The client_id of this RemoveClientFromClassRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this RemoveClientFromClassRequest.

        The RSSID of the client to remove from the specified class.  # noqa: E501

        :param client_id: The client_id of this RemoveClientFromClassRequest.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def class_id(self):
        """Gets the class_id of this RemoveClientFromClassRequest.  # noqa: E501

        The ID of the class that you want to remove the client from.  # noqa: E501

        :return: The class_id of this RemoveClientFromClassRequest.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this RemoveClientFromClassRequest.

        The ID of the class that you want to remove the client from.  # noqa: E501

        :param class_id: The class_id of this RemoveClientFromClassRequest.  # noqa: E501
        :type: int
        """
        if class_id is None:
            raise ValueError("Invalid value for `class_id`, must not be `None`")  # noqa: E501

        self._class_id = class_id

    @property
    def test(self):
        """Gets the test of this RemoveClientFromClassRequest.  # noqa: E501

        When `true`, the request ensures that its parameters are valid without affecting real data.<br />  When `false`, the request performs as intended and may affect live client data.<br />  Default: **false**  # noqa: E501

        :return: The test of this RemoveClientFromClassRequest.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this RemoveClientFromClassRequest.

        When `true`, the request ensures that its parameters are valid without affecting real data.<br />  When `false`, the request performs as intended and may affect live client data.<br />  Default: **false**  # noqa: E501

        :param test: The test of this RemoveClientFromClassRequest.  # noqa: E501
        :type: bool
        """

        self._test = test

    @property
    def send_email(self):
        """Gets the send_email of this RemoveClientFromClassRequest.  # noqa: E501

        When `true`, indicates that the client should be sent an email. Depending on the site and client settings, an email may or may not be sent.<br />  Default: **false**  # noqa: E501

        :return: The send_email of this RemoveClientFromClassRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this RemoveClientFromClassRequest.

        When `true`, indicates that the client should be sent an email. Depending on the site and client settings, an email may or may not be sent.<br />  Default: **false**  # noqa: E501

        :param send_email: The send_email of this RemoveClientFromClassRequest.  # noqa: E501
        :type: bool
        """

        self._send_email = send_email

    @property
    def late_cancel(self):
        """Gets the late_cancel of this RemoveClientFromClassRequest.  # noqa: E501

        When `true`, indicates that the client is to be late cancelled from the class.<br />  When `false`, indicates that the client is to be early cancelled from the class.<br />  Default: **false**  # noqa: E501

        :return: The late_cancel of this RemoveClientFromClassRequest.  # noqa: E501
        :rtype: bool
        """
        return self._late_cancel

    @late_cancel.setter
    def late_cancel(self, late_cancel):
        """Sets the late_cancel of this RemoveClientFromClassRequest.

        When `true`, indicates that the client is to be late cancelled from the class.<br />  When `false`, indicates that the client is to be early cancelled from the class.<br />  Default: **false**  # noqa: E501

        :param late_cancel: The late_cancel of this RemoveClientFromClassRequest.  # noqa: E501
        :type: bool
        """

        self._late_cancel = late_cancel

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RemoveClientFromClassRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RemoveClientFromClassRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
