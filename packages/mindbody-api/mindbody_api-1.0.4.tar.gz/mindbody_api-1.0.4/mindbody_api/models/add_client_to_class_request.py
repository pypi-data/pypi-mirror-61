# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AddClientToClassRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'class_id': 'int',
        'test': 'bool',
        'require_payment': 'bool',
        'waitlist': 'bool',
        'send_email': 'bool',
        'waitlist_entry_id': 'int',
        'client_service_id': 'int',
        'cross_regional_booking': 'bool',
        'cross_regional_booking_client_service_site_id': 'int'
    }

    attribute_map = {
        'client_id': 'ClientId',
        'class_id': 'ClassId',
        'test': 'Test',
        'require_payment': 'RequirePayment',
        'waitlist': 'Waitlist',
        'send_email': 'SendEmail',
        'waitlist_entry_id': 'WaitlistEntryId',
        'client_service_id': 'ClientServiceId',
        'cross_regional_booking': 'CrossRegionalBooking',
        'cross_regional_booking_client_service_site_id': 'CrossRegionalBookingClientServiceSiteId'
    }

    def __init__(self, client_id=None, class_id=None, test=None, require_payment=None, waitlist=None, send_email=None, waitlist_entry_id=None, client_service_id=None, cross_regional_booking=None, cross_regional_booking_client_service_site_id=None):  # noqa: E501
        """AddClientToClassRequest - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._class_id = None
        self._test = None
        self._require_payment = None
        self._waitlist = None
        self._send_email = None
        self._waitlist_entry_id = None
        self._client_service_id = None
        self._cross_regional_booking = None
        self._cross_regional_booking_client_service_site_id = None
        self.discriminator = None

        self.client_id = client_id
        self.class_id = class_id
        if test is not None:
            self.test = test
        if require_payment is not None:
            self.require_payment = require_payment
        if waitlist is not None:
            self.waitlist = waitlist
        if send_email is not None:
            self.send_email = send_email
        if waitlist_entry_id is not None:
            self.waitlist_entry_id = waitlist_entry_id
        if client_service_id is not None:
            self.client_service_id = client_service_id
        if cross_regional_booking is not None:
            self.cross_regional_booking = cross_regional_booking
        if cross_regional_booking_client_service_site_id is not None:
            self.cross_regional_booking_client_service_site_id = cross_regional_booking_client_service_site_id

    @property
    def client_id(self):
        """Gets the client_id of this AddClientToClassRequest.  # noqa: E501

        The ID of the client who is being booked into the class  # noqa: E501

        :return: The client_id of this AddClientToClassRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AddClientToClassRequest.

        The ID of the client who is being booked into the class  # noqa: E501

        :param client_id: The client_id of this AddClientToClassRequest.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def class_id(self):
        """Gets the class_id of this AddClientToClassRequest.  # noqa: E501

        The ID of the class into which the client is being booked  # noqa: E501

        :return: The class_id of this AddClientToClassRequest.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this AddClientToClassRequest.

        The ID of the class into which the client is being booked  # noqa: E501

        :param class_id: The class_id of this AddClientToClassRequest.  # noqa: E501
        :type: int
        """
        if class_id is None:
            raise ValueError("Invalid value for `class_id`, must not be `None`")  # noqa: E501

        self._class_id = class_id

    @property
    def test(self):
        """Gets the test of this AddClientToClassRequest.  # noqa: E501

        When `true`, indicates that input information is validated, but not committed.<br />  When `false`, the information is committed and the database is affected.<br />  Default: **false**  # noqa: E501

        :return: The test of this AddClientToClassRequest.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this AddClientToClassRequest.

        When `true`, indicates that input information is validated, but not committed.<br />  When `false`, the information is committed and the database is affected.<br />  Default: **false**  # noqa: E501

        :param test: The test of this AddClientToClassRequest.  # noqa: E501
        :type: bool
        """

        self._test = test

    @property
    def require_payment(self):
        """Gets the require_payment of this AddClientToClassRequest.  # noqa: E501

        When `true`, the client must have an active, usable pricing option on their account.<br />  When `false` or omitted, an active pricing option is not required to complete the client’s booking.  # noqa: E501

        :return: The require_payment of this AddClientToClassRequest.  # noqa: E501
        :rtype: bool
        """
        return self._require_payment

    @require_payment.setter
    def require_payment(self, require_payment):
        """Sets the require_payment of this AddClientToClassRequest.

        When `true`, the client must have an active, usable pricing option on their account.<br />  When `false` or omitted, an active pricing option is not required to complete the client’s booking.  # noqa: E501

        :param require_payment: The require_payment of this AddClientToClassRequest.  # noqa: E501
        :type: bool
        """

        self._require_payment = require_payment

    @property
    def waitlist(self):
        """Gets the waitlist of this AddClientToClassRequest.  # noqa: E501

        When `true`, indicates that the client should be added to a specific class waiting list.<br />  When `false`, the client should not be added to the waiting list.  # noqa: E501

        :return: The waitlist of this AddClientToClassRequest.  # noqa: E501
        :rtype: bool
        """
        return self._waitlist

    @waitlist.setter
    def waitlist(self, waitlist):
        """Sets the waitlist of this AddClientToClassRequest.

        When `true`, indicates that the client should be added to a specific class waiting list.<br />  When `false`, the client should not be added to the waiting list.  # noqa: E501

        :param waitlist: The waitlist of this AddClientToClassRequest.  # noqa: E501
        :type: bool
        """

        self._waitlist = waitlist

    @property
    def send_email(self):
        """Gets the send_email of this AddClientToClassRequest.  # noqa: E501

        When `true`, the subscriber’s configured Booking Confirmation automatic email is sent to the client. Note that an email is sent only if the client has an email address and automatic emails have been set up.<br />  When `false`, indicates that the client does not receive emails.<br />  Default: **false**  # noqa: E501

        :return: The send_email of this AddClientToClassRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this AddClientToClassRequest.

        When `true`, the subscriber’s configured Booking Confirmation automatic email is sent to the client. Note that an email is sent only if the client has an email address and automatic emails have been set up.<br />  When `false`, indicates that the client does not receive emails.<br />  Default: **false**  # noqa: E501

        :param send_email: The send_email of this AddClientToClassRequest.  # noqa: E501
        :type: bool
        """

        self._send_email = send_email

    @property
    def waitlist_entry_id(self):
        """Gets the waitlist_entry_id of this AddClientToClassRequest.  # noqa: E501

        The ID of the waiting list entry from which you are moving a client into a class.  # noqa: E501

        :return: The waitlist_entry_id of this AddClientToClassRequest.  # noqa: E501
        :rtype: int
        """
        return self._waitlist_entry_id

    @waitlist_entry_id.setter
    def waitlist_entry_id(self, waitlist_entry_id):
        """Sets the waitlist_entry_id of this AddClientToClassRequest.

        The ID of the waiting list entry from which you are moving a client into a class.  # noqa: E501

        :param waitlist_entry_id: The waitlist_entry_id of this AddClientToClassRequest.  # noqa: E501
        :type: int
        """

        self._waitlist_entry_id = waitlist_entry_id

    @property
    def client_service_id(self):
        """Gets the client_service_id of this AddClientToClassRequest.  # noqa: E501

        The ID of the pricing option on the client’s account that you want to use to pay for this booking, if payment is required at the time of the update.  # noqa: E501

        :return: The client_service_id of this AddClientToClassRequest.  # noqa: E501
        :rtype: int
        """
        return self._client_service_id

    @client_service_id.setter
    def client_service_id(self, client_service_id):
        """Sets the client_service_id of this AddClientToClassRequest.

        The ID of the pricing option on the client’s account that you want to use to pay for this booking, if payment is required at the time of the update.  # noqa: E501

        :param client_service_id: The client_service_id of this AddClientToClassRequest.  # noqa: E501
        :type: int
        """

        self._client_service_id = client_service_id

    @property
    def cross_regional_booking(self):
        """Gets the cross_regional_booking of this AddClientToClassRequest.  # noqa: E501

        When `true`, cross regional series are checked and used if applicable.  # noqa: E501

        :return: The cross_regional_booking of this AddClientToClassRequest.  # noqa: E501
        :rtype: bool
        """
        return self._cross_regional_booking

    @cross_regional_booking.setter
    def cross_regional_booking(self, cross_regional_booking):
        """Sets the cross_regional_booking of this AddClientToClassRequest.

        When `true`, cross regional series are checked and used if applicable.  # noqa: E501

        :param cross_regional_booking: The cross_regional_booking of this AddClientToClassRequest.  # noqa: E501
        :type: bool
        """

        self._cross_regional_booking = cross_regional_booking

    @property
    def cross_regional_booking_client_service_site_id(self):
        """Gets the cross_regional_booking_client_service_site_id of this AddClientToClassRequest.  # noqa: E501

        If the request is cross regional, use a purchased pricing option from this specified site. If omitted, an attempt is made to use an applicable pricing option from the local site.  # noqa: E501

        :return: The cross_regional_booking_client_service_site_id of this AddClientToClassRequest.  # noqa: E501
        :rtype: int
        """
        return self._cross_regional_booking_client_service_site_id

    @cross_regional_booking_client_service_site_id.setter
    def cross_regional_booking_client_service_site_id(self, cross_regional_booking_client_service_site_id):
        """Sets the cross_regional_booking_client_service_site_id of this AddClientToClassRequest.

        If the request is cross regional, use a purchased pricing option from this specified site. If omitted, an attempt is made to use an applicable pricing option from the local site.  # noqa: E501

        :param cross_regional_booking_client_service_site_id: The cross_regional_booking_client_service_site_id of this AddClientToClassRequest.  # noqa: E501
        :type: int
        """

        self._cross_regional_booking_client_service_site_id = cross_regional_booking_client_service_site_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddClientToClassRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddClientToClassRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
