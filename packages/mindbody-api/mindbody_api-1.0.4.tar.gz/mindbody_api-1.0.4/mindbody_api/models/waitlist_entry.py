# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.class_schedule import ClassSchedule  # noqa: F401,E501
from mindbody_api.models.client import Client  # noqa: F401,E501


class WaitlistEntry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'class_date': 'datetime',
        'class_id': 'int',
        'class_schedule': 'ClassSchedule',
        'client': 'Client',
        'enrollment_date_forward': 'datetime',
        'id': 'int',
        'request_date_time': 'datetime',
        'visit_ref_no': 'int',
        'web': 'bool'
    }

    attribute_map = {
        'class_date': 'ClassDate',
        'class_id': 'ClassId',
        'class_schedule': 'ClassSchedule',
        'client': 'Client',
        'enrollment_date_forward': 'EnrollmentDateForward',
        'id': 'Id',
        'request_date_time': 'RequestDateTime',
        'visit_ref_no': 'VisitRefNo',
        'web': 'Web'
    }

    def __init__(self, class_date=None, class_id=None, class_schedule=None, client=None, enrollment_date_forward=None, id=None, request_date_time=None, visit_ref_no=None, web=None):  # noqa: E501
        """WaitlistEntry - a model defined in Swagger"""  # noqa: E501

        self._class_date = None
        self._class_id = None
        self._class_schedule = None
        self._client = None
        self._enrollment_date_forward = None
        self._id = None
        self._request_date_time = None
        self._visit_ref_no = None
        self._web = None
        self.discriminator = None

        if class_date is not None:
            self.class_date = class_date
        if class_id is not None:
            self.class_id = class_id
        if class_schedule is not None:
            self.class_schedule = class_schedule
        if client is not None:
            self.client = client
        if enrollment_date_forward is not None:
            self.enrollment_date_forward = enrollment_date_forward
        if id is not None:
            self.id = id
        if request_date_time is not None:
            self.request_date_time = request_date_time
        if visit_ref_no is not None:
            self.visit_ref_no = visit_ref_no
        if web is not None:
            self.web = web

    @property
    def class_date(self):
        """Gets the class_date of this WaitlistEntry.  # noqa: E501

        The date of the class or enrollment.  # noqa: E501

        :return: The class_date of this WaitlistEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._class_date

    @class_date.setter
    def class_date(self, class_date):
        """Sets the class_date of this WaitlistEntry.

        The date of the class or enrollment.  # noqa: E501

        :param class_date: The class_date of this WaitlistEntry.  # noqa: E501
        :type: datetime
        """

        self._class_date = class_date

    @property
    def class_id(self):
        """Gets the class_id of this WaitlistEntry.  # noqa: E501

        The ID of the class or enrollment.  # noqa: E501

        :return: The class_id of this WaitlistEntry.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this WaitlistEntry.

        The ID of the class or enrollment.  # noqa: E501

        :param class_id: The class_id of this WaitlistEntry.  # noqa: E501
        :type: int
        """

        self._class_id = class_id

    @property
    def class_schedule(self):
        """Gets the class_schedule of this WaitlistEntry.  # noqa: E501

        Contains information about the class schedule for this waiting list entry.  # noqa: E501

        :return: The class_schedule of this WaitlistEntry.  # noqa: E501
        :rtype: ClassSchedule
        """
        return self._class_schedule

    @class_schedule.setter
    def class_schedule(self, class_schedule):
        """Sets the class_schedule of this WaitlistEntry.

        Contains information about the class schedule for this waiting list entry.  # noqa: E501

        :param class_schedule: The class_schedule of this WaitlistEntry.  # noqa: E501
        :type: ClassSchedule
        """

        self._class_schedule = class_schedule

    @property
    def client(self):
        """Gets the client of this WaitlistEntry.  # noqa: E501

        Contains information about the requested client who is on the waiting list.  # noqa: E501

        :return: The client of this WaitlistEntry.  # noqa: E501
        :rtype: Client
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this WaitlistEntry.

        Contains information about the requested client who is on the waiting list.  # noqa: E501

        :param client: The client of this WaitlistEntry.  # noqa: E501
        :type: Client
        """

        self._client = client

    @property
    def enrollment_date_forward(self):
        """Gets the enrollment_date_forward of this WaitlistEntry.  # noqa: E501

        If the waiting list entry was created for an enrollment, this is the date on or after which the client can be added to the enrollment from the waitlist.  # noqa: E501

        :return: The enrollment_date_forward of this WaitlistEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._enrollment_date_forward

    @enrollment_date_forward.setter
    def enrollment_date_forward(self, enrollment_date_forward):
        """Sets the enrollment_date_forward of this WaitlistEntry.

        If the waiting list entry was created for an enrollment, this is the date on or after which the client can be added to the enrollment from the waitlist.  # noqa: E501

        :param enrollment_date_forward: The enrollment_date_forward of this WaitlistEntry.  # noqa: E501
        :type: datetime
        """

        self._enrollment_date_forward = enrollment_date_forward

    @property
    def id(self):
        """Gets the id of this WaitlistEntry.  # noqa: E501

        The ID of the waiting list entry.  # noqa: E501

        :return: The id of this WaitlistEntry.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this WaitlistEntry.

        The ID of the waiting list entry.  # noqa: E501

        :param id: The id of this WaitlistEntry.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def request_date_time(self):
        """Gets the request_date_time of this WaitlistEntry.  # noqa: E501

        The date and time that the request to be on the waiting list was made.  # noqa: E501

        :return: The request_date_time of this WaitlistEntry.  # noqa: E501
        :rtype: datetime
        """
        return self._request_date_time

    @request_date_time.setter
    def request_date_time(self, request_date_time):
        """Sets the request_date_time of this WaitlistEntry.

        The date and time that the request to be on the waiting list was made.  # noqa: E501

        :param request_date_time: The request_date_time of this WaitlistEntry.  # noqa: E501
        :type: datetime
        """

        self._request_date_time = request_date_time

    @property
    def visit_ref_no(self):
        """Gets the visit_ref_no of this WaitlistEntry.  # noqa: E501

        The ID of the visit that is associated with the waiting list entry.  # noqa: E501

        :return: The visit_ref_no of this WaitlistEntry.  # noqa: E501
        :rtype: int
        """
        return self._visit_ref_no

    @visit_ref_no.setter
    def visit_ref_no(self, visit_ref_no):
        """Sets the visit_ref_no of this WaitlistEntry.

        The ID of the visit that is associated with the waiting list entry.  # noqa: E501

        :param visit_ref_no: The visit_ref_no of this WaitlistEntry.  # noqa: E501
        :type: int
        """

        self._visit_ref_no = visit_ref_no

    @property
    def web(self):
        """Gets the web of this WaitlistEntry.  # noqa: E501

        If `true`, the entry on the waiting list was requested online.<br />  If `false`, the entry on the waiting list was requested off-line, for example in person or by phone.  # noqa: E501

        :return: The web of this WaitlistEntry.  # noqa: E501
        :rtype: bool
        """
        return self._web

    @web.setter
    def web(self, web):
        """Sets the web of this WaitlistEntry.

        If `true`, the entry on the waiting list was requested online.<br />  If `false`, the entry on the waiting list was requested off-line, for example in person or by phone.  # noqa: E501

        :param web: The web of this WaitlistEntry.  # noqa: E501
        :type: bool
        """

        self._web = web

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(WaitlistEntry, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WaitlistEntry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
