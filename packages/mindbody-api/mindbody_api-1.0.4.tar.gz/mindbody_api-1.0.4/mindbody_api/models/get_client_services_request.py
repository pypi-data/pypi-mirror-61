# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetClientServicesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'client_id': 'str',
        'class_id': 'int',
        'program_ids': 'list[int]',
        'session_type_id': 'int',
        'location_ids': 'list[int]',
        'visit_count': 'int',
        'start_date': 'datetime',
        'end_date': 'datetime',
        'show_active_only': 'bool',
        'cross_regional_lookup': 'bool',
        'client_associated_sites_offset': 'int',
        'limit': 'int',
        'offset': 'int'
    }

    attribute_map = {
        'client_id': 'ClientId',
        'class_id': 'ClassId',
        'program_ids': 'ProgramIds',
        'session_type_id': 'SessionTypeId',
        'location_ids': 'LocationIds',
        'visit_count': 'VisitCount',
        'start_date': 'StartDate',
        'end_date': 'EndDate',
        'show_active_only': 'ShowActiveOnly',
        'cross_regional_lookup': 'CrossRegionalLookup',
        'client_associated_sites_offset': 'ClientAssociatedSitesOffset',
        'limit': 'Limit',
        'offset': 'Offset'
    }

    def __init__(self, client_id=None, class_id=None, program_ids=None, session_type_id=None, location_ids=None, visit_count=None, start_date=None, end_date=None, show_active_only=None, cross_regional_lookup=None, client_associated_sites_offset=None, limit=None, offset=None):  # noqa: E501
        """GetClientServicesRequest - a model defined in Swagger"""  # noqa: E501

        self._client_id = None
        self._class_id = None
        self._program_ids = None
        self._session_type_id = None
        self._location_ids = None
        self._visit_count = None
        self._start_date = None
        self._end_date = None
        self._show_active_only = None
        self._cross_regional_lookup = None
        self._client_associated_sites_offset = None
        self._limit = None
        self._offset = None
        self.discriminator = None

        self.client_id = client_id
        if class_id is not None:
            self.class_id = class_id
        if program_ids is not None:
            self.program_ids = program_ids
        if session_type_id is not None:
            self.session_type_id = session_type_id
        if location_ids is not None:
            self.location_ids = location_ids
        if visit_count is not None:
            self.visit_count = visit_count
        if start_date is not None:
            self.start_date = start_date
        if end_date is not None:
            self.end_date = end_date
        if show_active_only is not None:
            self.show_active_only = show_active_only
        if cross_regional_lookup is not None:
            self.cross_regional_lookup = cross_regional_lookup
        if client_associated_sites_offset is not None:
            self.client_associated_sites_offset = client_associated_sites_offset
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset

    @property
    def client_id(self):
        """Gets the client_id of this GetClientServicesRequest.  # noqa: E501

        The ID of the client to query. The results are a list of pricing options that the client has purchased. Note that “service” and “pricing option” are synonymous in this section of the documentation.  # noqa: E501

        :return: The client_id of this GetClientServicesRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this GetClientServicesRequest.

        The ID of the client to query. The results are a list of pricing options that the client has purchased. Note that “service” and “pricing option” are synonymous in this section of the documentation.  # noqa: E501

        :param client_id: The client_id of this GetClientServicesRequest.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def class_id(self):
        """Gets the class_id of this GetClientServicesRequest.  # noqa: E501

        Filters results to only those pricing options that can be used to pay for this class.  # noqa: E501

        :return: The class_id of this GetClientServicesRequest.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this GetClientServicesRequest.

        Filters results to only those pricing options that can be used to pay for this class.  # noqa: E501

        :param class_id: The class_id of this GetClientServicesRequest.  # noqa: E501
        :type: int
        """

        self._class_id = class_id

    @property
    def program_ids(self):
        """Gets the program_ids of this GetClientServicesRequest.  # noqa: E501

        Filters results to pricing options that belong to one of the given program IDs.  # noqa: E501

        :return: The program_ids of this GetClientServicesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._program_ids

    @program_ids.setter
    def program_ids(self, program_ids):
        """Sets the program_ids of this GetClientServicesRequest.

        Filters results to pricing options that belong to one of the given program IDs.  # noqa: E501

        :param program_ids: The program_ids of this GetClientServicesRequest.  # noqa: E501
        :type: list[int]
        """

        self._program_ids = program_ids

    @property
    def session_type_id(self):
        """Gets the session_type_id of this GetClientServicesRequest.  # noqa: E501

        Filters results to pricing options that will pay for the given session type ID. Use this to find pricing options that will pay for a specific appointment type.  # noqa: E501

        :return: The session_type_id of this GetClientServicesRequest.  # noqa: E501
        :rtype: int
        """
        return self._session_type_id

    @session_type_id.setter
    def session_type_id(self, session_type_id):
        """Sets the session_type_id of this GetClientServicesRequest.

        Filters results to pricing options that will pay for the given session type ID. Use this to find pricing options that will pay for a specific appointment type.  # noqa: E501

        :param session_type_id: The session_type_id of this GetClientServicesRequest.  # noqa: E501
        :type: int
        """

        self._session_type_id = session_type_id

    @property
    def location_ids(self):
        """Gets the location_ids of this GetClientServicesRequest.  # noqa: E501

        Filters results to pricing options that can be used at the listed location IDs.  # noqa: E501

        :return: The location_ids of this GetClientServicesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this GetClientServicesRequest.

        Filters results to pricing options that can be used at the listed location IDs.  # noqa: E501

        :param location_ids: The location_ids of this GetClientServicesRequest.  # noqa: E501
        :type: list[int]
        """

        self._location_ids = location_ids

    @property
    def visit_count(self):
        """Gets the visit_count of this GetClientServicesRequest.  # noqa: E501

        A filter on the minimum number of visits a service can pay for.  # noqa: E501

        :return: The visit_count of this GetClientServicesRequest.  # noqa: E501
        :rtype: int
        """
        return self._visit_count

    @visit_count.setter
    def visit_count(self, visit_count):
        """Sets the visit_count of this GetClientServicesRequest.

        A filter on the minimum number of visits a service can pay for.  # noqa: E501

        :param visit_count: The visit_count of this GetClientServicesRequest.  # noqa: E501
        :type: int
        """

        self._visit_count = visit_count

    @property
    def start_date(self):
        """Gets the start_date of this GetClientServicesRequest.  # noqa: E501

        Filters results to pricing options that are valid on or after this date.  # noqa: E501

        :return: The start_date of this GetClientServicesRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this GetClientServicesRequest.

        Filters results to pricing options that are valid on or after this date.  # noqa: E501

        :param start_date: The start_date of this GetClientServicesRequest.  # noqa: E501
        :type: datetime
        """

        self._start_date = start_date

    @property
    def end_date(self):
        """Gets the end_date of this GetClientServicesRequest.  # noqa: E501

        Filters results to pricing options that are valid on or before this date.  # noqa: E501

        :return: The end_date of this GetClientServicesRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this GetClientServicesRequest.

        Filters results to pricing options that are valid on or before this date.  # noqa: E501

        :param end_date: The end_date of this GetClientServicesRequest.  # noqa: E501
        :type: datetime
        """

        self._end_date = end_date

    @property
    def show_active_only(self):
        """Gets the show_active_only of this GetClientServicesRequest.  # noqa: E501

        When `true`, includes active services only.  Default: **false**  # noqa: E501

        :return: The show_active_only of this GetClientServicesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._show_active_only

    @show_active_only.setter
    def show_active_only(self, show_active_only):
        """Sets the show_active_only of this GetClientServicesRequest.

        When `true`, includes active services only.  Default: **false**  # noqa: E501

        :param show_active_only: The show_active_only of this GetClientServicesRequest.  # noqa: E501
        :type: bool
        """

        self._show_active_only = show_active_only

    @property
    def cross_regional_lookup(self):
        """Gets the cross_regional_lookup of this GetClientServicesRequest.  # noqa: E501

        Used to retrieve a client’s pricing options from multiple sites within an organization. When included and set to `true`, it searches a maximum of ten sites with which this client is associated. When a client is associated with more than ten sites, use `ClientAssociatedSitesOffset` as many times as needed to search the additional sites with which the client is associated. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that a `SiteID` is returned and populated in the `ClientServices` response when `CrossRegionalLookup` is set to `true`.  Default: **false**  # noqa: E501

        :return: The cross_regional_lookup of this GetClientServicesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._cross_regional_lookup

    @cross_regional_lookup.setter
    def cross_regional_lookup(self, cross_regional_lookup):
        """Sets the cross_regional_lookup of this GetClientServicesRequest.

        Used to retrieve a client’s pricing options from multiple sites within an organization. When included and set to `true`, it searches a maximum of ten sites with which this client is associated. When a client is associated with more than ten sites, use `ClientAssociatedSitesOffset` as many times as needed to search the additional sites with which the client is associated. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that a `SiteID` is returned and populated in the `ClientServices` response when `CrossRegionalLookup` is set to `true`.  Default: **false**  # noqa: E501

        :param cross_regional_lookup: The cross_regional_lookup of this GetClientServicesRequest.  # noqa: E501
        :type: bool
        """

        self._cross_regional_lookup = cross_regional_lookup

    @property
    def client_associated_sites_offset(self):
        """Gets the client_associated_sites_offset of this GetClientServicesRequest.  # noqa: E501

        Used to retrieve a client’s pricing options from multiple sites within an organization when the client is associated with more than ten sites. To change which ten sites are searched, change this offset value. A value of 0 means that no sites are skipped and the first ten sites are returned. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that you must always have `CrossRegionalLookup` set to `true` to use this parameter.<br />  Default: **0**    For example, if a client is associated with 25 sites, you need to call `GetClientServices` three times, as follows:  * Use `GET CrossRegionalClientAssociations` to determine how many sites a client is associated with, which tells you how many additional calls you need to make.  * Either omit `ClientAssociatedSitesOffset` or set it to 0 to return the client’s services (pricing options) from sites 1-10.  * Set `ClientAssociatedSitesOffset` to 10 to return the client pricing options from sites 11-20  * Set `ClientAssociatedSitesOffset` to 20 to return the client pricing options from sites 21-25  # noqa: E501

        :return: The client_associated_sites_offset of this GetClientServicesRequest.  # noqa: E501
        :rtype: int
        """
        return self._client_associated_sites_offset

    @client_associated_sites_offset.setter
    def client_associated_sites_offset(self, client_associated_sites_offset):
        """Sets the client_associated_sites_offset of this GetClientServicesRequest.

        Used to retrieve a client’s pricing options from multiple sites within an organization when the client is associated with more than ten sites. To change which ten sites are searched, change this offset value. A value of 0 means that no sites are skipped and the first ten sites are returned. You can use the `CrossRegionalClientAssociations` value from `GET CrossRegionalClientAssociations` to determine how many sites the client is associated with. Note that you must always have `CrossRegionalLookup` set to `true` to use this parameter.<br />  Default: **0**    For example, if a client is associated with 25 sites, you need to call `GetClientServices` three times, as follows:  * Use `GET CrossRegionalClientAssociations` to determine how many sites a client is associated with, which tells you how many additional calls you need to make.  * Either omit `ClientAssociatedSitesOffset` or set it to 0 to return the client’s services (pricing options) from sites 1-10.  * Set `ClientAssociatedSitesOffset` to 10 to return the client pricing options from sites 11-20  * Set `ClientAssociatedSitesOffset` to 20 to return the client pricing options from sites 21-25  # noqa: E501

        :param client_associated_sites_offset: The client_associated_sites_offset of this GetClientServicesRequest.  # noqa: E501
        :type: int
        """

        self._client_associated_sites_offset = client_associated_sites_offset

    @property
    def limit(self):
        """Gets the limit of this GetClientServicesRequest.  # noqa: E501

        Number of results to include, defaults to 100  # noqa: E501

        :return: The limit of this GetClientServicesRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetClientServicesRequest.

        Number of results to include, defaults to 100  # noqa: E501

        :param limit: The limit of this GetClientServicesRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this GetClientServicesRequest.  # noqa: E501

        Page offset, defaults to 0.  # noqa: E501

        :return: The offset of this GetClientServicesRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GetClientServicesRequest.

        Page offset, defaults to 0.  # noqa: E501

        :param offset: The offset of this GetClientServicesRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetClientServicesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetClientServicesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
