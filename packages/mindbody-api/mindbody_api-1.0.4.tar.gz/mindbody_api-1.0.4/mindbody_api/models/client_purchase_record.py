# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.sale import Sale  # noqa: F401,E501


class ClientPurchaseRecord(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sale': 'Sale',
        'description': 'str',
        'account_payment': 'bool',
        'price': 'float',
        'amount_paid': 'float',
        'discount': 'float',
        'tax': 'float',
        'returned': 'bool',
        'quantity': 'int'
    }

    attribute_map = {
        'sale': 'Sale',
        'description': 'Description',
        'account_payment': 'AccountPayment',
        'price': 'Price',
        'amount_paid': 'AmountPaid',
        'discount': 'Discount',
        'tax': 'Tax',
        'returned': 'Returned',
        'quantity': 'Quantity'
    }

    def __init__(self, sale=None, description=None, account_payment=None, price=None, amount_paid=None, discount=None, tax=None, returned=None, quantity=None):  # noqa: E501
        """ClientPurchaseRecord - a model defined in Swagger"""  # noqa: E501

        self._sale = None
        self._description = None
        self._account_payment = None
        self._price = None
        self._amount_paid = None
        self._discount = None
        self._tax = None
        self._returned = None
        self._quantity = None
        self.discriminator = None

        if sale is not None:
            self.sale = sale
        if description is not None:
            self.description = description
        if account_payment is not None:
            self.account_payment = account_payment
        if price is not None:
            self.price = price
        if amount_paid is not None:
            self.amount_paid = amount_paid
        if discount is not None:
            self.discount = discount
        if tax is not None:
            self.tax = tax
        if returned is not None:
            self.returned = returned
        if quantity is not None:
            self.quantity = quantity

    @property
    def sale(self):
        """Gets the sale of this ClientPurchaseRecord.  # noqa: E501

        Contains details about the sale and payment for a purchase event.  # noqa: E501

        :return: The sale of this ClientPurchaseRecord.  # noqa: E501
        :rtype: Sale
        """
        return self._sale

    @sale.setter
    def sale(self, sale):
        """Sets the sale of this ClientPurchaseRecord.

        Contains details about the sale and payment for a purchase event.  # noqa: E501

        :param sale: The sale of this ClientPurchaseRecord.  # noqa: E501
        :type: Sale
        """

        self._sale = sale

    @property
    def description(self):
        """Gets the description of this ClientPurchaseRecord.  # noqa: E501

        The item name and description.  # noqa: E501

        :return: The description of this ClientPurchaseRecord.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ClientPurchaseRecord.

        The item name and description.  # noqa: E501

        :param description: The description of this ClientPurchaseRecord.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def account_payment(self):
        """Gets the account_payment of this ClientPurchaseRecord.  # noqa: E501

        If `true`, the item was a payment credited to an account.  # noqa: E501

        :return: The account_payment of this ClientPurchaseRecord.  # noqa: E501
        :rtype: bool
        """
        return self._account_payment

    @account_payment.setter
    def account_payment(self, account_payment):
        """Sets the account_payment of this ClientPurchaseRecord.

        If `true`, the item was a payment credited to an account.  # noqa: E501

        :param account_payment: The account_payment of this ClientPurchaseRecord.  # noqa: E501
        :type: bool
        """

        self._account_payment = account_payment

    @property
    def price(self):
        """Gets the price of this ClientPurchaseRecord.  # noqa: E501

        The item's price before taxes and discounts.  # noqa: E501

        :return: The price of this ClientPurchaseRecord.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ClientPurchaseRecord.

        The item's price before taxes and discounts.  # noqa: E501

        :param price: The price of this ClientPurchaseRecord.  # noqa: E501
        :type: float
        """

        self._price = price

    @property
    def amount_paid(self):
        """Gets the amount_paid of this ClientPurchaseRecord.  # noqa: E501

        The amount paid for the item.  # noqa: E501

        :return: The amount_paid of this ClientPurchaseRecord.  # noqa: E501
        :rtype: float
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this ClientPurchaseRecord.

        The amount paid for the item.  # noqa: E501

        :param amount_paid: The amount_paid of this ClientPurchaseRecord.  # noqa: E501
        :type: float
        """

        self._amount_paid = amount_paid

    @property
    def discount(self):
        """Gets the discount of this ClientPurchaseRecord.  # noqa: E501

        The discount amount that was applied to the item.  # noqa: E501

        :return: The discount of this ClientPurchaseRecord.  # noqa: E501
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """Sets the discount of this ClientPurchaseRecord.

        The discount amount that was applied to the item.  # noqa: E501

        :param discount: The discount of this ClientPurchaseRecord.  # noqa: E501
        :type: float
        """

        self._discount = discount

    @property
    def tax(self):
        """Gets the tax of this ClientPurchaseRecord.  # noqa: E501

        The amount of tax that was applied to the item.  # noqa: E501

        :return: The tax of this ClientPurchaseRecord.  # noqa: E501
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """Sets the tax of this ClientPurchaseRecord.

        The amount of tax that was applied to the item.  # noqa: E501

        :param tax: The tax of this ClientPurchaseRecord.  # noqa: E501
        :type: float
        """

        self._tax = tax

    @property
    def returned(self):
        """Gets the returned of this ClientPurchaseRecord.  # noqa: E501

        The return status of the item. If `true`, this item was returned.  # noqa: E501

        :return: The returned of this ClientPurchaseRecord.  # noqa: E501
        :rtype: bool
        """
        return self._returned

    @returned.setter
    def returned(self, returned):
        """Sets the returned of this ClientPurchaseRecord.

        The return status of the item. If `true`, this item was returned.  # noqa: E501

        :param returned: The returned of this ClientPurchaseRecord.  # noqa: E501
        :type: bool
        """

        self._returned = returned

    @property
    def quantity(self):
        """Gets the quantity of this ClientPurchaseRecord.  # noqa: E501

        The quantity of the item purchased.  # noqa: E501

        :return: The quantity of this ClientPurchaseRecord.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this ClientPurchaseRecord.

        The quantity of the item purchased.  # noqa: E501

        :param quantity: The quantity of this ClientPurchaseRecord.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientPurchaseRecord, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientPurchaseRecord):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
