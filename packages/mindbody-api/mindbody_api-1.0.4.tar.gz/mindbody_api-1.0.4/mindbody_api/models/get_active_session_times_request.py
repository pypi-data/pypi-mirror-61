# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetActiveSessionTimesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'schedule_type': 'str',
        'session_type_ids': 'list[int]',
        'start_time': 'datetime',
        'end_time': 'datetime',
        'limit': 'int',
        'offset': 'int'
    }

    attribute_map = {
        'schedule_type': 'ScheduleType',
        'session_type_ids': 'SessionTypeIds',
        'start_time': 'StartTime',
        'end_time': 'EndTime',
        'limit': 'Limit',
        'offset': 'Offset'
    }

    def __init__(self, schedule_type=None, session_type_ids=None, start_time=None, end_time=None, limit=None, offset=None):  # noqa: E501
        """GetActiveSessionTimesRequest - a model defined in Swagger"""  # noqa: E501

        self._schedule_type = None
        self._session_type_ids = None
        self._start_time = None
        self._end_time = None
        self._limit = None
        self._offset = None
        self.discriminator = None

        if schedule_type is not None:
            self.schedule_type = schedule_type
        if session_type_ids is not None:
            self.session_type_ids = session_type_ids
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset

    @property
    def schedule_type(self):
        """Gets the schedule_type of this GetActiveSessionTimesRequest.  # noqa: E501

        Filters on the provided the schedule type. Either `SessionTypeIds` or `ScheduleType` must be provided.  # noqa: E501

        :return: The schedule_type of this GetActiveSessionTimesRequest.  # noqa: E501
        :rtype: str
        """
        return self._schedule_type

    @schedule_type.setter
    def schedule_type(self, schedule_type):
        """Sets the schedule_type of this GetActiveSessionTimesRequest.

        Filters on the provided the schedule type. Either `SessionTypeIds` or `ScheduleType` must be provided.  # noqa: E501

        :param schedule_type: The schedule_type of this GetActiveSessionTimesRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["All", "Class", "Enrollment", "Appointment", "Resource", "Media", "Arrival"]  # noqa: E501
        if schedule_type not in allowed_values:
            raise ValueError(
                "Invalid value for `schedule_type` ({0}), must be one of {1}"  # noqa: E501
                .format(schedule_type, allowed_values)
            )

        self._schedule_type = schedule_type

    @property
    def session_type_ids(self):
        """Gets the session_type_ids of this GetActiveSessionTimesRequest.  # noqa: E501

        Filters on the provided session type IDs. Either `SessionTypeIds` or `ScheduleType` must be provided.  # noqa: E501

        :return: The session_type_ids of this GetActiveSessionTimesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._session_type_ids

    @session_type_ids.setter
    def session_type_ids(self, session_type_ids):
        """Sets the session_type_ids of this GetActiveSessionTimesRequest.

        Filters on the provided session type IDs. Either `SessionTypeIds` or `ScheduleType` must be provided.  # noqa: E501

        :param session_type_ids: The session_type_ids of this GetActiveSessionTimesRequest.  # noqa: E501
        :type: list[int]
        """

        self._session_type_ids = session_type_ids

    @property
    def start_time(self):
        """Gets the start_time of this GetActiveSessionTimesRequest.  # noqa: E501

        Filters results to times that start on or after this time on the current date. Any date provided is ignored.  <br />Default: **00:00:00**  # noqa: E501

        :return: The start_time of this GetActiveSessionTimesRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this GetActiveSessionTimesRequest.

        Filters results to times that start on or after this time on the current date. Any date provided is ignored.  <br />Default: **00:00:00**  # noqa: E501

        :param start_time: The start_time of this GetActiveSessionTimesRequest.  # noqa: E501
        :type: datetime
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this GetActiveSessionTimesRequest.  # noqa: E501

        Filters results to times that end on or before this time on the current date. Any date provided is ignored..  <br />Default: **23:59:59**  # noqa: E501

        :return: The end_time of this GetActiveSessionTimesRequest.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this GetActiveSessionTimesRequest.

        Filters results to times that end on or before this time on the current date. Any date provided is ignored..  <br />Default: **23:59:59**  # noqa: E501

        :param end_time: The end_time of this GetActiveSessionTimesRequest.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def limit(self):
        """Gets the limit of this GetActiveSessionTimesRequest.  # noqa: E501

        Number of results to include, defaults to 100  # noqa: E501

        :return: The limit of this GetActiveSessionTimesRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetActiveSessionTimesRequest.

        Number of results to include, defaults to 100  # noqa: E501

        :param limit: The limit of this GetActiveSessionTimesRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this GetActiveSessionTimesRequest.  # noqa: E501

        Page offset, defaults to 0.  # noqa: E501

        :return: The offset of this GetActiveSessionTimesRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GetActiveSessionTimesRequest.

        Page offset, defaults to 0.  # noqa: E501

        :param offset: The offset of this GetActiveSessionTimesRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetActiveSessionTimesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetActiveSessionTimesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
