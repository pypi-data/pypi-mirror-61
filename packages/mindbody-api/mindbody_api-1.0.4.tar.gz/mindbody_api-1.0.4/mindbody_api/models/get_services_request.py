# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class GetServicesRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'program_ids': 'list[int]',
        'session_type_ids': 'list[int]',
        'service_ids': 'list[str]',
        'class_id': 'int',
        'class_schedule_id': 'int',
        'sell_online': 'bool',
        'location_id': 'int',
        'hide_related_programs': 'bool',
        'staff_id': 'int',
        'limit': 'int',
        'offset': 'int'
    }

    attribute_map = {
        'program_ids': 'ProgramIds',
        'session_type_ids': 'SessionTypeIds',
        'service_ids': 'ServiceIds',
        'class_id': 'ClassId',
        'class_schedule_id': 'ClassScheduleId',
        'sell_online': 'SellOnline',
        'location_id': 'LocationId',
        'hide_related_programs': 'HideRelatedPrograms',
        'staff_id': 'StaffId',
        'limit': 'Limit',
        'offset': 'Offset'
    }

    def __init__(self, program_ids=None, session_type_ids=None, service_ids=None, class_id=None, class_schedule_id=None, sell_online=None, location_id=None, hide_related_programs=None, staff_id=None, limit=None, offset=None):  # noqa: E501
        """GetServicesRequest - a model defined in Swagger"""  # noqa: E501

        self._program_ids = None
        self._session_type_ids = None
        self._service_ids = None
        self._class_id = None
        self._class_schedule_id = None
        self._sell_online = None
        self._location_id = None
        self._hide_related_programs = None
        self._staff_id = None
        self._limit = None
        self._offset = None
        self.discriminator = None

        if program_ids is not None:
            self.program_ids = program_ids
        if session_type_ids is not None:
            self.session_type_ids = session_type_ids
        if service_ids is not None:
            self.service_ids = service_ids
        if class_id is not None:
            self.class_id = class_id
        if class_schedule_id is not None:
            self.class_schedule_id = class_schedule_id
        if sell_online is not None:
            self.sell_online = sell_online
        if location_id is not None:
            self.location_id = location_id
        if hide_related_programs is not None:
            self.hide_related_programs = hide_related_programs
        if staff_id is not None:
            self.staff_id = staff_id
        if limit is not None:
            self.limit = limit
        if offset is not None:
            self.offset = offset

    @property
    def program_ids(self):
        """Gets the program_ids of this GetServicesRequest.  # noqa: E501

        Filters to pricing options with the specified program IDs.  # noqa: E501

        :return: The program_ids of this GetServicesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._program_ids

    @program_ids.setter
    def program_ids(self, program_ids):
        """Sets the program_ids of this GetServicesRequest.

        Filters to pricing options with the specified program IDs.  # noqa: E501

        :param program_ids: The program_ids of this GetServicesRequest.  # noqa: E501
        :type: list[int]
        """

        self._program_ids = program_ids

    @property
    def session_type_ids(self):
        """Gets the session_type_ids of this GetServicesRequest.  # noqa: E501

        Filters to the pricing options with the specified session types IDs.  # noqa: E501

        :return: The session_type_ids of this GetServicesRequest.  # noqa: E501
        :rtype: list[int]
        """
        return self._session_type_ids

    @session_type_ids.setter
    def session_type_ids(self, session_type_ids):
        """Sets the session_type_ids of this GetServicesRequest.

        Filters to the pricing options with the specified session types IDs.  # noqa: E501

        :param session_type_ids: The session_type_ids of this GetServicesRequest.  # noqa: E501
        :type: list[int]
        """

        self._session_type_ids = session_type_ids

    @property
    def service_ids(self):
        """Gets the service_ids of this GetServicesRequest.  # noqa: E501

        Filters to the pricing options with the specified IDs. In this context, service and pricing option are used interchangeably.  # noqa: E501

        :return: The service_ids of this GetServicesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._service_ids

    @service_ids.setter
    def service_ids(self, service_ids):
        """Sets the service_ids of this GetServicesRequest.

        Filters to the pricing options with the specified IDs. In this context, service and pricing option are used interchangeably.  # noqa: E501

        :param service_ids: The service_ids of this GetServicesRequest.  # noqa: E501
        :type: list[str]
        """

        self._service_ids = service_ids

    @property
    def class_id(self):
        """Gets the class_id of this GetServicesRequest.  # noqa: E501

        Filters to the pricing options for the specified class ID.  # noqa: E501

        :return: The class_id of this GetServicesRequest.  # noqa: E501
        :rtype: int
        """
        return self._class_id

    @class_id.setter
    def class_id(self, class_id):
        """Sets the class_id of this GetServicesRequest.

        Filters to the pricing options for the specified class ID.  # noqa: E501

        :param class_id: The class_id of this GetServicesRequest.  # noqa: E501
        :type: int
        """

        self._class_id = class_id

    @property
    def class_schedule_id(self):
        """Gets the class_schedule_id of this GetServicesRequest.  # noqa: E501

        Filters to the pricing options for the specified class schedule ID.  # noqa: E501

        :return: The class_schedule_id of this GetServicesRequest.  # noqa: E501
        :rtype: int
        """
        return self._class_schedule_id

    @class_schedule_id.setter
    def class_schedule_id(self, class_schedule_id):
        """Sets the class_schedule_id of this GetServicesRequest.

        Filters to the pricing options for the specified class schedule ID.  # noqa: E501

        :param class_schedule_id: The class_schedule_id of this GetServicesRequest.  # noqa: E501
        :type: int
        """

        self._class_schedule_id = class_schedule_id

    @property
    def sell_online(self):
        """Gets the sell_online of this GetServicesRequest.  # noqa: E501

        When `true`, filters to the pricing options that can be sold online.<br />  Default: **false**  # noqa: E501

        :return: The sell_online of this GetServicesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._sell_online

    @sell_online.setter
    def sell_online(self, sell_online):
        """Sets the sell_online of this GetServicesRequest.

        When `true`, filters to the pricing options that can be sold online.<br />  Default: **false**  # noqa: E501

        :param sell_online: The sell_online of this GetServicesRequest.  # noqa: E501
        :type: bool
        """

        self._sell_online = sell_online

    @property
    def location_id(self):
        """Gets the location_id of this GetServicesRequest.  # noqa: E501

        When specified, for each returned pricing option, `TaxRate` and `TaxIncluded` are calculated according to the specified location. Note that this does not filter results to only services provided at the given location, and for locations where Value-Added Tax (VAT) rules apply, the `TaxRate` is set to zero.  # noqa: E501

        :return: The location_id of this GetServicesRequest.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GetServicesRequest.

        When specified, for each returned pricing option, `TaxRate` and `TaxIncluded` are calculated according to the specified location. Note that this does not filter results to only services provided at the given location, and for locations where Value-Added Tax (VAT) rules apply, the `TaxRate` is set to zero.  # noqa: E501

        :param location_id: The location_id of this GetServicesRequest.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def hide_related_programs(self):
        """Gets the hide_related_programs of this GetServicesRequest.  # noqa: E501

        When `true`, indicates that pricing options of related programs are omitted from the response.<br />  Default: **false**  # noqa: E501

        :return: The hide_related_programs of this GetServicesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._hide_related_programs

    @hide_related_programs.setter
    def hide_related_programs(self, hide_related_programs):
        """Sets the hide_related_programs of this GetServicesRequest.

        When `true`, indicates that pricing options of related programs are omitted from the response.<br />  Default: **false**  # noqa: E501

        :param hide_related_programs: The hide_related_programs of this GetServicesRequest.  # noqa: E501
        :type: bool
        """

        self._hide_related_programs = hide_related_programs

    @property
    def staff_id(self):
        """Gets the staff_id of this GetServicesRequest.  # noqa: E501

        Sets `Price` and `OnlinePrice` to the particular pricing of a specific staff member, if allowed by the business.  # noqa: E501

        :return: The staff_id of this GetServicesRequest.  # noqa: E501
        :rtype: int
        """
        return self._staff_id

    @staff_id.setter
    def staff_id(self, staff_id):
        """Sets the staff_id of this GetServicesRequest.

        Sets `Price` and `OnlinePrice` to the particular pricing of a specific staff member, if allowed by the business.  # noqa: E501

        :param staff_id: The staff_id of this GetServicesRequest.  # noqa: E501
        :type: int
        """

        self._staff_id = staff_id

    @property
    def limit(self):
        """Gets the limit of this GetServicesRequest.  # noqa: E501

        Number of results to include, defaults to 100  # noqa: E501

        :return: The limit of this GetServicesRequest.  # noqa: E501
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this GetServicesRequest.

        Number of results to include, defaults to 100  # noqa: E501

        :param limit: The limit of this GetServicesRequest.  # noqa: E501
        :type: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this GetServicesRequest.  # noqa: E501

        Page offset, defaults to 0.  # noqa: E501

        :return: The offset of this GetServicesRequest.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this GetServicesRequest.

        Page offset, defaults to 0.  # noqa: E501

        :param offset: The offset of this GetServicesRequest.  # noqa: E501
        :type: int
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GetServicesRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GetServicesRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
