# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UpdateClientVisitRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'visit_id': 'int',
        'makeup': 'bool',
        'signed_in': 'bool',
        'execute': 'str',
        'test': 'bool',
        'send_email': 'bool'
    }

    attribute_map = {
        'visit_id': 'VisitId',
        'makeup': 'Makeup',
        'signed_in': 'SignedIn',
        'execute': 'Execute',
        'test': 'Test',
        'send_email': 'SendEmail'
    }

    def __init__(self, visit_id=None, makeup=None, signed_in=None, execute=None, test=None, send_email=None):  # noqa: E501
        """UpdateClientVisitRequest - a model defined in Swagger"""  # noqa: E501

        self._visit_id = None
        self._makeup = None
        self._signed_in = None
        self._execute = None
        self._test = None
        self._send_email = None
        self.discriminator = None

        self.visit_id = visit_id
        if makeup is not None:
            self.makeup = makeup
        if signed_in is not None:
            self.signed_in = signed_in
        if execute is not None:
            self.execute = execute
        if test is not None:
            self.test = test
        if send_email is not None:
            self.send_email = send_email

    @property
    def visit_id(self):
        """Gets the visit_id of this UpdateClientVisitRequest.  # noqa: E501

        The ID of the visit to be updated.  # noqa: E501

        :return: The visit_id of this UpdateClientVisitRequest.  # noqa: E501
        :rtype: int
        """
        return self._visit_id

    @visit_id.setter
    def visit_id(self, visit_id):
        """Sets the visit_id of this UpdateClientVisitRequest.

        The ID of the visit to be updated.  # noqa: E501

        :param visit_id: The visit_id of this UpdateClientVisitRequest.  # noqa: E501
        :type: int
        """
        if visit_id is None:
            raise ValueError("Invalid value for `visit_id`, must not be `None`")  # noqa: E501

        self._visit_id = visit_id

    @property
    def makeup(self):
        """Gets the makeup of this UpdateClientVisitRequest.  # noqa: E501

        When `true`, indicates that the visit is eligible to be made up.  # noqa: E501

        :return: The makeup of this UpdateClientVisitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._makeup

    @makeup.setter
    def makeup(self, makeup):
        """Sets the makeup of this UpdateClientVisitRequest.

        When `true`, indicates that the visit is eligible to be made up.  # noqa: E501

        :param makeup: The makeup of this UpdateClientVisitRequest.  # noqa: E501
        :type: bool
        """

        self._makeup = makeup

    @property
    def signed_in(self):
        """Gets the signed_in of this UpdateClientVisitRequest.  # noqa: E501

        When `true`, indicates that the client has signed in for the visit.  # noqa: E501

        :return: The signed_in of this UpdateClientVisitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._signed_in

    @signed_in.setter
    def signed_in(self, signed_in):
        """Sets the signed_in of this UpdateClientVisitRequest.

        When `true`, indicates that the client has signed in for the visit.  # noqa: E501

        :param signed_in: The signed_in of this UpdateClientVisitRequest.  # noqa: E501
        :type: bool
        """

        self._signed_in = signed_in

    @property
    def execute(self):
        """Gets the execute of this UpdateClientVisitRequest.  # noqa: E501

        The execute code used to update this visit. Possible values are:  * Cancel  * Latecancel  * Unlatecancel  # noqa: E501

        :return: The execute of this UpdateClientVisitRequest.  # noqa: E501
        :rtype: str
        """
        return self._execute

    @execute.setter
    def execute(self, execute):
        """Sets the execute of this UpdateClientVisitRequest.

        The execute code used to update this visit. Possible values are:  * Cancel  * Latecancel  * Unlatecancel  # noqa: E501

        :param execute: The execute of this UpdateClientVisitRequest.  # noqa: E501
        :type: str
        """

        self._execute = execute

    @property
    def test(self):
        """Gets the test of this UpdateClientVisitRequest.  # noqa: E501

        When `true`, indicates that test mode is enabled. When test mode is enabled, input information is validated, but not committed.<br />  Default: **false**  # noqa: E501

        :return: The test of this UpdateClientVisitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this UpdateClientVisitRequest.

        When `true`, indicates that test mode is enabled. When test mode is enabled, input information is validated, but not committed.<br />  Default: **false**  # noqa: E501

        :param test: The test of this UpdateClientVisitRequest.  # noqa: E501
        :type: bool
        """

        self._test = test

    @property
    def send_email(self):
        """Gets the send_email of this UpdateClientVisitRequest.  # noqa: E501

        When `true`, indicates that the client should be sent an email for cancellations. Note that email is not sent unless the client has an email address and automatic emails have been set up correctly.<br />  Default: **false**  # noqa: E501

        :return: The send_email of this UpdateClientVisitRequest.  # noqa: E501
        :rtype: bool
        """
        return self._send_email

    @send_email.setter
    def send_email(self, send_email):
        """Sets the send_email of this UpdateClientVisitRequest.

        When `true`, indicates that the client should be sent an email for cancellations. Note that email is not sent unless the client has an email address and automatic emails have been set up correctly.<br />  Default: **false**  # noqa: E501

        :param send_email: The send_email of this UpdateClientVisitRequest.  # noqa: E501
        :type: bool
        """

        self._send_email = send_email

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateClientVisitRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateClientVisitRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
