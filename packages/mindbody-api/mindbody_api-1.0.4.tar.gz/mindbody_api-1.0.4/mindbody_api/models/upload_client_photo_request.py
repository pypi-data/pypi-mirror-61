# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class UploadClientPhotoRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bytes': 'str',
        'client_id': 'str'
    }

    attribute_map = {
        'bytes': 'Bytes',
        'client_id': 'ClientId'
    }

    def __init__(self, bytes=None, client_id=None):  # noqa: E501
        """UploadClientPhotoRequest - a model defined in Swagger"""  # noqa: E501

        self._bytes = None
        self._client_id = None
        self.discriminator = None

        self.bytes = bytes
        self.client_id = client_id

    @property
    def bytes(self):
        """Gets the bytes of this UploadClientPhotoRequest.  # noqa: E501

        A Base64-encoded string representation of the image’s byte array.  # noqa: E501

        :return: The bytes of this UploadClientPhotoRequest.  # noqa: E501
        :rtype: str
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this UploadClientPhotoRequest.

        A Base64-encoded string representation of the image’s byte array.  # noqa: E501

        :param bytes: The bytes of this UploadClientPhotoRequest.  # noqa: E501
        :type: str
        """
        if bytes is None:
            raise ValueError("Invalid value for `bytes`, must not be `None`")  # noqa: E501
        if bytes is not None and not re.search(r'^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$', bytes):  # noqa: E501
            raise ValueError(r"Invalid value for `bytes`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`")  # noqa: E501

        self._bytes = bytes

    @property
    def client_id(self):
        """Gets the client_id of this UploadClientPhotoRequest.  # noqa: E501

        The RSSID of the client for whom the photo is to be uploaded.  # noqa: E501

        :return: The client_id of this UploadClientPhotoRequest.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this UploadClientPhotoRequest.

        The RSSID of the client for whom the photo is to be uploaded.  # noqa: E501

        :param client_id: The client_id of this UploadClientPhotoRequest.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UploadClientPhotoRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UploadClientPhotoRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
