# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.time_card_event import TimeCardEvent  # noqa: F401,E501


class TimeClockReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'staff_id': 'int',
        'task': 'str',
        'hourly_rate': 'float',
        'total_hours': 'float',
        'total_pay': 'float',
        'time_cards': 'list[TimeCardEvent]'
    }

    attribute_map = {
        'staff_id': 'StaffId',
        'task': 'Task',
        'hourly_rate': 'HourlyRate',
        'total_hours': 'TotalHours',
        'total_pay': 'TotalPay',
        'time_cards': 'TimeCards'
    }

    def __init__(self, staff_id=None, task=None, hourly_rate=None, total_hours=None, total_pay=None, time_cards=None):  # noqa: E501
        """TimeClockReport - a model defined in Swagger"""  # noqa: E501

        self._staff_id = None
        self._task = None
        self._hourly_rate = None
        self._total_hours = None
        self._total_pay = None
        self._time_cards = None
        self.discriminator = None

        if staff_id is not None:
            self.staff_id = staff_id
        if task is not None:
            self.task = task
        if hourly_rate is not None:
            self.hourly_rate = hourly_rate
        if total_hours is not None:
            self.total_hours = total_hours
        if total_pay is not None:
            self.total_pay = total_pay
        if time_cards is not None:
            self.time_cards = time_cards

    @property
    def staff_id(self):
        """Gets the staff_id of this TimeClockReport.  # noqa: E501

        The ID of the requested staff member.  # noqa: E501

        :return: The staff_id of this TimeClockReport.  # noqa: E501
        :rtype: int
        """
        return self._staff_id

    @staff_id.setter
    def staff_id(self, staff_id):
        """Sets the staff_id of this TimeClockReport.

        The ID of the requested staff member.  # noqa: E501

        :param staff_id: The staff_id of this TimeClockReport.  # noqa: E501
        :type: int
        """

        self._staff_id = staff_id

    @property
    def task(self):
        """Gets the task of this TimeClockReport.  # noqa: E501

        The staff member’s job title.  # noqa: E501

        :return: The task of this TimeClockReport.  # noqa: E501
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task):
        """Sets the task of this TimeClockReport.

        The staff member’s job title.  # noqa: E501

        :param task: The task of this TimeClockReport.  # noqa: E501
        :type: str
        """

        self._task = task

    @property
    def hourly_rate(self):
        """Gets the hourly_rate of this TimeClockReport.  # noqa: E501

        The hourly rate the business pays for this job.  # noqa: E501

        :return: The hourly_rate of this TimeClockReport.  # noqa: E501
        :rtype: float
        """
        return self._hourly_rate

    @hourly_rate.setter
    def hourly_rate(self, hourly_rate):
        """Sets the hourly_rate of this TimeClockReport.

        The hourly rate the business pays for this job.  # noqa: E501

        :param hourly_rate: The hourly_rate of this TimeClockReport.  # noqa: E501
        :type: float
        """

        self._hourly_rate = hourly_rate

    @property
    def total_hours(self):
        """Gets the total_hours of this TimeClockReport.  # noqa: E501

        The sum of the hours worked by the staff member in this time card report.  # noqa: E501

        :return: The total_hours of this TimeClockReport.  # noqa: E501
        :rtype: float
        """
        return self._total_hours

    @total_hours.setter
    def total_hours(self, total_hours):
        """Sets the total_hours of this TimeClockReport.

        The sum of the hours worked by the staff member in this time card report.  # noqa: E501

        :param total_hours: The total_hours of this TimeClockReport.  # noqa: E501
        :type: float
        """

        self._total_hours = total_hours

    @property
    def total_pay(self):
        """Gets the total_pay of this TimeClockReport.  # noqa: E501

        The total amount earned by the staff member for this time card report.  # noqa: E501

        :return: The total_pay of this TimeClockReport.  # noqa: E501
        :rtype: float
        """
        return self._total_pay

    @total_pay.setter
    def total_pay(self, total_pay):
        """Sets the total_pay of this TimeClockReport.

        The total amount earned by the staff member for this time card report.  # noqa: E501

        :param total_pay: The total_pay of this TimeClockReport.  # noqa: E501
        :type: float
        """

        self._total_pay = total_pay

    @property
    def time_cards(self):
        """Gets the time_cards of this TimeClockReport.  # noqa: E501

        Information about when a staff member began and ended a task.  # noqa: E501

        :return: The time_cards of this TimeClockReport.  # noqa: E501
        :rtype: list[TimeCardEvent]
        """
        return self._time_cards

    @time_cards.setter
    def time_cards(self, time_cards):
        """Sets the time_cards of this TimeClockReport.

        Information about when a staff member began and ended a task.  # noqa: E501

        :param time_cards: The time_cards of this TimeClockReport.  # noqa: E501
        :type: list[TimeCardEvent]
        """

        self._time_cards = time_cards

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TimeClockReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TimeClockReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
