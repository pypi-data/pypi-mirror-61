# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.purchased_item import PurchasedItem  # noqa: F401,E501
from mindbody_api.models.sale_payment import SalePayment  # noqa: F401,E501


class Sale(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'sale_date': 'datetime',
        'sale_time': 'str',
        'sale_date_time': 'datetime',
        'client_id': 'str',
        'purchased_items': 'list[PurchasedItem]',
        'location_id': 'int',
        'payments': 'list[SalePayment]'
    }

    attribute_map = {
        'id': 'Id',
        'sale_date': 'SaleDate',
        'sale_time': 'SaleTime',
        'sale_date_time': 'SaleDateTime',
        'client_id': 'ClientId',
        'purchased_items': 'PurchasedItems',
        'location_id': 'LocationId',
        'payments': 'Payments'
    }

    def __init__(self, id=None, sale_date=None, sale_time=None, sale_date_time=None, client_id=None, purchased_items=None, location_id=None, payments=None):  # noqa: E501
        """Sale - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._sale_date = None
        self._sale_time = None
        self._sale_date_time = None
        self._client_id = None
        self._purchased_items = None
        self._location_id = None
        self._payments = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if sale_date is not None:
            self.sale_date = sale_date
        if sale_time is not None:
            self.sale_time = sale_time
        if sale_date_time is not None:
            self.sale_date_time = sale_date_time
        if client_id is not None:
            self.client_id = client_id
        if purchased_items is not None:
            self.purchased_items = purchased_items
        if location_id is not None:
            self.location_id = location_id
        if payments is not None:
            self.payments = payments

    @property
    def id(self):
        """Gets the id of this Sale.  # noqa: E501

        The sale ID.  # noqa: E501

        :return: The id of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Sale.

        The sale ID.  # noqa: E501

        :param id: The id of this Sale.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def sale_date(self):
        """Gets the sale_date of this Sale.  # noqa: E501

        The date the item was sold.  # noqa: E501

        :return: The sale_date of this Sale.  # noqa: E501
        :rtype: datetime
        """
        return self._sale_date

    @sale_date.setter
    def sale_date(self, sale_date):
        """Sets the sale_date of this Sale.

        The date the item was sold.  # noqa: E501

        :param sale_date: The sale_date of this Sale.  # noqa: E501
        :type: datetime
        """

        self._sale_date = sale_date

    @property
    def sale_time(self):
        """Gets the sale_time of this Sale.  # noqa: E501

        The time the item was sold.  # noqa: E501

        :return: The sale_time of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._sale_time

    @sale_time.setter
    def sale_time(self, sale_time):
        """Sets the sale_time of this Sale.

        The time the item was sold.  # noqa: E501

        :param sale_time: The sale_time of this Sale.  # noqa: E501
        :type: str
        """

        self._sale_time = sale_time

    @property
    def sale_date_time(self):
        """Gets the sale_date_time of this Sale.  # noqa: E501

        The date and time the item was sold.  # noqa: E501

        :return: The sale_date_time of this Sale.  # noqa: E501
        :rtype: datetime
        """
        return self._sale_date_time

    @sale_date_time.setter
    def sale_date_time(self, sale_date_time):
        """Sets the sale_date_time of this Sale.

        The date and time the item was sold.  # noqa: E501

        :param sale_date_time: The sale_date_time of this Sale.  # noqa: E501
        :type: datetime
        """

        self._sale_date_time = sale_date_time

    @property
    def client_id(self):
        """Gets the client_id of this Sale.  # noqa: E501

        The ID of the client who made the purchase.  # noqa: E501

        :return: The client_id of this Sale.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this Sale.

        The ID of the client who made the purchase.  # noqa: E501

        :param client_id: The client_id of this Sale.  # noqa: E501
        :type: str
        """

        self._client_id = client_id

    @property
    def purchased_items(self):
        """Gets the purchased_items of this Sale.  # noqa: E501

        Contains information that describes the purchased items.  # noqa: E501

        :return: The purchased_items of this Sale.  # noqa: E501
        :rtype: list[PurchasedItem]
        """
        return self._purchased_items

    @purchased_items.setter
    def purchased_items(self, purchased_items):
        """Sets the purchased_items of this Sale.

        Contains information that describes the purchased items.  # noqa: E501

        :param purchased_items: The purchased_items of this Sale.  # noqa: E501
        :type: list[PurchasedItem]
        """

        self._purchased_items = purchased_items

    @property
    def location_id(self):
        """Gets the location_id of this Sale.  # noqa: E501

        The ID of the location where the sale takes place.  # noqa: E501

        :return: The location_id of this Sale.  # noqa: E501
        :rtype: int
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this Sale.

        The ID of the location where the sale takes place.  # noqa: E501

        :param location_id: The location_id of this Sale.  # noqa: E501
        :type: int
        """

        self._location_id = location_id

    @property
    def payments(self):
        """Gets the payments of this Sale.  # noqa: E501

        Contains information that describes the payments that contributed to this sale.  # noqa: E501

        :return: The payments of this Sale.  # noqa: E501
        :rtype: list[SalePayment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """Sets the payments of this Sale.

        Contains information that describes the payments that contributed to this sale.  # noqa: E501

        :param payments: The payments of this Sale.  # noqa: E501
        :type: list[SalePayment]
        """

        self._payments = payments

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Sale, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Sale):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
