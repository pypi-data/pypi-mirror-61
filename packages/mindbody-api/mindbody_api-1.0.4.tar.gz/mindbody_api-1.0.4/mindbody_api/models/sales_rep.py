# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SalesRep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'first_name': 'str',
        'id': 'int',
        'last_name': 'str',
        'sales_rep_number': 'int',
        'sales_rep_numbers': 'list[int]'
    }

    attribute_map = {
        'first_name': 'FirstName',
        'id': 'Id',
        'last_name': 'LastName',
        'sales_rep_number': 'SalesRepNumber',
        'sales_rep_numbers': 'SalesRepNumbers'
    }

    def __init__(self, first_name=None, id=None, last_name=None, sales_rep_number=None, sales_rep_numbers=None):  # noqa: E501
        """SalesRep - a model defined in Swagger"""  # noqa: E501

        self._first_name = None
        self._id = None
        self._last_name = None
        self._sales_rep_number = None
        self._sales_rep_numbers = None
        self.discriminator = None

        if first_name is not None:
            self.first_name = first_name
        if id is not None:
            self.id = id
        if last_name is not None:
            self.last_name = last_name
        if sales_rep_number is not None:
            self.sales_rep_number = sales_rep_number
        if sales_rep_numbers is not None:
            self.sales_rep_numbers = sales_rep_numbers

    @property
    def first_name(self):
        """Gets the first_name of this SalesRep.  # noqa: E501

        The first name of the sales representative.  # noqa: E501

        :return: The first_name of this SalesRep.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this SalesRep.

        The first name of the sales representative.  # noqa: E501

        :param first_name: The first_name of this SalesRep.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def id(self):
        """Gets the id of this SalesRep.  # noqa: E501

        The staff ID of the sales representative.  # noqa: E501

        :return: The id of this SalesRep.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SalesRep.

        The staff ID of the sales representative.  # noqa: E501

        :param id: The id of this SalesRep.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def last_name(self):
        """Gets the last_name of this SalesRep.  # noqa: E501

        The last name of the sales representative.  # noqa: E501

        :return: The last_name of this SalesRep.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this SalesRep.

        The last name of the sales representative.  # noqa: E501

        :param last_name: The last_name of this SalesRep.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def sales_rep_number(self):
        """Gets the sales_rep_number of this SalesRep.  # noqa: E501

        This value is the number that identifies the type of sales representative assigned to this client. One to six types of sales representatives can be assigned to a client at any given time, depending on site settings.  # noqa: E501

        :return: The sales_rep_number of this SalesRep.  # noqa: E501
        :rtype: int
        """
        return self._sales_rep_number

    @sales_rep_number.setter
    def sales_rep_number(self, sales_rep_number):
        """Sets the sales_rep_number of this SalesRep.

        This value is the number that identifies the type of sales representative assigned to this client. One to six types of sales representatives can be assigned to a client at any given time, depending on site settings.  # noqa: E501

        :param sales_rep_number: The sales_rep_number of this SalesRep.  # noqa: E501
        :type: int
        """

        self._sales_rep_number = sales_rep_number

    @property
    def sales_rep_numbers(self):
        """Gets the sales_rep_numbers of this SalesRep.  # noqa: E501

        A list of the different types of sales representative functions assigned to this staff member.  # noqa: E501

        :return: The sales_rep_numbers of this SalesRep.  # noqa: E501
        :rtype: list[int]
        """
        return self._sales_rep_numbers

    @sales_rep_numbers.setter
    def sales_rep_numbers(self, sales_rep_numbers):
        """Sets the sales_rep_numbers of this SalesRep.

        A list of the different types of sales representative functions assigned to this staff member.  # noqa: E501

        :param sales_rep_numbers: The sales_rep_numbers of this SalesRep.  # noqa: E501
        :type: list[int]
        """

        self._sales_rep_numbers = sales_rep_numbers

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SalesRep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SalesRep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
