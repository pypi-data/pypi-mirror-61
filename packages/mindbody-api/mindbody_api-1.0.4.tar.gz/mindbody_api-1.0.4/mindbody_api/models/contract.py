# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from mindbody_api.models.autopay_schedule import AutopaySchedule  # noqa: F401,E501
from mindbody_api.models.contract_item import ContractItem  # noqa: F401,E501
from mindbody_api.models.membership_type_restriction import MembershipTypeRestriction  # noqa: F401,E501


class Contract(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'description': 'str',
        'assigns_membership_id': 'int',
        'assigns_membership_name': 'str',
        'sold_online': 'bool',
        'contract_items': 'list[ContractItem]',
        'intro_offer': 'str',
        'autopay_schedule': 'AutopaySchedule',
        'number_of_autopays': 'int',
        'autopay_trigger_type': 'str',
        'action_upon_completion_of_autopays': 'str',
        'clients_charged_on': 'str',
        'clients_charged_on_specific_date': 'datetime',
        'discount_amount': 'float',
        'deposit_amount': 'float',
        'first_autopay_free': 'bool',
        'last_autopay_free': 'bool',
        'client_terminate_online': 'bool',
        'membership_type_restrictions': 'list[MembershipTypeRestriction]',
        'location_purchase_restriction_ids': 'list[int]',
        'location_purchase_restriction_names': 'list[str]',
        'agreement_terms': 'str',
        'requires_electronic_confirmation': 'bool',
        'autopay_enabled': 'bool',
        'first_payment_amount_subtotal': 'float',
        'first_payment_amount_tax': 'float',
        'first_payment_amount_total': 'float',
        'recurring_payment_amount_subtotal': 'float',
        'recurring_payment_amount_tax': 'float',
        'recurring_payment_amount_total': 'float',
        'total_contract_amount_subtotal': 'float',
        'total_contract_amount_tax': 'float',
        'total_contract_amount_total': 'float'
    }

    attribute_map = {
        'id': 'Id',
        'name': 'Name',
        'description': 'Description',
        'assigns_membership_id': 'AssignsMembershipId',
        'assigns_membership_name': 'AssignsMembershipName',
        'sold_online': 'SoldOnline',
        'contract_items': 'ContractItems',
        'intro_offer': 'IntroOffer',
        'autopay_schedule': 'AutopaySchedule',
        'number_of_autopays': 'NumberOfAutopays',
        'autopay_trigger_type': 'AutopayTriggerType',
        'action_upon_completion_of_autopays': 'ActionUponCompletionOfAutopays',
        'clients_charged_on': 'ClientsChargedOn',
        'clients_charged_on_specific_date': 'ClientsChargedOnSpecificDate',
        'discount_amount': 'DiscountAmount',
        'deposit_amount': 'DepositAmount',
        'first_autopay_free': 'FirstAutopayFree',
        'last_autopay_free': 'LastAutopayFree',
        'client_terminate_online': 'ClientTerminateOnline',
        'membership_type_restrictions': 'MembershipTypeRestrictions',
        'location_purchase_restriction_ids': 'LocationPurchaseRestrictionIds',
        'location_purchase_restriction_names': 'LocationPurchaseRestrictionNames',
        'agreement_terms': 'AgreementTerms',
        'requires_electronic_confirmation': 'RequiresElectronicConfirmation',
        'autopay_enabled': 'AutopayEnabled',
        'first_payment_amount_subtotal': 'FirstPaymentAmountSubtotal',
        'first_payment_amount_tax': 'FirstPaymentAmountTax',
        'first_payment_amount_total': 'FirstPaymentAmountTotal',
        'recurring_payment_amount_subtotal': 'RecurringPaymentAmountSubtotal',
        'recurring_payment_amount_tax': 'RecurringPaymentAmountTax',
        'recurring_payment_amount_total': 'RecurringPaymentAmountTotal',
        'total_contract_amount_subtotal': 'TotalContractAmountSubtotal',
        'total_contract_amount_tax': 'TotalContractAmountTax',
        'total_contract_amount_total': 'TotalContractAmountTotal'
    }

    def __init__(self, id=None, name=None, description=None, assigns_membership_id=None, assigns_membership_name=None, sold_online=None, contract_items=None, intro_offer=None, autopay_schedule=None, number_of_autopays=None, autopay_trigger_type=None, action_upon_completion_of_autopays=None, clients_charged_on=None, clients_charged_on_specific_date=None, discount_amount=None, deposit_amount=None, first_autopay_free=None, last_autopay_free=None, client_terminate_online=None, membership_type_restrictions=None, location_purchase_restriction_ids=None, location_purchase_restriction_names=None, agreement_terms=None, requires_electronic_confirmation=None, autopay_enabled=None, first_payment_amount_subtotal=None, first_payment_amount_tax=None, first_payment_amount_total=None, recurring_payment_amount_subtotal=None, recurring_payment_amount_tax=None, recurring_payment_amount_total=None, total_contract_amount_subtotal=None, total_contract_amount_tax=None, total_contract_amount_total=None):  # noqa: E501
        """Contract - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._description = None
        self._assigns_membership_id = None
        self._assigns_membership_name = None
        self._sold_online = None
        self._contract_items = None
        self._intro_offer = None
        self._autopay_schedule = None
        self._number_of_autopays = None
        self._autopay_trigger_type = None
        self._action_upon_completion_of_autopays = None
        self._clients_charged_on = None
        self._clients_charged_on_specific_date = None
        self._discount_amount = None
        self._deposit_amount = None
        self._first_autopay_free = None
        self._last_autopay_free = None
        self._client_terminate_online = None
        self._membership_type_restrictions = None
        self._location_purchase_restriction_ids = None
        self._location_purchase_restriction_names = None
        self._agreement_terms = None
        self._requires_electronic_confirmation = None
        self._autopay_enabled = None
        self._first_payment_amount_subtotal = None
        self._first_payment_amount_tax = None
        self._first_payment_amount_total = None
        self._recurring_payment_amount_subtotal = None
        self._recurring_payment_amount_tax = None
        self._recurring_payment_amount_total = None
        self._total_contract_amount_subtotal = None
        self._total_contract_amount_tax = None
        self._total_contract_amount_total = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if assigns_membership_id is not None:
            self.assigns_membership_id = assigns_membership_id
        if assigns_membership_name is not None:
            self.assigns_membership_name = assigns_membership_name
        if sold_online is not None:
            self.sold_online = sold_online
        if contract_items is not None:
            self.contract_items = contract_items
        if intro_offer is not None:
            self.intro_offer = intro_offer
        if autopay_schedule is not None:
            self.autopay_schedule = autopay_schedule
        if number_of_autopays is not None:
            self.number_of_autopays = number_of_autopays
        if autopay_trigger_type is not None:
            self.autopay_trigger_type = autopay_trigger_type
        if action_upon_completion_of_autopays is not None:
            self.action_upon_completion_of_autopays = action_upon_completion_of_autopays
        if clients_charged_on is not None:
            self.clients_charged_on = clients_charged_on
        if clients_charged_on_specific_date is not None:
            self.clients_charged_on_specific_date = clients_charged_on_specific_date
        if discount_amount is not None:
            self.discount_amount = discount_amount
        if deposit_amount is not None:
            self.deposit_amount = deposit_amount
        if first_autopay_free is not None:
            self.first_autopay_free = first_autopay_free
        if last_autopay_free is not None:
            self.last_autopay_free = last_autopay_free
        if client_terminate_online is not None:
            self.client_terminate_online = client_terminate_online
        if membership_type_restrictions is not None:
            self.membership_type_restrictions = membership_type_restrictions
        if location_purchase_restriction_ids is not None:
            self.location_purchase_restriction_ids = location_purchase_restriction_ids
        if location_purchase_restriction_names is not None:
            self.location_purchase_restriction_names = location_purchase_restriction_names
        if agreement_terms is not None:
            self.agreement_terms = agreement_terms
        if requires_electronic_confirmation is not None:
            self.requires_electronic_confirmation = requires_electronic_confirmation
        if autopay_enabled is not None:
            self.autopay_enabled = autopay_enabled
        if first_payment_amount_subtotal is not None:
            self.first_payment_amount_subtotal = first_payment_amount_subtotal
        if first_payment_amount_tax is not None:
            self.first_payment_amount_tax = first_payment_amount_tax
        if first_payment_amount_total is not None:
            self.first_payment_amount_total = first_payment_amount_total
        if recurring_payment_amount_subtotal is not None:
            self.recurring_payment_amount_subtotal = recurring_payment_amount_subtotal
        if recurring_payment_amount_tax is not None:
            self.recurring_payment_amount_tax = recurring_payment_amount_tax
        if recurring_payment_amount_total is not None:
            self.recurring_payment_amount_total = recurring_payment_amount_total
        if total_contract_amount_subtotal is not None:
            self.total_contract_amount_subtotal = total_contract_amount_subtotal
        if total_contract_amount_tax is not None:
            self.total_contract_amount_tax = total_contract_amount_tax
        if total_contract_amount_total is not None:
            self.total_contract_amount_total = total_contract_amount_total

    @property
    def id(self):
        """Gets the id of this Contract.  # noqa: E501

        The contract’s ID at the subscriber’s business.  # noqa: E501

        :return: The id of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Contract.

        The contract’s ID at the subscriber’s business.  # noqa: E501

        :param id: The id of this Contract.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Contract.  # noqa: E501

        The name of the contract.  # noqa: E501

        :return: The name of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Contract.

        The name of the contract.  # noqa: E501

        :param name: The name of this Contract.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this Contract.  # noqa: E501

        A description of the contract.  # noqa: E501

        :return: The description of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Contract.

        A description of the contract.  # noqa: E501

        :param description: The description of this Contract.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def assigns_membership_id(self):
        """Gets the assigns_membership_id of this Contract.  # noqa: E501

        The ID of the membership that was assigned to the client when the client signed up for a contract.  # noqa: E501

        :return: The assigns_membership_id of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._assigns_membership_id

    @assigns_membership_id.setter
    def assigns_membership_id(self, assigns_membership_id):
        """Sets the assigns_membership_id of this Contract.

        The ID of the membership that was assigned to the client when the client signed up for a contract.  # noqa: E501

        :param assigns_membership_id: The assigns_membership_id of this Contract.  # noqa: E501
        :type: int
        """

        self._assigns_membership_id = assigns_membership_id

    @property
    def assigns_membership_name(self):
        """Gets the assigns_membership_name of this Contract.  # noqa: E501

        The name of the membership that was assigned to the client when the client signed up for this contract.  # noqa: E501

        :return: The assigns_membership_name of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._assigns_membership_name

    @assigns_membership_name.setter
    def assigns_membership_name(self, assigns_membership_name):
        """Sets the assigns_membership_name of this Contract.

        The name of the membership that was assigned to the client when the client signed up for this contract.  # noqa: E501

        :param assigns_membership_name: The assigns_membership_name of this Contract.  # noqa: E501
        :type: str
        """

        self._assigns_membership_name = assigns_membership_name

    @property
    def sold_online(self):
        """Gets the sold_online of this Contract.  # noqa: E501

        When `true`, indicates that this membership is intended to be shown to clients in client experiences.<br />  When `false`, this contract should only be shown to staff members.  # noqa: E501

        :return: The sold_online of this Contract.  # noqa: E501
        :rtype: bool
        """
        return self._sold_online

    @sold_online.setter
    def sold_online(self, sold_online):
        """Sets the sold_online of this Contract.

        When `true`, indicates that this membership is intended to be shown to clients in client experiences.<br />  When `false`, this contract should only be shown to staff members.  # noqa: E501

        :param sold_online: The sold_online of this Contract.  # noqa: E501
        :type: bool
        """

        self._sold_online = sold_online

    @property
    def contract_items(self):
        """Gets the contract_items of this Contract.  # noqa: E501

        Contains information about the items in the contract.  # noqa: E501

        :return: The contract_items of this Contract.  # noqa: E501
        :rtype: list[ContractItem]
        """
        return self._contract_items

    @contract_items.setter
    def contract_items(self, contract_items):
        """Sets the contract_items of this Contract.

        Contains information about the items in the contract.  # noqa: E501

        :param contract_items: The contract_items of this Contract.  # noqa: E501
        :type: list[ContractItem]
        """

        self._contract_items = contract_items

    @property
    def intro_offer(self):
        """Gets the intro_offer of this Contract.  # noqa: E501

        Defines whether this contract is treated as an introductory offer. If this is an introductory offer, then clients are always charged a set number of times rather than month to month, using their AutoPays. Possible values are:  * None  * NewConsumer  * NewAndReturningConsumer  # noqa: E501

        :return: The intro_offer of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._intro_offer

    @intro_offer.setter
    def intro_offer(self, intro_offer):
        """Sets the intro_offer of this Contract.

        Defines whether this contract is treated as an introductory offer. If this is an introductory offer, then clients are always charged a set number of times rather than month to month, using their AutoPays. Possible values are:  * None  * NewConsumer  * NewAndReturningConsumer  # noqa: E501

        :param intro_offer: The intro_offer of this Contract.  # noqa: E501
        :type: str
        """

        self._intro_offer = intro_offer

    @property
    def autopay_schedule(self):
        """Gets the autopay_schedule of this Contract.  # noqa: E501

        Contains information about the AutoPay schedule. This parameter is null if `AutopayTriggerType` has a value of `PricingOptionRunsOutOrExpires`.  # noqa: E501

        :return: The autopay_schedule of this Contract.  # noqa: E501
        :rtype: AutopaySchedule
        """
        return self._autopay_schedule

    @autopay_schedule.setter
    def autopay_schedule(self, autopay_schedule):
        """Sets the autopay_schedule of this Contract.

        Contains information about the AutoPay schedule. This parameter is null if `AutopayTriggerType` has a value of `PricingOptionRunsOutOrExpires`.  # noqa: E501

        :param autopay_schedule: The autopay_schedule of this Contract.  # noqa: E501
        :type: AutopaySchedule
        """

        self._autopay_schedule = autopay_schedule

    @property
    def number_of_autopays(self):
        """Gets the number_of_autopays of this Contract.  # noqa: E501

        The number of times that the AutoPay is to be run. This value is null if `FrequencyType` is `MonthToMonth`.  # noqa: E501

        :return: The number_of_autopays of this Contract.  # noqa: E501
        :rtype: int
        """
        return self._number_of_autopays

    @number_of_autopays.setter
    def number_of_autopays(self, number_of_autopays):
        """Sets the number_of_autopays of this Contract.

        The number of times that the AutoPay is to be run. This value is null if `FrequencyType` is `MonthToMonth`.  # noqa: E501

        :param number_of_autopays: The number_of_autopays of this Contract.  # noqa: E501
        :type: int
        """

        self._number_of_autopays = number_of_autopays

    @property
    def autopay_trigger_type(self):
        """Gets the autopay_trigger_type of this Contract.  # noqa: E501

        Defines whether the AutoPay, if applicable to this contract, runs on a set schedule or when the pricing option runs out or expires. Possible values are:  * OnSetSchedule  * PricingOptionRunsOutOrExpires  # noqa: E501

        :return: The autopay_trigger_type of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._autopay_trigger_type

    @autopay_trigger_type.setter
    def autopay_trigger_type(self, autopay_trigger_type):
        """Sets the autopay_trigger_type of this Contract.

        Defines whether the AutoPay, if applicable to this contract, runs on a set schedule or when the pricing option runs out or expires. Possible values are:  * OnSetSchedule  * PricingOptionRunsOutOrExpires  # noqa: E501

        :param autopay_trigger_type: The autopay_trigger_type of this Contract.  # noqa: E501
        :type: str
        """

        self._autopay_trigger_type = autopay_trigger_type

    @property
    def action_upon_completion_of_autopays(self):
        """Gets the action_upon_completion_of_autopays of this Contract.  # noqa: E501

        The renewal action to be taken when this AutoPay is completed. Possible values are:  * ContractExpires  * ContractAutomaticallyRenews  # noqa: E501

        :return: The action_upon_completion_of_autopays of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._action_upon_completion_of_autopays

    @action_upon_completion_of_autopays.setter
    def action_upon_completion_of_autopays(self, action_upon_completion_of_autopays):
        """Sets the action_upon_completion_of_autopays of this Contract.

        The renewal action to be taken when this AutoPay is completed. Possible values are:  * ContractExpires  * ContractAutomaticallyRenews  # noqa: E501

        :param action_upon_completion_of_autopays: The action_upon_completion_of_autopays of this Contract.  # noqa: E501
        :type: str
        """

        self._action_upon_completion_of_autopays = action_upon_completion_of_autopays

    @property
    def clients_charged_on(self):
        """Gets the clients_charged_on of this Contract.  # noqa: E501

        The value that indicates when clients are charged. Possible values are:  * OnSaleDate  * FirstOfTheMonth  * FifteenthOfTheMonth  * LastDayOfTheMonth  * FirstOrFifteenthOfTheMonth  * FirstOrSixteenthOfTheMonth  * FifteenthOrEndOfTheMonth  * SpecificDate  # noqa: E501

        :return: The clients_charged_on of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._clients_charged_on

    @clients_charged_on.setter
    def clients_charged_on(self, clients_charged_on):
        """Sets the clients_charged_on of this Contract.

        The value that indicates when clients are charged. Possible values are:  * OnSaleDate  * FirstOfTheMonth  * FifteenthOfTheMonth  * LastDayOfTheMonth  * FirstOrFifteenthOfTheMonth  * FirstOrSixteenthOfTheMonth  * FifteenthOrEndOfTheMonth  * SpecificDate  # noqa: E501

        :param clients_charged_on: The clients_charged_on of this Contract.  # noqa: E501
        :type: str
        """

        self._clients_charged_on = clients_charged_on

    @property
    def clients_charged_on_specific_date(self):
        """Gets the clients_charged_on_specific_date of this Contract.  # noqa: E501

        If `ClientsChargedOn` is defined as a specific date, this property holds the value of that date. Otherwise, this property is null.  # noqa: E501

        :return: The clients_charged_on_specific_date of this Contract.  # noqa: E501
        :rtype: datetime
        """
        return self._clients_charged_on_specific_date

    @clients_charged_on_specific_date.setter
    def clients_charged_on_specific_date(self, clients_charged_on_specific_date):
        """Sets the clients_charged_on_specific_date of this Contract.

        If `ClientsChargedOn` is defined as a specific date, this property holds the value of that date. Otherwise, this property is null.  # noqa: E501

        :param clients_charged_on_specific_date: The clients_charged_on_specific_date of this Contract.  # noqa: E501
        :type: datetime
        """

        self._clients_charged_on_specific_date = clients_charged_on_specific_date

    @property
    def discount_amount(self):
        """Gets the discount_amount of this Contract.  # noqa: E501

        The calculated discount applied to the items in this contract.  # noqa: E501

        :return: The discount_amount of this Contract.  # noqa: E501
        :rtype: float
        """
        return self._discount_amount

    @discount_amount.setter
    def discount_amount(self, discount_amount):
        """Sets the discount_amount of this Contract.

        The calculated discount applied to the items in this contract.  # noqa: E501

        :param discount_amount: The discount_amount of this Contract.  # noqa: E501
        :type: float
        """

        self._discount_amount = discount_amount

    @property
    def deposit_amount(self):
        """Gets the deposit_amount of this Contract.  # noqa: E501

        The amount of the deposit required for this contract.  # noqa: E501

        :return: The deposit_amount of this Contract.  # noqa: E501
        :rtype: float
        """
        return self._deposit_amount

    @deposit_amount.setter
    def deposit_amount(self, deposit_amount):
        """Sets the deposit_amount of this Contract.

        The amount of the deposit required for this contract.  # noqa: E501

        :param deposit_amount: The deposit_amount of this Contract.  # noqa: E501
        :type: float
        """

        self._deposit_amount = deposit_amount

    @property
    def first_autopay_free(self):
        """Gets the first_autopay_free of this Contract.  # noqa: E501

        When `true`, indicates that the first payment for the AutoPay is free.  # noqa: E501

        :return: The first_autopay_free of this Contract.  # noqa: E501
        :rtype: bool
        """
        return self._first_autopay_free

    @first_autopay_free.setter
    def first_autopay_free(self, first_autopay_free):
        """Sets the first_autopay_free of this Contract.

        When `true`, indicates that the first payment for the AutoPay is free.  # noqa: E501

        :param first_autopay_free: The first_autopay_free of this Contract.  # noqa: E501
        :type: bool
        """

        self._first_autopay_free = first_autopay_free

    @property
    def last_autopay_free(self):
        """Gets the last_autopay_free of this Contract.  # noqa: E501

        When `true`, indicates that the last payment for the AutoPay is free.  # noqa: E501

        :return: The last_autopay_free of this Contract.  # noqa: E501
        :rtype: bool
        """
        return self._last_autopay_free

    @last_autopay_free.setter
    def last_autopay_free(self, last_autopay_free):
        """Sets the last_autopay_free of this Contract.

        When `true`, indicates that the last payment for the AutoPay is free.  # noqa: E501

        :param last_autopay_free: The last_autopay_free of this Contract.  # noqa: E501
        :type: bool
        """

        self._last_autopay_free = last_autopay_free

    @property
    def client_terminate_online(self):
        """Gets the client_terminate_online of this Contract.  # noqa: E501

        When `true`, indicates that the client can terminate this contract on the Internet.  # noqa: E501

        :return: The client_terminate_online of this Contract.  # noqa: E501
        :rtype: bool
        """
        return self._client_terminate_online

    @client_terminate_online.setter
    def client_terminate_online(self, client_terminate_online):
        """Sets the client_terminate_online of this Contract.

        When `true`, indicates that the client can terminate this contract on the Internet.  # noqa: E501

        :param client_terminate_online: The client_terminate_online of this Contract.  # noqa: E501
        :type: bool
        """

        self._client_terminate_online = client_terminate_online

    @property
    def membership_type_restrictions(self):
        """Gets the membership_type_restrictions of this Contract.  # noqa: E501

        Contains information about the memberships that can purchase this contract. If null, then no membership restrictions exist, and anyone can purchase the contract.  # noqa: E501

        :return: The membership_type_restrictions of this Contract.  # noqa: E501
        :rtype: list[MembershipTypeRestriction]
        """
        return self._membership_type_restrictions

    @membership_type_restrictions.setter
    def membership_type_restrictions(self, membership_type_restrictions):
        """Sets the membership_type_restrictions of this Contract.

        Contains information about the memberships that can purchase this contract. If null, then no membership restrictions exist, and anyone can purchase the contract.  # noqa: E501

        :param membership_type_restrictions: The membership_type_restrictions of this Contract.  # noqa: E501
        :type: list[MembershipTypeRestriction]
        """

        self._membership_type_restrictions = membership_type_restrictions

    @property
    def location_purchase_restriction_ids(self):
        """Gets the location_purchase_restriction_ids of this Contract.  # noqa: E501

        The IDs of the locations where this contract may be sold. If there are no restrictions, this value is null.  # noqa: E501

        :return: The location_purchase_restriction_ids of this Contract.  # noqa: E501
        :rtype: list[int]
        """
        return self._location_purchase_restriction_ids

    @location_purchase_restriction_ids.setter
    def location_purchase_restriction_ids(self, location_purchase_restriction_ids):
        """Sets the location_purchase_restriction_ids of this Contract.

        The IDs of the locations where this contract may be sold. If there are no restrictions, this value is null.  # noqa: E501

        :param location_purchase_restriction_ids: The location_purchase_restriction_ids of this Contract.  # noqa: E501
        :type: list[int]
        """

        self._location_purchase_restriction_ids = location_purchase_restriction_ids

    @property
    def location_purchase_restriction_names(self):
        """Gets the location_purchase_restriction_names of this Contract.  # noqa: E501

        Location names where the contract may be purchased. If this value is null, there are no restrictions.  # noqa: E501

        :return: The location_purchase_restriction_names of this Contract.  # noqa: E501
        :rtype: list[str]
        """
        return self._location_purchase_restriction_names

    @location_purchase_restriction_names.setter
    def location_purchase_restriction_names(self, location_purchase_restriction_names):
        """Sets the location_purchase_restriction_names of this Contract.

        Location names where the contract may be purchased. If this value is null, there are no restrictions.  # noqa: E501

        :param location_purchase_restriction_names: The location_purchase_restriction_names of this Contract.  # noqa: E501
        :type: list[str]
        """

        self._location_purchase_restriction_names = location_purchase_restriction_names

    @property
    def agreement_terms(self):
        """Gets the agreement_terms of this Contract.  # noqa: E501

        Business-defined terms and conditions for the contract.  # noqa: E501

        :return: The agreement_terms of this Contract.  # noqa: E501
        :rtype: str
        """
        return self._agreement_terms

    @agreement_terms.setter
    def agreement_terms(self, agreement_terms):
        """Sets the agreement_terms of this Contract.

        Business-defined terms and conditions for the contract.  # noqa: E501

        :param agreement_terms: The agreement_terms of this Contract.  # noqa: E501
        :type: str
        """

        self._agreement_terms = agreement_terms

    @property
    def requires_electronic_confirmation(self):
        """Gets the requires_electronic_confirmation of this Contract.  # noqa: E501

        When `true`, clients who purchase the contract are prompted to agree to the terms of the contract the next time that they log in.  # noqa: E501

        :return: The requires_electronic_confirmation of this Contract.  # noqa: E501
        :rtype: bool
        """
        return self._requires_electronic_confirmation

    @requires_electronic_confirmation.setter
    def requires_electronic_confirmation(self, requires_electronic_confirmation):
        """Sets the requires_electronic_confirmation of this Contract.

        When `true`, clients who purchase the contract are prompted to agree to the terms of the contract the next time that they log in.  # noqa: E501

        :param requires_electronic_confirmation: The requires_electronic_confirmation of this Contract.  # noqa: E501
        :type: bool
        """

        self._requires_electronic_confirmation = requires_electronic_confirmation

    @property
    def autopay_enabled(self):
        """Gets the autopay_enabled of this Contract.  # noqa: E501

        When `true`, this contract establishes an AutoPay on the client’s account.  # noqa: E501

        :return: The autopay_enabled of this Contract.  # noqa: E501
        :rtype: bool
        """
        return self._autopay_enabled

    @autopay_enabled.setter
    def autopay_enabled(self, autopay_enabled):
        """Sets the autopay_enabled of this Contract.

        When `true`, this contract establishes an AutoPay on the client’s account.  # noqa: E501

        :param autopay_enabled: The autopay_enabled of this Contract.  # noqa: E501
        :type: bool
        """

        self._autopay_enabled = autopay_enabled

    @property
    def first_payment_amount_subtotal(self):
        """Gets the first_payment_amount_subtotal of this Contract.  # noqa: E501

        The subtotal of the amount that the client is to be charged when signing up for the contract.  # noqa: E501

        :return: The first_payment_amount_subtotal of this Contract.  # noqa: E501
        :rtype: float
        """
        return self._first_payment_amount_subtotal

    @first_payment_amount_subtotal.setter
    def first_payment_amount_subtotal(self, first_payment_amount_subtotal):
        """Sets the first_payment_amount_subtotal of this Contract.

        The subtotal of the amount that the client is to be charged when signing up for the contract.  # noqa: E501

        :param first_payment_amount_subtotal: The first_payment_amount_subtotal of this Contract.  # noqa: E501
        :type: float
        """

        self._first_payment_amount_subtotal = first_payment_amount_subtotal

    @property
    def first_payment_amount_tax(self):
        """Gets the first_payment_amount_tax of this Contract.  # noqa: E501

        The amount of tax that the client is to be charged when signing up for the contract.  # noqa: E501

        :return: The first_payment_amount_tax of this Contract.  # noqa: E501
        :rtype: float
        """
        return self._first_payment_amount_tax

    @first_payment_amount_tax.setter
    def first_payment_amount_tax(self, first_payment_amount_tax):
        """Sets the first_payment_amount_tax of this Contract.

        The amount of tax that the client is to be charged when signing up for the contract.  # noqa: E501

        :param first_payment_amount_tax: The first_payment_amount_tax of this Contract.  # noqa: E501
        :type: float
        """

        self._first_payment_amount_tax = first_payment_amount_tax

    @property
    def first_payment_amount_total(self):
        """Gets the first_payment_amount_total of this Contract.  # noqa: E501

        The total amount that the client is to be charged when signing up for the contract.  # noqa: E501

        :return: The first_payment_amount_total of this Contract.  # noqa: E501
        :rtype: float
        """
        return self._first_payment_amount_total

    @first_payment_amount_total.setter
    def first_payment_amount_total(self, first_payment_amount_total):
        """Sets the first_payment_amount_total of this Contract.

        The total amount that the client is to be charged when signing up for the contract.  # noqa: E501

        :param first_payment_amount_total: The first_payment_amount_total of this Contract.  # noqa: E501
        :type: float
        """

        self._first_payment_amount_total = first_payment_amount_total

    @property
    def recurring_payment_amount_subtotal(self):
        """Gets the recurring_payment_amount_subtotal of this Contract.  # noqa: E501

        The subtotal amount that the client is to be charged on an ongoing basis.  # noqa: E501

        :return: The recurring_payment_amount_subtotal of this Contract.  # noqa: E501
        :rtype: float
        """
        return self._recurring_payment_amount_subtotal

    @recurring_payment_amount_subtotal.setter
    def recurring_payment_amount_subtotal(self, recurring_payment_amount_subtotal):
        """Sets the recurring_payment_amount_subtotal of this Contract.

        The subtotal amount that the client is to be charged on an ongoing basis.  # noqa: E501

        :param recurring_payment_amount_subtotal: The recurring_payment_amount_subtotal of this Contract.  # noqa: E501
        :type: float
        """

        self._recurring_payment_amount_subtotal = recurring_payment_amount_subtotal

    @property
    def recurring_payment_amount_tax(self):
        """Gets the recurring_payment_amount_tax of this Contract.  # noqa: E501

        The amount of tax the client is to be charged on an ongoing basis.  # noqa: E501

        :return: The recurring_payment_amount_tax of this Contract.  # noqa: E501
        :rtype: float
        """
        return self._recurring_payment_amount_tax

    @recurring_payment_amount_tax.setter
    def recurring_payment_amount_tax(self, recurring_payment_amount_tax):
        """Sets the recurring_payment_amount_tax of this Contract.

        The amount of tax the client is to be charged on an ongoing basis.  # noqa: E501

        :param recurring_payment_amount_tax: The recurring_payment_amount_tax of this Contract.  # noqa: E501
        :type: float
        """

        self._recurring_payment_amount_tax = recurring_payment_amount_tax

    @property
    def recurring_payment_amount_total(self):
        """Gets the recurring_payment_amount_total of this Contract.  # noqa: E501

        The total amount that the client is to be charged on an ongoing basis.  # noqa: E501

        :return: The recurring_payment_amount_total of this Contract.  # noqa: E501
        :rtype: float
        """
        return self._recurring_payment_amount_total

    @recurring_payment_amount_total.setter
    def recurring_payment_amount_total(self, recurring_payment_amount_total):
        """Sets the recurring_payment_amount_total of this Contract.

        The total amount that the client is to be charged on an ongoing basis.  # noqa: E501

        :param recurring_payment_amount_total: The recurring_payment_amount_total of this Contract.  # noqa: E501
        :type: float
        """

        self._recurring_payment_amount_total = recurring_payment_amount_total

    @property
    def total_contract_amount_subtotal(self):
        """Gets the total_contract_amount_subtotal of this Contract.  # noqa: E501

        The subtotal amount that the client is to be charged over the lifespan of the contract.  # noqa: E501

        :return: The total_contract_amount_subtotal of this Contract.  # noqa: E501
        :rtype: float
        """
        return self._total_contract_amount_subtotal

    @total_contract_amount_subtotal.setter
    def total_contract_amount_subtotal(self, total_contract_amount_subtotal):
        """Sets the total_contract_amount_subtotal of this Contract.

        The subtotal amount that the client is to be charged over the lifespan of the contract.  # noqa: E501

        :param total_contract_amount_subtotal: The total_contract_amount_subtotal of this Contract.  # noqa: E501
        :type: float
        """

        self._total_contract_amount_subtotal = total_contract_amount_subtotal

    @property
    def total_contract_amount_tax(self):
        """Gets the total_contract_amount_tax of this Contract.  # noqa: E501

        The total amount of tax the client is to be charged over the lifespan of the contract.  # noqa: E501

        :return: The total_contract_amount_tax of this Contract.  # noqa: E501
        :rtype: float
        """
        return self._total_contract_amount_tax

    @total_contract_amount_tax.setter
    def total_contract_amount_tax(self, total_contract_amount_tax):
        """Sets the total_contract_amount_tax of this Contract.

        The total amount of tax the client is to be charged over the lifespan of the contract.  # noqa: E501

        :param total_contract_amount_tax: The total_contract_amount_tax of this Contract.  # noqa: E501
        :type: float
        """

        self._total_contract_amount_tax = total_contract_amount_tax

    @property
    def total_contract_amount_total(self):
        """Gets the total_contract_amount_total of this Contract.  # noqa: E501

        The total amount the client is to be charged over the lifespan of the contract.  # noqa: E501

        :return: The total_contract_amount_total of this Contract.  # noqa: E501
        :rtype: float
        """
        return self._total_contract_amount_total

    @total_contract_amount_total.setter
    def total_contract_amount_total(self, total_contract_amount_total):
        """Sets the total_contract_amount_total of this Contract.

        The total amount the client is to be charged over the lifespan of the contract.  # noqa: E501

        :param total_contract_amount_total: The total_contract_amount_total of this Contract.  # noqa: E501
        :type: float
        """

        self._total_contract_amount_total = total_contract_amount_total

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Contract, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Contract):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
