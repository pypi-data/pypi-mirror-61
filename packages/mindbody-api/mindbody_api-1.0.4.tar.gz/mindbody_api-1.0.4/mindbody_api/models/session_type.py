# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SessionType(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'default_time_length': 'int',
        'id': 'int',
        'name': 'str',
        'num_deducted': 'int',
        'program_id': 'int',
        'category': 'str',
        'category_id': 'int',
        'subcategory': 'str',
        'subcategory_id': 'int'
    }

    attribute_map = {
        'type': 'Type',
        'default_time_length': 'DefaultTimeLength',
        'id': 'Id',
        'name': 'Name',
        'num_deducted': 'NumDeducted',
        'program_id': 'ProgramId',
        'category': 'Category',
        'category_id': 'CategoryId',
        'subcategory': 'Subcategory',
        'subcategory_id': 'SubcategoryId'
    }

    def __init__(self, type=None, default_time_length=None, id=None, name=None, num_deducted=None, program_id=None, category=None, category_id=None, subcategory=None, subcategory_id=None):  # noqa: E501
        """SessionType - a model defined in Swagger"""  # noqa: E501

        self._type = None
        self._default_time_length = None
        self._id = None
        self._name = None
        self._num_deducted = None
        self._program_id = None
        self._category = None
        self._category_id = None
        self._subcategory = None
        self._subcategory_id = None
        self.discriminator = None

        if type is not None:
            self.type = type
        if default_time_length is not None:
            self.default_time_length = default_time_length
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if num_deducted is not None:
            self.num_deducted = num_deducted
        if program_id is not None:
            self.program_id = program_id
        if category is not None:
            self.category = category
        if category_id is not None:
            self.category_id = category_id
        if subcategory is not None:
            self.subcategory = subcategory
        if subcategory_id is not None:
            self.subcategory_id = subcategory_id

    @property
    def type(self):
        """Gets the type of this SessionType.  # noqa: E501

        Contains the class description session type.  # noqa: E501

        :return: The type of this SessionType.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this SessionType.

        Contains the class description session type.  # noqa: E501

        :param type: The type of this SessionType.  # noqa: E501
        :type: str
        """
        allowed_values = ["All", "Class", "Enrollment", "Appointment", "Resource", "Media", "Arrival"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def default_time_length(self):
        """Gets the default_time_length of this SessionType.  # noqa: E501

        The default amount of time that a session of this type typically lasts.  # noqa: E501

        :return: The default_time_length of this SessionType.  # noqa: E501
        :rtype: int
        """
        return self._default_time_length

    @default_time_length.setter
    def default_time_length(self, default_time_length):
        """Sets the default_time_length of this SessionType.

        The default amount of time that a session of this type typically lasts.  # noqa: E501

        :param default_time_length: The default_time_length of this SessionType.  # noqa: E501
        :type: int
        """

        self._default_time_length = default_time_length

    @property
    def id(self):
        """Gets the id of this SessionType.  # noqa: E501

        This session type’s unique ID.  # noqa: E501

        :return: The id of this SessionType.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SessionType.

        This session type’s unique ID.  # noqa: E501

        :param id: The id of this SessionType.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this SessionType.  # noqa: E501

        The name of this session type.  # noqa: E501

        :return: The name of this SessionType.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SessionType.

        The name of this session type.  # noqa: E501

        :param name: The name of this SessionType.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def num_deducted(self):
        """Gets the num_deducted of this SessionType.  # noqa: E501

        The number of sessions that this session type deducts from the pricing option used to pay for this type of session.  # noqa: E501

        :return: The num_deducted of this SessionType.  # noqa: E501
        :rtype: int
        """
        return self._num_deducted

    @num_deducted.setter
    def num_deducted(self, num_deducted):
        """Sets the num_deducted of this SessionType.

        The number of sessions that this session type deducts from the pricing option used to pay for this type of session.  # noqa: E501

        :param num_deducted: The num_deducted of this SessionType.  # noqa: E501
        :type: int
        """

        self._num_deducted = num_deducted

    @property
    def program_id(self):
        """Gets the program_id of this SessionType.  # noqa: E501

        This session type’s service category ID.  # noqa: E501

        :return: The program_id of this SessionType.  # noqa: E501
        :rtype: int
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id):
        """Sets the program_id of this SessionType.

        This session type’s service category ID.  # noqa: E501

        :param program_id: The program_id of this SessionType.  # noqa: E501
        :type: int
        """

        self._program_id = program_id

    @property
    def category(self):
        """Gets the category of this SessionType.  # noqa: E501

        This session type’s category.  # noqa: E501

        :return: The category of this SessionType.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SessionType.

        This session type’s category.  # noqa: E501

        :param category: The category of this SessionType.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def category_id(self):
        """Gets the category_id of this SessionType.  # noqa: E501

        This session type’s category ID.  # noqa: E501

        :return: The category_id of this SessionType.  # noqa: E501
        :rtype: int
        """
        return self._category_id

    @category_id.setter
    def category_id(self, category_id):
        """Sets the category_id of this SessionType.

        This session type’s category ID.  # noqa: E501

        :param category_id: The category_id of this SessionType.  # noqa: E501
        :type: int
        """

        self._category_id = category_id

    @property
    def subcategory(self):
        """Gets the subcategory of this SessionType.  # noqa: E501

        This session type’s subcategory.  # noqa: E501

        :return: The subcategory of this SessionType.  # noqa: E501
        :rtype: str
        """
        return self._subcategory

    @subcategory.setter
    def subcategory(self, subcategory):
        """Sets the subcategory of this SessionType.

        This session type’s subcategory.  # noqa: E501

        :param subcategory: The subcategory of this SessionType.  # noqa: E501
        :type: str
        """

        self._subcategory = subcategory

    @property
    def subcategory_id(self):
        """Gets the subcategory_id of this SessionType.  # noqa: E501

        This session type’s subcategory ID.  # noqa: E501

        :return: The subcategory_id of this SessionType.  # noqa: E501
        :rtype: int
        """
        return self._subcategory_id

    @subcategory_id.setter
    def subcategory_id(self, subcategory_id):
        """Sets the subcategory_id of this SessionType.

        This session type’s subcategory ID.  # noqa: E501

        :param subcategory_id: The subcategory_id of this SessionType.  # noqa: E501
        :type: int
        """

        self._subcategory_id = subcategory_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SessionType, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SessionType):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
