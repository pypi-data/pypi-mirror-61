# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AutopaySchedule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'frequency_type': 'str',
        'frequency_value': 'int',
        'frequency_time_unit': 'str'
    }

    attribute_map = {
        'frequency_type': 'FrequencyType',
        'frequency_value': 'FrequencyValue',
        'frequency_time_unit': 'FrequencyTimeUnit'
    }

    def __init__(self, frequency_type=None, frequency_value=None, frequency_time_unit=None):  # noqa: E501
        """AutopaySchedule - a model defined in Swagger"""  # noqa: E501

        self._frequency_type = None
        self._frequency_value = None
        self._frequency_time_unit = None
        self.discriminator = None

        if frequency_type is not None:
            self.frequency_type = frequency_type
        if frequency_value is not None:
            self.frequency_value = frequency_value
        if frequency_time_unit is not None:
            self.frequency_time_unit = frequency_time_unit

    @property
    def frequency_type(self):
        """Gets the frequency_type of this AutopaySchedule.  # noqa: E501

        Defines how often clients are charged. Possible values are:  * SetNumberOfAutopays  * MonthToMonth  # noqa: E501

        :return: The frequency_type of this AutopaySchedule.  # noqa: E501
        :rtype: str
        """
        return self._frequency_type

    @frequency_type.setter
    def frequency_type(self, frequency_type):
        """Sets the frequency_type of this AutopaySchedule.

        Defines how often clients are charged. Possible values are:  * SetNumberOfAutopays  * MonthToMonth  # noqa: E501

        :param frequency_type: The frequency_type of this AutopaySchedule.  # noqa: E501
        :type: str
        """

        self._frequency_type = frequency_type

    @property
    def frequency_value(self):
        """Gets the frequency_value of this AutopaySchedule.  # noqa: E501

        The interval of AutoPay frequency, combined with `FrequencyTimeUnit`. This value is null if `FrequencyType` is `MonthToMonth`.  # noqa: E501

        :return: The frequency_value of this AutopaySchedule.  # noqa: E501
        :rtype: int
        """
        return self._frequency_value

    @frequency_value.setter
    def frequency_value(self, frequency_value):
        """Sets the frequency_value of this AutopaySchedule.

        The interval of AutoPay frequency, combined with `FrequencyTimeUnit`. This value is null if `FrequencyType` is `MonthToMonth`.  # noqa: E501

        :param frequency_value: The frequency_value of this AutopaySchedule.  # noqa: E501
        :type: int
        """

        self._frequency_value = frequency_value

    @property
    def frequency_time_unit(self):
        """Gets the frequency_time_unit of this AutopaySchedule.  # noqa: E501

        Defines the time unit that sets how often to run the AutoPay, combined with `FrequencyValue`. This value is null if `FrequencyType` is `MonthToMonth`. Possible values are:  * Weekly  * Monthly  * Yearly  # noqa: E501

        :return: The frequency_time_unit of this AutopaySchedule.  # noqa: E501
        :rtype: str
        """
        return self._frequency_time_unit

    @frequency_time_unit.setter
    def frequency_time_unit(self, frequency_time_unit):
        """Sets the frequency_time_unit of this AutopaySchedule.

        Defines the time unit that sets how often to run the AutoPay, combined with `FrequencyValue`. This value is null if `FrequencyType` is `MonthToMonth`. Possible values are:  * Weekly  * Monthly  * Yearly  # noqa: E501

        :param frequency_time_unit: The frequency_time_unit of this AutopaySchedule.  # noqa: E501
        :type: str
        """

        self._frequency_time_unit = frequency_time_unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AutopaySchedule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AutopaySchedule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
