# coding: utf-8

"""
    MINDBODY Public API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v6
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PurchaseGiftCardResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'barcode_id': 'str',
        'value': 'float',
        'amount_paid': 'float',
        'from_name': 'str',
        'layout_id': 'int',
        'email_receipt': 'bool',
        'purchaser_client_id': 'str',
        'purchaser_email': 'str',
        'recipient_email': 'str',
        'sale_id': 'int'
    }

    attribute_map = {
        'barcode_id': 'BarcodeId',
        'value': 'Value',
        'amount_paid': 'AmountPaid',
        'from_name': 'FromName',
        'layout_id': 'LayoutId',
        'email_receipt': 'EmailReceipt',
        'purchaser_client_id': 'PurchaserClientId',
        'purchaser_email': 'PurchaserEmail',
        'recipient_email': 'RecipientEmail',
        'sale_id': 'SaleId'
    }

    def __init__(self, barcode_id=None, value=None, amount_paid=None, from_name=None, layout_id=None, email_receipt=None, purchaser_client_id=None, purchaser_email=None, recipient_email=None, sale_id=None):  # noqa: E501
        """PurchaseGiftCardResponse - a model defined in Swagger"""  # noqa: E501

        self._barcode_id = None
        self._value = None
        self._amount_paid = None
        self._from_name = None
        self._layout_id = None
        self._email_receipt = None
        self._purchaser_client_id = None
        self._purchaser_email = None
        self._recipient_email = None
        self._sale_id = None
        self.discriminator = None

        if barcode_id is not None:
            self.barcode_id = barcode_id
        if value is not None:
            self.value = value
        if amount_paid is not None:
            self.amount_paid = amount_paid
        if from_name is not None:
            self.from_name = from_name
        if layout_id is not None:
            self.layout_id = layout_id
        if email_receipt is not None:
            self.email_receipt = email_receipt
        if purchaser_client_id is not None:
            self.purchaser_client_id = purchaser_client_id
        if purchaser_email is not None:
            self.purchaser_email = purchaser_email
        if recipient_email is not None:
            self.recipient_email = recipient_email
        if sale_id is not None:
            self.sale_id = sale_id

    @property
    def barcode_id(self):
        """Gets the barcode_id of this PurchaseGiftCardResponse.  # noqa: E501

        The barcode ID assigned to the purchased gift card.  # noqa: E501

        :return: The barcode_id of this PurchaseGiftCardResponse.  # noqa: E501
        :rtype: str
        """
        return self._barcode_id

    @barcode_id.setter
    def barcode_id(self, barcode_id):
        """Sets the barcode_id of this PurchaseGiftCardResponse.

        The barcode ID assigned to the purchased gift card.  # noqa: E501

        :param barcode_id: The barcode_id of this PurchaseGiftCardResponse.  # noqa: E501
        :type: str
        """

        self._barcode_id = barcode_id

    @property
    def value(self):
        """Gets the value of this PurchaseGiftCardResponse.  # noqa: E501

        The monetary value of the gift card.  # noqa: E501

        :return: The value of this PurchaseGiftCardResponse.  # noqa: E501
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PurchaseGiftCardResponse.

        The monetary value of the gift card.  # noqa: E501

        :param value: The value of this PurchaseGiftCardResponse.  # noqa: E501
        :type: float
        """

        self._value = value

    @property
    def amount_paid(self):
        """Gets the amount_paid of this PurchaseGiftCardResponse.  # noqa: E501

        The amount paid for the gift card by the purchaser.  # noqa: E501

        :return: The amount_paid of this PurchaseGiftCardResponse.  # noqa: E501
        :rtype: float
        """
        return self._amount_paid

    @amount_paid.setter
    def amount_paid(self, amount_paid):
        """Sets the amount_paid of this PurchaseGiftCardResponse.

        The amount paid for the gift card by the purchaser.  # noqa: E501

        :param amount_paid: The amount_paid of this PurchaseGiftCardResponse.  # noqa: E501
        :type: float
        """

        self._amount_paid = amount_paid

    @property
    def from_name(self):
        """Gets the from_name of this PurchaseGiftCardResponse.  # noqa: E501

        The name of the purchaser.  # noqa: E501

        :return: The from_name of this PurchaseGiftCardResponse.  # noqa: E501
        :rtype: str
        """
        return self._from_name

    @from_name.setter
    def from_name(self, from_name):
        """Sets the from_name of this PurchaseGiftCardResponse.

        The name of the purchaser.  # noqa: E501

        :param from_name: The from_name of this PurchaseGiftCardResponse.  # noqa: E501
        :type: str
        """

        self._from_name = from_name

    @property
    def layout_id(self):
        """Gets the layout_id of this PurchaseGiftCardResponse.  # noqa: E501

        The ID of the layout used for this gift card.  # noqa: E501

        :return: The layout_id of this PurchaseGiftCardResponse.  # noqa: E501
        :rtype: int
        """
        return self._layout_id

    @layout_id.setter
    def layout_id(self, layout_id):
        """Sets the layout_id of this PurchaseGiftCardResponse.

        The ID of the layout used for this gift card.  # noqa: E501

        :param layout_id: The layout_id of this PurchaseGiftCardResponse.  # noqa: E501
        :type: int
        """

        self._layout_id = layout_id

    @property
    def email_receipt(self):
        """Gets the email_receipt of this PurchaseGiftCardResponse.  # noqa: E501

        Whether or not an email receipt was sent to the purchaser. If true, a receipt was sent.  # noqa: E501

        :return: The email_receipt of this PurchaseGiftCardResponse.  # noqa: E501
        :rtype: bool
        """
        return self._email_receipt

    @email_receipt.setter
    def email_receipt(self, email_receipt):
        """Sets the email_receipt of this PurchaseGiftCardResponse.

        Whether or not an email receipt was sent to the purchaser. If true, a receipt was sent.  # noqa: E501

        :param email_receipt: The email_receipt of this PurchaseGiftCardResponse.  # noqa: E501
        :type: bool
        """

        self._email_receipt = email_receipt

    @property
    def purchaser_client_id(self):
        """Gets the purchaser_client_id of this PurchaseGiftCardResponse.  # noqa: E501

        The client ID of the purchaser.  # noqa: E501

        :return: The purchaser_client_id of this PurchaseGiftCardResponse.  # noqa: E501
        :rtype: str
        """
        return self._purchaser_client_id

    @purchaser_client_id.setter
    def purchaser_client_id(self, purchaser_client_id):
        """Sets the purchaser_client_id of this PurchaseGiftCardResponse.

        The client ID of the purchaser.  # noqa: E501

        :param purchaser_client_id: The purchaser_client_id of this PurchaseGiftCardResponse.  # noqa: E501
        :type: str
        """

        self._purchaser_client_id = purchaser_client_id

    @property
    def purchaser_email(self):
        """Gets the purchaser_email of this PurchaseGiftCardResponse.  # noqa: E501

        The purchaser’s email address.  # noqa: E501

        :return: The purchaser_email of this PurchaseGiftCardResponse.  # noqa: E501
        :rtype: str
        """
        return self._purchaser_email

    @purchaser_email.setter
    def purchaser_email(self, purchaser_email):
        """Sets the purchaser_email of this PurchaseGiftCardResponse.

        The purchaser’s email address.  # noqa: E501

        :param purchaser_email: The purchaser_email of this PurchaseGiftCardResponse.  # noqa: E501
        :type: str
        """

        self._purchaser_email = purchaser_email

    @property
    def recipient_email(self):
        """Gets the recipient_email of this PurchaseGiftCardResponse.  # noqa: E501

        The recipient’s email address.  # noqa: E501

        :return: The recipient_email of this PurchaseGiftCardResponse.  # noqa: E501
        :rtype: str
        """
        return self._recipient_email

    @recipient_email.setter
    def recipient_email(self, recipient_email):
        """Sets the recipient_email of this PurchaseGiftCardResponse.

        The recipient’s email address.  # noqa: E501

        :param recipient_email: The recipient_email of this PurchaseGiftCardResponse.  # noqa: E501
        :type: str
        """

        self._recipient_email = recipient_email

    @property
    def sale_id(self):
        """Gets the sale_id of this PurchaseGiftCardResponse.  # noqa: E501

        The sale ID of the gift card.  # noqa: E501

        :return: The sale_id of this PurchaseGiftCardResponse.  # noqa: E501
        :rtype: int
        """
        return self._sale_id

    @sale_id.setter
    def sale_id(self, sale_id):
        """Sets the sale_id of this PurchaseGiftCardResponse.

        The sale ID of the gift card.  # noqa: E501

        :param sale_id: The sale_id of this PurchaseGiftCardResponse.  # noqa: E501
        :type: int
        """

        self._sale_id = sale_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PurchaseGiftCardResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PurchaseGiftCardResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
