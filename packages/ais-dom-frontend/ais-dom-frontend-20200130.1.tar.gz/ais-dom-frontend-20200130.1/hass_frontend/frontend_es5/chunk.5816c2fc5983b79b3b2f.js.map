{"version":3,"sources":["webpack:///./src/components/ha-switch.ts","webpack:///./src/panels/config/ais_dom/ha-config-ais-dom-config-update.js"],"names":["MwcSwitch","customElements","get","_decorate","customElement","_initialize","_MwcSwitch","HaSwitch","_MwcSwitch2","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_getPrototypeOf","call","apply","concat","_assertThisInitialized","_inherits","F","d","kind","decorators","query","key","value","_get","prototype","style","setProperty","classList","toggle","Boolean","_slot","assignedNodes","html","_templateObject","ripple","interactionNode","_haChangeHandler","static","css","_templateObject2","e","mdcFoundation","handleChange","checked","formElement","HaConfigAisDomControl","PolymerElement","hass","Object","isWide","aisVersionInfo","type","String","computed","aisBackupInfo","aisAutoUpdateInfo","aisAutoUpdateIcon","aisAutoUpdatFullInfo","aisBackupFullInfo","aisButtonVersionCheckUpgrade","aisUpdateSystemData","say","autoUpdateMode","validating","backupStep","validateLog","backupInfo","backupError","restoreInfo","restoreError","isBackupValid","callService","step","versionInfo","states","versionInfoAttr","attributes","push","name","update_check_time","icon","getVersionName","update_status","getVersionIcon","dom_app_current_version","new_value","dom_app_newest_version","reinstall_dom_app","android_app_current_version","android_app_newest_version","reinstall_android_app","linux_apt_current_version","linux_apt_newest_version","reinstall_linux_apt","state","backupInfoAttr","backup_info","backup_error","restore_info","restore_error","file_name","file_size","status","retS","attr","currentStep","stepNumber","entity_id","callApi","then","result","valid","errors","password","shadowRoot","getElementById","define"],"mappings":"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","file":"chunk.5816c2fc5983b79b3b2f.js","sourcesContent":["import { customElement, CSSResult, css, query, html } from \"lit-element\";\nimport \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\n// tslint:disable-next-line\nimport { Switch } from \"@material/mwc-switch\";\nimport { Constructor } from \"../types\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive\";\n// tslint:disable-next-line\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div\n          class=\"mdc-switch__thumb-underlay\"\n          .ripple=\"${ripple({\n            interactionNode: this,\n          })}\"\n        >\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._haChangeHandler}\"\n            />\n          </div>\n        </div>\n      </div>\n      <label for=\"basic-switch\"><slot></slot></label>\n    `;\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n\n  private _haChangeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","import \"@polymer/app-layout/app-header/app-header\";\nimport \"@polymer/app-layout/app-toolbar/app-toolbar\";\nimport { html } from \"@polymer/polymer/lib/utils/html-tag\";\nimport { PolymerElement } from \"@polymer/polymer/polymer-element\";\n\nimport \"../../../layouts/hass-subpage\";\nimport \"../../../resources/ha-style\";\n\nimport \"./ha-config-ais-dom-navigation\";\nimport \"../../../components/ha-switch\";\n\n/*\n *\n */\nclass HaConfigAisDomControl extends PolymerElement {\n  static get template() {\n    return html`\n      <style include=\"iron-flex ha-style\">\n        .content {\n          padding-bottom: 32px;\n        }\n        .border {\n          margin: 32px auto 0;\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n          max-width: 1040px;\n        }\n        .narrow .border {\n          max-width: 640px;\n        }\n        .center-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          height: 70px;\n        }\n        table {\n          width: 100%;\n        }\n\n        td:first-child {\n          width: 33%;\n        }\n\n        .validate-container {\n          @apply --layout-vertical;\n          @apply --layout-center-center;\n          min-height: 140px;\n        }\n\n        .validate-result {\n          color: var(--google-green-500);\n          font-weight: 500;\n        }\n\n        .config-invalid .text {\n          color: var(--google-red-500);\n          font-weight: 500;\n        }\n\n        .config-invalid {\n          text-align: center;\n          margin-top: 20px;\n        }\n\n        .validate-log {\n          white-space: pre-wrap;\n          direction: ltr;\n        }\n      </style>\n\n      <hass-subpage header=\"Konfiguracja bramki AIS dom\">\n        <div class$=\"[[computeClasses(isWide)]]\">\n          <ha-config-section is-wide=\"[[isWide]]\">\n            <span slot=\"header\">Oprogramowanie bramki</span>\n            <span slot=\"introduction\"\n              >Możesz zaktualizować system do najnowszej wersji, wykonać kopię\n              zapasową ustawień i zsynchronizować bramkę z Portalem\n              Integratora</span\n            >\n            <ha-card header=\"Wersja systemu Asystent domowy\">\n              <div class=\"card-content\">\n                [[aisVersionInfo]]\n                <div>\n                  <div style=\"margin-top:30px;\" id=\"ha-switch-id\">\n                    <ha-switch\n                      checked=\"{{autoUpdateMode}}\"\n                      on-change=\"changeAutoUpdateMode\"\n                      style=\"position: absolute; right: 20px;\"\n                    ></ha-switch\n                    ><span\n                      ><h3>\n                        Autoaktualizacja\n                        <iron-icon icon=\"[[aisAutoUpdateIcon]]\"></iron-icon></h3\n                    ></span>\n                  </div>\n                </div>\n\n                <div style=\"display: inline-block;\">\n                  <div>\n                    [[aisAutoUpdateInfo]]\n                  </div>\n                  <div style=\"margin-top: 15px;\">\n                    Aktualizacje dostarczają najnowsze funkcjonalności oraz\n                    poprawki zapewniające bezpieczeństwo i stabilność działania\n                    systemu.\n                    <table style=\"margin-top: 10px;\">\n                      <template\n                        is=\"dom-repeat\"\n                        items=\"[[aisAutoUpdatFullInfo]]\"\n                      >\n                        <tr>\n                          <td>[[item.name]]</td>\n                          <td>[[item.value]]</td>\n                          <td>[[item.new_value]]</td>\n                          <td><iron-icon icon=\"[[item.icon]]\"></iron-icon></td>\n                        </tr>\n                      </template>\n                    </table>\n                  </div>\n                </div>\n                <div class=\"center-container\">\n                  <ha-call-service-button\n                    class=\"warning\"\n                    hass=\"[[hass]]\"\n                    domain=\"ais_updater\"\n                    service=\"execute_upgrade\"\n                    service-data=\"[[aisUpdateSystemData]]\"\n                    >[[aisButtonVersionCheckUpgrade]]\n                  </ha-call-service-button>\n                </div>\n              </div>\n            </ha-card>\n\n            <ha-card header=\"Kopia konfiguracji Bramki\">\n              <div class=\"card-content\">\n                W tym miejscu możesz, sprawdzić poprawność ustawień bramki,\n                wykonać jej kopię i przesłać ją do portalu integratora. <b>Uwaga,\n                ponieważ konfiguracja może zawierać hasła i tokeny dostępu do\n                usług, zalecamy zaszyfrować ją hasłem</b>. Gdy kopia jest\n                zabezpieczona hasłem, to można ją otworzyć/przywrócić tylko po\n                podaniu hasła.\n                <h2>\n                  Nowa kopia ustawień\n                  <iron-icon icon=\"mdi:cloud-upload-outline\"></iron-icon>\n                </h2>\n                Przed wykonaniem nowej kopii ustawień sprawdź poprawność\n                konfiguracji\n                <div style=\"border-bottom: 1px solid white;\">\n                  <template is=\"dom-if\" if=\"[[!validateLog]]\">\n                    <div class=\"validate-container\">\n                      <div class=\"validate-result\" id=\"result\">\n                        [[backupInfo]]\n                      </div>\n                      <template is=\"dom-if\" if=\"[[!validating]]\">\n                        <div class=\"config-invalid\">\n                          <span class=\"text\">\n                            [[backupError]]\n                          </span>\n                        </div>\n                        <template\n                          is=\"dom-if\"\n                          if=\"[[_isEqualTo(backupStep, '1')]]\"\n                        >\n                          <paper-input\n                            placeholder=\"hasło\"\n                            no-label-float=\"\"\n                            type=\"password\"\n                            id=\"password1\"\n                          ></paper-input>\n                        </template>\n                        <mwc-button raised=\"\" on-click=\"doBackup\">\n                          <template\n                            is=\"dom-if\"\n                            if=\"[[_isEqualTo(backupStep, '0')]]\"\n                          >\n                            Sprawdź konfigurację\n                          </template>\n                          <template\n                            is=\"dom-if\"\n                            if=\"[[_isEqualTo(backupStep, '1')]]\"\n                          >\n                            Wykonaj kopie konfiguracji\n                          </template>\n                        </mwc-button>\n                      </template>\n                      <template is=\"dom-if\" if=\"[[validating]]\">\n                        <paper-spinner active=\"\"></paper-spinner>\n                      </template>\n                    </div>\n                  </template>\n                  <template is=\"dom-if\" if=\"[[validateLog]]\">\n                    <div class=\"config-invalid\">\n                      <mwc-button raised=\"\" on-click=\"doBackup\">\n                        Popraw i sprawdź ponownie\n                      </mwc-button>\n                    </div>\n                    <p></p>\n                    <div id=\"configLog\" class=\"validate-log\">\n                      [[validateLog]]\n                    </div>\n                  </template>\n                </div>\n\n                <template is=\"dom-if\" if=\"[[isBackupValid]]\">\n                  <h2>\n                    Przywracanie ustawień\n                    <iron-icon icon=\"mdi:backup-restore\"></iron-icon>\n                  </h2>\n                  <div class=\"validate-container\">\n                    <table style=\"margin-top: 40px; margin-bottom: 10px;\">\n                      <template is=\"dom-repeat\" items=\"[[aisBackupFullInfo]]\">\n                        <tr>\n                          <td>[[item.name]]</td>\n                          <td>[[item.value]]</td>\n                          <td>[[item.new_value]]</td>\n                          <td><iron-icon icon=\"[[item.icon]]\"></iron-icon></td>\n                        </tr>\n                      </template>\n                    </table>\n                      <div class=\"validate-container\">\n                        <div class=\"validate-result\" id=\"result\">\n                          [[restoreInfo]]\n                        </div>\n                        <template is=\"dom-if\" if=\"[[!validating]]\">\n                        <div class=\"config-invalid\">\n                          <span class=\"text\">\n                            [[restoreError]]\n                          </span>\n                        </div>\n                        <paper-input\n                          placeholder=\"hasło\"\n                          no-label-float=\"\"\n                          type=\"password\"\n                          id=\"password2\"\n                        ></paper-input>\n                        <mwc-button raised=\"\" on-click=\"restoreBackup\">\n                          Przywróć konfigurację z kopii\n                        </mwc-button>\n                      </div>\n                    </template>\n                    <template is=\"dom-if\" if=\"[[validating]]\">\n                      <paper-spinner active=\"\"></paper-spinner>\n                    </template>\n                  </div>\n                </template>\n              </div>\n            </ha-card>\n\n            <ha-card header=\"Synchronizacja z Portalem Integratora\">\n              <div class=\"card-content\">\n                Jeśli ostatnio wprowadzałeś zmiany w Portalu Integratora, takie\n                jak dodanie nowych typów audio czy też dostęp do zewnętrznych\n                serwisów, to przyciskiem poniżej możesz uruchomić natychmiastowe\n                pobranie tych zmian na bramkę bez czekania na automatyczną\n                synchronizację.\n                <div class=\"center-container\">\n                  <ha-call-service-button\n                    class=\"warning\"\n                    hass=\"[[hass]]\"\n                    domain=\"script\"\n                    service=\"ais_cloud_sync\"\n                    >Synchronizuj z Portalem Integratora\n                  </ha-call-service-button>\n                </div>\n              </div>\n            </ha-card>\n          </ha-config-section>\n        </div>\n      </hass-subpage>\n    `;\n  }\n\n  static get properties() {\n    return {\n      hass: Object,\n      isWide: Boolean,\n      aisVersionInfo: {\n        type: String,\n        computed: \"_computeAisVersionInfo(hass)\",\n      },\n      aisBackupInfo: {\n        type: String,\n        computed: \"_computeAisBackupInfo(hass)\",\n      },\n      aisAutoUpdateInfo: { type: String },\n      aisAutoUpdateIcon: { type: String },\n      aisAutoUpdatFullInfo: {\n        type: Array,\n        value: [],\n      },\n      aisBackupFullInfo: {\n        type: Array,\n        value: [],\n      },\n      aisButtonVersionCheckUpgrade: {\n        type: String,\n        computed: \"_computeAisButtonVersionCheckUpgrade(hass)\",\n      },\n      aisUpdateSystemData: {\n        type: Object,\n        value: { say: true },\n      },\n      autoUpdateMode: {\n        type: Boolean,\n        computed: \"_computeAutoUpdateMode(hass)\",\n      },\n      validating: {\n        type: Boolean,\n        value: false,\n      },\n      backupStep: {\n        type: String,\n        value: \"0\",\n        computed: \"_computeAisBackupStep(hass)\",\n      },\n      validateLog: {\n        type: String,\n        value: \"\",\n      },\n      backupInfo: {\n        type: String,\n        value: \"\",\n      },\n      backupError: {\n        type: String,\n        value: \"\",\n      },\n      restoreInfo: {\n        type: String,\n        value: \"\",\n      },\n      restoreError: {\n        type: String,\n        value: \"\",\n      },\n      isBackupValid: {\n        type: Boolean,\n        value: null,\n      },\n    };\n  }\n\n  ready() {\n    super.ready();\n    this.hass.callService(\"ais_cloud\", \"set_backup_step\", {\n      step: \"0\",\n    });\n    this.hass.callService(\"ais_cloud\", \"get_backup_info\");\n  }\n\n  computeClasses(isWide) {\n    return isWide ? \"content\" : \"content narrow\";\n  }\n\n  _computeAisVersionInfo(hass) {\n    var versionInfo = hass.states[\"sensor.version_info\"];\n    var versionInfoAttr = versionInfo.attributes;\n    this.aisAutoUpdatFullInfo = [];\n\n    if (\"update_check_time\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Sprawdzono o\",\n        value: versionInfoAttr.update_check_time,\n        icon: \"\",\n      });\n    }\n\n    if (\"update_status\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Status\",\n        value: this.getVersionName(versionInfoAttr.update_status),\n        icon: this.getVersionIcon(versionInfoAttr.update_status),\n      });\n    }\n\n    if (\"dom_app_current_version\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Asystent domowy\",\n        value: versionInfoAttr.dom_app_current_version,\n        new_value: versionInfoAttr.dom_app_newest_version,\n        icon: versionInfoAttr.reinstall_dom_app ? \"hass:alert\" : \"hass:check\",\n      });\n    }\n    if (\"android_app_current_version\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Android\",\n        value: versionInfoAttr.android_app_current_version,\n        new_value: versionInfoAttr.android_app_newest_version,\n        icon: versionInfoAttr.reinstall_android_app\n          ? \"hass:alert\"\n          : \"hass:check\",\n      });\n    }\n    if (\"linux_apt_current_version\" in versionInfoAttr) {\n      this.aisAutoUpdatFullInfo.push({\n        name: \"Linux\",\n        value: versionInfoAttr.linux_apt_current_version,\n        new_value: versionInfoAttr.linux_apt_newest_version,\n        icon: versionInfoAttr.reinstall_linux_apt ? \"hass:alert\" : \"hass:check\",\n      });\n    }\n\n    return versionInfo.state;\n  }\n\n  _computeAisBackupStep(hass) {\n    var backupInfo = hass.states[\"sensor.aisbackupinfo\"];\n    if (backupInfo.state === \"0\") {\n      this.validating = false;\n    }\n    return backupInfo.state;\n  }\n\n  _computeAisBackupInfo(hass) {\n    var backupInfo = hass.states[\"sensor.aisbackupinfo\"];\n    var backupInfoAttr = backupInfo.attributes;\n    this.aisBackupFullInfo = [];\n    this.isBackupValid = false;\n    this.backupInfo = backupInfoAttr.backup_info;\n    this.backupError = backupInfoAttr.backup_error;\n    this.restoreInfo = backupInfoAttr.restore_info;\n    this.restoreError = backupInfoAttr.restore_error;\n    if (\"file_size\" in backupInfoAttr) {\n      this.isBackupValid = !!backupInfoAttr.file_name;\n      this.aisBackupFullInfo.push({\n        name: \"Kopia zapasowa\",\n        value: backupInfoAttr.file_name,\n        new_value: backupInfoAttr.file_size,\n        icon: \"mdi:check\",\n      });\n    }\n    return backupInfo.state;\n  }\n\n  getVersionName(status) {\n    var retS = status;\n    if (status === \"checking\") {\n      retS = \"Sprawdzanie\";\n    } else if (status === \"outdated\") {\n      retS = \"Nieaktualny\";\n    } else if (status === \"downloading\") {\n      retS = \"Pobieranie\";\n    } else if (status === \"installing\") {\n      retS = \"Instalowanie\";\n    } else if (status === \"updated\") {\n      retS = \"Aktualny\";\n    } else if (status === \"unknown\") {\n      retS = \"Nieznany\";\n    } else if (status === \"restart\") {\n      retS = \"Restartowanie\";\n    }\n    return retS;\n  }\n\n  getVersionIcon(status) {\n    var retS = \"\";\n    if (status === \"checking\") {\n      retS = \"mdi:cloud-sync\";\n    } else if (status === \"outdated\") {\n      retS = \"\";\n    } else if (status === \"downloading\") {\n      retS = \"mdi:progress-download\";\n    } else if (status === \"installing\") {\n      retS = \"mdi:progress-wrench\";\n    } else if (status === \"updated\") {\n      retS = \"mdi:emoticon-happy-outline\";\n    } else if (status === \"unknown\") {\n      retS = \"mdi:help-circle-outline\";\n    } else if (status === \"restart\") {\n      retS = \"mdi:restart-alert\";\n    }\n    return retS;\n  }\n\n  _computeAisButtonVersionCheckUpgrade(hass) {\n    var attr = hass.states[\"sensor.version_info\"].attributes;\n    if (\n      attr.reinstall_dom_app ||\n      attr.reinstall_android_app ||\n      attr.reinstall_linux_apt\n    ) {\n      if (attr.update_status === \"outdated\") {\n        return \"Zainstaluj teraz aktualizację\";\n      }\n      if (attr.update_status === \"unknown\") {\n        return \"Spróbuj ponownie\";\n      }\n      return \"Aktualizacja -> \" + this.getVersionName(attr.update_status);\n    }\n    return \"Sprawdź dostępność aktualizacji\";\n  }\n\n  _computeAutoUpdateMode(hass) {\n    if (hass.states[\"input_boolean.ais_auto_update\"].state === \"off\") {\n      this.aisAutoUpdateIcon = \"mdi:sync-off\";\n      this.aisAutoUpdateInfo =\n        \"Możesz aktualizować system samodzielnie w dogodnym dla Ciebie czasie lub włączyć aktualizację automatyczną.\";\n      return false;\n    }\n    this.aisAutoUpdateIcon = \"mdi:sync\";\n    this.aisAutoUpdateInfo =\n      \"Codziennie sprawdzimy i automatycznie zainstalujemy dostępne aktualizacje.\";\n    return true;\n  }\n\n  _isEqualTo(currentStep, stepNumber) {\n    return currentStep === stepNumber;\n  }\n\n  changeAutoUpdateMode() {\n    this.hass.callService(\"input_boolean\", \"toggle\", {\n      entity_id: \"input_boolean.ais_auto_update\",\n    });\n  }\n\n  doBackup() {\n    // 1. validation\n    if (this.backupStep === \"0\") {\n      this.validating = true;\n      this.validateLog = \"\";\n\n      this.hass.callApi(\"POST\", \"config/core/check_config\").then((result) => {\n        this.validating = false;\n        var valid = result.result === \"valid\" ? \"1\" : \"0\";\n        if (valid === \"0\") {\n          this.hass.callService(\"ais_cloud\", \"set_backup_step\", {\n            step: valid,\n            backup_error: \"Konfiguracja niepoprawna\",\n          });\n          this.validateLog = result.errors;\n        } else {\n          this.hass.callService(\"ais_cloud\", \"set_backup_step\", {\n            step: valid,\n            backup_info: \"Konfiguracja poprawna można wykonać kopię\",\n          });\n          this.validateLog = \"\";\n        }\n      });\n    } else {\n      // 2. backup and transfer\n      this.validating = true;\n      this.validateLog = \"\";\n      var password = this.shadowRoot.getElementById(\"password1\").value;\n      this.hass.callService(\"ais_cloud\", \"do_backup\", {\n        password: password,\n      });\n    }\n  }\n\n  restoreBackup() {\n    this.validating = true;\n    this.validateLog = \"\";\n    var password = this.shadowRoot.getElementById(\"password2\").value;\n    this.hass.callService(\"ais_cloud\", \"restore_backup\", {\n      password: password,\n    });\n  }\n}\n\ncustomElements.define(\"ha-config-ais-dom-config-update\", HaConfigAisDomControl);\n"],"sourceRoot":""}