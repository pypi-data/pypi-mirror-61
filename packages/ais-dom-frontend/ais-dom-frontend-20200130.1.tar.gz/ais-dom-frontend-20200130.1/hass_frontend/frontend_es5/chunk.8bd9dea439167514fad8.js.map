{"version":3,"sources":["webpack:///./src/components/ha-switch.ts","webpack:///./src/components/dialog/ha-iron-focusables-helper.js","webpack:///./src/components/dialog/ha-paper-dialog.ts","webpack:///./src/dialogs/config-entry-system-options/dialog-config-entry-system-options.ts"],"names":["MwcSwitch","customElements","get","_decorate","customElement","_initialize","_MwcSwitch","HaSwitch","_MwcSwitch2","_getPrototypeOf2","_this","_classCallCheck","this","_len","arguments","length","args","Array","_key","_getPrototypeOf","call","apply","concat","_assertThisInitialized","_inherits","F","d","kind","decorators","query","key","value","_get","prototype","style","setProperty","classList","toggle","Boolean","_slot","assignedNodes","html","_templateObject","ripple","interactionNode","_haChangeHandler","static","css","_templateObject2","e","mdcFoundation","handleChange","checked","formElement","HaIronFocusablesHelper","getTabbableNodes","node","result","_collectTabbableNodes","IronFocusablesHelper","_sortByTabIndex","nodeType","Node","ELEMENT_NODE","_isVisible","children","element","tabIndex","_normalizedTabIndex","needsSort","push","localName","dom","getDistributedNodes","shadowRoot","root","i","paperDialogClass","haTabFixBehaviorImpl","_focusableNodes","HaPaperDialog","_mixinBehaviors","_possibleConstructorReturn","mixinBehaviors","define","property","params","systemOptions","regeneratorRuntime","async","_context","prev","next","_params","_error","undefined","_loading","awrap","getConfigEntrySystemOptions","hass","entry","entry_id","sent","_disableNewEntities","disable_new_entities","updateComplete","stop","_openedChanged","localize","domain","_templateObject3","_templateObject4","_templateObject5","_disableNewEntitiesChanged","_submitting","_templateObject6","_updateEntry","ev","target","_context2","updateConfigEntrySystemOptions","t0","message","finish","detail","haStyleDialog","_templateObject7","LitElement"],"mappings":"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","file":"chunk.8bd9dea439167514fad8.js","sourcesContent":["import { customElement, CSSResult, css, query, html } from \"lit-element\";\nimport \"@material/mwc-switch\";\nimport { style } from \"@material/mwc-switch/mwc-switch-css\";\n// tslint:disable-next-line\nimport { Switch } from \"@material/mwc-switch\";\nimport { Constructor } from \"../types\";\nimport { ripple } from \"@material/mwc-ripple/ripple-directive\";\n// tslint:disable-next-line\nconst MwcSwitch = customElements.get(\"mwc-switch\") as Constructor<Switch>;\n\n@customElement(\"ha-switch\")\nexport class HaSwitch extends MwcSwitch {\n  @query(\"slot\") private _slot!: HTMLSlotElement;\n\n  protected firstUpdated() {\n    super.firstUpdated();\n    this.style.setProperty(\n      \"--mdc-theme-secondary\",\n      \"var(--switch-checked-color)\"\n    );\n    this.classList.toggle(\n      \"slotted\",\n      Boolean(this._slot.assignedNodes().length)\n    );\n  }\n\n  protected render() {\n    return html`\n      <div class=\"mdc-switch\">\n        <div class=\"mdc-switch__track\"></div>\n        <div\n          class=\"mdc-switch__thumb-underlay\"\n          .ripple=\"${ripple({\n            interactionNode: this,\n          })}\"\n        >\n          <div class=\"mdc-switch__thumb\">\n            <input\n              type=\"checkbox\"\n              id=\"basic-switch\"\n              class=\"mdc-switch__native-control\"\n              role=\"switch\"\n              @change=\"${this._haChangeHandler}\"\n            />\n          </div>\n        </div>\n      </div>\n      <label for=\"basic-switch\"><slot></slot></label>\n    `;\n  }\n\n  protected static get styles(): CSSResult[] {\n    return [\n      style,\n      css`\n        :host {\n          display: flex;\n          flex-direction: row;\n          align-items: center;\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__thumb {\n          background-color: var(--switch-checked-button-color);\n          border-color: var(--switch-checked-button-color);\n        }\n        .mdc-switch.mdc-switch--checked .mdc-switch__track {\n          background-color: var(--switch-checked-track-color);\n          border-color: var(--switch-checked-track-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__thumb {\n          background-color: var(--switch-unchecked-button-color);\n          border-color: var(--switch-unchecked-button-color);\n        }\n        .mdc-switch:not(.mdc-switch--checked) .mdc-switch__track {\n          background-color: var(--switch-unchecked-track-color);\n          border-color: var(--switch-unchecked-track-color);\n        }\n        :host(.slotted) .mdc-switch {\n          margin-right: 24px;\n        }\n      `,\n    ];\n  }\n\n  private _haChangeHandler(e: Event) {\n    this.mdcFoundation.handleChange(e);\n    // catch \"click\" event and sync properties\n    this.checked = this.formElement.checked;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-switch\": HaSwitch;\n  }\n}\n","/**\n@license\nCopyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/*\n  Fixes issue with not using shadow dom properly in iron-overlay-behavior/icon-focusables-helper.js\n*/\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\n\nimport { IronFocusablesHelper } from \"@polymer/iron-overlay-behavior/iron-focusables-helper.js\";\n\nexport const HaIronFocusablesHelper = {\n  /**\n   * Returns a sorted array of tabbable nodes, including the root node.\n   * It searches the tabbable nodes in the light and shadow dom of the chidren,\n   * sorting the result by tabindex.\n   * @param {!Node} node\n   * @return {!Array<!HTMLElement>}\n   */\n  getTabbableNodes: function(node) {\n    var result = [];\n    // If there is at least one element with tabindex > 0, we need to sort\n    // the final array by tabindex.\n    var needsSortByTabIndex = this._collectTabbableNodes(node, result);\n    if (needsSortByTabIndex) {\n      return IronFocusablesHelper._sortByTabIndex(result);\n    }\n    return result;\n  },\n\n  /**\n   * Searches for nodes that are tabbable and adds them to the `result` array.\n   * Returns if the `result` array needs to be sorted by tabindex.\n   * @param {!Node} node The starting point for the search; added to `result`\n   * if tabbable.\n   * @param {!Array<!HTMLElement>} result\n   * @return {boolean}\n   * @private\n   */\n  _collectTabbableNodes: function(node, result) {\n    // If not an element or not visible, no need to explore children.\n    if (\n      node.nodeType !== Node.ELEMENT_NODE ||\n      !IronFocusablesHelper._isVisible(node)\n    ) {\n      return false;\n    }\n    var element = /** @type {!HTMLElement} */ (node);\n    var tabIndex = IronFocusablesHelper._normalizedTabIndex(element);\n    var needsSort = tabIndex > 0;\n    if (tabIndex >= 0) {\n      result.push(element);\n    }\n\n    // In ShadowDOM v1, tab order is affected by the order of distrubution.\n    // E.g. getTabbableNodes(#root) in ShadowDOM v1 should return [#A, #B];\n    // in ShadowDOM v0 tab order is not affected by the distrubution order,\n    // in fact getTabbableNodes(#root) returns [#B, #A].\n    //  <div id=\"root\">\n    //   <!-- shadow -->\n    //     <slot name=\"a\">\n    //     <slot name=\"b\">\n    //   <!-- /shadow -->\n    //   <input id=\"A\" slot=\"a\">\n    //   <input id=\"B\" slot=\"b\" tabindex=\"1\">\n    //  </div>\n    // TODO(valdrin) support ShadowDOM v1 when upgrading to Polymer v2.0.\n    var children;\n    if (element.localName === \"content\" || element.localName === \"slot\") {\n      children = dom(element).getDistributedNodes();\n    } else {\n      // /////////////////////////\n      // Use shadow root if possible, will check for distributed nodes.\n      // THIS IS THE CHANGED LINE\n      children = dom(element.shadowRoot || element.root || element).children;\n      // /////////////////////////\n    }\n    for (var i = 0; i < children.length; i++) {\n      // Ensure method is always invoked to collect tabbable children.\n      needsSort = this._collectTabbableNodes(children[i], result) || needsSort;\n    }\n    return needsSort;\n  },\n};\n","import \"@polymer/paper-dialog/paper-dialog\";\nimport { mixinBehaviors } from \"@polymer/polymer/lib/legacy/class\";\nimport { HaIronFocusablesHelper } from \"./ha-iron-focusables-helper.js\";\n// tslint:disable-next-line\nimport { PaperDialogElement } from \"@polymer/paper-dialog/paper-dialog\";\n\nconst paperDialogClass = customElements.get(\"paper-dialog\");\n\n// behavior that will override existing iron-overlay-behavior and call the fixed implementation\nconst haTabFixBehaviorImpl = {\n  get _focusableNodes() {\n    return HaIronFocusablesHelper.getTabbableNodes(this);\n  },\n};\n\n// paper-dialog that uses the haTabFixBehaviorImpl behvaior\n// export class HaPaperDialog extends paperDialogClass {}\n// @ts-ignore\nexport class HaPaperDialog\n  extends mixinBehaviors([haTabFixBehaviorImpl], paperDialogClass)\n  implements PaperDialogElement {}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"ha-paper-dialog\": HaPaperDialog;\n  }\n}\ncustomElements.define(\"ha-paper-dialog\", HaPaperDialog);\n","import {\n  LitElement,\n  html,\n  css,\n  CSSResult,\n  TemplateResult,\n  customElement,\n  property,\n} from \"lit-element\";\nimport \"@polymer/paper-dialog-scrollable/paper-dialog-scrollable\";\nimport \"@polymer/paper-input/paper-input\";\n\nimport \"../../components/dialog/ha-paper-dialog\";\nimport \"../../components/ha-switch\";\n\nimport { HomeAssistant } from \"../../types\";\nimport { ConfigEntrySystemOptionsDialogParams } from \"./show-dialog-config-entry-system-options\";\nimport {\n  getConfigEntrySystemOptions,\n  updateConfigEntrySystemOptions,\n} from \"../../data/config_entries\";\nimport { PolymerChangedEvent } from \"../../polymer-types\";\nimport { haStyleDialog } from \"../../resources/styles\";\n// tslint:disable-next-line: no-duplicate-imports\nimport { HaSwitch } from \"../../components/ha-switch\";\n\n@customElement(\"dialog-config-entry-system-options\")\nclass DialogConfigEntrySystemOptions extends LitElement {\n  @property() public hass!: HomeAssistant;\n  @property() private _disableNewEntities!: boolean;\n  @property() private _error?: string;\n  @property() private _params?: ConfigEntrySystemOptionsDialogParams;\n  @property() private _loading?: boolean;\n  @property() private _submitting?: boolean;\n\n  public async showDialog(\n    params: ConfigEntrySystemOptionsDialogParams\n  ): Promise<void> {\n    this._params = params;\n    this._error = undefined;\n    this._loading = true;\n    const systemOptions = await getConfigEntrySystemOptions(\n      this.hass,\n      params.entry.entry_id\n    );\n    this._loading = false;\n    this._disableNewEntities = systemOptions.disable_new_entities;\n    await this.updateComplete;\n  }\n\n  protected render(): TemplateResult {\n    if (!this._params) {\n      return html``;\n    }\n\n    return html`\n      <ha-paper-dialog\n        with-backdrop\n        opened\n        @opened-changed=\"${this._openedChanged}\"\n      >\n        <h2>\n          ${this.hass.localize(\n            \"ui.dialogs.config_entry_system_options.title\",\n            \"integration\",\n            this.hass.localize(\n              `component.${this._params.entry.domain}.config.title`\n            ) || this._params.entry.domain\n          )}\n        </h2>\n        <paper-dialog-scrollable>\n          ${this._loading\n            ? html`\n                <div class=\"init-spinner\">\n                  <paper-spinner-lite active></paper-spinner-lite>\n                </div>\n              `\n            : html`\n                ${this._error\n                  ? html`\n                      <div class=\"error\">${this._error}</div>\n                    `\n                  : \"\"}\n                <div class=\"form\">\n                  <ha-switch\n                    .checked=${!this._disableNewEntities}\n                    @change=${this._disableNewEntitiesChanged}\n                    .disabled=${this._submitting}\n                  >\n                    <div>\n                      <p>\n                        ${this.hass.localize(\n                          \"ui.dialogs.config_entry_system_options.enable_new_entities_label\"\n                        )}\n                      </p>\n                      <p class=\"secondary\">\n                        ${this.hass.localize(\n                          \"ui.dialogs.config_entry_system_options.enable_new_entities_description\",\n                          \"integration\",\n                          this.hass.localize(\n                            `component.${this._params.entry.domain}.config.title`\n                          ) || this._params.entry.domain\n                        )}\n                      </p>\n                    </div>\n                  </ha-switch>\n                </div>\n              `}\n        </paper-dialog-scrollable>\n        ${!this._loading\n          ? html`\n              <div class=\"paper-dialog-buttons\">\n                <mwc-button\n                  @click=\"${this._updateEntry}\"\n                  .disabled=${this._submitting}\n                >\n                  ${this.hass.localize(\n                    \"ui.panel.config.entities.editor.update\"\n                  )}\n                </mwc-button>\n              </div>\n            `\n          : \"\"}\n      </ha-paper-dialog>\n    `;\n  }\n\n  private _disableNewEntitiesChanged(ev: Event): void {\n    this._error = undefined;\n    this._disableNewEntities = !(ev.target as HaSwitch).checked;\n  }\n\n  private async _updateEntry(): Promise<void> {\n    this._submitting = true;\n    try {\n      await updateConfigEntrySystemOptions(\n        this.hass,\n        this._params!.entry.entry_id,\n        {\n          disable_new_entities: this._disableNewEntities,\n        }\n      );\n      this._params = undefined;\n    } catch (err) {\n      this._error = err.message || \"Unknown error\";\n    } finally {\n      this._submitting = false;\n    }\n  }\n\n  private _openedChanged(ev: PolymerChangedEvent<boolean>): void {\n    if (!(ev.detail as any).value) {\n      this._params = undefined;\n    }\n  }\n\n  static get styles(): CSSResult[] {\n    return [\n      haStyleDialog,\n      css`\n        ha-paper-dialog {\n          min-width: 400px;\n          max-width: 500px;\n        }\n        .init-spinner {\n          padding: 50px 100px;\n          text-align: center;\n        }\n\n        .form {\n          padding-top: 6px;\n          padding-bottom: 24px;\n          color: var(--primary-text-color);\n        }\n        p {\n          margin: 0;\n        }\n        .secondary {\n          color: var(--secondary-text-color);\n        }\n\n        .error {\n          color: var(--google-red-500);\n        }\n      `,\n    ];\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"dialog-config-entry-system-options\": DialogConfigEntrySystemOptions;\n  }\n}\n"],"sourceRoot":""}