# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class OperationTargetResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'origin': 'str',
        'target': 'str',
        'size': 'int',
        'properties': 'dict(str, object)'
    }

    attribute_map = {
        'origin': 'origin',
        'target': 'target',
        'size': 'size',
        'properties': 'properties'
    }

    def __init__(self, origin=None, target=None, size=None, properties=None, local_vars_configuration=None):  # noqa: E501
        """OperationTargetResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._origin = None
        self._target = None
        self._size = None
        self._properties = None
        self.discriminator = None

        if origin is not None:
            self.origin = origin
        if target is not None:
            self.target = target
        if size is not None:
            self.size = size
        if properties is not None:
            self.properties = properties

    @property
    def origin(self):
        """Gets the origin of this OperationTargetResponse.  # noqa: E501

        Source to perform action on  # noqa: E501

        :return: The origin of this OperationTargetResponse.  # noqa: E501
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """Sets the origin of this OperationTargetResponse.

        Source to perform action on  # noqa: E501

        :param origin: The origin of this OperationTargetResponse.  # noqa: E501
        :type: str
        """

        self._origin = origin

    @property
    def target(self):
        """Gets the target of this OperationTargetResponse.  # noqa: E501

        Action or target  # noqa: E501

        :return: The target of this OperationTargetResponse.  # noqa: E501
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this OperationTargetResponse.

        Action or target  # noqa: E501

        :param target: The target of this OperationTargetResponse.  # noqa: E501
        :type: str
        """

        self._target = target

    @property
    def size(self):
        """Gets the size of this OperationTargetResponse.  # noqa: E501

        Size (number of records, bytes, etc.  # noqa: E501

        :return: The size of this OperationTargetResponse.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this OperationTargetResponse.

        Size (number of records, bytes, etc.  # noqa: E501

        :param size: The size of this OperationTargetResponse.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def properties(self):
        """Gets the properties of this OperationTargetResponse.  # noqa: E501

        Resulting properties  # noqa: E501

        :return: The properties of this OperationTargetResponse.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this OperationTargetResponse.

        Resulting properties  # noqa: E501

        :param properties: The properties of this OperationTargetResponse.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperationTargetResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OperationTargetResponse):
            return True

        return self.to_dict() != other.to_dict()
