# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class IdentityApplication(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'roles': 'list[str]',
        'secret': 'str',
        'allowed_origins': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'roles': 'roles',
        'secret': 'secret',
        'allowed_origins': 'allowedOrigins'
    }

    def __init__(self, id=None, name=None, roles=None, secret=None, allowed_origins=None, local_vars_configuration=None):  # noqa: E501
        """IdentityApplication - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._roles = None
        self._secret = None
        self._allowed_origins = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if roles is not None:
            self.roles = roles
        if secret is not None:
            self.secret = secret
        if allowed_origins is not None:
            self.allowed_origins = allowed_origins

    @property
    def id(self):
        """Gets the id of this IdentityApplication.  # noqa: E501


        :return: The id of this IdentityApplication.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this IdentityApplication.


        :param id: The id of this IdentityApplication.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this IdentityApplication.  # noqa: E501


        :return: The name of this IdentityApplication.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IdentityApplication.


        :param name: The name of this IdentityApplication.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def roles(self):
        """Gets the roles of this IdentityApplication.  # noqa: E501


        :return: The roles of this IdentityApplication.  # noqa: E501
        :rtype: list[str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this IdentityApplication.


        :param roles: The roles of this IdentityApplication.  # noqa: E501
        :type: list[str]
        """

        self._roles = roles

    @property
    def secret(self):
        """Gets the secret of this IdentityApplication.  # noqa: E501


        :return: The secret of this IdentityApplication.  # noqa: E501
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret):
        """Sets the secret of this IdentityApplication.


        :param secret: The secret of this IdentityApplication.  # noqa: E501
        :type: str
        """

        self._secret = secret

    @property
    def allowed_origins(self):
        """Gets the allowed_origins of this IdentityApplication.  # noqa: E501


        :return: The allowed_origins of this IdentityApplication.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_origins

    @allowed_origins.setter
    def allowed_origins(self, allowed_origins):
        """Sets the allowed_origins of this IdentityApplication.


        :param allowed_origins: The allowed_origins of this IdentityApplication.  # noqa: E501
        :type: list[str]
        """

        self._allowed_origins = allowed_origins

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityApplication):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdentityApplication):
            return True

        return self.to_dict() != other.to_dict()
