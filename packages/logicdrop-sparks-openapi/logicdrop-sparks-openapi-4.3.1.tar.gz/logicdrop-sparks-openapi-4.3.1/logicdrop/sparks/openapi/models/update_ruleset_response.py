# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class UpdateRulesetResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project': 'str',
        'artifact': 'str',
        'records': 'int',
        'filenames': 'list[str]'
    }

    attribute_map = {
        'project': 'project',
        'artifact': 'artifact',
        'records': 'records',
        'filenames': 'filenames'
    }

    def __init__(self, project=None, artifact=None, records=None, filenames=None, local_vars_configuration=None):  # noqa: E501
        """UpdateRulesetResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project = None
        self._artifact = None
        self._records = None
        self._filenames = None
        self.discriminator = None

        if project is not None:
            self.project = project
        if artifact is not None:
            self.artifact = artifact
        if records is not None:
            self.records = records
        if filenames is not None:
            self.filenames = filenames

    @property
    def project(self):
        """Gets the project of this UpdateRulesetResponse.  # noqa: E501

        Project name  # noqa: E501

        :return: The project of this UpdateRulesetResponse.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this UpdateRulesetResponse.

        Project name  # noqa: E501

        :param project: The project of this UpdateRulesetResponse.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def artifact(self):
        """Gets the artifact of this UpdateRulesetResponse.  # noqa: E501

        Ruleset name  # noqa: E501

        :return: The artifact of this UpdateRulesetResponse.  # noqa: E501
        :rtype: str
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this UpdateRulesetResponse.

        Ruleset name  # noqa: E501

        :param artifact: The artifact of this UpdateRulesetResponse.  # noqa: E501
        :type: str
        """

        self._artifact = artifact

    @property
    def records(self):
        """Gets the records of this UpdateRulesetResponse.  # noqa: E501

        Records affected  # noqa: E501

        :return: The records of this UpdateRulesetResponse.  # noqa: E501
        :rtype: int
        """
        return self._records

    @records.setter
    def records(self, records):
        """Sets the records of this UpdateRulesetResponse.

        Records affected  # noqa: E501

        :param records: The records of this UpdateRulesetResponse.  # noqa: E501
        :type: int
        """

        self._records = records

    @property
    def filenames(self):
        """Gets the filenames of this UpdateRulesetResponse.  # noqa: E501

        Uploaded files  # noqa: E501

        :return: The filenames of this UpdateRulesetResponse.  # noqa: E501
        :rtype: list[str]
        """
        return self._filenames

    @filenames.setter
    def filenames(self, filenames):
        """Sets the filenames of this UpdateRulesetResponse.

        Uploaded files  # noqa: E501

        :param filenames: The filenames of this UpdateRulesetResponse.  # noqa: E501
        :type: list[str]
        """

        self._filenames = filenames

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateRulesetResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateRulesetResponse):
            return True

        return self.to_dict() != other.to_dict()
