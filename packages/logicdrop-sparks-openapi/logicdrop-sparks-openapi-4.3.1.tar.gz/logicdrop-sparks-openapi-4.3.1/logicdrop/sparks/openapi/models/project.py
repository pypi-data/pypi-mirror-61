# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class Project(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'client': 'str',
        'artifact': 'str',
        'version': 'str',
        'url': 'str',
        'description': 'str',
        'created': 'datetime',
        'modified': 'datetime',
        'tags': 'list[str]',
        'properties': 'dict(str, object)',
        'user': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'client': 'client',
        'artifact': 'artifact',
        'version': 'version',
        'url': 'url',
        'description': 'description',
        'created': 'created',
        'modified': 'modified',
        'tags': 'tags',
        'properties': 'properties',
        'user': 'user'
    }

    def __init__(self, id=None, name=None, client=None, artifact=None, version=None, url=None, description=None, created=None, modified=None, tags=None, properties=None, user=None, local_vars_configuration=None):  # noqa: E501
        """Project - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._client = None
        self._artifact = None
        self._version = None
        self._url = None
        self._description = None
        self._created = None
        self._modified = None
        self._tags = None
        self._properties = None
        self._user = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if client is not None:
            self.client = client
        if artifact is not None:
            self.artifact = artifact
        if version is not None:
            self.version = version
        if url is not None:
            self.url = url
        if description is not None:
            self.description = description
        if created is not None:
            self.created = created
        if modified is not None:
            self.modified = modified
        if tags is not None:
            self.tags = tags
        if properties is not None:
            self.properties = properties
        if user is not None:
            self.user = user

    @property
    def id(self):
        """Gets the id of this Project.  # noqa: E501


        :return: The id of this Project.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Project.


        :param id: The id of this Project.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Project.  # noqa: E501


        :return: The name of this Project.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Project.


        :param name: The name of this Project.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def client(self):
        """Gets the client of this Project.  # noqa: E501


        :return: The client of this Project.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this Project.


        :param client: The client of this Project.  # noqa: E501
        :type: str
        """

        self._client = client

    @property
    def artifact(self):
        """Gets the artifact of this Project.  # noqa: E501


        :return: The artifact of this Project.  # noqa: E501
        :rtype: str
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this Project.


        :param artifact: The artifact of this Project.  # noqa: E501
        :type: str
        """

        self._artifact = artifact

    @property
    def version(self):
        """Gets the version of this Project.  # noqa: E501


        :return: The version of this Project.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Project.


        :param version: The version of this Project.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def url(self):
        """Gets the url of this Project.  # noqa: E501


        :return: The url of this Project.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Project.


        :param url: The url of this Project.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def description(self):
        """Gets the description of this Project.  # noqa: E501


        :return: The description of this Project.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Project.


        :param description: The description of this Project.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def created(self):
        """Gets the created of this Project.  # noqa: E501


        :return: The created of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this Project.


        :param created: The created of this Project.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def modified(self):
        """Gets the modified of this Project.  # noqa: E501


        :return: The modified of this Project.  # noqa: E501
        :rtype: datetime
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Project.


        :param modified: The modified of this Project.  # noqa: E501
        :type: datetime
        """

        self._modified = modified

    @property
    def tags(self):
        """Gets the tags of this Project.  # noqa: E501


        :return: The tags of this Project.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Project.


        :param tags: The tags of this Project.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def properties(self):
        """Gets the properties of this Project.  # noqa: E501


        :return: The properties of this Project.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Project.


        :param properties: The properties of this Project.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def user(self):
        """Gets the user of this Project.  # noqa: E501


        :return: The user of this Project.  # noqa: E501
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this Project.


        :param user: The user of this Project.  # noqa: E501
        :type: str
        """

        self._user = user

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Project):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Project):
            return True

        return self.to_dict() != other.to_dict()
