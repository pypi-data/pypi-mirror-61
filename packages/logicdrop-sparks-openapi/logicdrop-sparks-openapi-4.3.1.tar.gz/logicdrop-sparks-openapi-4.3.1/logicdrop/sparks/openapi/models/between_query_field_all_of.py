# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class BetweenQueryFieldAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'min': 'object',
        'max': 'object'
    }

    attribute_map = {
        'name': 'name',
        'min': 'min',
        'max': 'max'
    }

    def __init__(self, name=None, min=None, max=None, local_vars_configuration=None):  # noqa: E501
        """BetweenQueryFieldAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._min = None
        self._max = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if min is not None:
            self.min = min
        if max is not None:
            self.max = max

    @property
    def name(self):
        """Gets the name of this BetweenQueryFieldAllOf.  # noqa: E501


        :return: The name of this BetweenQueryFieldAllOf.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BetweenQueryFieldAllOf.


        :param name: The name of this BetweenQueryFieldAllOf.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def min(self):
        """Gets the min of this BetweenQueryFieldAllOf.  # noqa: E501


        :return: The min of this BetweenQueryFieldAllOf.  # noqa: E501
        :rtype: object
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this BetweenQueryFieldAllOf.


        :param min: The min of this BetweenQueryFieldAllOf.  # noqa: E501
        :type: object
        """

        self._min = min

    @property
    def max(self):
        """Gets the max of this BetweenQueryFieldAllOf.  # noqa: E501


        :return: The max of this BetweenQueryFieldAllOf.  # noqa: E501
        :rtype: object
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this BetweenQueryFieldAllOf.


        :param max: The max of this BetweenQueryFieldAllOf.  # noqa: E501
        :type: object
        """

        self._max = max

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BetweenQueryFieldAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BetweenQueryFieldAllOf):
            return True

        return self.to_dict() != other.to_dict()
