# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class ArtifactReference(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'artifact': 'str',
        'version': 'str',
        'name': 'str',
        'path': 'str',
        'url': 'str',
        'description': 'str',
        'tags': 'list[str]',
        'properties': 'dict(str, object)'
    }

    attribute_map = {
        'id': 'id',
        'artifact': 'artifact',
        'version': 'version',
        'name': 'name',
        'path': 'path',
        'url': 'url',
        'description': 'description',
        'tags': 'tags',
        'properties': 'properties'
    }

    def __init__(self, id=None, artifact=None, version=None, name=None, path=None, url=None, description=None, tags=None, properties=None, local_vars_configuration=None):  # noqa: E501
        """ArtifactReference - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._artifact = None
        self._version = None
        self._name = None
        self._path = None
        self._url = None
        self._description = None
        self._tags = None
        self._properties = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if artifact is not None:
            self.artifact = artifact
        if version is not None:
            self.version = version
        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if url is not None:
            self.url = url
        if description is not None:
            self.description = description
        if tags is not None:
            self.tags = tags
        if properties is not None:
            self.properties = properties

    @property
    def id(self):
        """Gets the id of this ArtifactReference.  # noqa: E501

        Artifact ID  # noqa: E501

        :return: The id of this ArtifactReference.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ArtifactReference.

        Artifact ID  # noqa: E501

        :param id: The id of this ArtifactReference.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def artifact(self):
        """Gets the artifact of this ArtifactReference.  # noqa: E501

        Name  # noqa: E501

        :return: The artifact of this ArtifactReference.  # noqa: E501
        :rtype: str
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this ArtifactReference.

        Name  # noqa: E501

        :param artifact: The artifact of this ArtifactReference.  # noqa: E501
        :type: str
        """

        self._artifact = artifact

    @property
    def version(self):
        """Gets the version of this ArtifactReference.  # noqa: E501

        Version  # noqa: E501

        :return: The version of this ArtifactReference.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ArtifactReference.

        Version  # noqa: E501

        :param version: The version of this ArtifactReference.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def name(self):
        """Gets the name of this ArtifactReference.  # noqa: E501

        Display name  # noqa: E501

        :return: The name of this ArtifactReference.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ArtifactReference.

        Display name  # noqa: E501

        :param name: The name of this ArtifactReference.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this ArtifactReference.  # noqa: E501

        Service path  # noqa: E501

        :return: The path of this ArtifactReference.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this ArtifactReference.

        Service path  # noqa: E501

        :param path: The path of this ArtifactReference.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def url(self):
        """Gets the url of this ArtifactReference.  # noqa: E501

        URL  # noqa: E501

        :return: The url of this ArtifactReference.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ArtifactReference.

        URL  # noqa: E501

        :param url: The url of this ArtifactReference.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def description(self):
        """Gets the description of this ArtifactReference.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this ArtifactReference.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ArtifactReference.

        Description  # noqa: E501

        :param description: The description of this ArtifactReference.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def tags(self):
        """Gets the tags of this ArtifactReference.  # noqa: E501

        Tags  # noqa: E501

        :return: The tags of this ArtifactReference.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this ArtifactReference.

        Tags  # noqa: E501

        :param tags: The tags of this ArtifactReference.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def properties(self):
        """Gets the properties of this ArtifactReference.  # noqa: E501


        :return: The properties of this ArtifactReference.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ArtifactReference.


        :param properties: The properties of this ArtifactReference.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtifactReference):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ArtifactReference):
            return True

        return self.to_dict() != other.to_dict()
