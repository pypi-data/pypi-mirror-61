# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class UpdateDataRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ids': 'list[str]',
        'skip_nulls': 'bool',
        'properties': 'dict(str, object)',
        'content': 'dict(str, object)'
    }

    attribute_map = {
        'ids': 'ids',
        'skip_nulls': 'skipNulls',
        'properties': 'properties',
        'content': 'content'
    }

    def __init__(self, ids=None, skip_nulls=None, properties=None, content=None, local_vars_configuration=None):  # noqa: E501
        """UpdateDataRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ids = None
        self._skip_nulls = None
        self._properties = None
        self._content = None
        self.discriminator = None

        self.ids = ids
        if skip_nulls is not None:
            self.skip_nulls = skip_nulls
        if properties is not None:
            self.properties = properties
        if content is not None:
            self.content = content

    @property
    def ids(self):
        """Gets the ids of this UpdateDataRequest.  # noqa: E501

        ID(s) to process  # noqa: E501

        :return: The ids of this UpdateDataRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids):
        """Sets the ids of this UpdateDataRequest.

        ID(s) to process  # noqa: E501

        :param ids: The ids of this UpdateDataRequest.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and ids is None:  # noqa: E501
            raise ValueError("Invalid value for `ids`, must not be `None`")  # noqa: E501

        self._ids = ids

    @property
    def skip_nulls(self):
        """Gets the skip_nulls of this UpdateDataRequest.  # noqa: E501

        Ignore null values?  # noqa: E501

        :return: The skip_nulls of this UpdateDataRequest.  # noqa: E501
        :rtype: bool
        """
        return self._skip_nulls

    @skip_nulls.setter
    def skip_nulls(self, skip_nulls):
        """Sets the skip_nulls of this UpdateDataRequest.

        Ignore null values?  # noqa: E501

        :param skip_nulls: The skip_nulls of this UpdateDataRequest.  # noqa: E501
        :type: bool
        """

        self._skip_nulls = skip_nulls

    @property
    def properties(self):
        """Gets the properties of this UpdateDataRequest.  # noqa: E501

        User properties to update  # noqa: E501

        :return: The properties of this UpdateDataRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this UpdateDataRequest.

        User properties to update  # noqa: E501

        :param properties: The properties of this UpdateDataRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def content(self):
        """Gets the content of this UpdateDataRequest.  # noqa: E501


        :return: The content of this UpdateDataRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this UpdateDataRequest.


        :param content: The content of this UpdateDataRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._content = content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateDataRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UpdateDataRequest):
            return True

        return self.to_dict() != other.to_dict()
