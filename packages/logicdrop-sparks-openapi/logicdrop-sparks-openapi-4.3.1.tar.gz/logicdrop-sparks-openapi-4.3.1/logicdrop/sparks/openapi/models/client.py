# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class Client(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'configs': 'dict(str, ClientSettings)',
        'enabled': 'bool',
        'properties': 'dict(str, object)',
        'security': 'dict(str, ClientSettings)',
        'subscriptions': 'list[Subscription]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'configs': 'configs',
        'enabled': 'enabled',
        'properties': 'properties',
        'security': 'security',
        'subscriptions': 'subscriptions'
    }

    def __init__(self, id=None, name=None, configs=None, enabled=None, properties=None, security=None, subscriptions=None, local_vars_configuration=None):  # noqa: E501
        """Client - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._configs = None
        self._enabled = None
        self._properties = None
        self._security = None
        self._subscriptions = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if configs is not None:
            self.configs = configs
        if enabled is not None:
            self.enabled = enabled
        if properties is not None:
            self.properties = properties
        if security is not None:
            self.security = security
        if subscriptions is not None:
            self.subscriptions = subscriptions

    @property
    def id(self):
        """Gets the id of this Client.  # noqa: E501


        :return: The id of this Client.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Client.


        :param id: The id of this Client.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Client.  # noqa: E501


        :return: The name of this Client.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Client.


        :param name: The name of this Client.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def configs(self):
        """Gets the configs of this Client.  # noqa: E501


        :return: The configs of this Client.  # noqa: E501
        :rtype: dict(str, ClientSettings)
        """
        return self._configs

    @configs.setter
    def configs(self, configs):
        """Sets the configs of this Client.


        :param configs: The configs of this Client.  # noqa: E501
        :type: dict(str, ClientSettings)
        """

        self._configs = configs

    @property
    def enabled(self):
        """Gets the enabled of this Client.  # noqa: E501


        :return: The enabled of this Client.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Client.


        :param enabled: The enabled of this Client.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def properties(self):
        """Gets the properties of this Client.  # noqa: E501


        :return: The properties of this Client.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this Client.


        :param properties: The properties of this Client.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def security(self):
        """Gets the security of this Client.  # noqa: E501


        :return: The security of this Client.  # noqa: E501
        :rtype: dict(str, ClientSettings)
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this Client.


        :param security: The security of this Client.  # noqa: E501
        :type: dict(str, ClientSettings)
        """

        self._security = security

    @property
    def subscriptions(self):
        """Gets the subscriptions of this Client.  # noqa: E501


        :return: The subscriptions of this Client.  # noqa: E501
        :rtype: list[Subscription]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions):
        """Sets the subscriptions of this Client.


        :param subscriptions: The subscriptions of this Client.  # noqa: E501
        :type: list[Subscription]
        """

        self._subscriptions = subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Client):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Client):
            return True

        return self.to_dict() != other.to_dict()
