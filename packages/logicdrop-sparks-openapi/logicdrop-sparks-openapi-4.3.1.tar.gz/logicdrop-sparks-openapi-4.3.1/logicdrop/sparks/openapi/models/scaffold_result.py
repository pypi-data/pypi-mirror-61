# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class ScaffoldResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'project': 'str',
        'version': 'str',
        'url': 'str',
        'source': 'str',
        'messages': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'project': 'project',
        'version': 'version',
        'url': 'url',
        'source': 'source',
        'messages': 'messages'
    }

    def __init__(self, id=None, project=None, version=None, url=None, source=None, messages=None, local_vars_configuration=None):  # noqa: E501
        """ScaffoldResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._project = None
        self._version = None
        self._url = None
        self._source = None
        self._messages = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if project is not None:
            self.project = project
        if version is not None:
            self.version = version
        if url is not None:
            self.url = url
        if source is not None:
            self.source = source
        if messages is not None:
            self.messages = messages

    @property
    def id(self):
        """Gets the id of this ScaffoldResult.  # noqa: E501

        Project ID  # noqa: E501

        :return: The id of this ScaffoldResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ScaffoldResult.

        Project ID  # noqa: E501

        :param id: The id of this ScaffoldResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def project(self):
        """Gets the project of this ScaffoldResult.  # noqa: E501

        Project name  # noqa: E501

        :return: The project of this ScaffoldResult.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ScaffoldResult.

        Project name  # noqa: E501

        :param project: The project of this ScaffoldResult.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def version(self):
        """Gets the version of this ScaffoldResult.  # noqa: E501

        Project version  # noqa: E501

        :return: The version of this ScaffoldResult.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ScaffoldResult.

        Project version  # noqa: E501

        :param version: The version of this ScaffoldResult.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def url(self):
        """Gets the url of this ScaffoldResult.  # noqa: E501

        Project URL  # noqa: E501

        :return: The url of this ScaffoldResult.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this ScaffoldResult.

        Project URL  # noqa: E501

        :param url: The url of this ScaffoldResult.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def source(self):
        """Gets the source of this ScaffoldResult.  # noqa: E501

        Template Source  # noqa: E501

        :return: The source of this ScaffoldResult.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this ScaffoldResult.

        Template Source  # noqa: E501

        :param source: The source of this ScaffoldResult.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def messages(self):
        """Gets the messages of this ScaffoldResult.  # noqa: E501

        Messages  # noqa: E501

        :return: The messages of this ScaffoldResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ScaffoldResult.

        Messages  # noqa: E501

        :param messages: The messages of this ScaffoldResult.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ScaffoldResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ScaffoldResult):
            return True

        return self.to_dict() != other.to_dict()
