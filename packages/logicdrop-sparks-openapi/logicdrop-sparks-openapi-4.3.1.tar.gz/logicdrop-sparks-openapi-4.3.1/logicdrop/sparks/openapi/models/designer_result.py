# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class DesignerResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'timestamp': 'str',
        'duration': 'int',
        'activations': 'int',
        'exception': 'bool',
        'error': 'str',
        'properties': 'dict(str, object)',
        'assertions': 'list[Assertion]',
        'results': 'dict(str, object)',
        'dictionary': 'dict(str, object)',
        'messages': 'list[str]',
        'matches': 'list[str]',
        'events': 'list[DesignerEvent]'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'duration': 'duration',
        'activations': 'activations',
        'exception': 'exception',
        'error': 'error',
        'properties': 'properties',
        'assertions': 'assertions',
        'results': 'results',
        'dictionary': 'dictionary',
        'messages': 'messages',
        'matches': 'matches',
        'events': 'events'
    }

    def __init__(self, timestamp=None, duration=None, activations=None, exception=None, error=None, properties=None, assertions=None, results=None, dictionary=None, messages=None, matches=None, events=None, local_vars_configuration=None):  # noqa: E501
        """DesignerResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._timestamp = None
        self._duration = None
        self._activations = None
        self._exception = None
        self._error = None
        self._properties = None
        self._assertions = None
        self._results = None
        self._dictionary = None
        self._messages = None
        self._matches = None
        self._events = None
        self.discriminator = None

        if timestamp is not None:
            self.timestamp = timestamp
        if duration is not None:
            self.duration = duration
        if activations is not None:
            self.activations = activations
        if exception is not None:
            self.exception = exception
        if error is not None:
            self.error = error
        if properties is not None:
            self.properties = properties
        if assertions is not None:
            self.assertions = assertions
        if results is not None:
            self.results = results
        if dictionary is not None:
            self.dictionary = dictionary
        if messages is not None:
            self.messages = messages
        if matches is not None:
            self.matches = matches
        if events is not None:
            self.events = events

    @property
    def timestamp(self):
        """Gets the timestamp of this DesignerResult.  # noqa: E501

        Timestamp  # noqa: E501

        :return: The timestamp of this DesignerResult.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this DesignerResult.

        Timestamp  # noqa: E501

        :param timestamp: The timestamp of this DesignerResult.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def duration(self):
        """Gets the duration of this DesignerResult.  # noqa: E501


        :return: The duration of this DesignerResult.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this DesignerResult.


        :param duration: The duration of this DesignerResult.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def activations(self):
        """Gets the activations of this DesignerResult.  # noqa: E501


        :return: The activations of this DesignerResult.  # noqa: E501
        :rtype: int
        """
        return self._activations

    @activations.setter
    def activations(self, activations):
        """Sets the activations of this DesignerResult.


        :param activations: The activations of this DesignerResult.  # noqa: E501
        :type: int
        """

        self._activations = activations

    @property
    def exception(self):
        """Gets the exception of this DesignerResult.  # noqa: E501


        :return: The exception of this DesignerResult.  # noqa: E501
        :rtype: bool
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this DesignerResult.


        :param exception: The exception of this DesignerResult.  # noqa: E501
        :type: bool
        """

        self._exception = exception

    @property
    def error(self):
        """Gets the error of this DesignerResult.  # noqa: E501


        :return: The error of this DesignerResult.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this DesignerResult.


        :param error: The error of this DesignerResult.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def properties(self):
        """Gets the properties of this DesignerResult.  # noqa: E501


        :return: The properties of this DesignerResult.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this DesignerResult.


        :param properties: The properties of this DesignerResult.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def assertions(self):
        """Gets the assertions of this DesignerResult.  # noqa: E501

        Assertion results  # noqa: E501

        :return: The assertions of this DesignerResult.  # noqa: E501
        :rtype: list[Assertion]
        """
        return self._assertions

    @assertions.setter
    def assertions(self, assertions):
        """Sets the assertions of this DesignerResult.

        Assertion results  # noqa: E501

        :param assertions: The assertions of this DesignerResult.  # noqa: E501
        :type: list[Assertion]
        """

        self._assertions = assertions

    @property
    def results(self):
        """Gets the results of this DesignerResult.  # noqa: E501


        :return: The results of this DesignerResult.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this DesignerResult.


        :param results: The results of this DesignerResult.  # noqa: E501
        :type: dict(str, object)
        """

        self._results = results

    @property
    def dictionary(self):
        """Gets the dictionary of this DesignerResult.  # noqa: E501

        Flattened data  # noqa: E501

        :return: The dictionary of this DesignerResult.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._dictionary

    @dictionary.setter
    def dictionary(self, dictionary):
        """Sets the dictionary of this DesignerResult.

        Flattened data  # noqa: E501

        :param dictionary: The dictionary of this DesignerResult.  # noqa: E501
        :type: dict(str, object)
        """

        self._dictionary = dictionary

    @property
    def messages(self):
        """Gets the messages of this DesignerResult.  # noqa: E501


        :return: The messages of this DesignerResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this DesignerResult.


        :param messages: The messages of this DesignerResult.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    @property
    def matches(self):
        """Gets the matches of this DesignerResult.  # noqa: E501


        :return: The matches of this DesignerResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this DesignerResult.


        :param matches: The matches of this DesignerResult.  # noqa: E501
        :type: list[str]
        """

        self._matches = matches

    @property
    def events(self):
        """Gets the events of this DesignerResult.  # noqa: E501

        Events  # noqa: E501

        :return: The events of this DesignerResult.  # noqa: E501
        :rtype: list[DesignerEvent]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this DesignerResult.

        Events  # noqa: E501

        :param events: The events of this DesignerResult.  # noqa: E501
        :type: list[DesignerEvent]
        """

        self._events = events

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DesignerResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DesignerResult):
            return True

        return self.to_dict() != other.to_dict()
