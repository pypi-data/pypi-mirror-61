# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class EmailResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'subject': 'str',
        'created': 'datetime',
        'sent': 'datetime',
        'success': 'bool',
        'message': 'str'
    }

    attribute_map = {
        'id': 'id',
        'subject': 'subject',
        'created': 'created',
        'sent': 'sent',
        'success': 'success',
        'message': 'message'
    }

    def __init__(self, id=None, subject=None, created=None, sent=None, success=None, message=None, local_vars_configuration=None):  # noqa: E501
        """EmailResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._subject = None
        self._created = None
        self._sent = None
        self._success = None
        self._message = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if subject is not None:
            self.subject = subject
        if created is not None:
            self.created = created
        if sent is not None:
            self.sent = sent
        if success is not None:
            self.success = success
        if message is not None:
            self.message = message

    @property
    def id(self):
        """Gets the id of this EmailResult.  # noqa: E501


        :return: The id of this EmailResult.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EmailResult.


        :param id: The id of this EmailResult.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def subject(self):
        """Gets the subject of this EmailResult.  # noqa: E501


        :return: The subject of this EmailResult.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this EmailResult.


        :param subject: The subject of this EmailResult.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def created(self):
        """Gets the created of this EmailResult.  # noqa: E501


        :return: The created of this EmailResult.  # noqa: E501
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created):
        """Sets the created of this EmailResult.


        :param created: The created of this EmailResult.  # noqa: E501
        :type: datetime
        """

        self._created = created

    @property
    def sent(self):
        """Gets the sent of this EmailResult.  # noqa: E501


        :return: The sent of this EmailResult.  # noqa: E501
        :rtype: datetime
        """
        return self._sent

    @sent.setter
    def sent(self, sent):
        """Sets the sent of this EmailResult.


        :param sent: The sent of this EmailResult.  # noqa: E501
        :type: datetime
        """

        self._sent = sent

    @property
    def success(self):
        """Gets the success of this EmailResult.  # noqa: E501


        :return: The success of this EmailResult.  # noqa: E501
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this EmailResult.


        :param success: The success of this EmailResult.  # noqa: E501
        :type: bool
        """

        self._success = success

    @property
    def message(self):
        """Gets the message of this EmailResult.  # noqa: E501


        :return: The message of this EmailResult.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EmailResult.


        :param message: The message of this EmailResult.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmailResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, EmailResult):
            return True

        return self.to_dict() != other.to_dict()
