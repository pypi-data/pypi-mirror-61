# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class ProcessorResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'duration': 'int',
        'activations': 'int',
        'exception': 'bool',
        'error': 'str',
        'properties': 'dict(str, object)',
        'results': 'dict(str, object)',
        'messages': 'list[str]',
        'matches': 'list[str]'
    }

    attribute_map = {
        'duration': 'duration',
        'activations': 'activations',
        'exception': 'exception',
        'error': 'error',
        'properties': 'properties',
        'results': 'results',
        'messages': 'messages',
        'matches': 'matches'
    }

    def __init__(self, duration=None, activations=None, exception=None, error=None, properties=None, results=None, messages=None, matches=None, local_vars_configuration=None):  # noqa: E501
        """ProcessorResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._duration = None
        self._activations = None
        self._exception = None
        self._error = None
        self._properties = None
        self._results = None
        self._messages = None
        self._matches = None
        self.discriminator = None

        if duration is not None:
            self.duration = duration
        if activations is not None:
            self.activations = activations
        if exception is not None:
            self.exception = exception
        if error is not None:
            self.error = error
        if properties is not None:
            self.properties = properties
        if results is not None:
            self.results = results
        if messages is not None:
            self.messages = messages
        if matches is not None:
            self.matches = matches

    @property
    def duration(self):
        """Gets the duration of this ProcessorResult.  # noqa: E501


        :return: The duration of this ProcessorResult.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this ProcessorResult.


        :param duration: The duration of this ProcessorResult.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def activations(self):
        """Gets the activations of this ProcessorResult.  # noqa: E501


        :return: The activations of this ProcessorResult.  # noqa: E501
        :rtype: int
        """
        return self._activations

    @activations.setter
    def activations(self, activations):
        """Sets the activations of this ProcessorResult.


        :param activations: The activations of this ProcessorResult.  # noqa: E501
        :type: int
        """

        self._activations = activations

    @property
    def exception(self):
        """Gets the exception of this ProcessorResult.  # noqa: E501


        :return: The exception of this ProcessorResult.  # noqa: E501
        :rtype: bool
        """
        return self._exception

    @exception.setter
    def exception(self, exception):
        """Sets the exception of this ProcessorResult.


        :param exception: The exception of this ProcessorResult.  # noqa: E501
        :type: bool
        """

        self._exception = exception

    @property
    def error(self):
        """Gets the error of this ProcessorResult.  # noqa: E501


        :return: The error of this ProcessorResult.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ProcessorResult.


        :param error: The error of this ProcessorResult.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def properties(self):
        """Gets the properties of this ProcessorResult.  # noqa: E501


        :return: The properties of this ProcessorResult.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ProcessorResult.


        :param properties: The properties of this ProcessorResult.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def results(self):
        """Gets the results of this ProcessorResult.  # noqa: E501


        :return: The results of this ProcessorResult.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._results

    @results.setter
    def results(self, results):
        """Sets the results of this ProcessorResult.


        :param results: The results of this ProcessorResult.  # noqa: E501
        :type: dict(str, object)
        """

        self._results = results

    @property
    def messages(self):
        """Gets the messages of this ProcessorResult.  # noqa: E501


        :return: The messages of this ProcessorResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ProcessorResult.


        :param messages: The messages of this ProcessorResult.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    @property
    def matches(self):
        """Gets the matches of this ProcessorResult.  # noqa: E501


        :return: The matches of this ProcessorResult.  # noqa: E501
        :rtype: list[str]
        """
        return self._matches

    @matches.setter
    def matches(self, matches):
        """Sets the matches of this ProcessorResult.


        :param matches: The matches of this ProcessorResult.  # noqa: E501
        :type: list[str]
        """

        self._matches = matches

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProcessorResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ProcessorResult):
            return True

        return self.to_dict() != other.to_dict()
