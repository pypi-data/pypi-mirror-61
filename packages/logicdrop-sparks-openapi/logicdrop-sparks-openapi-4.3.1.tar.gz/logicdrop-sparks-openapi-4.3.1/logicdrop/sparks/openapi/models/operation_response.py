# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class OperationResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'action': 'str',
        'status': 'str',
        'message': 'str',
        'size': 'int',
        'result': 'object'
    }

    attribute_map = {
        'action': 'action',
        'status': 'status',
        'message': 'message',
        'size': 'size',
        'result': 'result'
    }

    def __init__(self, action=None, status=None, message=None, size=None, result=None, local_vars_configuration=None):  # noqa: E501
        """OperationResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._action = None
        self._status = None
        self._message = None
        self._size = None
        self._result = None
        self.discriminator = None

        if action is not None:
            self.action = action
        if status is not None:
            self.status = status
        if message is not None:
            self.message = message
        if size is not None:
            self.size = size
        if result is not None:
            self.result = result

    @property
    def action(self):
        """Gets the action of this OperationResponse.  # noqa: E501

        Action performed  # noqa: E501

        :return: The action of this OperationResponse.  # noqa: E501
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this OperationResponse.

        Action performed  # noqa: E501

        :param action: The action of this OperationResponse.  # noqa: E501
        :type: str
        """

        self._action = action

    @property
    def status(self):
        """Gets the status of this OperationResponse.  # noqa: E501

        Action status  # noqa: E501

        :return: The status of this OperationResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this OperationResponse.

        Action status  # noqa: E501

        :param status: The status of this OperationResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["OK", "Created", "Accepted", "No Content", "Reset Content", "Partial Content", "Moved Permanently", "Found", "See Other", "Not Modified", "Use Proxy", "Temporary Redirect", "Bad Request", "Unauthorized", "Payment Required", "Forbidden", "Not Found", "Method Not Allowed", "Not Acceptable", "Proxy Authentication Required", "Request Timeout", "Conflict", "Gone", "Length Required", "Precondition Failed", "Request Entity Too Large", "Request-URI Too Long", "Unsupported Media Type", "Requested Range Not Satisfiable", "Expectation Failed", "Precondition Required", "Too Many Requests", "Request Header Fields Too Large", "Internal Server Error", "Not Implemented", "Bad Gateway", "Service Unavailable", "Gateway Timeout", "HTTP Version Not Supported", "Network Authentication Required"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def message(self):
        """Gets the message of this OperationResponse.  # noqa: E501

        Action message  # noqa: E501

        :return: The message of this OperationResponse.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this OperationResponse.

        Action message  # noqa: E501

        :param message: The message of this OperationResponse.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def size(self):
        """Gets the size of this OperationResponse.  # noqa: E501

        Size (number of records, bytes, etc.  # noqa: E501

        :return: The size of this OperationResponse.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this OperationResponse.

        Size (number of records, bytes, etc.  # noqa: E501

        :param size: The size of this OperationResponse.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def result(self):
        """Gets the result of this OperationResponse.  # noqa: E501

        Action result  # noqa: E501

        :return: The result of this OperationResponse.  # noqa: E501
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this OperationResponse.

        Action result  # noqa: E501

        :param result: The result of this OperationResponse.  # noqa: E501
        :type: object
        """

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OperationResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OperationResponse):
            return True

        return self.to_dict() != other.to_dict()
