# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class GenerateRulesRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'ruleset': 'str',
        'project': 'str',
        'version': 'str',
        'content': 'bool',
        'rules': 'list[str]'
    }

    attribute_map = {
        'ruleset': 'ruleset',
        'project': 'project',
        'version': 'version',
        'content': 'content',
        'rules': 'rules'
    }

    def __init__(self, ruleset=None, project=None, version=None, content=None, rules=None, local_vars_configuration=None):  # noqa: E501
        """GenerateRulesRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._ruleset = None
        self._project = None
        self._version = None
        self._content = None
        self._rules = None
        self.discriminator = None

        if ruleset is not None:
            self.ruleset = ruleset
        if project is not None:
            self.project = project
        if version is not None:
            self.version = version
        if content is not None:
            self.content = content
        self.rules = rules

    @property
    def ruleset(self):
        """Gets the ruleset of this GenerateRulesRequest.  # noqa: E501

        Ruleset name  # noqa: E501

        :return: The ruleset of this GenerateRulesRequest.  # noqa: E501
        :rtype: str
        """
        return self._ruleset

    @ruleset.setter
    def ruleset(self, ruleset):
        """Sets the ruleset of this GenerateRulesRequest.

        Ruleset name  # noqa: E501

        :param ruleset: The ruleset of this GenerateRulesRequest.  # noqa: E501
        :type: str
        """

        self._ruleset = ruleset

    @property
    def project(self):
        """Gets the project of this GenerateRulesRequest.  # noqa: E501

        Project name  # noqa: E501

        :return: The project of this GenerateRulesRequest.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this GenerateRulesRequest.

        Project name  # noqa: E501

        :param project: The project of this GenerateRulesRequest.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def version(self):
        """Gets the version of this GenerateRulesRequest.  # noqa: E501

        Ruleset version  # noqa: E501

        :return: The version of this GenerateRulesRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this GenerateRulesRequest.

        Ruleset version  # noqa: E501

        :param version: The version of this GenerateRulesRequest.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def content(self):
        """Gets the content of this GenerateRulesRequest.  # noqa: E501

        Include content?  # noqa: E501

        :return: The content of this GenerateRulesRequest.  # noqa: E501
        :rtype: bool
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this GenerateRulesRequest.

        Include content?  # noqa: E501

        :param content: The content of this GenerateRulesRequest.  # noqa: E501
        :type: bool
        """

        self._content = content

    @property
    def rules(self):
        """Gets the rules of this GenerateRulesRequest.  # noqa: E501

        Rule IDs to process  # noqa: E501

        :return: The rules of this GenerateRulesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this GenerateRulesRequest.

        Rule IDs to process  # noqa: E501

        :param rules: The rules of this GenerateRulesRequest.  # noqa: E501
        :type: list[str]
        """
        if self.local_vars_configuration.client_side_validation and rules is None:  # noqa: E501
            raise ValueError("Invalid value for `rules`, must not be `None`")  # noqa: E501

        self._rules = rules

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GenerateRulesRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, GenerateRulesRequest):
            return True

        return self.to_dict() != other.to_dict()
