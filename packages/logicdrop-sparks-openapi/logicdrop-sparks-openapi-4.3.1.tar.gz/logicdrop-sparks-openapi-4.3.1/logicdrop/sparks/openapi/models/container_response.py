# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class ContainerResponse(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'display': 'str',
        'description': 'str',
        'client': 'str',
        'project': 'str',
        'ruleset': 'str',
        'version': 'str',
        'uptime': 'str',
        'status': 'str'
    }

    attribute_map = {
        'display': 'display',
        'description': 'description',
        'client': 'client',
        'project': 'project',
        'ruleset': 'ruleset',
        'version': 'version',
        'uptime': 'uptime',
        'status': 'status'
    }

    def __init__(self, display=None, description=None, client=None, project=None, ruleset=None, version=None, uptime=None, status=None, local_vars_configuration=None):  # noqa: E501
        """ContainerResponse - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._display = None
        self._description = None
        self._client = None
        self._project = None
        self._ruleset = None
        self._version = None
        self._uptime = None
        self._status = None
        self.discriminator = None

        if display is not None:
            self.display = display
        if description is not None:
            self.description = description
        if client is not None:
            self.client = client
        if project is not None:
            self.project = project
        if ruleset is not None:
            self.ruleset = ruleset
        if version is not None:
            self.version = version
        if uptime is not None:
            self.uptime = uptime
        if status is not None:
            self.status = status

    @property
    def display(self):
        """Gets the display of this ContainerResponse.  # noqa: E501

        Display name  # noqa: E501

        :return: The display of this ContainerResponse.  # noqa: E501
        :rtype: str
        """
        return self._display

    @display.setter
    def display(self, display):
        """Sets the display of this ContainerResponse.

        Display name  # noqa: E501

        :param display: The display of this ContainerResponse.  # noqa: E501
        :type: str
        """

        self._display = display

    @property
    def description(self):
        """Gets the description of this ContainerResponse.  # noqa: E501

        Description  # noqa: E501

        :return: The description of this ContainerResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ContainerResponse.

        Description  # noqa: E501

        :param description: The description of this ContainerResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def client(self):
        """Gets the client of this ContainerResponse.  # noqa: E501

        Client name  # noqa: E501

        :return: The client of this ContainerResponse.  # noqa: E501
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """Sets the client of this ContainerResponse.

        Client name  # noqa: E501

        :param client: The client of this ContainerResponse.  # noqa: E501
        :type: str
        """

        self._client = client

    @property
    def project(self):
        """Gets the project of this ContainerResponse.  # noqa: E501

        Project name  # noqa: E501

        :return: The project of this ContainerResponse.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ContainerResponse.

        Project name  # noqa: E501

        :param project: The project of this ContainerResponse.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def ruleset(self):
        """Gets the ruleset of this ContainerResponse.  # noqa: E501

        Ruleset name  # noqa: E501

        :return: The ruleset of this ContainerResponse.  # noqa: E501
        :rtype: str
        """
        return self._ruleset

    @ruleset.setter
    def ruleset(self, ruleset):
        """Sets the ruleset of this ContainerResponse.

        Ruleset name  # noqa: E501

        :param ruleset: The ruleset of this ContainerResponse.  # noqa: E501
        :type: str
        """

        self._ruleset = ruleset

    @property
    def version(self):
        """Gets the version of this ContainerResponse.  # noqa: E501

        Version  # noqa: E501

        :return: The version of this ContainerResponse.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ContainerResponse.

        Version  # noqa: E501

        :param version: The version of this ContainerResponse.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def uptime(self):
        """Gets the uptime of this ContainerResponse.  # noqa: E501

        Total running time  # noqa: E501

        :return: The uptime of this ContainerResponse.  # noqa: E501
        :rtype: str
        """
        return self._uptime

    @uptime.setter
    def uptime(self, uptime):
        """Sets the uptime of this ContainerResponse.

        Total running time  # noqa: E501

        :param uptime: The uptime of this ContainerResponse.  # noqa: E501
        :type: str
        """

        self._uptime = uptime

    @property
    def status(self):
        """Gets the status of this ContainerResponse.  # noqa: E501

        Status of the container  # noqa: E501

        :return: The status of this ContainerResponse.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this ContainerResponse.

        Status of the container  # noqa: E501

        :param status: The status of this ContainerResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["RUNNING", "STOPPED", "ERROR"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ContainerResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ContainerResponse):
            return True

        return self.to_dict() != other.to_dict()
