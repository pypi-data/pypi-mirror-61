# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class FileResult(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'name': 'str',
        'path': 'str',
        'date': 'datetime',
        'extension': 'str',
        'type': 'str',
        'size': 'int',
        'filename': 'str',
        'folders': 'str',
        'source': 'str'
    }

    attribute_map = {
        'name': 'name',
        'path': 'path',
        'date': 'date',
        'extension': 'extension',
        'type': 'type',
        'size': 'size',
        'filename': 'filename',
        'folders': 'folders',
        'source': 'source'
    }

    def __init__(self, name=None, path=None, date=None, extension=None, type=None, size=None, filename=None, folders=None, source=None, local_vars_configuration=None):  # noqa: E501
        """FileResult - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._name = None
        self._path = None
        self._date = None
        self._extension = None
        self._type = None
        self._size = None
        self._filename = None
        self._folders = None
        self._source = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if path is not None:
            self.path = path
        if date is not None:
            self.date = date
        if extension is not None:
            self.extension = extension
        if type is not None:
            self.type = type
        if size is not None:
            self.size = size
        if filename is not None:
            self.filename = filename
        if folders is not None:
            self.folders = folders
        if source is not None:
            self.source = source

    @property
    def name(self):
        """Gets the name of this FileResult.  # noqa: E501


        :return: The name of this FileResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FileResult.


        :param name: The name of this FileResult.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def path(self):
        """Gets the path of this FileResult.  # noqa: E501


        :return: The path of this FileResult.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this FileResult.


        :param path: The path of this FileResult.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def date(self):
        """Gets the date of this FileResult.  # noqa: E501


        :return: The date of this FileResult.  # noqa: E501
        :rtype: datetime
        """
        return self._date

    @date.setter
    def date(self, date):
        """Sets the date of this FileResult.


        :param date: The date of this FileResult.  # noqa: E501
        :type: datetime
        """

        self._date = date

    @property
    def extension(self):
        """Gets the extension of this FileResult.  # noqa: E501


        :return: The extension of this FileResult.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this FileResult.


        :param extension: The extension of this FileResult.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def type(self):
        """Gets the type of this FileResult.  # noqa: E501


        :return: The type of this FileResult.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FileResult.


        :param type: The type of this FileResult.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def size(self):
        """Gets the size of this FileResult.  # noqa: E501


        :return: The size of this FileResult.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this FileResult.


        :param size: The size of this FileResult.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def filename(self):
        """Gets the filename of this FileResult.  # noqa: E501


        :return: The filename of this FileResult.  # noqa: E501
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this FileResult.


        :param filename: The filename of this FileResult.  # noqa: E501
        :type: str
        """

        self._filename = filename

    @property
    def folders(self):
        """Gets the folders of this FileResult.  # noqa: E501


        :return: The folders of this FileResult.  # noqa: E501
        :rtype: str
        """
        return self._folders

    @folders.setter
    def folders(self, folders):
        """Sets the folders of this FileResult.


        :param folders: The folders of this FileResult.  # noqa: E501
        :type: str
        """

        self._folders = folders

    @property
    def source(self):
        """Gets the source of this FileResult.  # noqa: E501


        :return: The source of this FileResult.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this FileResult.


        :param source: The source of this FileResult.  # noqa: E501
        :type: str
        """

        self._source = source

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FileResult):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FileResult):
            return True

        return self.to_dict() != other.to_dict()
