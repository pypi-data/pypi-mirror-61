# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class UserRegistration(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'email': 'str',
        'password': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'referrer': 'str',
        'campaign': 'str',
        'plan': 'str'
    }

    attribute_map = {
        'email': 'email',
        'password': 'password',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'referrer': 'referrer',
        'campaign': 'campaign',
        'plan': 'plan'
    }

    def __init__(self, email=None, password=None, first_name=None, last_name=None, referrer=None, campaign=None, plan=None, local_vars_configuration=None):  # noqa: E501
        """UserRegistration - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._email = None
        self._password = None
        self._first_name = None
        self._last_name = None
        self._referrer = None
        self._campaign = None
        self._plan = None
        self.discriminator = None

        self.email = email
        self.password = password
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if referrer is not None:
            self.referrer = referrer
        if campaign is not None:
            self.campaign = campaign
        if plan is not None:
            self.plan = plan

    @property
    def email(self):
        """Gets the email of this UserRegistration.  # noqa: E501


        :return: The email of this UserRegistration.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserRegistration.


        :param email: The email of this UserRegistration.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and email is None:  # noqa: E501
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def password(self):
        """Gets the password of this UserRegistration.  # noqa: E501


        :return: The password of this UserRegistration.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this UserRegistration.


        :param password: The password of this UserRegistration.  # noqa: E501
        :type: str
        """
        if self.local_vars_configuration.client_side_validation and password is None:  # noqa: E501
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def first_name(self):
        """Gets the first_name of this UserRegistration.  # noqa: E501


        :return: The first_name of this UserRegistration.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserRegistration.


        :param first_name: The first_name of this UserRegistration.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this UserRegistration.  # noqa: E501


        :return: The last_name of this UserRegistration.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserRegistration.


        :param last_name: The last_name of this UserRegistration.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def referrer(self):
        """Gets the referrer of this UserRegistration.  # noqa: E501


        :return: The referrer of this UserRegistration.  # noqa: E501
        :rtype: str
        """
        return self._referrer

    @referrer.setter
    def referrer(self, referrer):
        """Sets the referrer of this UserRegistration.


        :param referrer: The referrer of this UserRegistration.  # noqa: E501
        :type: str
        """

        self._referrer = referrer

    @property
    def campaign(self):
        """Gets the campaign of this UserRegistration.  # noqa: E501


        :return: The campaign of this UserRegistration.  # noqa: E501
        :rtype: str
        """
        return self._campaign

    @campaign.setter
    def campaign(self, campaign):
        """Sets the campaign of this UserRegistration.


        :param campaign: The campaign of this UserRegistration.  # noqa: E501
        :type: str
        """

        self._campaign = campaign

    @property
    def plan(self):
        """Gets the plan of this UserRegistration.  # noqa: E501


        :return: The plan of this UserRegistration.  # noqa: E501
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this UserRegistration.


        :param plan: The plan of this UserRegistration.  # noqa: E501
        :type: str
        """

        self._plan = plan

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserRegistration):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, UserRegistration):
            return True

        return self.to_dict() != other.to_dict()
