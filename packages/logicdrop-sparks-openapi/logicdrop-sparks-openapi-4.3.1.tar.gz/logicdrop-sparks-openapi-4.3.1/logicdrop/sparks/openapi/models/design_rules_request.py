# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class DesignRulesRequest(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'project': 'str',
        'ruleset': 'str',
        'version': 'str',
        'properties': 'dict(str, object)',
        'inputs': 'list[dict(str, object)]',
        'outputs': 'list[str]',
        'options': 'DesignerOptions',
        'rules': 'list[str]',
        'assertions': 'list[Assertion]'
    }

    attribute_map = {
        'project': 'project',
        'ruleset': 'ruleset',
        'version': 'version',
        'properties': 'properties',
        'inputs': 'inputs',
        'outputs': 'outputs',
        'options': 'options',
        'rules': 'rules',
        'assertions': 'assertions'
    }

    def __init__(self, project=None, ruleset=None, version=None, properties=None, inputs=None, outputs=None, options=None, rules=None, assertions=None, local_vars_configuration=None):  # noqa: E501
        """DesignRulesRequest - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._project = None
        self._ruleset = None
        self._version = None
        self._properties = None
        self._inputs = None
        self._outputs = None
        self._options = None
        self._rules = None
        self._assertions = None
        self.discriminator = None

        if project is not None:
            self.project = project
        if ruleset is not None:
            self.ruleset = ruleset
        if version is not None:
            self.version = version
        if properties is not None:
            self.properties = properties
        if inputs is not None:
            self.inputs = inputs
        if outputs is not None:
            self.outputs = outputs
        if options is not None:
            self.options = options
        if rules is not None:
            self.rules = rules
        if assertions is not None:
            self.assertions = assertions

    @property
    def project(self):
        """Gets the project of this DesignRulesRequest.  # noqa: E501

        Project name  # noqa: E501

        :return: The project of this DesignRulesRequest.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this DesignRulesRequest.

        Project name  # noqa: E501

        :param project: The project of this DesignRulesRequest.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def ruleset(self):
        """Gets the ruleset of this DesignRulesRequest.  # noqa: E501

        Ruleset name  # noqa: E501

        :return: The ruleset of this DesignRulesRequest.  # noqa: E501
        :rtype: str
        """
        return self._ruleset

    @ruleset.setter
    def ruleset(self, ruleset):
        """Sets the ruleset of this DesignRulesRequest.

        Ruleset name  # noqa: E501

        :param ruleset: The ruleset of this DesignRulesRequest.  # noqa: E501
        :type: str
        """

        self._ruleset = ruleset

    @property
    def version(self):
        """Gets the version of this DesignRulesRequest.  # noqa: E501

        Ruleset version  # noqa: E501

        :return: The version of this DesignRulesRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this DesignRulesRequest.

        Ruleset version  # noqa: E501

        :param version: The version of this DesignRulesRequest.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def properties(self):
        """Gets the properties of this DesignRulesRequest.  # noqa: E501

        User properties  # noqa: E501

        :return: The properties of this DesignRulesRequest.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this DesignRulesRequest.

        User properties  # noqa: E501

        :param properties: The properties of this DesignRulesRequest.  # noqa: E501
        :type: dict(str, object)
        """

        self._properties = properties

    @property
    def inputs(self):
        """Gets the inputs of this DesignRulesRequest.  # noqa: E501

        Inputs to process  # noqa: E501

        :return: The inputs of this DesignRulesRequest.  # noqa: E501
        :rtype: list[dict(str, object)]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this DesignRulesRequest.

        Inputs to process  # noqa: E501

        :param inputs: The inputs of this DesignRulesRequest.  # noqa: E501
        :type: list[dict(str, object)]
        """

        self._inputs = inputs

    @property
    def outputs(self):
        """Gets the outputs of this DesignRulesRequest.  # noqa: E501

        Outputs to return (by name)  # noqa: E501

        :return: The outputs of this DesignRulesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this DesignRulesRequest.

        Outputs to return (by name)  # noqa: E501

        :param outputs: The outputs of this DesignRulesRequest.  # noqa: E501
        :type: list[str]
        """

        self._outputs = outputs

    @property
    def options(self):
        """Gets the options of this DesignRulesRequest.  # noqa: E501


        :return: The options of this DesignRulesRequest.  # noqa: E501
        :rtype: DesignerOptions
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this DesignRulesRequest.


        :param options: The options of this DesignRulesRequest.  # noqa: E501
        :type: DesignerOptions
        """

        self._options = options

    @property
    def rules(self):
        """Gets the rules of this DesignRulesRequest.  # noqa: E501

        Rule ID(s) to execute  # noqa: E501

        :return: The rules of this DesignRulesRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this DesignRulesRequest.

        Rule ID(s) to execute  # noqa: E501

        :param rules: The rules of this DesignRulesRequest.  # noqa: E501
        :type: list[str]
        """

        self._rules = rules

    @property
    def assertions(self):
        """Gets the assertions of this DesignRulesRequest.  # noqa: E501

        Assertions to apply  # noqa: E501

        :return: The assertions of this DesignRulesRequest.  # noqa: E501
        :rtype: list[Assertion]
        """
        return self._assertions

    @assertions.setter
    def assertions(self, assertions):
        """Sets the assertions of this DesignRulesRequest.

        Assertions to apply  # noqa: E501

        :param assertions: The assertions of this DesignRulesRequest.  # noqa: E501
        :type: list[Assertion]
        """

        self._assertions = assertions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DesignRulesRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DesignRulesRequest):
            return True

        return self.to_dict() != other.to_dict()
