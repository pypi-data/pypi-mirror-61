# coding: utf-8

"""
    Sparks OpenAPI

    Generated documentation for the Logicdrop Sparks API and OpenAPI clients.  Logicdrop Sparks lets users build rules, analyze data, and automate documents.  Use it to make decisions faster, generate documents better, and learn from your data.  ### Documentation - [User Documentation](https://docs.logicdrop.com)  ### Modules - [Sparks Compute](https://docs.logicdrop.com/rules/introduction) - [Sparks Decision Tables](https://docs.logicdrop.com/rules/authoring-decision-tables) - [Sparks Documents](https://docs.logicdrop.com/documents/introduction)  ### Clients - [OpenAPI Clients](https://docs.logicdrop.com/development/sample-clients)  ### Security - [Authorizing API Requests](https://docs.logicdrop.com/development/authorization)   # noqa: E501

    The version of the OpenAPI document: v_VERSION_._BUILD_
    Contact: support@logicdrop.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from logicdrop.sparks.openapi.configuration import Configuration


class IdentityUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'subscriber_id': 'str',
        'name': 'str',
        'email': 'str',
        'phone': 'str',
        'picture': 'str',
        'verified': 'bool',
        'details': 'dict(str, object)'
    }

    attribute_map = {
        'subscriber_id': 'subscriberId',
        'name': 'name',
        'email': 'email',
        'phone': 'phone',
        'picture': 'picture',
        'verified': 'verified',
        'details': 'details'
    }

    def __init__(self, subscriber_id=None, name=None, email=None, phone=None, picture=None, verified=None, details=None, local_vars_configuration=None):  # noqa: E501
        """IdentityUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._subscriber_id = None
        self._name = None
        self._email = None
        self._phone = None
        self._picture = None
        self._verified = None
        self._details = None
        self.discriminator = None

        if subscriber_id is not None:
            self.subscriber_id = subscriber_id
        if name is not None:
            self.name = name
        if email is not None:
            self.email = email
        if phone is not None:
            self.phone = phone
        if picture is not None:
            self.picture = picture
        if verified is not None:
            self.verified = verified
        if details is not None:
            self.details = details

    @property
    def subscriber_id(self):
        """Gets the subscriber_id of this IdentityUser.  # noqa: E501


        :return: The subscriber_id of this IdentityUser.  # noqa: E501
        :rtype: str
        """
        return self._subscriber_id

    @subscriber_id.setter
    def subscriber_id(self, subscriber_id):
        """Sets the subscriber_id of this IdentityUser.


        :param subscriber_id: The subscriber_id of this IdentityUser.  # noqa: E501
        :type: str
        """

        self._subscriber_id = subscriber_id

    @property
    def name(self):
        """Gets the name of this IdentityUser.  # noqa: E501


        :return: The name of this IdentityUser.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this IdentityUser.


        :param name: The name of this IdentityUser.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def email(self):
        """Gets the email of this IdentityUser.  # noqa: E501


        :return: The email of this IdentityUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this IdentityUser.


        :param email: The email of this IdentityUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def phone(self):
        """Gets the phone of this IdentityUser.  # noqa: E501


        :return: The phone of this IdentityUser.  # noqa: E501
        :rtype: str
        """
        return self._phone

    @phone.setter
    def phone(self, phone):
        """Sets the phone of this IdentityUser.


        :param phone: The phone of this IdentityUser.  # noqa: E501
        :type: str
        """

        self._phone = phone

    @property
    def picture(self):
        """Gets the picture of this IdentityUser.  # noqa: E501


        :return: The picture of this IdentityUser.  # noqa: E501
        :rtype: str
        """
        return self._picture

    @picture.setter
    def picture(self, picture):
        """Sets the picture of this IdentityUser.


        :param picture: The picture of this IdentityUser.  # noqa: E501
        :type: str
        """

        self._picture = picture

    @property
    def verified(self):
        """Gets the verified of this IdentityUser.  # noqa: E501


        :return: The verified of this IdentityUser.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this IdentityUser.


        :param verified: The verified of this IdentityUser.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def details(self):
        """Gets the details of this IdentityUser.  # noqa: E501


        :return: The details of this IdentityUser.  # noqa: E501
        :rtype: dict(str, object)
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this IdentityUser.


        :param details: The details of this IdentityUser.  # noqa: E501
        :type: dict(str, object)
        """

        self._details = details

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IdentityUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IdentityUser):
            return True

        return self.to_dict() != other.to_dict()
