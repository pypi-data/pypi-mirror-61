#!/usr/bin/python3
"""
The main Topoly module collecting the functions designed for the users.

Pawel Dabrowski-Tumanski
p.dabrowski at cent.uw.edu.pl
04.09.2019

Docs:
https://realpython.com/documenting-python-code/#docstring-types

The type used here: Google

Support in PyCharm:
https://www.jetbrains.com/help/pycharm/settings-tools-python-integrated-tools.html
- change default reStructuredText to Google

Docs will be published in: https://readthedocs.org/
"""

from .manipulation import *
from .invariants import *
from topoly.topoly_knot import *
from topoly.topoly_preprocess import *
from .codes import *
from .plotting import KnotMap, Reader
from .params import *
from .polygongen import Polygon_lasso, Polygon_loop, Polygon_walk, Polygon_handcuff
from .lasso import Lasso
from .gln import GLN
from .convert import convert_xyz2vmd
from .knotcon import create, export


def getpoly(invariant, topolname, value=None):
    """
    Generates list of objects which have polynomial value corresponding
    to given invariant type and topolname. These objects can be
    multiplied (*) to find polynomial of joined structures and added (+)
    to find polynomial of unjoined union.

    Args:
        invariant (str):
                Name of invariant (and its abbreviation): 
                'Alexander' ('a'), 'Conway' ('c'), 'Jones' ('j'), 
                'HOMFLYPT' ('h'), 'Yamada' ('y'), 'BLMHo' ('b'),
                'Kauffman bracket' ('kb'), 'Kauffman polynomial' ('kp'),
        topolname (str): 
                Topology name i.e. "3_1", "-5_1", "t3_1"
        value(str, optional): 
                Polynomial of given topolname structure. If nothing is
                given searches for linkname value in polvalues.py. 
                Default: None.

    Returns:
        list of Polynomial objects
    """
    return create(invariant, topolname, value)


def exportpoly(polynomials, exportfile='new_polvalues.py'):
    """
    Sends list of Polynomial objects generated by getpoly to chosen
    exportfile, that can be used as an alternative dictionary.

    Args:
        polynomials (list of Poly objects):
                List of objects generated by getpoly.
        exportfile (str, optional): 
                Name of file where polynomial reocrds will be written.
                Default: 'new_polvalues.py'.

    Returns:
        None
    """
    return export(polynomials, exportfile)


def alexander(input_data, closure=Closure.TWO_POINTS, tries=200, boundaries=None,
              reduce_method=ReduceMethod.KMT, max_cross=15, poly_reduce=True, translate=True,
              external_dictionary='', hide_trivial=True, chiral=False, matrix=False, density=1,
              level=0, matrix_plot=False, plot_ofile="KnotFingerPrintMap", matrix_cutoff=0.48,
              plot_format=PlotFormat.PNG, output_file='', output_format=OutputFormat.Dictionary,
              cuda=True, run_parallel=True, parallel_workers=None, palette=Colors.Knots, arrows=True, debug=False):
    """
    Calculates the Alexander polynomial of the given structure.

    Args:
        input_data (str/list):
                The structure to calculate the polynomial
                for, given in abstract code, coordinates, or the path to
                the file containing the data.
        closure (str, optional):
                The method to close the chain. Viable options are the
                parameters of the Closure class.
                Default: Closure.TWO_POINTS
        tries (int, optional):
                the number of tries for stochastic closure methods.
                Default: 200
        boundaries (list of [int, int], optional):
                the boundaries of the subchains to be checked. The
                subchains are specified as a list of subchain beginning
                and ending index. If empty, the whole chain is
                calculated. Default: None
        reduce_method (str, optional):
                the method of chain reduction. Viable options are the
                parameters of the ReduceMethod class.
                Default: ReduceMethod.KMT
        max_cross (int, optional):
                the maximal number of crossings after reduction to start
                the polynomial calculation. Default: 15
        poly_reduce (bool, optional):
                if the polynomial should be presented in the reduced
                form. Default: False
        translate (bool, optional):
                if translate the polynomial to the structure topology
                using the dictionary. Default: False
        external_dictionary (str, optional):
                the path to the file with the external dictionary of the
                polynomials. Default: ''
        hide_trivial (bool, optional):
                if to suppress printing out the trivial results.
                Default: True
        chiral (bool, optional):
                If the chirality should be taken into account.
                By default False.
        matrix (bool, optional):
                if to calculate the whole matrix i.e. the polynomial for
                each subchain. Default: False
        density (int, optional):
                the inverse of resolution of matrix calculation. Higher
                number speeds up calculation, but may result in omitting
                some non-trivial subchains. Default: 1
        level (float, optional): the cutoff of the non-trivial structure
                probability. If 0, all the subchains with at least one
                non-trivial closure are treated as non-trivial.
                Default: 0
        matrix_plot (bool, optional):
                if to plot a figure of a matrix (knot fingerprint).
                Default: False
        plot_ofile (str, optional):
                the name of the matrix figure plot.
                Default: KnotFingerPrintMap
        plot_format (str, optional):
                the format of the matrix figure plot. Viable formats are
                the parameters of the PlotFormat class.
                Default: PlotFormat.PNG
        output_file (str, optional):
                the name of the file with the matrix results. If empty,
                the resulting matrix is returned to source. Default: ''
        output_format (str, optional):
                the format of the matrix output. The viable formats are
                the parameters of the OutputFormat class.
                Default: OutputFormat.DICTIONARY
        cuda (bool, optional):
                if to use the cuda-provided acceleration if possible.
                Default: True
        run_parallel (bool, optional):
                if to use the Python-provided parallelization of
                calculation. Default: True
        parallel_workers (int, optional):
                number of parallel workers. If 0, all the available
                processors will be used. Default: 0
        debug (bool, optional): the debug mode. Default: False

    Returns:
        The dictionary with the Alexander polynomial results. For each
        subchain a separate dictionary with different polynomial
        probabilities is created.
    """
    result = Invariant(input_data)
    return result.calculate(
                AlexanderGraph, closure=closure, tries=tries, boundaries=boundaries,
                reduce_method=reduce_method, max_cross=max_cross, poly_reduce=poly_reduce,
                translate=translate, external_dictionary=external_dictionary,
                hide_trivial=hide_trivial, chiral=chiral, matrix=matrix, density=density,
                level=level, matrix_plot=matrix_plot, plot_ofile=plot_ofile, matrix_cutoff=matrix_cutoff,
                plot_format=plot_format, output_file=output_file, output_format=output_format,
                cuda=cuda, run_parallel=run_parallel, parallel_workers=parallel_workers,
                palette=palette, arrows=arrows, debug=debug)


def jones(input_data, closure=Closure.TWO_POINTS, tries=200, boundaries=None,
          reduce_method=ReduceMethod.KMT, max_cross=15, poly_reduce=True, translate=True,
          external_dictionary='', hide_trivial=True, chiral=False, matrix=False, density=1,
          level=0, matrix_plot=False, plot_ofile="KnotFingerPrintMap", matrix_cutoff=0.48,
          plot_format=PlotFormat.PNG, output_file='', output_format=OutputFormat.Dictionary,
          cuda=True, run_parallel=True, parallel_workers=None, palette=Colors.Knots, arrows=True, debug=False):
    """
    Calculates the Jones polynomial of the given structure.

    Args:
        input_data (str/list):
                The structure to calculate the polynomial
                for, given in abstract code, coordinates, or the path to
                the file containing the data.
        closure (str, optional):
                The method to close the chain. Viable options are the
                parameters of the Closure class.
                Default: Closure.TWO_POINTS
        tries (int, optional):
                the number of tries for stochastic closure methods.
                Default: 200
        boundaries (list of [int, int], optional):
                the boundaries of the subchains to be checked. The
                subchains are specified as a list of subchain beginning
                and ending index. If empty, the whole chain is
                calculated. Default: None
        reduce_method (str, optional):
                the method of chain reduction. Viable options are the
                parameters of the ReduceMethod class.
                Default: ReduceMethod.KMT
        max_cross (int, optional):
                the maximal number of crossings after reduction to start
                the polynomial calculation. Default: 15
        poly_reduce (bool, optional):
                if the polynomial should be presented in the reduced
                form. Default: False
        translate (bool, optional):
                if translate the polynomial to the structure topology
                using the dictionary. Default: False
        external_dictionary (str, optional):
                the path to the file with the external dictionary of the
                polynomials. Default: ''
        hide_trivial (bool, optional):
                if to suppress printing out the trivial results.
                Default: True
        chiral (bool, optional):
                If the chirality should be taken into account.
                By default False.
        matrix (bool, optional):
                if to calculate the whole matrix i.e. the polynomial for
                each subchain. Default: False
        density (int, optional):
                the inverse of resolution of matrix calculation. Higher
                number speeds up calculation, but may result in omitting
                some non-trivial subchains. Default: 1
        level (float, optional): the cutoff of the non-trivial structure
                probability. If 0, all the subchains with at least one
                non-trivial closure are treated as non-trivial.
                Default: 0
        matrix_plot (bool, optional):
                if to plot a figure of a matrix (knot fingerprint).
                Default: False
        plot_ofile (str, optional):
                the name of the matrix figure plot.
                Default: KnotFingerPrintMap
        plot_format (str, optional):
                the format of the matrix figure plot. Viable formats are
                the parameters of the PlotFormat class.
                Default: PlotFormat.PNG
        output_file (str, optional):
                the name of the file with the matrix results. If empty,
                the resulting matrix is returned to source. Default: ''
        output_format (str, optional):
                the format of the matrix output. The viable formats are
                the parameters of the OutputFormat class.
                Default: OutputFormat.DICTIONARY
        cuda (bool, optional):
                if to use the cuda-provided acceleration if possible.
                Default: True
        run_parallel (bool, optional):
                if to use the Python-provided parallelization of
                calculation. Default: True
        parallel_workers (int, optional):
                number of parallel workers. If 0, all the available
                processors will be used. Default: 0
        debug (bool, optional): the debug mode. Default: False

    Returns:
        The dictionary with the Jones polynomial results. For each
        subchain a separate dictionary with different polynomial
        probabilities is created.
    """
    result = Invariant(input_data)
    return result.calculate(
                JonesGraph, closure=closure, tries=tries, boundaries=boundaries,
                reduce_method=reduce_method, max_cross=max_cross, poly_reduce=poly_reduce,
                translate=translate, external_dictionary=external_dictionary,
                hide_trivial=hide_trivial, chiral=chiral, matrix=matrix, density=density,
                level=level, matrix_plot=matrix_plot, plot_ofile=plot_ofile, matrix_cutoff=matrix_cutoff,
                plot_format=plot_format, output_file=output_file, output_format=output_format,
                cuda=cuda, run_parallel=run_parallel, parallel_workers=parallel_workers,
                palette=palette, arrows=arrows, debug=debug)


def conway(input_data, closure=Closure.TWO_POINTS, tries=200, boundaries=None,
           reduce_method=ReduceMethod.KMT, max_cross=15, poly_reduce=True, translate=True,
           external_dictionary='', hide_trivial=True, chiral=False, matrix=False, density=1,
           level=0, matrix_plot=False, plot_ofile="KnotFingerPrintMap", matrix_cutoff=0.48,
           plot_format=PlotFormat.PNG, output_file='', output_format=OutputFormat.Dictionary,
           cuda=True, run_parallel=True, parallel_workers=None, palette=Colors.Knots, arrows=True, debug=False):
    """
    Calculates the Conway polynomial of the given structure.

    Args:
        input_data (str/list):
                The structure to calculate the polynomial
                for, given in abstract code, coordinates, or the path to
                the file containing the data.
        closure (str, optional):
                The method to close the chain. Viable options are the
                parameters of the Closure class.
                Default: Closure.TWO_POINTS
        tries (int, optional):
                the number of tries for stochastic closure methods.
                Default: 200
        boundaries (list of [int, int], optional):
                the boundaries of the subchains to be checked. The
                subchains are specified as a list of subchain beginning
                and ending index. If empty, the whole chain is
                calculated. Default: None
        reduce_method (str, optional):
                the method of chain reduction. Viable options are the
                parameters of the ReduceMethod class.
                Default: ReduceMethod.KMT
        max_cross (int, optional):
                the maximal number of crossings after reduction to start
                the polynomial calculation. Default: 15
        poly_reduce (bool, optional):
                if the polynomial should be presented in the reduced
                form. Default: False
        translate (bool, optional):
                if translate the polynomial to the structure topology
                using the dictionary. Default: False
        external_dictionary (str, optional):
                the path to the file with the external dictionary of the
                polynomials. Default: ''
        hide_trivial (bool, optional):
                if to suppress printing out the trivial results.
                Default: True
        chiral (bool, optional):
                If the chirality should be taken into account.
                By default False.
        matrix (bool, optional):
                if to calculate the whole matrix i.e. the polynomial for
                each subchain. Default: False
        density (int, optional):
                the inverse of resolution of matrix calculation. Higher
                number speeds up calculation, but may result in omitting
                some non-trivial subchains. Default: 1
        level (float, optional): the cutoff of the non-trivial structure
                probability. If 0, all the subchains with at least one
                non-trivial closure are treated as non-trivial.
                Default: 0
        matrix_plot (bool, optional):
                if to plot a figure of a matrix (knot fingerprint).
                Default: False
        plot_ofile (str, optional):
                the name of the matrix figure plot.
                Default: KnotFingerPrintMap
        plot_format (str, optional):
                the format of the matrix figure plot. Viable formats are
                the parameters of the PlotFormat class.
                Default: PlotFormat.PNG
        output_file (str, optional):
                the name of the file with the matrix results. If empty,
                the resulting matrix is returned to source. Default: ''
        output_format (str, optional):
                the format of the matrix output. The viable formats are
                the parameters of the OutputFormat class.
                Default: OutputFormat.DICTIONARY
        cuda (bool, optional):
                if to use the cuda-provided acceleration if possible.
                Default: True
        run_parallel (bool, optional):
                if to use the Python-provided parallelization of
                calculation. Default: True
        parallel_workers (int, optional):
                number of parallel workers. If 0, all the available
                processors will be used. Default: 0
        debug (bool, optional): the debug mode. Default: False

    Returns:
        The dictionary with the Conway polynomial results. For each
        subchain a separate dictionary with different polynomial
        probabilities is created.
    """
    result = Invariant(input_data)
    return result.calculate(
                ConwayGraph, closure=closure, tries=tries, boundaries=boundaries,
                reduce_method=reduce_method, max_cross=max_cross, poly_reduce=poly_reduce,
                translate=translate, external_dictionary=external_dictionary,
                hide_trivial=hide_trivial, chiral=chiral, matrix=matrix, density=density,
                level=level, matrix_plot=matrix_plot, plot_ofile=plot_ofile, matrix_cutoff=matrix_cutoff,
                plot_format=plot_format, output_file=output_file, output_format=output_format,
                cuda=cuda, run_parallel=run_parallel, parallel_workers=parallel_workers,
                palette=palette, arrows=arrows, debug=debug)


def homfly(input_data, closure=Closure.TWO_POINTS, tries=200, boundaries=None,
           reduce_method=ReduceMethod.KMT, max_cross=15, poly_reduce=True, translate=True,
           external_dictionary='', hide_trivial=True, chiral=False, matrix=False, density=1,
           level=0, matrix_plot=False, plot_ofile="KnotFingerPrintMap", matrix_cutoff=0.48,
           plot_format=PlotFormat.PNG, output_file='', output_format=OutputFormat.Dictionary,
           cuda=True, run_parallel=True, parallel_workers=None, palette=Colors.Knots, arrows=True, debug=False):
    """
    Calculates the HOMFLY-PT polynomial of the given structure.

    Args:
        input_data (str/list):
                The structure to calculate the polynomial
                for, given in abstract code, coordinates, or the path to
                the file containing the data.
        closure (str, optional):
                The method to close the chain. Viable options are the
                parameters of the Closure class.
                Default: Closure.TWO_POINTS
        tries (int, optional):
                the number of tries for stochastic closure methods.
                Default: 200
        boundaries (list of [int, int], optional):
                the boundaries of the subchains to be checked. The
                subchains are specified as a list of subchain beginning
                and ending index. If empty, the whole chain is
                calculated. Default: None
        reduce_method (str, optional):
                the method of chain reduction. Viable options are the
                parameters of the ReduceMethod class.
                Default: ReduceMethod.KMT
        max_cross (int, optional):
                the maximal number of crossings after reduction to start
                the polynomial calculation. Default: 15
        poly_reduce (bool, optional):
                if the polynomial should be presented in the reduced
                form. Default: False
        translate (bool, optional):
                if translate the polynomial to the structure topology
                using the dictionary. Default: False
        external_dictionary (str, optional):
                the path to the file with the external dictionary of the
                polynomials. Default: ''
        hide_trivial (bool, optional):
                if to suppress printing out the trivial results.
                Default: True
        chiral (bool, optional):
                If the chirality should be taken into account.
                By default False.
        matrix (bool, optional):
                if to calculate the whole matrix i.e. the polynomial for
                each subchain. Default: False
        density (int, optional):
                the inverse of resolution of matrix calculation. Higher
                number speeds up calculation, but may result in omitting
                some non-trivial subchains. Default: 1
        level (float, optional): the cutoff of the non-trivial structure
                probability. If 0, all the subchains with at least one
                non-trivial closure are treated as non-trivial.
                Default: 0
        matrix_plot (bool, optional):
                if to plot a figure of a matrix (knot fingerprint).
                Default: False
        plot_ofile (str, optional):
                the name of the matrix figure plot.
                Default: KnotFingerPrintMap
        plot_format (str, optional):
                the format of the matrix figure plot. Viable formats are
                the parameters of the PlotFormat class.
                Default: PlotFormat.PNG
        output_file (str, optional):
                the name of the file with the matrix results. If empty,
                the resulting matrix is returned to source. Default: ''
        output_format (str, optional):
                the format of the matrix output. The viable formats are
                the parameters of the OutputFormat class.
                Default: OutputFormat.DICTIONARY
        cuda (bool, optional):
                if to use the cuda-provided acceleration if possible.
                Default: True
        run_parallel (bool, optional):
                if to use the Python-provided parallelization of
                calculation. Default: True
        parallel_workers (int, optional):
                number of parallel workers. If 0, all the available
                processors will be used. Default: 0
        debug (bool, optional): the debug mode. Default: False

    Returns:
        The dictionary with the HOMFLY-PT polynomial results. For each
        subchain a separate dictionary with different polynomial
        probabilities is created.
    """
    result = Invariant(input_data)
    return result.calculate(
                HomflyGraph, closure=closure, tries=tries, boundaries=boundaries,
                reduce_method=reduce_method, max_cross=max_cross, poly_reduce=poly_reduce,
                translate=translate, external_dictionary=external_dictionary,
                hide_trivial=hide_trivial, chiral=chiral, matrix=matrix, density=density,
                level=level, matrix_plot=matrix_plot, plot_ofile=plot_ofile, matrix_cutoff=matrix_cutoff,
                plot_format=plot_format, output_file=output_file, output_format=output_format,
                cuda=cuda, run_parallel=run_parallel, parallel_workers=parallel_workers,
                palette=palette, arrows=arrows, debug=debug)


def yamada(input_data, closure=Closure.TWO_POINTS, tries=200, boundaries=None,
           reduce_method=ReduceMethod.KMT, max_cross=15, poly_reduce=True, translate=True,
           external_dictionary='', hide_trivial=True, chiral=False, matrix=False, density=1,
           level=0, matrix_plot=False, plot_ofile="KnotFingerPrintMap", matrix_cutoff=0.48,
           plot_format=PlotFormat.PNG, output_file='', output_format=OutputFormat.Dictionary,
           cuda=True, run_parallel=True, parallel_workers=None, palette=Colors.Knots, arrows=True, debug=False):
    """
    Calculates the Yamada polynomial of the given structure.

    Args:
        input_data (str/list):
                The structure to calculate the polynomial
                for, given in abstract code, coordinates, or the path to
                the file containing the data.
        closure (str, optional):
                The method to close the chain. Viable options are the
                parameters of the Closure class.
                Default: Closure.TWO_POINTS
        tries (int, optional):
                the number of tries for stochastic closure methods.
                Default: 200
        boundaries (list of [int, int], optional):
                the boundaries of the subchains to be checked. The
                subchains are specified as a list of subchain beginning
                and ending index. If empty, the whole chain is
                calculated. Default: None
        reduce_method (str, optional):
                the method of chain reduction. Viable options are the
                parameters of the ReduceMethod class.
                Default: ReduceMethod.KMT
        max_cross (int, optional):
                the maximal number of crossings after reduction to start
                the polynomial calculation. Default: 15
        poly_reduce (bool, optional):
                if the polynomial should be presented in the reduced
                form. Default: False
        translate (bool, optional):
                if translate the polynomial to the structure topology
                using the dictionary. Default: False
        external_dictionary (str, optional):
                the path to the file with the external dictionary of the
                polynomials. Default: ''
        hide_trivial (bool, optional):
                if to suppress printing out the trivial results.
                Default: True
        chiral (bool, optional):
                If the chirality should be taken into account.
                By default False.
        matrix (bool, optional):
                if to calculate the whole matrix i.e. the polynomial for
                each subchain. Default: False
        density (int, optional):
                the inverse of resolution of matrix calculation. Higher
                number speeds up calculation, but may result in omitting
                some non-trivial subchains. Default: 1
        level (float, optional): the cutoff of the non-trivial structure
                probability. If 0, all the subchains with at least one
                non-trivial closure are treated as non-trivial.
                Default: 0
        matrix_plot (bool, optional):
                if to plot a figure of a matrix (knot fingerprint).
                Default: False
        plot_ofile (str, optional):
                the name of the matrix figure plot.
                Default: KnotFingerPrintMap
        plot_format (str, optional):
                the format of the matrix figure plot. Viable formats are
                the parameters of the PlotFormat class.
                Default: PlotFormat.PNG
        output_file (str, optional):
                the name of the file with the matrix results. If empty,
                the resulting matrix is returned to source. Default: ''
        output_format (str, optional):
                the format of the matrix output. The viable formats are
                the parameters of the OutputFormat class.
                Default: OutputFormat.DICTIONARY
        cuda (bool, optional):
                if to use the cuda-provided acceleration if possible.
                Default: True
        run_parallel (bool, optional):
                if to use the Python-provided parallelization of
                calculation. Default: True
        parallel_workers (int, optional):
                number of parallel workers. If 0, all the available
                processors will be used. Default: 0
        debug (bool, optional): the debug mode. Default: False

    Returns:
        The dictionary with the Yamada polynomial results. For each
        subchain a separate dictionary with different polynomial
        probabilities is created.
    """
    result = Invariant(input_data)
    return result.calculate(
                YamadaGraph, closure=closure, tries=tries, boundaries=boundaries,
                reduce_method=reduce_method, max_cross=max_cross, poly_reduce=poly_reduce,
                translate=translate, external_dictionary=external_dictionary,
                hide_trivial=hide_trivial, chiral=chiral, matrix=matrix, density=density,
                level=level, matrix_plot=matrix_plot, plot_ofile=plot_ofile, matrix_cutoff=matrix_cutoff,
                plot_format=plot_format, output_file=output_file, output_format=output_format,
                cuda=cuda, run_parallel=run_parallel, parallel_workers=parallel_workers,
                palette=palette, arrows=arrows, debug=debug)


def kauffman_bracket(input_data, closure=Closure.TWO_POINTS, tries=200, boundaries=None,
                reduce_method=ReduceMethod.KMT, max_cross=15, poly_reduce=True, translate=True,
                external_dictionary='', hide_trivial=True, chiral=False, matrix=False, density=1,
                level=0, matrix_plot=False, plot_ofile="KnotFingerPrintMap", matrix_cutoff=0.48,
                plot_format=PlotFormat.PNG, output_file='', output_format=OutputFormat.Dictionary,
                cuda=True, run_parallel=True, parallel_workers=None, palette=Colors.Knots, arrows=True, debug=False):
    """
    Calculates the Kauffman bracket of the given structure.

    Args:
        input_data (str/list):
                The structure to calculate the polynomial
                for, given in abstract code, coordinates, or the path to
                the file containing the data.
        closure (str, optional):
                The method to close the chain. Viable options are the
                parameters of the Closure class.
                Default: Closure.TWO_POINTS
        tries (int, optional):
                the number of tries for stochastic closure methods.
                Default: 200
        boundaries (list of [int, int], optional):
                the boundaries of the subchains to be checked. The
                subchains are specified as a list of subchain beginning
                and ending index. If empty, the whole chain is
                calculated. Default: None
        reduce_method (str, optional):
                the method of chain reduction. Viable options are the
                parameters of the ReduceMethod class.
                Default: ReduceMethod.KMT
        max_cross (int, optional):
                the maximal number of crossings after reduction to start
                the polynomial calculation. Default: 15
        poly_reduce (bool, optional):
                if the polynomial should be presented in the reduced
                form. Default: False
        translate (bool, optional):
                if translate the polynomial to the structure topology
                using the dictionary. Default: False
        external_dictionary (str, optional):
                the path to the file with the external dictionary of the
                polynomials. Default: ''
        hide_trivial (bool, optional):
                if to suppress printing out the trivial results.
                Default: True
        chiral (bool, optional):
                If the chirality should be taken into account.
                By default False.
        matrix (bool, optional):
                if to calculate the whole matrix i.e. the polynomial for
                each subchain. Default: False
        density (int, optional):
                the inverse of resolution of matrix calculation. Higher
                number speeds up calculation, but may result in omitting
                some non-trivial subchains. Default: 1
        level (float, optional): the cutoff of the non-trivial structure
                probability. If 0, all the subchains with at least one
                non-trivial closure are treated as non-trivial.
                Default: 0
        matrix_plot (bool, optional):
                if to plot a figure of a matrix (knot fingerprint).
                Default: False
        plot_ofile (str, optional):
                the name of the matrix figure plot.
                Default: KnotFingerPrintMap
        plot_format (str, optional):
                the format of the matrix figure plot. Viable formats are
                the parameters of the PlotFormat class.
                Default: PlotFormat.PNG
        output_file (str, optional):
                the name of the file with the matrix results. If empty,
                the resulting matrix is returned to source. Default: ''
        output_format (str, optional):
                the format of the matrix output. The viable formats are
                the parameters of the OutputFormat class.
                Default: OutputFormat.DICTIONARY
        cuda (bool, optional):
                if to use the cuda-provided acceleration if possible.
                Default: True
        run_parallel (bool, optional):
                if to use the Python-provided parallelization of
                calculation. Default: True
        parallel_workers (int, optional):
                number of parallel workers. If 0, all the available
                processors will be used. Default: 0
        debug (bool, optional): the debug mode. Default: False

    Returns:
        The dictionary with the Kauffman bracket results. For each
        subchain a separate dictionary with different polynomial
        probabilities is created.
    """
    result = Invariant(input_data)
    return result.calculate(
                KauffmanBracketGraph, closure=closure, tries=tries, boundaries=boundaries,
                reduce_method=reduce_method, max_cross=max_cross, poly_reduce=poly_reduce,
                translate=translate, external_dictionary=external_dictionary,
                hide_trivial=hide_trivial, chiral=chiral, matrix=matrix, density=density,
                level=level, matrix_plot=matrix_plot, plot_ofile=plot_ofile, matrix_cutoff=matrix_cutoff,
                plot_format=plot_format, output_file=output_file, output_format=output_format,
                cuda=cuda, run_parallel=run_parallel, parallel_workers=parallel_workers,
                palette=palette, arrows=arrows, debug=debug)


def kauffman_polynomial(input_data, closure=Closure.TWO_POINTS, tries=200, boundaries=None,
                reduce_method=ReduceMethod.KMT, max_cross=15, poly_reduce=True, translate=True,
                external_dictionary='', hide_trivial=True, chiral=False, matrix=False, density=1,
                level=0, matrix_plot=False, plot_ofile="KnotFingerPrintMap", matrix_cutoff=0.48,
                plot_format=PlotFormat.PNG, output_file='', output_format=OutputFormat.Dictionary,
                cuda=True, run_parallel=True, parallel_workers=None, palette=Colors.Knots, arrows=True, debug=False):
    """
    Calculates the Kauffman two-variable polynomial of the given structure.

    Args:
        input_data (str/list):
                The structure to calculate the polynomial
                for, given in abstract code, coordinates, or the path to
                the file containing the data.
        closure (str, optional):
                The method to close the chain. Viable options are the
                parameters of the Closure class.
                Default: Closure.TWO_POINTS
        tries (int, optional):
                the number of tries for stochastic closure methods.
                Default: 200
        boundaries (list of [int, int], optional):
                the boundaries of the subchains to be checked. The
                subchains are specified as a list of subchain beginning
                and ending index. If empty, the whole chain is
                calculated. Default: None
        reduce_method (str, optional):
                the method of chain reduction. Viable options are the
                parameters of the ReduceMethod class.
                Default: ReduceMethod.KMT
        max_cross (int, optional):
                the maximal number of crossings after reduction to start
                the polynomial calculation. Default: 15
        poly_reduce (bool, optional):
                if the polynomial should be presented in the reduced
                form. Default: False
        translate (bool, optional):
                if translate the polynomial to the structure topology
                using the dictionary. Default: False
        external_dictionary (str, optional):
                the path to the file with the external dictionary of the
                polynomials. Default: ''
        hide_trivial (bool, optional):
                if to suppress printing out the trivial results.
                Default: True
        chiral (bool, optional):
                If the chirality should be taken into account.
                By default False.
        matrix (bool, optional):
                if to calculate the whole matrix i.e. the polynomial for
                each subchain. Default: False
        density (int, optional):
                the inverse of resolution of matrix calculation. Higher
                number speeds up calculation, but may result in omitting
                some non-trivial subchains. Default: 1
        level (float, optional): the cutoff of the non-trivial structure
                probability. If 0, all the subchains with at least one
                non-trivial closure are treated as non-trivial.
                Default: 0
        matrix_plot (bool, optional):
                if to plot a figure of a matrix (knot fingerprint).
                Default: False
        plot_ofile (str, optional):
                the name of the matrix figure plot.
                Default: KnotFingerPrintMap
        plot_format (str, optional):
                the format of the matrix figure plot. Viable formats are
                the parameters of the PlotFormat class.
                Default: PlotFormat.PNG
        output_file (str, optional):
                the name of the file with the matrix results. If empty,
                the resulting matrix is returned to source. Default: ''
        output_format (str, optional):
                the format of the matrix output. The viable formats are
                the parameters of the OutputFormat class.
                Default: OutputFormat.DICTIONARY
        cuda (bool, optional):
                if to use the cuda-provided acceleration if possible.
                Default: True
        run_parallel (bool, optional):
                if to use the Python-provided parallelization of
                calculation. Default: True
        parallel_workers (int, optional):
                number of parallel workers. If 0, all the available
                processors will be used. Default: 0
        debug (bool, optional): the debug mode. Default: False

    Returns:
        The dictionary with the Kauffman two-variable polynomial
        results. For each subchain a separate dictionary with different
        polynomial probabilities is created.
    """
    result = Invariant(input_data)
    return result.calculate(
                KauffmanPolynomialGraph, closure=closure, tries=tries, boundaries=boundaries,
                reduce_method=reduce_method, max_cross=max_cross, poly_reduce=poly_reduce,
                translate=translate, external_dictionary=external_dictionary,
                hide_trivial=hide_trivial, chiral=chiral, matrix=matrix, density=density,
                level=level, matrix_plot=matrix_plot, plot_ofile=plot_ofile, matrix_cutoff=matrix_cutoff,
                plot_format=plot_format, output_file=output_file, output_format=output_format,
                cuda=cuda, run_parallel=run_parallel, parallel_workers=parallel_workers,
                palette=palette, arrows=arrows, debug=debug)


def blmho(input_data, closure=Closure.TWO_POINTS, tries=200, boundaries=None,
          reduce_method=ReduceMethod.KMT, max_cross=15, poly_reduce=True, translate=True,
          external_dictionary='', hide_trivial=True, chiral=False, matrix=False, density=1,
          level=0, matrix_plot=False, plot_ofile="KnotFingerPrintMap", matrix_cutoff=0.48,
          plot_format=PlotFormat.PNG, output_file='', output_format=OutputFormat.Dictionary,
          cuda=True, run_parallel=True, parallel_workers=None, palette=Colors.Knots, arrows=True, debug=False):
    """
    Calculates the BLM/Ho polynomial of the given structure.

    Args:
        input_data (str/list):
                The structure to calculate the polynomial
                for, given in abstract code, coordinates, or the path to
                the file containing the data.
        closure (str, optional):
                The method to close the chain. Viable options are the
                parameters of the Closure class.
                Default: Closure.TWO_POINTS
        tries (int, optional):
                the number of tries for stochastic closure methods.
                Default: 200
        boundaries (list of [int, int], optional):
                the boundaries of the subchains to be checked. The
                subchains are specified as a list of subchain beginning
                and ending index. If empty, the whole chain is
                calculated. Default: None
        reduce_method (str, optional):
                the method of chain reduction. Viable options are the
                parameters of the ReduceMethod class.
                Default: ReduceMethod.KMT
        max_cross (int, optional):
                the maximal number of crossings after reduction to start
                the polynomial calculation. Default: 15
        poly_reduce (bool, optional):
                if the polynomial should be presented in the reduced
                form. Default: False
        translate (bool, optional):
                if translate the polynomial to the structure topology
                using the dictionary. Default: False
        external_dictionary (str, optional):
                the path to the file with the external dictionary of the
                polynomials. Default: ''
        hide_trivial (bool, optional):
                if to suppress printing out the trivial results.
                Default: True
        chiral (bool, optional):
                If the chirality should be taken into account.
                By default False.
        matrix (bool, optional):
                if to calculate the whole matrix i.e. the polynomial for
                each subchain. Default: False
        density (int, optional):
                the inverse of resolution of matrix calculation. Higher
                number speeds up calculation, but may result in omitting
                some non-trivial subchains. Default: 1
        level (float, optional): the cutoff of the non-trivial structure
                probability. If 0, all the subchains with at least one
                non-trivial closure are treated as non-trivial.
                Default: 0
        matrix_plot (bool, optional):
                if to plot a figure of a matrix (knot fingerprint).
                Default: False
        plot_ofile (str, optional):
                the name of the matrix figure plot.
                Default: KnotFingerPrintMap
        plot_format (str, optional):
                the format of the matrix figure plot. Viable formats are
                the parameters of the PlotFormat class.
                Default: PlotFormat.PNG
        output_file (str, optional):
                the name of the file with the matrix results. If empty,
                the resulting matrix is returned to source. Default: ''
        output_format (str, optional):
                the format of the matrix output. The viable formats are
                the parameters of the OutputFormat class.
                Default: OutputFormat.DICTIONARY
        cuda (bool, optional):
                if to use the cuda-provided acceleration if possible.
                Default: True
        run_parallel (bool, optional):
                if to use the Python-provided parallelization of
                calculation. Default: True
        parallel_workers (int, optional):
                number of parallel workers. If 0, all the available
                processors will be used. Default: 0
        debug (bool, optional): the debug mode. Default: False

    Returns:
        The dictionary with the BLM/Ho polynomial results. For each
        subchain a separate dictionary with different polynomial
        probabilities is created.
    """
    result = Invariant(input_data)
    return result.calculate(
                BlmhoGraph, closure=closure, tries=tries, boundaries=boundaries,
                reduce_method=reduce_method, max_cross=max_cross, poly_reduce=poly_reduce,
                translate=translate, external_dictionary=external_dictionary,
                hide_trivial=hide_trivial, chiral=chiral, matrix=matrix, density=density,
                level=level, matrix_plot=matrix_plot, plot_ofile=plot_ofile, matrix_cutoff=matrix_cutoff,
                plot_format=plot_format, output_file=output_file, output_format=output_format,
                cuda=cuda, run_parallel=run_parallel, parallel_workers=parallel_workers,
                palette=palette, arrows=arrows, debug=debug)


def aps(input_data, closure=Closure.TWO_POINTS, tries=200, boundaries=None,
        reduce_method=ReduceMethod.KMT, max_cross=15, poly_reduce=True, translate=True,
        external_dictionary='', hide_trivial=True, chiral=False, matrix=False, density=1,
        level=0, matrix_plot=False, plot_ofile="KnotFingerPrintMap", matrix_cutoff=0.48,
        plot_format=PlotFormat.PNG, output_file='', output_format=OutputFormat.Dictionary,
        cuda=True, run_parallel=True, parallel_workers=None, palette=Colors.Knots, arrows=True, debug=False):
    """
    Calculates the APS bracket of the given structure.

    Args:
        input_data (str/list):
                The structure to calculate the polynomial
                for, given in abstract code, coordinates, or the path to
                the file containing the data.
        closure (str, optional):
                The method to close the chain. Viable options are the
                parameters of the Closure class.
                Default: Closure.TWO_POINTS
        tries (int, optional):
                the number of tries for stochastic closure methods.
                Default: 200
        boundaries (list of [int, int], optional):
                the boundaries of the subchains to be checked. The
                subchains are specified as a list of subchain beginning
                and ending index. If empty, the whole chain is
                calculated. Default: None
        reduce_method (str, optional):
                the method of chain reduction. Viable options are the
                parameters of the ReduceMethod class.
                Default: ReduceMethod.KMT
        max_cross (int, optional):
                the maximal number of crossings after reduction to start
                the polynomial calculation. Default: 15
        poly_reduce (bool, optional):
                if the polynomial should be presented in the reduced
                form. Default: False
        translate (bool, optional):
                if translate the polynomial to the structure topology
                using the dictionary. Default: False
        external_dictionary (str, optional):
                the path to the file with the external dictionary of the
                polynomials. Default: ''
        hide_trivial (bool, optional):
                if to suppress printing out the trivial results.
                Default: True
        chiral (bool, optional):
                If the chirality should be taken into account.
                By default False.
        matrix (bool, optional):
                if to calculate the whole matrix i.e. the polynomial for
                each subchain. Default: False
        density (int, optional):
                the inverse of resolution of matrix calculation. Higher
                number speeds up calculation, but may result in omitting
                some non-trivial subchains. Default: 1
        level (float, optional): the cutoff of the non-trivial structure
                probability. If 0, all the subchains with at least one
                non-trivial closure are treated as non-trivial.
                Default: 0
        matrix_plot (bool, optional):
                if to plot a figure of a matrix (knot fingerprint).
                Default: False
        plot_ofile (str, optional):
                the name of the matrix figure plot.
                Default: KnotFingerPrintMap
        plot_format (str, optional):
                the format of the matrix figure plot. Viable formats are
                the parameters of the PlotFormat class.
                Default: PlotFormat.PNG
        output_file (str, optional):
                the name of the file with the matrix results. If empty,
                the resulting matrix is returned to source. Default: ''
        output_format (str, optional):
                the format of the matrix output. The viable formats are
                the parameters of the OutputFormat class.
                Default: OutputFormat.DICTIONARY
        cuda (bool, optional):
                if to use the cuda-provided acceleration if possible.
                Default: True
        run_parallel (bool, optional):
                if to use the Python-provided parallelization of
                calculation. Default: True
        parallel_workers (int, optional):
                number of parallel workers. If 0, all the available
                processors will be used. Default: 0
        debug (bool, optional): the debug mode. Default: False

    Returns:
        The dictionary with the APS bracket results. For each subchain
        a separate dictionary with different polynomial probabilities is
        created.
    """
    result = Invariant(input_data)
    return result.calculate(
                ApsGraph, closure=closure, tries=tries, boundaries=boundaries,
                reduce_method=reduce_method, max_cross=max_cross, poly_reduce=poly_reduce,
                translate=translate, external_dictionary=external_dictionary,
                hide_trivial=hide_trivial, chiral=chiral, matrix=matrix, density=density,
                level=level, matrix_plot=matrix_plot, plot_ofile=plot_ofile, matrix_cutoff=matrix_cutoff,
                plot_format=plot_format, output_file=output_file, output_format=output_format,
                cuda=cuda, run_parallel=run_parallel, parallel_workers=parallel_workers,
                palette=palette, arrows=arrows, debug=debug)


def writhe(input_data, closure=Closure.TWO_POINTS, tries=200, boundaries=None,
           reduce_method=ReduceMethod.KMT, max_cross=15, poly_reduce=True, translate=True,
           external_dictionary='', hide_trivial=True, chiral=False, matrix=False, density=1,
           level=0, matrix_plot=False, plot_ofile="KnotFingerPrintMap", matrix_cutoff=0.48,
           plot_format=PlotFormat.PNG, output_file='', output_format=OutputFormat.Dictionary,
           cuda=True, run_parallel=True, parallel_workers=None, palette=Colors.Knots, arrows=True, debug=False):
    """"
    SOME INFO

    Args:
        input_data (str/list):
                The structure to calculate the polynomial
                for, given in abstract code, coordinates, or the path to
                the file containing the data.
        closure (str, optional):
                The method to close the chain. Viable options are the
                parameters of the Closure class.
                Default: Closure.TWO_POINTS
        tries (int, optional):
                the number of tries for stochastic closure methods.
                Default: 200
        boundaries (list of [int, int], optional):
                the boundaries of the subchains to be checked. The
                subchains are specified as a list of subchain beginning
                and ending index. If empty, the whole chain is
                calculated. Default: None
        reduce_method (str, optional):
                the method of chain reduction. Viable options are the
                parameters of the ReduceMethod class.
                Default: ReduceMethod.KMT
        max_cross (int, optional):
                the maximal number of crossings after reduction to start
                the polynomial calculation. Default: 15
        poly_reduce (bool, optional):
                if the polynomial should be presented in the reduced
                form. Default: False
        translate (bool, optional):
                if translate the polynomial to the structure topology
                using the dictionary. Default: False
        external_dictionary (str, optional):
                the path to the file with the external dictionary of the
                polynomials. Default: ''
        hide_trivial (bool, optional):
                if to suppress printing out the trivial results.
                Default: True
        chiral (bool, optional):
                If the chirality should be taken into account.
                By default False.
        matrix (bool, optional):
                if to calculate the whole matrix i.e. the polynomial for
                each subchain. Default: False
        density (int, optional):
                the inverse of resolution of matrix calculation. Higher
                number speeds up calculation, but may result in omitting
                some non-trivial subchains. Default: 1
        level (float, optional): the cutoff of the non-trivial structure
                probability. If 0, all the subchains with at least one
                non-trivial closure are treated as non-trivial.
                Default: 0
        matrix_plot (bool, optional):
                if to plot a figure of a matrix (knot fingerprint).
                Default: False
        plot_ofile (str, optional):
                the name of the matrix figure plot.
                Default: KnotFingerPrintMap
        plot_format (str, optional):
                the format of the matrix figure plot. Viable formats are
                the parameters of the PlotFormat class.
                Default: PlotFormat.PNG
        output_file (str, optional):
                the name of the file with the matrix results. If empty,
                the resulting matrix is returned to source. Default: ''
        output_format (str, optional):
                the format of the matrix output. The viable formats are
                the parameters of the OutputFormat class.
                Default: OutputFormat.DICTIONARY
        cuda (bool, optional):
                if to use the cuda-provided acceleration if possible.
                Default: True
        run_parallel (bool, optional):
                if to use the Python-provided parallelization of
                calculation. Default: True
        parallel_workers (int, optional):
                number of parallel workers. If 0, all the available
                processors will be used. Default: 0
        debug (bool, optional): the debug mode. Default: False

    Returns:
        blablablablablablablablablabla?blablablablabla?blablablablabla?blablablablabla??
    """
    result = Invariant(input_data)
    return result.calculate(
                WritheGraph, closure=closure, tries=tries, boundaries=boundaries,
                reduce_method=reduce_method, max_cross=max_cross, poly_reduce=poly_reduce,
                translate=translate, external_dictionary=external_dictionary,
                hide_trivial=hide_trivial, chiral=chiral, matrix=matrix, density=density,
                level=level, matrix_plot=matrix_plot, plot_ofile=plot_ofile, matrix_cutoff=matrix_cutoff,
                plot_format=plot_format, output_file=output_file, output_format=output_format,
                cuda=cuda, run_parallel=run_parallel, parallel_workers=parallel_workers,
                palette=palette, arrows=arrows, debug=debug)


# TODO - test it! - Wanda!
def generate_walk(length, no_of_structures, bond_length=1, print_with_index=True,
                file_prefix='walk', folder_prefix='', out_fmt=(3, 5)):
    """
    Generates polygonal lasso structure with vertices of equal lengths
    and saves in .xyz file. Each structures is saved in distinct file
    named <file_prefix>_<num>.xyz in folder l<looplength>_t<taillength>.

    Args:
        length (int):
                number of sides of polygonal random walk
        no_of_structures (int):
                quantity of created walks
        bond_length (int, optional):
                length of each side of created walks. Default: 1.
        print_with_index (bool, optional):
                if True, then created .xyz has nxyz format instead of 
                xyz, where n is index number. Default: True.
        file_prefix (str, optional): 
                prefix of each created file. Default: "walk".
        folder_prefix (str, optional):
                prefix of created file folder. Default: no prefix.
        out_fmt ([int,int], optional):
                numbers on file and folder format <num>, <length> are 
                padded with maximally these numbers of zeros
                respectively.

    Returns:
        Polygon_walk object

    """
    return Polygon_walk(
                length, no_of_structures, bond_length, print_with_index, file_prefix,
                folder_prefix, out_fmt)


def generate_loop(length, no_of_structures, bond_length=1, print_with_index=True,
                file_prefix='loop', folder_prefix='', out_fmt=(3, 5)):
    """
    Generates polygonal loop structure with vertices of equal lengths
    and saves in .xyz file. Each structures is saved in distinct file
    named <file_prefix>_<num>.xyz in folder w<length>.

    Args:
        length (int):
                number of sides of polygonal loops
        no_of_structures (int):
                quantity of created loops
        bond_length (int, optional):
                length of each side of created loops. Default: 1.
        print_with_index (bool, optional):
                if True, then created .xyz has nxyz format instead of 
                xyz, where n is index number. Default: True.
        file_prefix (str, optional): 
                prefix of each created file, default: "loop".
        folder_prefix (str, optional): 
                prefix of created file folder. Default: no prefix.
        out_fmt ([int,int], optional): 
                numbers on file and folder format <num>, <looplength>
                are padded with maximally these numbers of zeros
                respectively.

    Returns:
        Polygon_loop object

    """
    return Polygon_loop(
                length, no_of_structures, bond_length, print_with_index, file_prefix,
                folder_prefix, out_fmt)


def generate_lasso(looplength, taillength, no_of_structures, bond_length=1, print_with_index=True,
                file_prefix='lasso', folder_prefix='', out_fmt=(3, 3, 5)):
    """
    Generates polygonal lasso structure with vertices of equal lengths and saves
    in .xyz file. Each structures is saved in distinct file named
    <file_prefix>_<num>.xyz in folder l<looplength>_t<taillength>.

    Args:
        looplength (int):
                number of sides of polygonal loop
        taillength (int):
                number of sides of polygonal tail
        no_of_structures (int):
                quantity of created loops
        bond_length (int, optional):
                length of each side of created lassos. Default: 1.
        print_with_index (bool, optional):
                if True, then created .xyz has nxyz format instead of 
                xyz, where n is index number. Default: True.
        file_prefix (str, optional): 
                prefix of each created file, default: "lasso".
        folder_prefix (str, optional):
                prefix of created file folder. Default: no prefix.
        out_fmt ((int,int,int), optional):
                numbers on file and folder format <num>, <looplength>,
                <taillength> are padded with maximally these numbers of
                zeros respectively.

    Returns:
        Polygon_lasso object

    """
    return Polygon_lasso(
                looplength, taillength, no_of_structures, bond_length, print_with_index,
                file_prefix, folder_prefix, out_fmt)


def generate_handcuff(looplengths, linkerlength, no_of_structures, bond_length=1,
                print_with_index=True, file_prefix='hdcf', folder_prefix='', out_fmt=(3, 3, 3, 5)):
    """
    Generates polygonal lasso structure with vertices of equal lengths
    and saves in .xyz file. Each structures is saved in distinct file
    named <file_prefix>_<num>.xyz in folder 
    l<looplength1>_<looplength2>_t<linkerlength>.

    Args:
        looplengths ([int,int]):
                number of sides of polygonal loops
        linkerlength (int): 
                number of sides of polygonal linker
        no_of_structures (int): 
                quantity of created loops
        bond_length (int, optional): 
                length of each side of created lassos. Default: 1.
        print_with_index (bool, optional):
                if True, then created .xyz has nxyz format instead of 
                xyz, where n is index number. Default: True.
        file_prefix (str, optional):
                prefix of each created file. Default: "lasso".
        folder_prefix (str, optional): 
                prefix of created file folder. Default: no prefix.
        out_fmt ((int,int,int), optional):
                numbers on file and folder format <num>, <looplength1>,
                <looplength2>, <linkerlength> are padded with maximally
                these numbers of zeros respectively.

    Returns:
        Polygon_handcuff object

    """
    return Polygon_handcuff(looplengths, linkerlength, no_of_structures, bond_length,
                print_with_index, file_prefix, folder_prefix, out_fmt)


def find_loops(structure, output_type=OutputType.PDcode):
    """
    Finds all loops in a given structure.

    Args:
        structure (str/list):
                the structure to calculate the polynomial for, given in
                abstract code, coordinates, or the path to the file
                containing the data.
        output_type (str, optional):
                the output format of the loops. The viable formats are
                parameters of the OutputType class.
                Default: OutputType.PDcode.

    Returns:
        The generator object of the loops in a chosen format.
    """
    g = Graph(structure)
    return g.find_loops(output_type=output_type)


def find_thetas(structure, output_type=OutputType.PDcode):
    """
    Finds all theta-curves in a given structure.

    Args:
        structure (str/list):
                the structure to calculate the polynomial for, given in
                abstract code, coordinates, or the path to the file
                containing the data.
        output_type (str, optional):
                the output format of the loops. The viable formats are
                parameters of the OutputType class.
                Default: OutputType.PDcode.

    Returns:
        The generator object of the loops in a chosen format.
    """
    g = Graph(structure)
    return g.find_thetas(output_type=output_type)


def find_handcuffs(structure, output_type=OutputType.PDcode):
    """
    Finds all theta-curves in a given structure.

    Args:
        structure (str/list):
                the structure to calculate the polynomial for, given in
                abstract code, coordinates, or the path to the file
                containing the data.
        output_type (str, optional): 
                the output format of the loops. The viable formats are
                parameters of the OutputType class.
                Default: OutputType.PDcode.

    Returns:
        The generator object of the loops in a chosen format.
    """
    g = Graph(structure)
    return g.find_handcuffs(output_type=output_type)


def find_spots(matrix, gap_size=0, spot_size=20):
    """
    Finds centers of the spots in the matrix.

    Args:
        matrix (str/dict):
                the matrix fingerprint of the structure.
        gap_size (int, optional):
                the size of the trivial fragment allowed between two
                parts to classify them as single spot. If 0, only the
                connected fragments are considered as spots. Default: 0
        spot_size (int, optional):
                the minimal size of the spot. Fragments with less
                non-trivial repentants will be suppressed. Default: 20
    Returns:
        The list of the centers of the spots.
    """
    return find_spots_centers(matrix, gap_size=gap_size, spot_size=spot_size)


def gln(input_data, chain2_data=None, chain1_boundary=(-1, -1),
        chain2_boundary=(-1, -1), maxvalue=False, density_formax=-1,
        average=False, tries=200, matrix=False, matrix_plot=False,
        plot_ofile="GLN_map", plot_format=PlotFormat.PNG, output_file='',
        output_format=OutputFormat.Matrix, precision_output=3, debug=False):
    """
    Calculates gaussian linking number between two chains. Note that
    only one of maxvalue, average, or matrix options can be invoked at
    once.

    Args:
        input_data (str/list):
                the structure containing two chains that may be linked
                -- or one chain and second one is given in another
                argument, chain2_data -- given in coordinates, or the
                path to the file containing the data.
        chain2_data (str/list, optional):
                the structure containing the second chain, given in
                coordinates, or the path to the file containing the
                data. If not given, both chains are expected to be
                present in the input_data. Default: None
        chain1_boundary ([int, int], optional):
                the indices of chain1 within the input_data. If [-1, -1]
                the whole structure is used as chain1. 
                Default: [-1, -1].
        chain2_boundary ((int, int), optional): 
                the indices delimiting chain2. If [-1, -1], the whole
                structure is treated as chain2. Note, that if the
                chain2_data is not specified separately, boundaries must
                be given for both chains (as both of them are taken then
                from input_data and they cannot overlap). 
                Default: [-1, -1].
        maxvalue (bool, optional):
                if one wants to get some additional info about the
                maximal |GLN| value between fragments of two chains. If
                True, the dictionary with the maximal |GLN| value
                between chain 1 and pieces of chain 2 (with indices) and
                vice versa is returned. In the dictionary there is also
                GLN value between whole chains and local maximum, the
                last one is calculated when another argument 
                -- density_formax -- is specified. Default: False
        density_formax (int, optional):
                if one wants to calculate the maximal |GLN| value
                between fragments of two chains. If density_formax 
                (d)=1, all pairs of fragments are analyzed; if d>1 then
                only fragments of length being a multiplication of d are
                analyzed. For longer chains d=1 is highly unrecommended
                due to high time and space complexity of computations
                (O(N^4)). Default: -1
        average (bool, optional):
                if to calculate the average GLN value after number of
                random closures of both chains specified by "tries"
                parameter. Default: False
        tries (int, optional):
                the number of closures performed in calculating the
                average GLN value. Defaulf: 200
        matrix (bool, optional):
                if to calculate the GLN matrix between chain1 and all
                subchains of chain2. As a result the matrix (M) of the
                size of chain2_length x chain2_length is returned, and
                M[i][j] is GLN value  between chain1 and fragment of
                chain2 from i-th to j-th atom. Default: False
        matrix_plot (bool, optional):
                if to plot the matrix of GLN. Default: False
        plot_ofile (str, optional): 
                the name of the file containing the matrix plot.
                Default: 'GLN_map'
        plot_format (str, optional):
                the format of the plot with the matrix. Viable formats
                are parameters of the PlotFormat class.
                Default: PlotFormat.PNG
        output_file (str, optional):
                if not empty, it indicates the name of the file to save
                the matrix calculation results. Default: ''.
        output_format (str, optional):
                the format of the matrix output data. Viable formats are
                the parameters of the OutputFormat class. 
                Deafault: OutputFormat.Matrix,
        precision_output (int, optional): 
                precision of output, number of decimal places in
                returned values. Default: 3
        debug (bool, optional):
                the debug mode. Default: False


    Returns:
        The value of the Gaussian Linking Number calculated between the
        loop (input_data) and the tail, specified either in separate
        file, or by the indices (tail_boundary).
        In case of the maximal GLN (maxvalue=True), the dictionary with
        the maximal GLN between two chains, as well as maximal GLN 
        between one chain and the part of the second chain (indicated by
        the indices) is returned.
        In matrix mode (matrix=True), the whole matrix of GLN between
        theloop and each subchain is calculated.
    """
    result = GlnGraph(input_data)
    return result.calculate(
                chain2=chain2_data, boundary=chain1_boundary, boundary2=chain2_boundary,
                maxvalue=maxvalue, density=density_formax, precision=precision_output,
                average=average, tries=tries, matrix=matrix, matrix_plot=matrix_plot,
                plot_ofile=plot_ofile, plot_format=plot_format, output_file=output_file,
                output_format=output_format, debug=debug)


def make_surface(input_data, loop_indices=None, precision=PrecisionSurface.HIGH,
            density=DensitySurface.MEDIUM, precision_output=3):
    """
    Calculates minimals surface spanned on a given loop.

    Args:
        input_data (str/list):
                the structure containing loop to calculate the surface
                spanned on, given in coordinates, or the path to the
                file containing the data.
        loop_indices (list, optional):
                the indices of loop within the input_data. If they are
                not specified the whole structure is used as loop.
                Default: None
        precision (int, optional):
                precision of computations of minimal surface. Viable
                options are the parameters of the PrecisionSurface
                class. Default: PrecisionSurface.HIGH
        density (int, optional):
                density of the triangulation of minimal surface. Viable
                options are the parameters of the DensitySurface class.
                Default: DensitySurface.MEDIUM
        precision_output (int, optional):
                precision of output, number of decimal places in
                returned values. Default: 3

    Returns:
        List of triangles that form minimal surface.
    """
    obj = Lasso(input_data, loop_indices)
    return obj.make_surface(precision, density, precision_output)


def lasso_type(input_data, loop_indices=None, smooth=0, step=1, precision=PrecisionSurface.HIGH,
               density=DensitySurface.MEDIUM, min_dist=(10, 3, 10),
               pic_files=SurfacePlotFormat.DONTPLOT, output_prefix='', output_type=1):
    """
    Calculates minimals surface spanned on a given loop and checks if
    remaining part of chain crosses the surface and how many times.
    Returns corresponding topoly type of lasso.

    Args:
        input_data: (str/list):
                the structure containing the loop which may be pierced
                by the tail, given in coordinates, or the path to the
                file containing the data.
        loop_indices (list):
                the indices of loop within the input_data. If they are
                not specified the whole structure is used as loop.
                Default: None
        smooth (int, optional):
        step (int, optional):
        precision (int, optional):
                precision of computations of minimal surface. Viable
                options are the parameters of the PrecisionSurface
                class. Default: PrecisionSurface.HIGH
        density (int, optional):
                density of the triangulation of minimal surface. Viable
                options are the parameters of the DensitySurface class.
                Default: DensitySurface.MEDIUM
        min_dist ((int, int, int), optional): min_dist, min_bridge_dist_min_tail_dist
        pic_files (int, optional):
        output_prefix (str, optional):
        output_type (int, optional):

    Returns:

    """
    obj = Lasso(input_data, loop_indices)
    return obj.lasso_type(
                smooth, step, precision, density, min_dist, pic_files, output_prefix, output_type)


def translate(structure, output_type=OutputType.PDcode):
    """
    Translates between the abstract codes.

    Args:
        structure (str/list):
                the structure to calculate the polynomial for, given in
                abstract code, coordinates, or the path to the file
                containing the data.
        output_type (str, optional):
                the output format of the loops. The viable formats are
                parameters of the OutputType class.
                Default: OutputType.PDcode.

    Returns:
        The structure in a given format.
    """
    g = Graph(structure)
    return g.print(output_type=output_type)


def translate_matrix(matrix, output_format=OutputFormat.Dictionary, knot='', beg=0, end=0):
    if type(matrix) is str and os.path.isfile(matrix):
        with open(matrix, 'r') as myfile:
            data = myfile.read()
    else:
        data = matrix
    if output_format == OutputFormat.Dictionary:
        return data2dictionary(data, knot=knot, beg=beg)
    elif output_format == OutputFormat.KnotProt:
        return data2knotprot(data, beg=beg, end=end, knot=knot)
    elif output_format == OutputFormat.Matrix:
        return data2matrix(data)
    else:
        raise TopolyException("Unknown output format.")


def find_matching(data, invariant, chiral=False, external_dictionary=''):
    """
    Finds the matching structure for a given polynomial. Searches either
    the built-in, or user-defined dictionary

    Args:
        data (string/dictionary):
                the polynomial given either in string of coefficients
                (e.g. '1 -1 1'),
                the dictionary of polynomials with their probabilities
                (e.g. {'1 -1 1': 0.8, '1 -3 1': 0.2},
                or dictionary of probabilities for each subchain 
                (e.g. {(0, 100): {'1 -1 1': 0.8, '1 -3 1': 0.2},
                      (50, 100): {'1 -1 1': 0.3, '1': 0.7}}).
        invariant (string):
                the name of the invariant, e.g. 'Alexander', of 'Jones'.
        chiral (bool, optional):
                If the chirality should be taken into account.
                By default False.
        external_dictionary (string, optional):
                The absolute path to the user-defined dictionary of
                polynomials. The dictionary must be compliant with the
                template which can be obtained on the Topoly website
                (https://topoly.cent.uw.edu.pl).

    Returns:
        Either the string with matching structure name (e.g. '3_1'), or
        the dictionary with the structure name and respective 
        probability (e.g. {'3_1': 0.8, '4_1': 0.2}), or the dictionary
        with data for each subchain, e.g. 
        {(0, 100): {'3_1': 0.8, '4_1': 0.2},
        (50, 100): {'3_1': 0.3, '0_1': 0.7}}.
    """
    return find_matching_structure(
                data, invariant, chiral=chiral, external_dictionary=external_dictionary)


def plot_matrix(matrix, plot_ofile="KnotFingerPrintMap", plot_format=PlotFormat.PNG, cutoff=0.48,
                palette=Colors.Knots, arrows=True, debug=False):
    """
    Plotting the figure for a given fingerprint matrix.

    Args:
        matrix (str):
                the matrix with information about the topology of each
                subchain of the structure. Can be given either in
                dictionary, or KnotProt format. The matrix can be given
                directly, or as a path to the file.
        plot_ofile (str, optional):
                the name of the output file with the matrix figure.
                Default: KnotFingerPrintMap
        plot_format (str, optional):
                the format of the output matrix figure. Viable options
                are the parameters of the PlotFormat class.
                Default: PlotFormat.PNG
        cutoff (float, optional): 
                the cutoff of the non-trivial structure probability. All
                structures with probability below the cutoff will be
                regarded as trivial, and therefore not marked in the
                figure. Default: 0.48
        palette (str, optional): 
                the palette of colors for matrix plot. Viable options
                are parameters of the Palette class.
                Default: Palette.KNOT
        arrows (bool, optional):
                if the arrows are to be plotted. Default: True
        debug (bool, optional): 
                the debug mode.

    Returns:
        Communicate about the figure creation.
    """
    return manipulation.plot_matrix(
                matrix, plot_ofile=plot_ofile, plot_format=plot_format, palette=palette,
                arrows=arrows, cutoff=cutoff, debug=debug)


def plot_graph(structure, palette=Colors.Structure):
    """
    Plotting the 3D rotable presentation of the structure with each arc
    colored differently.

    Args:
        structure (str/list): 
                the structure to calculate the polynomial for, given in
                abstract code, coordinates, or the path to the file
                containing the data.
        palette (str, optional):
                the palette of colors for matrix plot. Viable options
                are parameters of the Palette class.
                Default: Palette.RAINBOW

    Returns:
        Communicate about the figure creation.
    """
    g = Graph(structure)
    g.plot(palette)
    return


def import_structure(structure_name):
    """
    Finds a PDcode of the structure required and creates a corresponding
    graph.

    Args:
        structure_name (str):
                the name of the structure to create.

    Returns:
        The graph of the corresponding structure defined by the PDcode.
    """
    if structure_name in PD.keys():
        return Graph(PD[structure_name])
    else:
        raise TopolyException('The structure chosen is not available in the local library.')


def close_curve(structure, closure=Closure.TWO_POINTS, output_type=OutputType.XYZ, debug=False):
    """
    Closing the structure (connecting loose ends) with a chosen method.

    Args:
        structure (str/list):
                the structure to calculate the polynomial for, given in
                abstract code, coordinates, or the path to the file
                containing the data.
        closure (str):
                the method used to close the structure. Viable methods
                are the parameters of the Closure class.
                Default: Closure.TWO_POINTS.
        output_type (str):
                the format of the reduced chain. 
                Default: OutputType.XYZ.

    Returns:
        The abstract code or the coordinates of the closed structure.
    """
    g = Graph(structure)
    g.close(method=closure, debug=debug)
    return g.print(output_type=output_type)


def reduce(structure, reduce_method=ReduceMethod.KMT, output_type=OutputType.XYZ, steps=1000,
           debug=False):
    """
    Reducing the structure to a form with less crossing in a planar
    projection.

    Args:
        structure (str/list):
                the structure to calculate the polynomial for, given in
                abstract code, coordinates, or the path to the file
                containing the data.
        reduce_method (str):
                the method used to reduce the structure. Viable methods
                are the parameters of the ReduceMethod class.
                Default: ReduceMethod.KMT.
        output_type (str):
                the format of the reduced chain. The abstract codes are
                possible only for closed structure.
                Default: OutputType.XYZ.

    Returns:
        The abstract code or the coordinates of the reduced structure.
    """
    g = Graph(structure)
    g.reduce(method=reduce_method, steps=steps, debug=debug)
    return g.print(output_type=output_type)


def xyz2vmd(xyz_file):
    """
    Converts .xyz file into .pdb file and creates .psf topoly file with
    same name. Then you can open your structure in vmd typing 
    "vmd file.pdb -psf file.psf"
    
    .xyz file format: 
        4 columns (id, x, y, z), atoms in neighboring rows are
        treated as bonded, lines with single letter (e.g. X) separate
        different arcs.
    
    Args:
        xyz_file (str): 
                name of xyz file
    Returns:
        None
    """
    return convert_xyz2vmd(xyz_file)
