#!/usr/bin/env python

from __future__ import print_function

import sys
import argparse
import json
import datetime
import binascii
import os
from collections import defaultdict

from concurrent import futures
from tabulate import tabulate

from moneywagon import (
    CurrentPrice, HistoricalPrice, AddressBalance, get_address_balance,
    get_historical_transactions, get_block, get_unspent_outputs, get_current_price,
    generate_keypair, sweep, get_explorer_url, service_table, get_single_transaction,
)
from moneywagon.wallet import fetch_wallet_balances
from moneywagon.network_replay import NetworkReplay
from moneywagon.currency_support import CurrencySupport
from moneywagon.services import get_service
from moneywagon.mcaf import generate_mcaf, decode_mcaf
from moneywagon.superthin import (
    encode_mempool, make_unit, modify_mempool, decode_superthin
)
def localized_number(num, euro=False):
    ret = "{:,.2f}".format(num)
    if euro:
        ret = ret.replace(",", "&").replace(".", ",").replace("&", ".")
    return ret

parser = argparse.ArgumentParser() #version='1.0.2')

subparsers = parser.add_subparsers(help='commands', dest="subparser_name")

x = subparsers.add_parser('current-price', help='Get current price of a crypto/fiat pair.')
x.add_argument('crypto', action='store', help='Cryptocurrency symbol')
x.add_argument('fiat', action='store', help='Fiat currency symbol')
x.add_argument('--verbose', action='store_true', help='Include extra output')
x.add_argument('--random-service', action='store_true', help='Use a random source')
x.add_argument('--timeout', action='store', help='Time until giving up when making external calls. In seconds.')

x = subparsers.add_parser('generate-keypair', help='Generate Private/Public key pair')
x.add_argument('crypto', action='store', help='Cryptocurrency symbol')
x.add_argument('seed', action='store', help='Random seed string.'),
x.add_argument('--password', action='store', help='Encrypt private key with Bip38 password.')
x.add_argument('--verbose', action='store_true', help='Include extra output')
x.add_argument('--timeout', action='store', help='Time until giving up when making external calls. In seconds.')

x = subparsers.add_parser('historical-price', help='Get price of a crypto/fiat pair at a point in time.')
x.add_argument('crypto', action='store', help='Cryptocurrency symbol')
x.add_argument('fiat', action='store', help='Fiat currency symbol')
x.add_argument('at_time', action='store', help='Time when to get the price. e.g. 2014-04-03')
x.add_argument('--verbose', action='store_true', help='Include extra output')
x.add_argument('--timeout', action='store', help='Time until giving up when making external calls. In seconds.')

x = subparsers.add_parser('address-balance', help='Get total amount of coin in wallet.')
x.add_argument('crypto', action='store', help='Cryptocurrency symbol')
x.add_argument('--address', action='store', help='Wallet address')
x.add_argument('--addresses', action='store', help='Comma seperated list of wallet addresses')
x.add_argument('--paranoid', action='store', help='How many services to use when cross-checking')
x.add_argument('--verbose', action='store_true', help='Include extra output')
#x.add_argument('--fast', action='store_true', help='Return fast as possible.')
x.add_argument('--random-service', action='store_true', help='Use a random source')
x.add_argument('--timeout', action='store', help='Time until giving up when making external calls. In seconds.')

x = subparsers.add_parser('single-transaction', help='Get Information about a single transaction.')
x.add_argument('crypto', action='store', help='Cryptocurrency symbol')
x.add_argument('--txid', action='store', help='Transaction ID (txid)')
x.add_argument('--txids', action='store', help='Comma seperated list of Transaction ID (txid)')
x.add_argument('--paranoid', action='store', help='How many services to use when cross-checking')
x.add_argument('--verbose', action='store_true', help='Include extra output')
#x.add_argument('--fast', action='store_true', help='Return fast as possible.')
x.add_argument('--random-service', action='store_true', help='Use a random source')
x.add_argument('--timeout', action='store', help='Time until giving up when making external calls. In seconds.')

x = subparsers.add_parser('get-block', help='Get block by either height, hash or by latest.')
x.add_argument('crypto', action='store', help='Cryptocurrency symbol')
x.add_argument('--block_number', action='store', help='Get block by block number')
x.add_argument('--block_hash', action='store', help='Get block by block hash')
x.add_argument('--latest', action='store_true', help='Get the latest block.')
x.add_argument('--paranoid', action='store', help='How many services to use when cross-checking')
x.add_argument('--verbose', action='store_true', help='Include extra output')
x.add_argument('--random-service', action='store_true', help='Use a random source')
x.add_argument('--timeout', action='store', help='Time until giving up when making external calls. In seconds.')

x = subparsers.add_parser('historical-transactions', help='Get list of all transactions for this address.')
x.add_argument('crypto', action='store', help='Cryptocurrency symbol')
x.add_argument('--address', action='store', help='Wallet address')
x.add_argument('--addresses', action='store', help='Comma seperated list of wallet addresses')
x.add_argument('--paranoid', action='store', help='How many services to use when cross-checking')
x.add_argument('--verbose', action='store_true', help='Include extra output')
x.add_argument('--random-service', action='store_true', help='Use a random source')
x.add_argument('--timeout', action='store', help='Time until giving up when making external calls. In seconds.')

x = subparsers.add_parser('sweep', help='Sweep funds from a private key to another address')
x.add_argument('crypto', action='store', help='Cryptocurrency symbol')
x.add_argument('private_key', action='store', help='Private key to draw funds from')
x.add_argument('to_address', action='store', help='Address to send funds to.')
x.add_argument('--password', action='store', help='Decrypt private key with Bip38 password.')
x.add_argument('--fee', action='store', help='Fee to use for tx (in satoshi). Defaults to $0.02', default=None)
x.add_argument('--paranoid', action='store', help='How many services to use when cross-checking')
x.add_argument('--verbose', action='store_true', help='Include extra output')
x.add_argument('--random-service', action='store_true', help='Use a random source')

x = subparsers.add_parser('unspent-outputs', help='Get list of unspent outputs for this address.')
x.add_argument('crypto', action='store', help='Cryptocurrency symbol')
x.add_argument('--address', action='store', help='Wallet address')
x.add_argument('--addresses', action='store', help='Comma seperated list of wallet addresses')
x.add_argument('--paranoid', action='store', help='How many services to use when cross-checking')
x.add_argument('--verbose', action='store_true', help='Include extra output')
x.add_argument('--random-service', action='store_true', help='Use a random source')
x.add_argument('--timeout', action='store', help='Time until giving up when making external calls. In seconds.')

x = subparsers.add_parser('explorer-urls', help='Get URLS for web-based block explorers.')
x.add_argument('crypto', action='store', help='Cryptocurrency symbol')
x.add_argument('--address', action='store', help='Wallet address')
x.add_argument('--blocknum', action='store', help='Block Number (height)')
x.add_argument('--blockhash', action='store', help='Block Hash')
x.add_argument('--txid', action='store', help='Get single transaction by TXID')

x = subparsers.add_parser('service-table', help='Get list of all currently implemented services.')
x.add_argument('--format', action='store', help='Table format output, e.g. grid, simple, rst, html')

x = subparsers.add_parser('wallet-balance', help='Get current value in fiat of a set of crypo addresses.')
x.add_argument('wallet', type=argparse.FileType('r'), default=sys.stdin, help='Wallet file')
x.add_argument('fiat', action='store', help='Fiat currency')
x.add_argument('--paranoid', action='store', help='How many services to use when cross-checking')
x.add_argument('--verbose', action='store_true', help='Include extra output')
x.add_argument('--euro-format', action='store_true', help='Use european comma style, e.g 2.132.324,87')
x.add_argument('--async', action='store_true', help='Fetch prices and balances asynchronously')
x.add_argument('--random-service', action='store_true', help='Use random sources')
x.add_argument('--format', action='store', help='Table format output, e.g. grid, simple, rst, html')
x.add_argument("--collapse", action='store_true', help="Collapse same cryptos into a single line.")
x.add_argument('--timeout', action='store', help='Time until giving up when making external calls. In seconds.')

x = subparsers.add_parser('exchange-balance', help='Get current value in fiat of all balances on exchanges.')
x.add_argument('fiat', action='store', help='Fiat currency')
x.add_argument('--paranoid', action='store', help='How many services to use when cross-checking')
x.add_argument('--verbose', action='store_true', help='Include extra output')
x.add_argument('--by-service', action='store_true', help='Show total balance for each exchange converted to fiat')
x.add_argument('--euro-format', action='store_true', help='Use european comma style, e.g 2.132.324,87')
x.add_argument('--async', action='store_true', help='Fetch prices and balances asynchronously')
x.add_argument('--random-service', action='store_true', help='Use random sources')
x.add_argument('--format', action='store', help='Table format output, e.g. grid, simple, rst, html')
x.add_argument('--timeout', action='store', help='Time until giving up when making external calls. In seconds.')

x = subparsers.add_parser('generate-altcore-networks', help='Genrate list of networks compatable with altcore.')

x = subparsers.add_parser('network-replay', help='Perform a "replay attack" between two networks.')
x.add_argument('source', action='store', help='3-letter code for the network to source transactions')
x.add_argument('destination', action='store', help='3-letter code for the network to send transactions to.')
x.add_argument('block_to_replay', action='store', help='Block number to replay.')
x.add_argument('--verbose', action='store_true', help='Include extra output')
x.add_argument('--limit', action='store', help='How many transactions to replay. 0 is unimited, default is 5.')

x = subparsers.add_parser('install-key', help='Add service API key to .exchange_keys file')
x.add_argument('service_name', action='store', help='The name of the service the key is from.')
x.add_argument('type', action='store', help='Can be either api_secret or api_key, or other')
x.add_argument('key', action='store', help='The Key to add.')

x = subparsers.add_parser('execute-trades', help='Execute best arbitrade trades')
x.add_argument('crypto', action='store', help='Crypto symbol to find trades of')
x.add_argument('fiat', action='store', help='Fiat symbol to find trades of')
x.add_argument('--verbose', action='store_true', help='Include extra output')

x = subparsers.add_parser('see-trades', help='See best arbitrage trades')
x.add_argument('crypto', action='store', help='Crypto symbol to find trades of')
x.add_argument('fiat', action='store', help='Fiat symbol to find trades of')
x.add_argument('--verbose', action='store_true', help='Include extra output')

x = subparsers.add_parser('multi-orderbook', help='Combines all orderbooks from all supported markets')
x.add_argument('crypto', action='store', help='Crypto symbol of markets')
x.add_argument('fiat', action='store', help='Fiat symbol of markets')
x.add_argument('--verbose', action='store_true', help='Include extra output')
x.add_argument('--just-bids', action='store_true', help='Only show bids (buy orders).')
x.add_argument('--just-asks', action='store_true', help='Only show asks (sell orders).')
x.add_argument('--limit', action='store', help='Limits orders shown.')

x = subparsers.add_parser('generate-mcaf', help='Generates a MCAF address')
x.add_argument('cryptos', action='store', help='Comma seperated list of crypto symbols')
x.add_argument('seed', action='store', help='Address')

x = subparsers.add_parser('decode-mcaf', help='Shows address for each supported currency in MCAF address.')
x.add_argument('address', action='store', help='Address')

x = subparsers.add_parser('benchmark-superthin', help='Benchmark superthin compression')
x.add_argument('crypto', action='store', help='Cryptocurrency symbol')
x.add_argument('block', action='store', help='Block number')
x.add_argument('--decode-extra', action='store', help='Decode with given amount of extra mempool transactions')
x.add_argument('--extra-bytes', action='store', default=1, help='Extra Bytes parameter')

argz = parser.parse_args()

def prepare_json(high_level_func, *args, **kwargs):
    """
    The low-level API returns the service list along with it's results when paranid
    mode is invoked. For the command line, we don't want to show them.
    """
    def datetime_to_iso(obj):
        """
        Python's default json encoder will blow up when it encounters datetime objects.
        So this work around is needed in order to just handle making datetime
        objects into iso8601 string format.
        """
        if isinstance(obj, datetime.datetime):
            serial = obj.isoformat()
            return serial
        raise TypeError("Type not serializable")

    result = high_level_func(*args, **kwargs)
    return json.dumps(result, default=datetime_to_iso)

modes = {
    'random': argz.random_service if hasattr(argz, "random_service") else False,
    'paranoid': int(argz.paranoid or 1) if hasattr(argz, 'paranoid') else 1,
    'verbose': argz.verbose if hasattr(argz, "verbose") else False,
    'fast': 1 if hasattr(argz, "fast") else False,
    'timeout': float(argz.timeout or 0) if hasattr(argz, "timeout") else None
}

if argz.subparser_name == 'current-price':
    price = get_current_price(argz.crypto, argz.fiat, verbose=argz.verbose)
    print(price)

elif argz.subparser_name == 'generate-keypair':
    if argz.seed == '-':
        seed =  "".join(sys.stdin)
    else:
        seed = argz.seed

    print(json.dumps(generate_keypair(argz.crypto, seed, password=argz.password)))

elif argz.subparser_name == 'historical-price':
    price, source, date = HistoricalPrice(verbose=argz.verbose).action(argz.crypto, argz.fiat, argz.at_time)
    print(price, source, date)

elif argz.subparser_name == 'address-balance':
    if argz.address:
        modes['address'] = argz.address
    elif argz.addresses:
        modes['addresses'] = argz.addresses
    else:
        raise Exception('Either address or addresses argument required')

    print(prepare_json(
        get_address_balance, argz.crypto, **modes
    ))

elif argz.subparser_name == 'single-transaction':
    if argz.txid:
        modes['txid'] = argz.txid
    elif argz.txids:
        modes['txids'] = argz.txids
    else:
        raise Exception('Either txid or txids argument required')

    print(prepare_json(
        get_single_transaction, argz.crypto, **modes
    ))

elif argz.subparser_name == 'get-block':
    print(prepare_json(
        get_block, argz.crypto, block_number=int(argz.block_number) if argz.block_number else None,
        block_hash=argz.block_hash, latest=argz.latest or False, modes=modes
    ))

elif argz.subparser_name == 'historical-transactions':
    if argz.address:
        modes['address'] = argz.address
    elif argz.addresses:
        modes['addresses'] = argz.addresses
    else:
        raise Exception('Either address or addresses argument required')
    print(prepare_json(
        get_historical_transactions, argz.crypto, **modes
    ))

elif argz.subparser_name == "unspent-outputs":
    if argz.address:
        modes['address'] = argz.address
    elif argz.addresses:
        modes['addresses'] = argz.addresses
    else:
        raise Exception('Either address or addresses argument required')

    print(prepare_json(
        get_unspent_outputs, argz.crypto, **modes
    ))

elif argz.subparser_name == 'sweep':
    print(sweep(argz.crypto, argz.private_key, argz.to_address, argz.fee, **modes))

elif argz.subparser_name == 'explorer-urls':
    if argz.address:
        print(" ".join(get_explorer_url(argz.crypto, address=argz.address)))
    if argz.blocknum:
        print(" ".join(get_explorer_url(argz.crypto, blocknum=argz.blocknum)))
    if argz.txid:
        print(" ".join(get_explorer_url(argz.crypto, txid=argz.txid)))

elif argz.subparser_name == 'exchange-balance':
    from moneywagon.arbitrage import total_exchange_balances
    from moneywagon import get_current_price

    euro = argz.euro_format
    fiat = argz.fiat
    errors = []
    rows = []
    cumm_amount = 0
    balances = total_exchange_balances(verbose=argz.verbose, by_service=argz.by_service)

    if argz.by_service:
        # group by service to get the total amount of fiat on each exchange
        service_totals = defaultdict(lambda: 0)

        # price cache to avoid multiple http requests
        prices = {fiat.lower(): 1, 'btc': get_current_price('btc', fiat, verbose=argz.verbose)}
        help = {fiat.lower(): {'btc': ('Service', prices['btc'])}}

        for service, data in balances.items():
            for code, balance in data.items():
                if code not in prices:
                    prices[code] = get_current_price(code, fiat, verbose=argz.verbose, helper_prices=help)

                service_totals[service.name] += prices[code] * balance

        rows = []
        cumm_amount = 0
        for exchange, total_fiat in sorted(service_totals.items(), key=lambda x: float(x[1]), reverse=True):
            rows.append([exchange, "%s %s" % (localized_number(total_fiat, euro), fiat.upper())])
            cumm_amount += total_fiat

        rows.append(['Total:', "%s %s" % (localized_number(cumm_amount, euro), fiat.upper())])
        headers = ['Exchange', 'Total Fiat Value']
        print(tabulate(rows, headers=headers, tablefmt=argz.format))

    else:
        for currency, balance in balances.items():
            if currency == fiat:
                price = 1
            else:
                price = get_current_price(currency, fiat, verbose=argz.verbose)
            fiat_value = price * balance
            rows.append([currency, balance, localized_number(fiat_value, euro), price, "N/A"])
            cumm_amount += fiat_value

        rows.sort(key=lambda x: float(x[2].replace(',', '')), reverse=True) # order by highest fiat value first

        rows.append(['------', 'Total:', "%s %s" % (localized_number(cumm_amount, euro), fiat.upper()), '------'])

        headers = ['Crypto', 'Balance', 'Fiat Value', 'Exchange Rate', 'Price Source']
        print(tabulate(rows, headers=headers, tablefmt=argz.format))

    for error in errors:
        print(error)

elif argz.subparser_name == 'wallet-balance':
    euro = argz.euro_format

    wallets = [
        (x.split(",")[0], x.split(",")[1].strip())
        for x in argz.wallet.readlines()
        if not x.startswith("#")
    ]

    if argz.async_:
        modes['async'] = True

    fiat = argz.fiat.upper()

    rows = []
    cumm_amount = 0
    errors = []
    for d in fetch_wallet_balances(wallets, fiat, **modes):
        cumm_amount += d['fiat_value']
        rows.append([
            d['crypto'].upper(), d['crypto_value'], d['fiat_value'],
            d['conversion_price'], d['price_source']
        ])
        if d['error']:
            errors.append(d['error'])

    if argz.collapse:
        # collapse similar cryptos into a single line
        new_rows = {}
        for wallet in rows:
            crypto = wallet[0]
            if crypto in new_rows:
                old_row = new_rows[crypto]
                new_rows[crypto] = [
                    crypto,
                    wallet[1] + old_row[1], # crypto balance
                    wallet[2] + old_row[2], # fiat value
                    old_row[3], # exchange
                    old_row[4] # source
                ]
            else:
                new_rows[crypto] = wallet

        rows = new_rows.values()

    rows.sort(key=lambda x: x[2], reverse=True) # order by highest fiat value first

    # combine fiat value and exchange rate into single cell
    rows = [
        [x[0], x[1], "%s %s" % (localized_number(x[2], euro), fiat), "%f %s/%s" % (x[3], fiat, x[0]), x[4]]
        for x in rows
    ]

    rows.append(['------', 'Total:', "%s %s" % (localized_number(cumm_amount, euro), fiat), '------'])

    headers = ['Crypto', 'Balance', 'Fiat Value', 'Exchange Rate', 'Price Source']
    print(tabulate(rows, headers=headers, tablefmt=argz.format))
    for error in errors:
        print(error)

elif argz.subparser_name == 'service-table':
    print(service_table(format=argz.format or 'simple'))

elif argz.subparser_name == 'generate-altcore-networks':
    print("networks = [")
    prints = []
    cs = CurrencySupport()
    for currency in cs.altcore_data():
        prints.append(json.dumps(currency, indent=4))

    print(",\n".join(prints))
    print("];")
    print("module.exports = {networks: networks}")

elif argz.subparser_name == 'network-replay':
    n = NetworkReplay(argz.source, argz.destination, verbose=argz.verbose)
    n.replay_block(argz.block_to_replay, limit=int(argz.limit or 5))

    if all(x[0] == 'failure' for x in results):
        print("All %s replay attempts failed" % len(results))
    else:
        succeeded = [x[1] for x in results if x[0] == 'success']
        print("%s of %s replay attempts succeeded!" % (len(succeeded), len(results)))
        for result in succeeded:
            print(result)

elif argz.subparser_name == 'install-key':
    path = os.path.expanduser('~/.exchange_keys')
    Service = get_service(name=argz.service_name)
    try:
        Service(**{argz.type: argz.key})
    except TypeError:
        raise SystemExit("Error: Unknown key type: %s for %s" % (
            argz.type, Service.name
        ))

    if not os.path.exists(path):
        with open(path, "w+") as f:
            f.write("{}")

    with open(path) as f:
        j = json.loads(f.read())

        if Service.name not in j:
            j[Service.name] = {}

        j[Service.name][argz.type] = argz.key

    with open(path, 'w') as f:
        f.write(json.dumps(j, indent=4))

elif argz.subparser_name == 'execute-trades':
    from moneywagon.trading import TradingEngine
    te = TradingEngine(argz.crypto, argz.fiat, verbose=argz.verbose)
    te.execute()
elif argz.subparser_name == 'see-trades':
    from moneywagon.trading import TradingEngine
    te = TradingEngine(argz.crypto, argz.fiat, verbose=argz.verbose)
    te.show()
elif argz.subparser_name == 'multi-orderbook':
    from moneywagon.arbitrage import MultiOrderBook
    mb = MultiOrderBook(verbose=argz.verbose).get(crypto=argz.crypto, fiat=argz.fiat)
    both = not argz.just_bids and not argz.just_asks

    def print_order(order):
        print("%s,%s,%s" % (order[0], order[1], order[2].name))

    lim = int(argz.limit) or len(orders)
    if argz.just_bids or both:
        print("Bids:")
        for order in mb['bids'][:lim]:
            print_order(order)
    if argz.just_asks or both:
        print("Asks:")
        for order in mb['asks'][:lim]:
            print_order(order)

elif argz.subparser_name == 'generate-mcaf':
    print(generate_mcaf(argz.cryptos.split(','), argz.seed))

elif argz.subparser_name == 'decode-mcaf':
    results = decode_mcaf(argz.address)
    for currency, address in results.items():
        print(currency, address)

elif argz.subparser_name == 'benchmark-superthin':
    print("fetching block...")
    block = get_block(argz.crypto, block_number=int(argz.block))
    og_size = block['size']
    num, unit = make_unit(og_size)
    print("Benchmarking %s block #%s (%.2f %s) from %s" % (
        argz.crypto.upper(), argz.block, num, unit, block['time']
    ))
    print("Containing %s transactions" % len(block['txids']))
    short_ids, hash = encode_mempool(
        block['txids'], verbose=True, og_size=og_size, extra_bytes=int(argz.extra_bytes)
    )
    if argz.decode_extra:
        print("decoding with %s extra mempool transactions" % argz.decode_extra)
        t0 = datetime.datetime.now()
        mp = modify_mempool(block['txids'], add=int(argz.decode_extra))
        decode_superthin(short_ids, mp, hash, verbose=True)
        print("Decode took: %s" % (datetime.datetime.now() - t0))
