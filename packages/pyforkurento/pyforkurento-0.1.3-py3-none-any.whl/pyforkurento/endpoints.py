from .media_element import MediaElement

class Endpoint(MediaElement):
    def __init__(self, sess_id, point_id, pipeline_class):
        super().__init__(sess_id, point_id, pipeline_class)

# =============== ENDPOINTS =====================
class PlayerEndpoint(Endpoint):
    def __init__(self, session_id, elem_id, pipeline_class):
        super().__init__(session_id, elem_id, pipeline_class)

    def __str__(self):
        return f"PlayerEndpoint ID: {self.elem_id} Session ID: {self.session_id}\n"

    def connect(self, sink_elem = None):
        """ Connect PlayerEndpoint to another element
        Params:
            sink_elem: Media Element to connect to. If left blank, the element connects to itself
        """
        return super().connect(sink_elem)

    def play(self):
        """ Start playing the media item
        """
        params = {
            "object":self.elem_id,
            "operation":"play",
            "sessionId": self.session_id
        }
        self.pipeline.invoke(params)
        

class WebRTCEndpoint(Endpoint):
    def __init__(self, session_id, elem_id, pipeline_class):
        super().__init__(session_id, elem_id, pipeline_class)

    def __str__(self):
        return f"WebRTCEndpoint ID: {self.elem_id} Session ID: {self.session_id}\n"

    def connect(self, sink_elem = None):
        """ Connect WebRTCEndpoint to another element
        Params:
            sink_elem: Media Element to connect to. If left blank, the element connects to itself
        """
        return super().connect(sink_elem)

    def process_offer(self, session_desc_offer):
        """ Process the Session Description Protocol offer generated by the client
        Params:
            - session_desc_offer: SDP payload from a WebRTC client
        Returns:
            - sdp_answer: SDP answer from KMS. If a problem occured, sdp_answer is set to be 'error'
        """
        params = {
            "object":self.elem_id,
            "operation":"processOffer",
            "operationParams":{
                "offer": session_desc_offer
            },
            "sessionId": self.session_id
        }
        sdp_load = self.pipeline.invoke(params)
        sdp_answer = sdp_load["payload"]["value"]
        return sdp_answer

    def add_ice_candidate(self, candidate):
        """ Adds Ice Candidate recevied from the WebRTC client to KMS
        Params:
            - candidate: The ICE Candidate from the client
        """
        params = {
            "object":self.elem_id,
            "operation":"addIceCandidate",
            "operationParams":{
                "candidate": candidate
            },
            "sessionId": self.session_id
        }
        self.pipeline.invoke(params)

    def on_ice_candidates(self):
        """ Triggers ICE candidate generation by KMS
        """
        super().subscribe("OnIceCandidate")

    def gather_ice_candidates(self, callback):
        """ Gathers ICE candidates generated by KMS
        Params:
            - callback: A function to run when ICE candidates start to get generated
        """
        params = {
            "object":self.elem_id,
            "operation":"gatherCandidates",
            "sessionId": self.session_id
        }
        if not callable(callback):
            raise RuntimeError("Callback has to be callable e.g. a function")
        else:
            self.pipeline.invoke(params)
            super().on_event("OnIceCandidate", callback)



class RecorderEndpoint(Endpoint):
    def __init__(self, session_id, elem_id, pipeline_class):
        super().__init__(session_id, elem_id, pipeline_class)

    def __str__(self):
        return f"RecorderEndpoint ID: {self.elem_id} Session ID: {self.session_id}\n"

    def connect(self, sink_elem = None):
        """ Connect RecorderEndpoint to another element
        Params:
            sink_elem: Media Element to connect to. If left blank, the element connects to itself
        """
        return super().connect(sink_elem)

    def record(self):
        """ Start the recording the media item
        """
        params = {
            "object":self.elem_id,
            "operation":"record",
            "sessionId": self.session_id
        }
        self.pipeline.invoke(params)



class RTPEndpoint(Endpoint):
    def __init__(self, session_id, elem_id, pipeline_class):
        super().__init__(session_id, elem_id, pipeline_class)

    def __str__(self):
        return f"RTPEndpoint ID: {self.elem_id} Session ID: {self.session_id}\n"



class HTTPPostEndpoint(Endpoint):
    def __init__(self, session_id, elem_id, pipeline_class):
        super().__init__(session_id, elem_id, pipeline_class)

    def __str__(self):
        return f"HTTPPostEndpoint ID: {self.elem_id} Session ID: {self.session_id}\n"