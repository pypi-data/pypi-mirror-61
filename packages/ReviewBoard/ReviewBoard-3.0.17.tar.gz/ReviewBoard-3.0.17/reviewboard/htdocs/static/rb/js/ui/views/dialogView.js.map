{"version":3,"sources":["dialogView.es6.js"],"names":[],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBA,GAAG,UAAH,GAAgB,SAAS,IAAT,CAAc,MAAd,CAAqB;AACjC;AACA,WAAO,IAF0B;;AAIjC;AACA,UAAM,IAL2B;;AAOjC;AACA,aAAS,EARwB;;AAUjC;AACA,oBAAgB,EAXiB;;AAajC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA,cAvDiC,wBAuDV;AAAA,YAAZ,OAAY,uEAAJ,EAAI;;AACnB,aAAK,OAAL,GAAe,OAAf;;AAEA,YAAI,QAAQ,KAAZ,EAAmB;AACf,iBAAK,KAAL,GAAa,QAAQ,KAArB;AACH;;AAED,YAAI,QAAQ,IAAZ,EAAkB;AACd,iBAAK,IAAL,GAAY,QAAQ,IAApB;AACH;;AAED,YAAI,QAAQ,OAAZ,EAAqB;AACjB,iBAAK,OAAL,GAAe,QAAQ,OAAvB;AACH;;AAED,aAAK,OAAL,GAAe,KAAf;AACH,KAvEgC;;;AAyEjC;;;;;;;;;;;;;AAaA,UAtFiC,oBAsFxB;AACL,eAAO,IAAP;AACH,KAxFgC;;;AA0FjC;;;AAGA,QA7FiC,kBA6F1B;AAAA;;AACH,YAAI,CAAC,KAAK,OAAV,EAAmB;AACf,iBAAK,MAAL;;AAEA,gBAAM,OAAO,EAAE,MAAF,CAAS,IAAT,EAAe,MAAf,CAAb;;AAEA,gBAAI,IAAJ,EAAU;AACN,qBAAK,GAAL,CAAS,MAAT,CAAgB,IAAhB;AACH;;AAED,iBAAK,GAAL,CAAS,QAAT,CAAkB,EAAE,QAAF,CAAW;AACzB,uBAAO,EAAE,MAAF,CAAS,IAAT,EAAe,OAAf,CADkB;AAEzB,yBAAS,KAAK,WAAL,EAFgB;AAGzB,yBAAS;AAAA,2BAAM,MAAK,OAAL,GAAe,KAArB;AAAA;AAHgB,aAAX,EAIf,KAAK,OAJU,EAID,KAAK,cAJJ,CAAlB;;AAMA,iBAAK,OAAL,GAAe,IAAf;AACH;AACJ,KA/GgC;;;AAiHjC;;;AAGA,QApHiC,kBAoH1B;AACH,YAAI,KAAK,OAAT,EAAkB;AACd,iBAAK,GAAL,CAAS,QAAT,CAAkB,SAAlB;AACH;AACJ,KAxHgC;;;AA0HjC;;;AAGA,UA7HiC,oBA6HxB;AACL,aAAK,IAAL;;AAEA,eAAO,IAAP,EAAa,MAAb,CAAoB,IAApB,CAAyB,IAAzB;AACH,KAjIgC;;;AAmIjC;;;;;;;;;;AAUA,eA7IiC,yBA6InB;AAAA;;AACV,eAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,sBAAc;AAClC,gBAAM,UAAU,EAAE,yBAAF,EACX,GADW,CACP,WAAW,KADJ,EAEX,WAFW,CAEC,SAFD,EAEY,CAAC,CAAC,WAAW,OAFzB,EAGX,WAHW,CAGC,QAHD,EAGW,CAAC,CAAC,WAAW,MAHxB,CAAhB;;AAKA,gBAAI,WAAW,OAAf,EAAwB;AACpB,oBAAI,EAAE,UAAF,CAAa,WAAW,OAAxB,CAAJ,EAAsC;AAClC,4BAAQ,KAAR,CAAc,WAAW,OAAzB;AACH,iBAFD,MAEO;AACH,4BAAQ,KAAR,CAAc,OAAK,WAAW,OAAhB,EAAyB,IAAzB,CAA8B,MAA9B,CAAd;AACH;AACJ;;AAED,mBAAO,OAAP;AACH,SAfM,CAAP;AAgBH;AA9JgC,CAArB,CAAhB","file":"dialogView.js","sourcesContent":["/**\n * Displays a modal dialog box with content and buttons.\n *\n * The dialog box can have a title and a list of buttons. It can be shown\n * or hidden on demand.\n *\n * This view can either be subclassed (with the contents in render() being\n * used to populate the dialog), or it can be tied to an element that already\n * contains content.\n *\n * Under the hood, this is a wrapper around $.modalBox.\n *\n * Subclasses of DialogView can specify a default title, list of buttons,\n * and default options for modalBox. The title and buttons can be overridden\n * when constructing the view by passing them as options.\n */\nRB.DialogView = Backbone.View.extend({\n    /** The default title to show for the dialog. */\n    title: null,\n\n    /** The default body to show in the dialog. */\n    body: null,\n\n    /** The default list of buttons to show for the dialog. */\n    buttons: [],\n\n    /** Default options to pass to $.modalBox(). */\n    defaultOptions: {},\n\n    /**\n     * Initialize the view.\n     *\n     * The available options are 'title' and 'buttons'.\n     *\n     * options.title specifies the title shown on the dialog, overriding\n     * the title on the class.\n     *\n     * Args:\n     *     options (object):\n     *         Options for view construction.\n     *\n     * Option Args:\n     *     title (string):\n     *         The title for the dialog.\n     *\n     *     body (string or function, optional):\n     *         The body to show in the dialog.\n     *\n     *     buttons (Array of object):\n     *         A list of buttons. Each button may have the following keys:\n     *\n     *         label (string):\n     *             The label for the button.\n     *\n     *         primary (boolean):\n     *             Whether the button is the primary action for the dialog.\n     *\n     *         danger (boolean):\n     *             Whether the button performs a dangerous operation (such as\n     *             deleting user data).\n     *\n     *         onClick (function or string):\n     *             The handler to invoke when the button is clicked. If set to\n     *             a function, that function will be called. If set to a\n     *             string, it will resolve to a function with that name on the\n     *             DialogView instance. If unset, the dialog will simply close\n     *             without invoking any actions.\n     *\n     *             The callback function can return ``false`` to prevent the\n     *             dialog from being closed.\n     */\n    initialize(options={}) {\n        this.options = options;\n\n        if (options.title) {\n            this.title = options.title;\n        }\n\n        if (options.body) {\n            this.body = options.body;\n        }\n\n        if (options.buttons) {\n            this.buttons = options.buttons;\n        }\n\n        this.visible = false;\n    },\n\n    /**\n     * Render the content of the dialog.\n     *\n     * By default, this does nothing. Subclasses can override to render\n     * custom content.\n     *\n     * Note that this will be called every time the dialog is shown, not just\n     * when it's first constructed.\n     *\n     * Returns:\n     *     RB.DialogView:\n     *     This object, for chaining.\n     */\n    render() {\n        return this;\n    },\n\n    /**\n     * Show the dialog.\n     */\n    show() {\n        if (!this.visible) {\n            this.render();\n\n            const body = _.result(this, 'body');\n\n            if (body) {\n                this.$el.append(body);\n            }\n\n            this.$el.modalBox(_.defaults({\n                title: _.result(this, 'title'),\n                buttons: this._getButtons(),\n                destroy: () => this.visible = false,\n            }, this.options, this.defaultOptions));\n\n            this.visible = true;\n        }\n    },\n\n    /**\n     * Hide the dialog.\n     */\n    hide() {\n        if (this.visible) {\n            this.$el.modalBox('destroy');\n        }\n    },\n\n    /**\n     * Remove the dialog from the DOM.\n     */\n    remove() {\n        this.hide();\n\n        _super(this).remove.call(this);\n    },\n\n    /**\n     * Return a list of button elements for rendering.\n     *\n     * This will take the button list that was provided when constructing\n     * the dialog and turn each into an element.\n     *\n     * Returns:\n     *     Array of jQuery:\n     *     An array of button elements.\n     */\n    _getButtons() {\n        return this.buttons.map(buttonInfo => {\n            const $button = $('<input type=\"button\" />')\n                .val(buttonInfo.label)\n                .toggleClass('primary', !!buttonInfo.primary)\n                .toggleClass('danger', !!buttonInfo.danger);\n\n            if (buttonInfo.onClick) {\n                if (_.isFunction(buttonInfo.onClick)) {\n                    $button.click(buttonInfo.onClick);\n                } else {\n                    $button.click(this[buttonInfo.onClick].bind(this));\n                }\n            }\n\n            return $button;\n        });\n    }\n});\n"]}