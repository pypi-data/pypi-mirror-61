# -*- coding: utf-8 -*-
from setuptools import setup

packages = \
['bento', 'bento.commands', 'bento.content', 'bento.extra', 'bento.formatter']

package_data = \
{'': ['*'], 'bento': ['configs/*'], 'bento.extra': ['eslint/*']}

install_requires = \
['PyYAML>=5.1.2',
 'attrs>=18.2.0,<=19.3.0',
 'click>=7.0,<8.0',
 'docker>=3.7,<4.0',
 'frozendict>=1.2,<2.0',
 'gitpython>=2.1,<3.0',
 'packaging>=14.0',
 'pre-commit>=1.0.0,<=1.18.3',
 'psutil>=5.6.3,<5.7.0',
 'pymmh3>=0.0.5,<0.1.0',
 'r2c-lib==0.0.18a0',
 'semantic-version>=2.8.0,<2.9.0',
 'tqdm>=4.36.1,<4.37.0',
 'validate-email>=1.3,<2.0']

entry_points = \
{'console_scripts': ['bento = bento.__main__:main']}

setup_kwargs = {
    'name': 'bento-cli',
    'version': '0.9.1',
    'description': 'Free program analysis focused on bugs that matter to you.',
    'long_description': '<p align="center">\n    <img src="https://raw.githubusercontent.com/returntocorp/bento/master/bento-logo.png" height="100" alt="Bento logo"/>\n</p>\n<h3 align="center">\n  Find Python web-app bugs delightfully fast, without changing your workflow\n</h3>\n\n<p align="center">\n  <a href="#installation">Installation</a>\n  <span> · </span>\n  <a href="#motivations">Motivations</a>\n  <span> · </span>\n  <a href="#code-checks">Code Checks</a>\n  <span> · </span>\n  <a href="#usage">Usage</a>\n  <br/>\n  <a href="#workflows">Workflows</a>\n  <span> · </span>\n  <a href="#running-in-cicd">Integrations</a>\n  <span> · </span>\n  <a href="#help-and-community">Help & Community</a>\n</p>\n\n<p align="center">\n  <a href="https://pypi.org/project/bento-cli/">\n    <img alt="PyPI" src="https://img.shields.io/pypi/v/bento-cli?style=flat-square&color=blue">\n  </a>\n  <a href="https://pypi.org/project/bento-cli/">\n    <img alt="PyPI - Downloads" src="https://img.shields.io/pypi/dm/bento-cli?style=flat-square&color=green">\n  </a>\n  <a href="https://github.com/returntocorp/bento/issues/new/choose">\n    <img src="https://img.shields.io/badge/issues-welcome-green?style=flat-square" alt="Issues welcome!" />\n  </a>\n  <a href="https://twitter.com/intent/follow?screen_name=r2cdev">\n    <img src="https://img.shields.io/twitter/follow/r2cdev?label=Follow%20r2cdev&style=social&color=blue" alt="Follow @r2cdev" />\n  </a>\n</p>\n\nInspired by tools like the ESLint plugin for React, Bento was created for Flask and Django. With Bento you’ll:\n\n- **Find bugs that matter.** Checks find security and reliability bugs in your code. They’re vetted across thousands of open source projects and never nit your style.\n- **Upgrade your tooling.** You don’t have to fix existing bugs to adopt Bento. It’s diff-centric, finding new bugs introduced by your changes. And there’s zero config.\n- **Go delightfully fast.** Run Bento automatically locally or in CI. Either way, it runs offline and never sends your code anywhere.\n\n<p align="center">\n    <img src="https://web-assets.r2c.dev/bento-demo.gif" width="100%" alt="Demonstrating Bento running in a terminal"/>\n</p>\n\n## Installation\n\nBento is free and requires [Python 3.6+](https://www.python.org/downloads/) and [Docker 19.03+](https://docs.docker.com/get-docker/). It runs on macOS and Linux.\n\nIn a Git project directory:\n\n```bash\n$ pip3 install bento-cli && bento init\n```\n\nGo forth and write great code!\n\n## Motivations\n\n> See our [Bento introductory blog post](https://bento.dev/blog/2019/our-quest-to-make-world-class-security-and-bugfinding-available-to-all-developers/) to learn the full story.\n\nBento is part of a quest to make world-class security and bugfinding available to all developers, for free. We’ve learned that most developers have never heard of—let alone tried—tools that find deep flaws in code: like Codenomicon, which found [Heartbleed](http://heartbleed.com/), or Zoncolan at Facebook, which finds more [top-severity security issues](https://cacm.acm.org/magazines/2019/8/238344-scaling-static-analyses-at-facebook/fulltext) than any human effort. These tools find severe issues and also save tons of time, identifying [hundreds of thousands of issues](https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43322.pdf) before humans can. Bento is a step towards universal access to tools like these.\n\nWe’re also big proponents of opinionated tools like [Black](https://github.com/psf/black) and [Prettier](https://github.com/prettier/prettier). This has two implications: Bento ignores style-related issues and the bikeshedding that comes with them, and it ships with a curated set of checks that we believe are high signal and bug-worthy. See [Three things your linter shouldn’t tell you](https://bento.dev/blog/2019/three-things-your-linter-shouldnt-tell-you/) for more about our decision making process.\n\n## Code Checks\n\nBento’s check focus on security and reliability bugs in Flask and Django projects.\n\n|                              |                                      |                                                      |\n| ---------------------------- | ------------------------------------ | ---------------------------------------------------- |\n| **Flask**                    | **Jinja**                            | **Django**                                           |\n| missing JWT token            | href template variable               | _coming soon_                                        |\n| secure set cookie            | missing noopener                     |                                                      |\n| send file open               | missing noreferrer                   | **Docker**                                           |\n| unescaped file extension     | missing csrf protection              | [Hadolint](https://github.com/hadolint/hadolint)     |\n| use blueprint for modularity | missing doctype                      |                                                      |\n| use jsonify                  | meta charset                         | **Shell**                                            |\n| avoid hardcoded config       | meta content-type                    | [ShellCheck](https://github.com/koalaman/shellcheck) |\n|                              | unquoted attribute template variable |\n| **Requests**                 |                                      |\n| no auth over http            | **SQLAlchemy**                       |                                                      |\n| use scheme                   | _coming soon_                        |                                                      |\n| use timeout                  |                                      |\n\nSee the full list of [Bento’s specialty checks](https://bento.dev/checks/).\n\n## Usage\n\nOut-of-the-box, Bento is configured for your personal use. See [Team Use](#team-use) to setup Bento for all contributors.\n\n### Upgrading\n\n```bash\n$ pip3 install --upgrade bento-cli\n```\n\n### Command Line Options\n\n```\n$ bento --help\nUsage: bento [OPTIONS] COMMAND [ARGS]...\n\nOptions:\n  -h, --help    Show this message and exit.\n  --version     Show the version and exit.\n  --agree       Automatically agree to terms of service.\n  --email TEXT  Email address to use while running this command without global\n                configs e.g. in CI\n\nCommands:\n  archive  Suppress current findings.\n  check    Checks for new findings.\n  disable  Turn OFF a Bento feature for this project.\n  enable   Turn ON a Bento feature for this project.\n  init     Autodetects and installs tools.\n\n  To get help for a specific command, run `bento COMMAND --help`\n```\n\n### Exit Codes\n\n`bento check` may exit with the following exit codes:\n\n- `0`: Bento ran successfully and found no errors\n- `2`: Bento ran successfully and found issues in your code\n- `3`: Bento or one of its underlying tools failed to run\n\n## Workflows\n\n### Individual Use\n\nBento understands the importance of getting out of the way so you can write your code. It runs at commit-time on your diffs and only affects you; it won’t change anything for other project contributors or modify Git state.\n\nInitialization enables `autorun` behind the scenes. By default `autorun` blocks the commit if Bento returns findings. To make it non-blocking:\n\n```bash\n$ bento enable autorun --no-block\n```\n\nYou can always manually run Bento on staged files or directories via:\n\n```bash\n$ bento check [PATHS]\n```\n\nThis will show only new findings introduced by these files AND that are not in the archive (`.bento/archive.json`). Use `--all` to check all Git tracked files, not just those that are staged:\n\n```bash\n$ bento check --all [PATHS]\n```\n\nThis feature makes use of Git hooks. If the Bento hook incorrectly blocks your commit, you can skip it by passing the `--no-verify` flag to Git at commit-time (please use this sparingly since all hooks will be skipped):\n\n```bash\n$ git commit --no-verify\n```\n\n### Team Use\n\n#### Running Locally\n\nTo setup Bento for all project contributors, add Bento’s configuration to Git (it’s ignored by default):\n\n```bash\n$ cd <PROJECT DIRECTORY>\n# Add Bento\'s cache to the project\'s .gitignore\n$ echo ".bento/cache" >> .gitignore\n# Commit Bento\'s config to your project\n$ git add --force .bento .bentoignore\n```\n\nContributors can run Bento for themselves using the project’s configuration via:\n\n```bash\n$ bento init\n```\n\n#### Running in CI/CD\n\nBento in CI analyzes your entire project, not just the latest commit. So that you don’t have to fix all existing issues before making Bento blocking, its `archive` feature allows historical issues to be tracked and ignored during CI.\n\nTo use the `archive` feature so Bento returns a non-zero exit code only for new issues, rather than all existing issues, first create the archive:\n\n```bash\n$ cd <PROJECT DIRECTORY>\n$ bento archive .\n```\n\nCommit Bento’s configuration to the project:\n\n```bash\n# Add Bento\'s cache to the project\'s .gitignore\n$ echo ".bento/cache" >> .gitignore\n# Commit Bento\'s config to your project\n$ git add --force .bento .bentoignore\n```\n\nYou can then add Bento to your CI scripts:\n\n```bash\n$ pip3 install bento-cli && bento --version\n$ bento --agree --email=<YOUR_EMAIL> check --all 2>&1 | cat\n```\n\nWe pipe through `cat` to disable Bento\'s interactive tty features (e.g. progress bars, using a pager for many findings).\n\nIf you use CircleCI, the above commands become:\n\n```yaml\nversion: 2.1\n\njobs:\n  bentoCheck:\n  executor: circleci/python:3.7.4-stretch-node\n  steps:\n    - checkout\n    - run:\n        name: "Install Bento"\n        command: pip3 install bento-cli && bento --version\n    - run:\n        name: "Run Bento check"\n        command: bento --agree --email=<YOUR_EMAIL> check --all 2>&1 | cat\n```\n\n`bento check` will exit with a non-zero exit code if it finds issues in your code (see [Exit Codes](#exit-codes)).\n\nIf you need help setting up Bento with another CI provider please [open an issue](https://github.com/returntocorp/bento/issues/new?template=feature_request.md). Documentation PRs welcome if you set up Bento with a CI provider that isn’t documented here!\n\n## Help and Community\n\nNeed help or want to share feedback? We’d love to hear from you!\n\n- Email us at [support@r2c.dev](mailto:support@r2c.dev)\n- Join #bento in our [community Slack](https://join.slack.com/t/r2c-community/shared_invite/enQtNjU0NDYzMjAwODY4LWE3NTg1MGNhYTAwMzk5ZGRhMjQ2MzVhNGJiZjI1ZWQ0NjQ2YWI4ZGY3OGViMGJjNzA4ODQ3MjEzOWExNjZlNTA)\n- [File an issue](https://github.com/returntocorp/bento/issues/new?assignees=&labels=bug&template=bug_report.md&title=) or [submit a feature request](https://github.com/returntocorp/bento/issues/new?assignees=&labels=feature-request&template=feature_request.md&title=) directly on GitHub &mdash; we welcome them all!\n\nWe’re constantly shipping new features and improvements.\n\n- [Sign up for the Bento newsletter](http://eepurl.com/gDeFvL) &mdash; we promise not to spam and you can unsubscribe at any time\n- See past announcements, releases, and issues [here](https://us18.campaign-archive.com/home/?u=ee2dc8f77e27d3739cf4df9ef&id=d13f5e938e)\n\nWe’re fortunate to benefit from the contributions of the open source community and great projects such as [Bandit](https://pypi.org/project/bandit/), [ESLint](https://eslint.org/), [Flake8](https://pypi.org/project/flake8/), and their plugins. 🙏\n\n## License and Legal\n\nPlease refer to the [terms and privacy document](https://github.com/returntocorp/bento/blob/master/PRIVACY.md).\n\n</br>\n</br>\n<p align="center">\n    <img src="https://web-assets.r2c.dev/r2c-logo-silhouette.png?gh" height="24" alt="r2c logo"/>\n</p>\n<p align="center">\n    Copyright (c) <a href="https://r2c.dev">r2c</a>.\n</p>\n\n# Changelog\n\nThis project adheres to [Semantic Versioning](http://semver.org/spec/v2.0.0.html).\n\n## [0.9.1](https://pypi.org/project/bento-cli/0.9.0/) - 2020-02-14\n\n### Fixed\n- ShellCheck detect shell files robustly\n\n## [0.9.0](https://pypi.org/project/bento-cli/0.9.0/) - 2020-02-13\n\n### Added\n\n- Python tools now scan files that don\'t end in `.py` but have python shebang\n- Added ReDoS check via Dlint. The check is off by default. Enable the Dlint tool to run this check: `bento enable tool dlint`.\n- Jinja checks added and turned on by default\n\nSee [https://bento.dev/checks](https://bento.dev/checks) for more information on new checks\n\n### Fixed\n\n- Bento iterates over files in batches if number of files to check exceeds OS argmax limit\n\n## [0.8.2](https://pypi.org/project/bento-cli/0.8.2/) - 2020-02-05\n\n### Fixed\n\n- `bento check` works with repos with no previous commits\n- Verify a path is a file before checking if it contains a shell shebang (shellcheck tool)\n- Correctly install autorun even if git-hooks subdirectory is non-existent\n\n## [0.8.1](https://pypi.org/project/bento-cli/0.8.1/) - 2020-01-30\n\n### Fixed\n\n- Perfomance improvements when running in large projects\n- Additional human readable check_ids for bandit\n\n## [0.8.0](https://pypi.org/project/bento-cli/0.8.0/) - 2020-01-24\n\nThis release represents a major shift in Bento\'s default behavior: It emphasizes an incremental\nand personal, rather than team-wide, workflow that makes Bento a smaller commitment to use:\n\n1. Other project contributors won’t see Bento files or have their workflows changed.\n2. You no longer need to manually run Bento. After initialization Bento will automatically\n   check for issues in your code as you commit, analyzing only the files that have changed.\n3. You won’t see a project’s old issues (tech debt) during initialization. To view them,\n   run\n\n   ```bash\n   bento check --all\n   ```\n\n### Migration\n\nProject configurations have changed in version 0.8. In order to migrate a project from\nversion 0.7 or earlier:\n\n- Ensure Bento has been upgraded using `pip3 install --upgrade bento-cli`. Run `bento --version`\n  to validate Bento’s version.\n- `rm -r .bento*` (Use `git rm` if you have previously added Bento files to source control).\n- Run `bento init` in the project root.\n\n### New requirements\n\n- Docker must be installed, and the docker client running, to use Bento.\n\n### Changed\n\nHow you use Bento has changed significantly in 0.8.\n\n#### Usage changes\n\n- `bento check` will now only check staged changes.\n  - Use `bento check --all` to check the entire project.\n- `bento archive` will archive findings due to staged diff:\n\n  - Use `bento archive --all` to archive all findings in a project.\n\n#### Other changes\n\n- `hadolint` and `shellcheck` are now enabled by default.\n- Messages for findings are no longer truncated.\n- `bento init` will now install an empty configuration on a project it can not identify;\n  tools may then be manually enabled using `bento enable tool TOOL`. Use `bento enable tool --help`\n  to list tools.\n- Virtual environments for Python tools are now installed in your home directory, instead of in your\n  project directories.\n- `eslint` is now installed in your project’s `.bento` directory, and will not modify your project’s\n  `package.json`.\n- Tool and check names have been modified to improve readability.\n- `eslint` is disabled by default. To enable it run `bento enable tool eslint`.\n\n### Added\n\n- On init, Bento will prompt you to ask if you want to add ignore patterns to your global Git ignore file.\n  If you agree, Bento will alter this file to ignore Bento configuration files in your git projects.\n- `bento enable autorun` and `bento disable autorun` will cause Bento to either begin or stop analyzing\n  code on every commit.\n- Tab completion can now be installed by Bento. To install for your shell, run `bento enable autocomplete`.\n  To remove tab completion, run `bento disable autocomplete`.\n\n### Removed\n\n- `bento check --show-all` has been removed. Use `bento check --all` instead. Archived findings can be found at `~/.bento/archive.json`.\n- `bento install-hook` has been removed. Use `bento enable autorun` to run Bento on every commit.\n- The histogram formatter is no longer used by default. To show findings with a histogram, run\n  `bento check -f histo`.\n\n## [0.7.0](https://pypi.org/project/bento-cli/0.7.0/) - 2019-12-11\n\n### Fixed\n\n- Fixed `r2c.hadolint` issue where it failed to detect files with `.dockerfile` suffixes.\n- Fixed `r2c.sgrep` to respect file path when running on specific files with `bento check /path/to/file`\n\n### Changed\n\n- Redesigned `bento init`\n  - It now runs `bento check` and `bento archive` itself; these were almost always run manually by users immediately after `bento init`\n  - Displays histogram of results\n- `bento check` supports running a single tool with the `-t` flag: `bento check -t r2c.flask`\n- Reworked user registration flow\n- Removed [flake8-builtins](https://github.com/gforcada/flake8-builtins) plugin from `r2c.flask` based on user feedback: codebases with SQLAlchemy models (common in Flask apps) regularly shadow the `id` builtin, causing false positives.\n- Added eslint arrow-body-style as a default ignore because it is a style issue.\n- Added unused variable/import related checks (eslint no-unused-vars and no-var, flake8 F401 and F841)to default ignore. While useful they are very noisy and are often non-issues.\n\n### Added\n\n- Added `r2c.boto3` tool for [Boto3](https://boto3.amazonaws.com/v1/documentation/api/latest/index.html) framework. To use it on a project, run `bento enable tool r2c.boto3`\n- Added additional checks for `r2c.flake8`\n  - [unescaped-file-extension](https://checks.bento.dev/en/latest/flake8-flask/unescaped-file-extension)\n  - [use-jsonify](https://checks.bento.dev/en/latest/flake8-flask/use-jsonify/)\n\n## [0.6.2](https://pypi.org/project/bento-cli/0.6.2/) - 2019-12-05\n\n### Fixed\n\n- Fixed an issue where upgrade notifications were not shown to users.\n- Fix an issue where certain `.gitignore` patterns would cause an error or be skipped by Bento\n- Properly render multi-line context in the Clippy formatter.\n\n## [0.6.1](https://pypi.org/project/bento-cli/0.6.1/) - 2019-11-26\n\n### Fixed\n\n- Bento no longer completes initialization if it can\'t identify a project; this prevents\n  confusing errors when subsequently running `bento check`.\n- Pinned versions of all 3rd-party Python tools, so that remote package upgrades do not break\n  Bento.\n- Bento no longer crashes if a project path contains a space.\n\n### Changed\n\n- Results of `bento check` are now printed\n  using the Clippy and histogram formatters (see "Added" section below) by default.\n- The APIs to enable and disable a check are now `bento enable check [check]` and\n  `bento disable check [check]`.\n- The `r2c.flask` tool is now enabled by default. It finds best-practice and security bugs in\n  code using the Python [Flask](https://www.palletsprojects.com/p/flask/) framework.\n- Multiple formatters can now be used to display results from `bento check`. For example,\n  `bento check -f stylish -f histo` will display results using the Stylish formatter,\n  followed by display using a histogram formatter.\n- Progress bars are not emitted to stderr if not a tty; this prevents progress-bar output from\n  littering CI logs.\n- Updated progress bar glyphs for readability on a wider range of terminal themes.\n- Disabled `r2c.flake8` check `B001` by default, in favor of the (also included) `E722` check.\n\n### Added\n\n- Added `r2c.requests`, which finds best-practice and security bugs in code using the Python\n  [Requests](https://2.python-requests.org/en/master/) framework. It is enabled by default.\n- Added `r2c.sgrep`, a syntactically aware code search tool. It is _not_ enabled by default.\n  To use it on a project, run `bento enable tool r2c.sgrep`. Note that Docker is required in\n  order to use `r2c.sgrep`.\n- All findings, including those previously archived, can now be viewed using\n  `bento check --show-all`.\n- Tools can now be enabled using `bento enable tool [tool_id]`. Available\n  tools can be listed by running `bento enable tool --help` or using shell autocompletion.\n  Tools can be disabled using `bento disable tool [tool_id]`.\n\n## 0.6.0\n\nVersion 0.6.0 was not released.\n\n## [0.5.0](https://pypi.org/project/bento-cli/0.5.0/) - 2019-11-18\n\n### Fixed\n\n- `r2c.eslint` now properly detects TypeScript imports.\n- `r2c.eslint` now detects global node environments (e.g., `jest`),\n  and properly resolves their global variables.\n\n### Changed\n\n- To better protect users\' data, error messages are no longer reported to our backend.\n- `.bentoignore` can now be configured to include patterns from other files; by default\n  the contents of the project\'s `.gitignore` are included. For more information, please see the comments at\n  the top of the generated `.bentoignore` file.\n- Tab completion times reduced by approximately half.\n- Disabled a number of `r2c.eslint` checks by default:\n  - `arrow-parens`, as it conflicts with Prettier\'s default behavior.\n  - TypeScript semicolon checking, which is stylistic.\n  - `import/no-cycle` which takes 50% of tool runtime on moderately large code bases.\n- `r2c.flake8 E306` disabled by default, as it is stylistic in nature.\n- Runtime of `r2c.eslint` has been reduced by up to 30% for some projects.\n\n### Added\n\n- Added `r2c.shellcheck` tool for shell scripts. To enable, add `r2c.shellcheck` to the\n  tools section of your `.bento.yml`. Note that this tool requires `docker` as a dependency.\n- Added `r2c.hadolint` tool for Docker files. To enable, add `r2c.hadolint` to the\n  tools section of your `.bento.yml`. Note that this tool requires `docker` to be installed in order to run.\n\n## [0.4.1](https://pypi.org/project/bento-cli/0.4.1/) - 2019-11-14\n\n### Fixed\n\n- Fixes a performance regression due to changes in metrics collection.\n\n## [0.4.0](https://pypi.org/project/bento-cli/0.4.0/) - 2019-11-11\n\n### Changed\n\n- We updated our [privacy policy](https://github.com/returntocorp/bento/commits/master/PRIVACY.md).\n  - Notably, we collect email addresses to understand usage and communicate with users through product announcements, technical notices, updates, security alerts, and support messages.\n\n### Added\n\n- Added additional `r2c.click` tool for [Click](http://click.palletsprojects.com/) framework:\n\n  - [flake8-click](https://pypi.org/project/flake8-click/) will be disabled by default.\n\n- Added additional `r2c.flask` tool for [Flask](https://flask.palletsprojects.com/) framework:\n\n  - [flake8-flask](https://pypi.org/project/flake8-flask/) will be disabled by default.\n\n## [0.3.1](https://pypi.org/project/bento-cli/0.3.1/) - 2019-11-08\n\n### Fixed\n\n- Fixed an issue where the tool would fail to install if a macOS user\n  had installed `gcc` and then upgraded their OS.\n- Fixed a compatibility issue for users with a pre-existing version\n  of GitPython with version between 2.1.1 and 2.1.13.\n\n## [0.3.0](https://pypi.org/project/bento-cli/0.3.0/) - 2019-11-01\n\n### Changed\n\n- Bento can now be run from any subdirectory within a project.\n- Updated the privacy and terms-of-service statement.\n\n### Added\n\n- File ignores are configurable via [git-style ignore patterns](https://git-scm.com/docs/gitignore) (include patterns\n  are not supported). Patterns should be added to `.bentoignore`.\n\n- Added additional checks to the `r2c.flake8` tool:\n\n  - All checks from [flake8-bugbear](https://github.com/PyCQA/flake8-bugbear) (except for B009 and B010,\n    which are stylistic in nature).\n  - All checks from [flake8-builtins](https://github.com/gforcada/flake8-builtins).\n  - All checks from [flake8-debugger](https://github.com/jbkahn/flake8-debugger).\n  - All checks from [flake8-executable](https://github.com/xuhdev/flake8-executable).\n\n- Clippy output formatting is now supported.\n  - To enable, run: `bento check --formatter clippy`\n  - Example output:\n\n```\nerror: r2c.flake8.E113\n   --> foo.py:6:5\n    |\n  6 |   return x\n    |\n    = note: unexpected indentation\n```\n\n- Autocompletion is now supported from both `bash` and `zsh`. To use:\n  - In `bash`, run `echo -e \'\\neval "$(_BENTO_COMPLETE=source bento)"\' >> ~/.bashrc`.\n  - In `zsh`, run `echo -e \'\\neval "$(_BENTO_COMPLETE=source_zsh bento)"\' >> ~/.zshrc`.\n\n## [0.2.1](https://pypi.org/project/bento-cli/0.2.1/) - 2019-10-29\n\n### Fixed\n\n- Quoted emails in git configuration do not break user registration.\n- Removed files properly invalidate results cache.\n- Python tools do not crawl `node_modules`.\n\n## [0.2.0](https://pypi.org/project/bento-cli/0.2.0/) - 2019-10-23\n\n### Changed\n\n- Results are cached between runs. This means that an immediate rerun of\n  `bento` will be much faster.\n- Broadened library compatibility, especially for common packages:\n  - attrs from 18.2.0\n  - packaging from 14.0\n  - pre-commit from 1.0.0\n- `r2c.eslint` ignores `.min.js` files. Bento should only report issues in code, not built artifacts.\n- Telemetry endpoint uses `bento.r2c.dev`.\n\n### Added\n\n- Bento check will optionally run only on passed paths, using `bento check [path] ...`.\n- Add `r2c.pyre` as a configurable tool. To enable, it must be manually configured in `.bento.yml`.\n- Formatters can be specified with short names, and these appear in the help text. For example, `bento check --formatter json`.\n- `bento` version is passed to telemetry backend.\n\n### Fixed\n\n- Tool does not crash if a git user does not have an email configured.\n- Fixed a regression that caused progress bars to hang after first tool completed.\n- Made fully compatible with Python 3.6.\n- Tool does not mangle `.gitignore` when that file lacks a trailing newline.\n',
    'author': 'Return To Corporation',
    'author_email': 'bento@r2c.dev',
    'maintainer': None,
    'maintainer_email': None,
    'url': 'http://bento.dev',
    'packages': packages,
    'package_data': package_data,
    'install_requires': install_requires,
    'entry_points': entry_points,
    'python_requires': '>=3.6,<4.0',
}


setup(**setup_kwargs)
