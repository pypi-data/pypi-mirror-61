
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>

#include <../../_impl/include/frc/spline/Spline.h>




namespace rpygen {

using namespace frc;


template <typename CxxBase, int Degree>
struct Pyfrc__Spline : CxxBase {
    using CxxBase::CxxBase;



#ifndef RPYGEN_DISABLE_KCoefficients_v
    Eigen::Matrix<double, 6, Degree + 1 > Coefficients() const override {
        throw std::runtime_error("not implemented");
    }
#endif



};

}; // namespace rpygen


namespace rpygen {

using namespace frc;


template <int Degree>
inline void bind_frc__Spline(py::module &m, const char * clsName) {

        using namespace frc;


    py::class_<typename frc::Spline<Degree>, std::shared_ptr<typename frc::Spline<Degree>>, rpygen::Pyfrc__Spline<typename frc::Spline<Degree>, Degree>>
      cls_Spline(m, clsName);


    py::class_<typename frc::Spline<Degree>::ControlVector, std::shared_ptr<typename frc::Spline<Degree>::ControlVector>>
      cls_ControlVector(cls_Spline, "ControlVector");





    cls_Spline
      .def(py::init<>(), release_gil())
    
      .def("getPoint", &frc::Spline<Degree>::GetPoint,
      py::arg("t"), release_gil(),
      "Gets the pose and curvature at some point t on the spline.\n"
      "\n"
      ":param t: The point t\n"
      "\n"
      ":returns: The pose and curvature at that point.")
    
;

    cls_ControlVector
    .def(py::init<>(), release_gil())
;

  


    cls_ControlVector
  .def_readwrite("x", &frc::Spline<Degree>::ControlVector::x)
  .def_readwrite("y", &frc::Spline<Degree>::ControlVector::y);

}

}; // namespace rpygen