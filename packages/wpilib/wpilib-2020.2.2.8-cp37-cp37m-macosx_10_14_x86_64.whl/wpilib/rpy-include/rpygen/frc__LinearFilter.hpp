
 

// This file is autogenerated. DO NOT EDIT

#pragma once
#include <robotpy_build.h>

#include <../_impl/include/frc/LinearFilter.h>




namespace rpygen {

using namespace frc;


template <typename T>
inline void bind_frc__LinearFilter(py::module &m, const char * clsName) {

        using namespace frc;


    py::class_<typename frc::LinearFilter<T>, std::shared_ptr<typename frc::LinearFilter<T>>>
      cls_LinearFilter(m, clsName);




    cls_LinearFilter
      .def(py::init<wpi::ArrayRef<double >, wpi::ArrayRef<double >>(),
      py::arg("ffGains"), py::arg("fbGains"), release_gil(),
      "Create a linear FIR or IIR filter.\n"
      "\n"
      ":param ffGains: The \"feed forward\" or FIR gains.\n"
      "\n"
      ":param fbGains: The \"feed back\" or IIR gains.")
    
      .def_static("singlePoleIIR", &frc::LinearFilter<T>::SinglePoleIIR,
      py::arg("timeConstant"), py::arg("period"), release_gil(),
      "Creates a one-pole IIR low-pass filter of the form:\n"
      "y[n] = (1 - gain) * x[n] + gain * y[n-1]\n"
      "where gain = e<sup>-dt / T</sup>, T is the time constant in seconds\n"
      "\n"
      "This filter is stable for time constants greater than zero.\n"
      "\n"
      ":param timeConstant: The discrete-time time constant in seconds.\n"
      "\n"
      ":param period: The period in seconds between samples taken by the\n"
      "            user.")
    
      .def_static("highPass", &frc::LinearFilter<T>::HighPass,
      py::arg("timeConstant"), py::arg("period"), release_gil(),
      "Creates a first-order high-pass filter of the form:\n"
      "y[n] = gain * x[n] + (-gain) * x[n-1] + gain * y[n-1]\n"
      "where gain = e<sup>-dt / T</sup>, T is the time constant in seconds\n"
      "\n"
      "This filter is stable for time constants greater than zero.\n"
      "\n"
      ":param timeConstant: The discrete-time time constant in seconds.\n"
      "\n"
      ":param period: The period in seconds between samples taken by the\n"
      "            user.")
    
      .def_static("movingAverage", &frc::LinearFilter<T>::MovingAverage,
      py::arg("taps"), release_gil(),
      "Creates a K-tap FIR moving average filter of the form:\n"
      "y[n] = 1/k * (x[k] + x[k-1] + â€¦ + x[0])\n"
      "\n"
      "This filter is always stable.\n"
      "\n"
      ":param taps: The number of samples to average over. Higher = smoother but\n"
      "    slower")
    
      .def("reset", &frc::LinearFilter<T>::Reset, release_gil(),
      "Reset the filter state.")
    
      .def("calculate", &frc::LinearFilter<T>::Calculate,
      py::arg("input"), release_gil(),
      "Calculates the next value of the filter.\n"
      "\n"
      ":param input: Current input value.\n"
      "\n"
      ":returns: The filtered value at this step")
    
;

  

    
}

}; // namespace rpygen