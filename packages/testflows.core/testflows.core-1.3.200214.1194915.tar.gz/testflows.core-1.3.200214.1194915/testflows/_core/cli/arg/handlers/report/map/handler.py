# Copyright 2020 Vitaliy Zakaznikov (TestFlows Test Framework http://testflows.com)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import os
import sys
import json
import time
import base64

from datetime import datetime

import testflows._core.cli.arg.type as argtype

from testflows._core import __version__
from testflows._core.cli.arg.common import epilog
from testflows._core.cli.arg.common import HelpFormatter
from testflows._core.cli.arg.handlers.handler import Handler as HandlerBase
from testflows._core.cli.arg.handlers.report.copyright import copyright
from testflows._core.transform.log.pipeline import MapLogPipeline
from testflows._core.transform.log.message import RawMap, RawNode
from testflows._core.utils.timefuncs import localfromtimestamp, strftimedelta

logo = '<img class="logo" src="data:image/png;base64,%(data)s" alt="logo"/>'
testflows = '<span class="testflows-logo"></span> [<span class="logo-test">Test</span><span class="logo-flows">Flows</span>]'
testflows_em = testflows.replace("[", "").replace("]", "")

template = f"""
<section class="clearfix">%(logo)s%(confidential)s%(copyright)s</section>

---
# Test Map Report
%(body)s
  
---
Generated by {testflows} Open-Source Test Framework

[<span class="logo-test">Test</span><span class="logo-flows">Flows</span>]: https://testflows.com
[ClickHouse]: https://clickhouse.yandex
"""

cdir = os.path.dirname(os.path.abspath(__file__))

with open(os.path.join(cdir, "chart.css"), encoding="utf-8") as fd:
    chart_style = fd.read()

with open(os.path.join(cdir, "chart.js"), encoding="utf-8") as fd:
    chart_script = fd.read()

class Formatter:
    def format_logo(self, data):
        if not data["company"].get("logo"):
            return ""
        data = base64.b64encode(data["company"]["logo"]).decode("utf-8")
        return '\n<p>' + logo % {"data": data} + "</p>\n"

    def format_confidential(self, data):
        if not data["company"].get("confidential"):
            return ""
        return f'\n<p class="confidential">Document status - Confidential</p>\n'

    def format_copyright(self, data):
        if not data["company"].get("name"):
            return ""
        return (f'\n<p class="copyright">\n'
            f'{copyright(data["company"]["name"])}\n'
            "</p>\n")

    def format_metadata(self, data):
        metadata = data["metadata"]
        s = (
            "\n\n"
            f"||**Date**||{localfromtimestamp(metadata['date']):%b %d, %Y %-H:%M}||\n"
            f'||**Framework**||'
            f'{testflows} {metadata["version"]}||\n'
        )
        return s + "\n"

    def format_map(self, data):

        def make_node(nodes, maps):
            if not isinstance(maps, RawMap):
                maps = RawMap(*maps)

            node = RawNode(*maps.node)

            if node.uid not in nodes:
                nodes[node.uid] = {
                    "node": RawNode(*maps.node),
                    "nexts": [],
                    "ins": [],
                    "outs": []
                }
            return nodes[node.uid]

        def generate_nodes(nodes, maps):
            if not isinstance(maps, RawMap):
                maps = RawMap(*maps)

            node = make_node(nodes, maps)

            if maps.nexts:
                [nodes[node["node"].uid]["nexts"].append(generate_nodes(nodes, n)) for n in maps.nexts]
            if maps.ins:
                [nodes[node["node"].uid]["ins"].append(generate_nodes(nodes, n)) for n in maps.ins]
            if maps.outs:
                [nodes[node["node"].uid]["outs"].append(generate_nodes(nodes, n)) for n in maps.outs]

            return node

        def gather_links(nodes, gnodes):
            links = []
            for node in nodes.values():
                for n in node["nexts"]:
                    links.append({"source": node["node"].uid, "target": n["node"].uid, "type": "link"})
                for n in node["ins"]:
                    links.append({"source": node["node"].uid, "target": n["node"].uid, "type": "inner link"})
                for n in node["outs"]:
                    links.append({"source": n["node"].uid, "target": node["node"].uid, "type": "inner link"})

            for link in links:
                for node in gnodes:
                    children_links = node["children"]["links"]
                    children_nodes = set(node["children"]["nodes"])
                    for child in children_nodes:
                        if child == link["source"] or child == link["target"]:
                            if ((link["source"] in children_nodes or link["source"] == node["id"])
                                    and (link["target"] in children_nodes or link["target"] == node["id"])):
                                children_links.append(link)

            return links

        def gather_nodes(nodes):
            gnodes = []
            for node in nodes.values():
                gnodes.append({
                    "id": node["node"].uid,
                    "name": node["node"].name,
                    "module": node["node"].module,
                    "next": [n["node"].uid for n in node["nexts"]],
                    "children": {
                        "nodes": set(),
                        "links": []
                    }
                })

                def find_all_children(node, start, children):
                    if node["node"].uid in children:
                        return
                    if node is start:
                        return
                    children.add(node["node"].uid)
                    if node["ins"] or node["outs"]:
                        return
                    for n in node["nexts"]:
                        find_all_children(n, start, children)

                for n in node["ins"] + node["outs"]:
                    find_all_children(n, node, gnodes[-1]["children"]["nodes"])
                gnodes[-1]["children"]["nodes"] = list(gnodes[-1]["children"]["nodes"])

            return gnodes

        nodes = {}
        generate_nodes(nodes, data["map"])

        gnodes = gather_nodes(nodes)
        glinks = gather_links(nodes, gnodes)

        chart_nodes = json.dumps(gnodes, indent=2)
        chart_links = json.dumps(glinks, indent=2)

        s = (
            '\n##Steps Diagram\n\n'
            '<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/5.15.0/d3.js"></script>\n'
            '<style>\n'
            f'{chart_style}\n'
            '</style>\n'
            '<div><div id="map-chart"></div></div>\n'
            '<script>\n'
            f'{chart_script % {"nodes": chart_nodes, "links": chart_links}}\n'
            '</script>\n'
        )
        return s + "\n"

    def format(self, data):
        body = ""
        body += self.format_metadata(data)
        body += self.format_map(data)
        return template.strip() % {
            "logo": self.format_logo(data),
            "confidential": self.format_confidential(data),
            "copyright": self.format_copyright(data),
            "body": body}

class Handler(HandlerBase):
    @classmethod
    def add_command(cls, commands):
        parser = commands.add_parser("map", help="map report", epilog=epilog(),
            description="Generate map report.",
            formatter_class=HelpFormatter)

        parser.add_argument("input", metavar="input", type=argtype.file("r", bufsize=1, encoding="utf-8"),
                nargs="?", help="input log, default: stdin", default="-")
        parser.add_argument("output", metavar="output", type=argtype.file("w", bufsize=1, encoding="utf-8"),
                nargs="?", help='output file, default: stdout', default="-")
        parser.add_argument("--format", metavar="type", type=str,
            help="output format, default: md (Markdown)", choices=["md"], default="md")
        parser.add_argument("--copyright", metavar="name", help="add copyright notice", type=str)
        parser.add_argument("--confidential", help="mark as confidential", action="store_true")
        parser.add_argument("--logo", metavar="path", type=argtype.file("rb"),
                help='use logo image (.png)')

        parser.set_defaults(func=cls())

    def metadata(self, results):
        return {
            "date": time.time(),
            "version": __version__,
        }

    def company(self, args):
        d = {}
        if args.copyright:
            d["name"] = args.copyright
        if args.confidential:
            d["confidential"] = True
        if args.logo:
            d["logo"] = args.logo.read()
        return d

    def data(self, maps, args):
        d = dict()
        d["metadata"] = self.metadata(maps)
        d["company"] = self.company(args)
        d["map"] = maps["top"]
        return d

    def generate(self, formatter, maps, args):
        output = args.output
        output.write(
            formatter.format(self.data(maps, args))
        )
        output.write("\n")

    def handle(self, args):
        maps = {}
        formatter = Formatter()
        MapLogPipeline(args.input, maps).run()
        self.generate(formatter, maps, args)
