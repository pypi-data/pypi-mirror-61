Metadata-Version: 2.1
Name: modelmanager-api
Version: 1.0.5
Summary: Modelmanager api
Home-page: UNKNOWN
Author: falcon
License: MIT
Platform: UNKNOWN
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Description-Content-Type: text/markdown
Requires-Dist: requests

ï»¿Welcome to Modelmanager-api!
===================

This is a api model for interacting with modelmanager. 

----------


Documents
-------------

> **Note:**
> - Example files are are in example_script directory.
> - Example assets are in api_assets directory.
> - It contains scripts for different actions(Add, Update, Delete).

> - **EXAMPLE SCRIPTS** 
	 - add_model.py
	 - add_project.py 
	 - update_model.py
	 - update_project.py
	 - delete_model.py
	 - delete_project.py
> - **EXAMPLE ASSETS** 
	- Project Assets
	- Model Assets

----------
>**Example Codes**
```python
###Add_Project###
from modelmanager-api.modelmanager-api import Usecase 
secret_key = Get from "http://modelmanager.ai/key/"
url = 'http://modelmanager.ai'
data = {
			"name": "UsecaseName",
			"author": "AuthorName",
			"description": "UsecaseDescription",
			"source": "UsecasSource",
			"contributor": "UsecaseContributor",
			"image": 'image.jpg' ,
			"banner": 'banner.jpg' , 
		}
Usecase(secret_key, url).post_usecase(data) 
```



```python
###Update_Project###
from modelmanager-api.modelmanager-api import Usecase
secret_key = Get from "http://modelmanager.ai/key/"
url = 'http://modelmanager.ai'
data = {
        "name": "UsecaseName",
	    "author": "AuthorName",
	    "description": "UsecaseDescription",
	    "source": "UsecasSource",
	    "contributor": "UsecaseContributor",
		"image": 'image.jpg' ,
	    "banner": 'banner.jpg' ,
	}
Usecase(secret_key, url).patch_usecase(data)
```

```python
###Delete_Project###
from modelmanager-api.modelmanager-api import Usecase
secret_key = Get from "http://modelmanager.ai/key/"
url = 'http://modelmanager.ai'
project_id =Project_ID	Usecase(secret_key,url).delete_usecase(project_id)
```
```python
###Add_Model### 
from modelmanager-api.modelmanager-api import Model
secret_key = Get from "http://modelmanager.ai/key/"
url = 'http://modelmanager.ai'
data = {
		"project":Project_ID,
		"transformerType": "logistic",
		"target_column": "id",
		"note": "api script Model",
		"model_area": "api script Model",
	    "model_dependencies": "api script Model",
	    "model_usage": "api script Model",
	    "model_audjustment": "api script Model",
	    "model_developer": "api script Model",
	    "model_approver": "api script Model",
	    "model_maintenance": "api script Model",
	    "documentation_code": "api script Model",
	    "implementation_plateform": "api script Model",
	    "training_dataset": "train.csv",
	    "pred_dataset": "submissionsample.csv",
		"actual_dataset": "truth.csv",
		"test_dataset": "test.csv",
		"model_file_path":"",
		"scoring_file_path":"",
		"production":"",
		"current_date":"",
}
Model(secret_key, url).post_model(data)
```


```python
###Update_Model### 
from modelmanager-api.modelmanager-api import Model
secret_key = Get from "http://modelmanager.ai/key/"
url = 'http://modelmanager.ai'
data = {
		"project":Project_ID,
		"transformerType": "logistic",
		"target_column": "id",
		"note": "api script Model",
		"model_area": "api script Model",
	    "model_dependencies": "api script Model",
	    "model_usage": "api script Model",
	    "model_audjustment": "api script Model",
	    "model_developer": "api script Model",
	    "model_approver": "api script Model",
	    "model_maintenance": "api script Model",
	    "documentation_code": "api script Model",
	    "implementation_plateform": "api script Model",
	    "training_dataset": "train.csv",
	    "pred_dataset": "submissionsample.csv",
		"actual_dataset": "truth.csv",
		"test_dataset": "test.csv",
		"model_file_path":"",
		"scoring_file_path":"",
		"production":"",
		"current_date":"",
}
Model(secret_key, url).patch_model(data)
```

```python
###Delete_Project###
from modelmanager-api.modelmanager-api import Model
secret_key = Get from "http://modelmanager.ai/key/"
url = 'http://modelmanager.ai'
model_id =Model_ID	Usecase(secret_key,url).delete_model(model_id)
```

